{
  "version": 3,
  "sources": ["../../@isaacs/ttlcache/index.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/ours/primordials.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/ours/util.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/ours/errors.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/validators.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/utils.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/destroy.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/legacy.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/buffer_list.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/state.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/from.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/readable.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/writable.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/duplexify.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/duplex.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/transform.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/passthrough.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/pipeline.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/compose.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/internal/streams/operators.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/stream/promises.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/stream.js", "../../@tbdex/protocol/node_modules/readable-stream/lib/ours/browser.js", "../../@tbdex/protocol/node_modules/ms/index.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/ours/primordials.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/ours/util.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/ours/errors.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/validators.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/utils.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/destroy.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/legacy.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/buffer_list.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/state.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/from.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/readable.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/writable.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/duplexify.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/duplex.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/transform.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/passthrough.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/pipeline.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/compose.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/internal/streams/operators.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/stream/promises.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/stream.js", "../../@tbdex/http-client/node_modules/readable-stream/lib/ours/browser.js", "../../@tbdex/http-client/node_modules/ms/index.js", "../../@tbdex/http-client/dist/esm/src/main.js", "../../@tbdex/protocol/dist/esm/src/main.js", "../../@tbdex/protocol/dist/esm/src/resource.js", "../../@tbdex/protocol/node_modules/typeid-js/dist/index.mjs", "../../@tbdex/protocol/node_modules/typeid-js/src/base32.ts", "../../@tbdex/protocol/node_modules/typeid-js/src/parse_uuid.ts", "../../@tbdex/protocol/node_modules/typeid-js/dist/chunk-R5Q6Z3GN.mjs", "../../@tbdex/protocol/node_modules/typeid-js/node_modules/.pnpm/uuidv7@0.4.4/node_modules/uuidv7/dist/index.js", "../../@tbdex/protocol/node_modules/typeid-js/src/typeid.ts", "../../@tbdex/protocol/dist/esm/src/crypto.js", "../../@tbdex/protocol/node_modules/@web5/common/src/index.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/cache.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/type-utils.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/convert.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/multicodec.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/object.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/stores.ts", "../../@tbdex/protocol/node_modules/@web5/common/src/stream-node.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/index.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/primitives/sha256.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/algorithms/crypto-algorithm.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/algorithms/sha-2.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/jose/utils.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/jose/jwk.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/primitives/secp256k1.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/primitives/secp256r1.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/algorithms/ecdsa.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/primitives/ed25519.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/algorithms/eddsa.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/local-key-manager.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/src/utils.ts", "../../@tbdex/protocol/node_modules/@web5/crypto/dist/esm/jose/jwe.js", "../../@tbdex/protocol/node_modules/@web5/crypto/dist/esm/jose/jws.js", "../../@tbdex/protocol/node_modules/@web5/crypto/dist/esm/jose/jwt.js", "../../@tbdex/protocol/node_modules/@web5/crypto/src/primitives/x25519.ts", "../../@tbdex/protocol/dist/esm/src/did-resolver.js", "../../@tbdex/protocol/node_modules/@web5/dids/src/index.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/types/did-core.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/types/did-resolution.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/did.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/did-error.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/utils.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/bearer-did.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-method.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-dht.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-ion.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-jwk.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-key.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/methods/did-web.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/resolver/resolver-cache-level.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/resolver/resolver-cache-noop.ts", "../../@tbdex/protocol/node_modules/@web5/dids/src/resolver/universal-resolver.ts", "../../@tbdex/protocol/dist/esm/src/validator.js", "../../@tbdex/protocol/dist/esm/generated/compiled-validators.js", "../../@tbdex/protocol/dist/esm/src/message.js", "../../@tbdex/protocol/dist/esm/src/resource-kinds/index.js", "../../@tbdex/protocol/dist/esm/src/resource-kinds/offering.js", "../../@tbdex/protocol/dist/esm/src/parser.js", "../../@tbdex/protocol/dist/esm/src/message-kinds/index.js", "../../@tbdex/protocol/dist/esm/src/message-kinds/rfq.js", "../../bignumber.js/bignumber.mjs", "../../@tbdex/protocol/node_modules/@web5/credentials/src/index.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/jwt.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/presentation-exchange.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/validators.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/utils.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/verifiable-presentation.ts", "../../@tbdex/protocol/node_modules/@web5/credentials/src/verifiable-credential.ts", "../../@tbdex/protocol/dist/esm/src/message-kinds/quote.js", "../../@tbdex/protocol/dist/esm/src/message-kinds/order.js", "../../@tbdex/protocol/dist/esm/src/message-kinds/order-status.js", "../../@tbdex/protocol/dist/esm/src/message-kinds/close.js", "../../@tbdex/protocol/dist/esm/src/resource-kinds/balance.js", "../../@tbdex/protocol/dist/esm/src/exchange.js", "../../@tbdex/protocol/dist/esm/src/dev-tools.js", "../../@tbdex/protocol/dist/esm/src/types.js", "../../@tbdex/http-client/dist/esm/src/client.js", "../../@tbdex/http-client/dist/esm/src/errors/index.js", "../../@tbdex/http-client/dist/esm/src/errors/request-error.js", "../../@tbdex/http-client/dist/esm/src/errors/response-error.js", "../../@tbdex/http-client/dist/esm/src/errors/validation-error.js", "../../@tbdex/http-client/dist/esm/src/errors/request-token-error.js", "../../@tbdex/http-client/node_modules/@web5/dids/src/index.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/types/did-core.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/types/did-resolution.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/did.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/did-error.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/index.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/index.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/cache.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/type-utils.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/convert.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/multicodec.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/object.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/stores.ts", "../../@tbdex/http-client/node_modules/@web5/common/src/stream-node.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/primitives/sha256.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/algorithms/crypto-algorithm.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/algorithms/sha-2.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/jose/utils.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/jose/jwk.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/primitives/secp256k1.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/primitives/secp256r1.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/algorithms/ecdsa.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/primitives/ed25519.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/algorithms/eddsa.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/local-key-manager.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/src/utils.ts", "../../@tbdex/http-client/node_modules/@web5/crypto/dist/esm/jose/jwe.js", "../../@tbdex/http-client/node_modules/@web5/crypto/dist/esm/jose/jws.js", "../../@tbdex/http-client/node_modules/@web5/crypto/dist/esm/jose/jwt.js", "../../@tbdex/http-client/node_modules/@web5/crypto/src/primitives/x25519.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/utils.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/bearer-did.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-method.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-dht.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-ion.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-jwk.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-key.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/methods/did-web.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/resolver/resolver-cache-level.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/resolver/resolver-cache-noop.ts", "../../@tbdex/http-client/node_modules/@web5/dids/src/resolver/universal-resolver.ts", "../../@tbdex/http-client/node_modules/typeid-js/dist/index.mjs", "../../@tbdex/http-client/node_modules/typeid-js/src/base32.ts", "../../@tbdex/http-client/node_modules/typeid-js/src/parse_uuid.ts", "../../@tbdex/http-client/node_modules/typeid-js/dist/chunk-R5Q6Z3GN.mjs", "../../@tbdex/http-client/node_modules/typeid-js/node_modules/.pnpm/uuidv7@0.4.4/node_modules/uuidv7/dist/index.js", "../../@tbdex/http-client/node_modules/typeid-js/src/typeid.ts", "../../@tbdex/http-client/node_modules/@web5/credentials/src/index.ts", "../../@tbdex/http-client/node_modules/@web5/credentials/src/jwt.ts", "../../@tbdex/http-client/node_modules/@web5/credentials/src/presentation-exchange.ts", "../../@tbdex/http-client/node_modules/@web5/credentials/src/validators.ts", "../../@tbdex/http-client/node_modules/@web5/credentials/src/utils.ts", "../../query-string/index.js", "../../query-string/base.js", "../../decode-uri-component/index.js", "../../split-on-first/index.js", "../../filter-obj/index.js", "../../@tbdex/http-client/dist/esm/src/types.js"],
  "sourcesContent": ["// A simple TTL cache with max capacity option, ms resolution,\n// autopurge, and reasonably optimized performance\n// Relies on the fact that integer Object keys are kept sorted,\n// and managed very efficiently by V8.\n\n/* istanbul ignore next */\nconst perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst now = () => perf.now()\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\nconst isPosIntOrInf = n => n === Infinity || isPosInt(n)\n\nclass TTLCache {\n  constructor({\n    max = Infinity,\n    ttl,\n    updateAgeOnGet = false,\n    checkAgeOnGet = false,\n    noUpdateTTL = false,\n    dispose,\n    noDisposeOnSet = false,\n  } = {}) {\n    // {[expirationTime]: [keys]}\n    this.expirations = Object.create(null)\n    // {key=>val}\n    this.data = new Map()\n    // {key=>expiration}\n    this.expirationMap = new Map()\n    if (ttl !== undefined && !isPosIntOrInf(ttl)) {\n      throw new TypeError(\n        'ttl must be positive integer or Infinity if set'\n      )\n    }\n    if (!isPosIntOrInf(max)) {\n      throw new TypeError('max must be positive integer or Infinity')\n    }\n    this.ttl = ttl\n    this.max = max\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.checkAgeOnGet = !!checkAgeOnGet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDisposeOnSet = !!noDisposeOnSet\n    if (dispose !== undefined) {\n      if (typeof dispose !== 'function') {\n        throw new TypeError('dispose must be function if set')\n      }\n      this.dispose = dispose\n    }\n\n    this.timer = undefined\n    this.timerExpiration = undefined\n  }\n\n  setTimer(expiration, ttl) {\n    if (this.timerExpiration < expiration) {\n      return\n    }\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n\n    const t = setTimeout(() => {\n      this.timer = undefined\n      this.timerExpiration = undefined\n      this.purgeStale()\n      for (const exp in this.expirations) {\n        this.setTimer(exp, exp - now())\n        break\n      }\n    }, ttl)\n\n    /* istanbul ignore else - affordance for non-node envs */\n    if (t.unref) t.unref()\n\n    this.timerExpiration = expiration\n    this.timer = t\n  }\n\n  // hang onto the timer so we can clearTimeout if all items\n  // are deleted.  Deno doesn't have Timer.unref(), so it\n  // hangs otherwise.\n  cancelTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timerExpiration = undefined\n      this.timer = undefined\n    }\n  }\n\n  /* istanbul ignore next */\n  cancelTimers() {\n    process.emitWarning(\n      'TTLCache.cancelTimers has been renamed to ' +\n        'TTLCache.cancelTimer (no \"s\"), and will be removed in the next ' +\n        'major version update'\n    )\n    return this.cancelTimer()\n  }\n\n  clear() {\n    const entries =\n      this.dispose !== TTLCache.prototype.dispose ? [...this] : []\n    this.data.clear()\n    this.expirationMap.clear()\n    // no need for any purging now\n    this.cancelTimer()\n    this.expirations = Object.create(null)\n    for (const [key, val] of entries) {\n      this.dispose(val, key, 'delete')\n    }\n  }\n\n  setTTL(key, ttl = this.ttl) {\n    const current = this.expirationMap.get(key)\n    if (current !== undefined) {\n      // remove from the expirations list, so it isn't purged\n      const exp = this.expirations[current]\n      if (!exp || exp.length <= 1) {\n        delete this.expirations[current]\n      } else {\n        this.expirations[current] = exp.filter(k => k !== key)\n      }\n    }\n\n    if (ttl !== Infinity) {\n      const expiration = Math.floor(now() + ttl)\n      this.expirationMap.set(key, expiration)\n      if (!this.expirations[expiration]) {\n        this.expirations[expiration] = []\n        this.setTimer(expiration, ttl)\n      }\n      this.expirations[expiration].push(key)\n    } else {\n      this.expirationMap.set(key, Infinity)\n    }\n  }\n\n  set(\n    key,\n    val,\n    {\n      ttl = this.ttl,\n      noUpdateTTL = this.noUpdateTTL,\n      noDisposeOnSet = this.noDisposeOnSet,\n    } = {}\n  ) {\n    if (!isPosIntOrInf(ttl)) {\n      throw new TypeError('ttl must be positive integer or Infinity')\n    }\n    if (this.expirationMap.has(key)) {\n      if (!noUpdateTTL) {\n        this.setTTL(key, ttl)\n      }\n      // has old value\n      const oldValue = this.data.get(key)\n      if (oldValue !== val) {\n        this.data.set(key, val)\n        if (!noDisposeOnSet) {\n          this.dispose(oldValue, key, 'set')\n        }\n      }\n    } else {\n      this.setTTL(key, ttl)\n      this.data.set(key, val)\n    }\n\n    while (this.size > this.max) {\n      this.purgeToCapacity()\n    }\n\n    return this\n  }\n\n  has(key) {\n    return this.data.has(key)\n  }\n\n  getRemainingTTL(key) {\n    const expiration = this.expirationMap.get(key)\n    return expiration === Infinity\n      ? expiration\n      : expiration !== undefined\n      ? Math.max(0, Math.ceil(expiration - now()))\n      : 0\n  }\n\n  get(\n    key,\n    {\n      updateAgeOnGet = this.updateAgeOnGet,\n      ttl = this.ttl,\n      checkAgeOnGet = this.checkAgeOnGet,\n    } = {}\n  ) {\n    const val = this.data.get(key)\n    if (checkAgeOnGet && this.getRemainingTTL(key) === 0) {\n      this.delete(key)\n      return undefined\n    }\n    if (updateAgeOnGet) {\n      this.setTTL(key, ttl)\n    }\n    return val\n  }\n\n  dispose(_, __) {}\n\n  delete(key) {\n    const current = this.expirationMap.get(key)\n    if (current !== undefined) {\n      const value = this.data.get(key)\n      this.data.delete(key)\n      this.expirationMap.delete(key)\n      const exp = this.expirations[current]\n      if (exp) {\n        if (exp.length <= 1) {\n          delete this.expirations[current]\n        } else {\n          this.expirations[current] = exp.filter(k => k !== key)\n        }\n      }\n      this.dispose(value, key, 'delete')\n      if (this.size === 0) {\n        this.cancelTimer()\n      }\n      return true\n    }\n    return false\n  }\n\n  purgeToCapacity() {\n    for (const exp in this.expirations) {\n      const keys = this.expirations[exp]\n      if (this.size - keys.length >= this.max) {\n        delete this.expirations[exp]\n        const entries = []\n        for (const key of keys) {\n          entries.push([key, this.data.get(key)])\n          this.data.delete(key)\n          this.expirationMap.delete(key)\n        }\n        for (const [key, val] of entries) {\n          this.dispose(val, key, 'evict')\n        }\n      } else {\n        const s = this.size - this.max\n        const entries = []\n        for (const key of keys.splice(0, s)) {\n          entries.push([key, this.data.get(key)])\n          this.data.delete(key)\n          this.expirationMap.delete(key)\n        }\n        for (const [key, val] of entries) {\n          this.dispose(val, key, 'evict')\n        }\n        return\n      }\n    }\n  }\n\n  get size() {\n    return this.data.size\n  }\n\n  purgeStale() {\n    const n = Math.ceil(now())\n    for (const exp in this.expirations) {\n      if (exp === 'Infinity' || exp > n) {\n        return\n      }\n\n      /* istanbul ignore next\n       * mysterious need for a guard here?\n       * https://github.com/isaacs/ttlcache/issues/26 */\n      const keys = [...(this.expirations[exp] || [])]\n      const entries = []\n      delete this.expirations[exp]\n      for (const key of keys) {\n        entries.push([key, this.data.get(key)])\n        this.data.delete(key)\n        this.expirationMap.delete(key)\n      }\n      for (const [key, val] of entries) {\n        this.dispose(val, key, 'stale')\n      }\n    }\n    if (this.size === 0) {\n      this.cancelTimer()\n    }\n  }\n\n  *entries() {\n    for (const exp in this.expirations) {\n      for (const key of this.expirations[exp]) {\n        yield [key, this.data.get(key)]\n      }\n    }\n  }\n  *keys() {\n    for (const exp in this.expirations) {\n      for (const key of this.expirations[exp]) {\n        yield key\n      }\n    }\n  }\n  *values() {\n    for (const exp in this.expirations) {\n      for (const key of this.expirations[exp]) {\n        yield this.data.get(key)\n      }\n    }\n  }\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n}\n\nmodule.exports = TTLCache\n", "'use strict'\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/per_context/primordials.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/per_context/primordials.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/\nmodule.exports = {\n  ArrayIsArray(self) {\n    return Array.isArray(self)\n  },\n  ArrayPrototypeIncludes(self, el) {\n    return self.includes(el)\n  },\n  ArrayPrototypeIndexOf(self, el) {\n    return self.indexOf(el)\n  },\n  ArrayPrototypeJoin(self, sep) {\n    return self.join(sep)\n  },\n  ArrayPrototypeMap(self, fn) {\n    return self.map(fn)\n  },\n  ArrayPrototypePop(self, el) {\n    return self.pop(el)\n  },\n  ArrayPrototypePush(self, el) {\n    return self.push(el)\n  },\n  ArrayPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  Error,\n  FunctionPrototypeCall(fn, thisArgs, ...args) {\n    return fn.call(thisArgs, ...args)\n  },\n  FunctionPrototypeSymbolHasInstance(self, instance) {\n    return Function.prototype[Symbol.hasInstance].call(self, instance)\n  },\n  MathFloor: Math.floor,\n  Number,\n  NumberIsInteger: Number.isInteger,\n  NumberIsNaN: Number.isNaN,\n  NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,\n  NumberParseInt: Number.parseInt,\n  ObjectDefineProperties(self, props) {\n    return Object.defineProperties(self, props)\n  },\n  ObjectDefineProperty(self, name, prop) {\n    return Object.defineProperty(self, name, prop)\n  },\n  ObjectGetOwnPropertyDescriptor(self, name) {\n    return Object.getOwnPropertyDescriptor(self, name)\n  },\n  ObjectKeys(obj) {\n    return Object.keys(obj)\n  },\n  ObjectSetPrototypeOf(target, proto) {\n    return Object.setPrototypeOf(target, proto)\n  },\n  Promise,\n  PromisePrototypeCatch(self, fn) {\n    return self.catch(fn)\n  },\n  PromisePrototypeThen(self, thenFn, catchFn) {\n    return self.then(thenFn, catchFn)\n  },\n  PromiseReject(err) {\n    return Promise.reject(err)\n  },\n  ReflectApply: Reflect.apply,\n  RegExpPrototypeTest(self, value) {\n    return self.test(value)\n  },\n  SafeSet: Set,\n  String,\n  StringPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  StringPrototypeToLowerCase(self) {\n    return self.toLowerCase()\n  },\n  StringPrototypeToUpperCase(self) {\n    return self.toUpperCase()\n  },\n  StringPrototypeTrim(self) {\n    return self.trim()\n  },\n  Symbol,\n  SymbolFor: Symbol.for,\n  SymbolAsyncIterator: Symbol.asyncIterator,\n  SymbolHasInstance: Symbol.hasInstance,\n  SymbolIterator: Symbol.iterator,\n  TypedArrayPrototypeSet(self, buf, len) {\n    return self.set(buf, len)\n  },\n  Uint8Array\n}\n", "'use strict'\n\nconst bufferModule = require('buffer')\nconst AsyncFunction = Object.getPrototypeOf(async function () {}).constructor\nconst Blob = globalThis.Blob || bufferModule.Blob\n/* eslint-disable indent */\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        // eslint-disable-next-line indent\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\n/* eslint-enable indent */\n\n// This is a simplified version of AggregateError\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`)\n    }\n    let message = ''\n    for (let i = 0; i < errors.length; i++) {\n      message += `    ${errors[i].stack}\\n`\n    }\n    super(message)\n    this.name = 'AggregateError'\n    this.errors = errors\n  }\n}\nmodule.exports = {\n  AggregateError,\n  kEmptyObject: Object.freeze({}),\n  once(callback) {\n    let called = false\n    return function (...args) {\n      if (called) {\n        return\n      }\n      called = true\n      callback.apply(this, args)\n    }\n  },\n  createDeferredPromise: function () {\n    let resolve\n    let reject\n\n    // eslint-disable-next-line promise/param-names\n    const promise = new Promise((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n    return {\n      promise,\n      resolve,\n      reject\n    }\n  },\n  promisify(fn) {\n    return new Promise((resolve, reject) => {\n      fn((err, ...args) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(...args)\n      })\n    })\n  },\n  debuglog() {\n    return function () {}\n  },\n  format(format, ...args) {\n    // Simplified version of https://nodejs.org/api/util.html#utilformatformat-args\n    return format.replace(/%([sdifj])/g, function (...[_unused, type]) {\n      const replacement = args.shift()\n      if (type === 'f') {\n        return replacement.toFixed(6)\n      } else if (type === 'j') {\n        return JSON.stringify(replacement)\n      } else if (type === 's' && typeof replacement === 'object') {\n        const ctor = replacement.constructor !== Object ? replacement.constructor.name : ''\n        return `${ctor} {}`.trim()\n      } else {\n        return replacement.toString()\n      }\n    })\n  },\n  inspect(value) {\n    // Vastly simplified version of https://nodejs.org/api/util.html#utilinspectobject-options\n    switch (typeof value) {\n      case 'string':\n        if (value.includes(\"'\")) {\n          if (!value.includes('\"')) {\n            return `\"${value}\"`\n          } else if (!value.includes('`') && !value.includes('${')) {\n            return `\\`${value}\\``\n          }\n        }\n        return `'${value}'`\n      case 'number':\n        if (isNaN(value)) {\n          return 'NaN'\n        } else if (Object.is(value, -0)) {\n          return String(value)\n        }\n        return value\n      case 'bigint':\n        return `${String(value)}n`\n      case 'boolean':\n      case 'undefined':\n        return String(value)\n      case 'object':\n        return '{}'\n    }\n  },\n  types: {\n    isAsyncFunction(fn) {\n      return fn instanceof AsyncFunction\n    },\n    isArrayBufferView(arr) {\n      return ArrayBuffer.isView(arr)\n    }\n  },\n  isBlob\n}\nmodule.exports.promisify.custom = Symbol.for('nodejs.util.promisify.custom')\n", "'use strict'\n\nconst { format, inspect, AggregateError: CustomAggregateError } = require('./util')\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/\n\nconst AggregateError = globalThis.AggregateError || CustomAggregateError\nconst kIsNodeError = Symbol('kIsNodeError')\nconst kTypes = [\n  'string',\n  'function',\n  'number',\n  'object',\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\n  'Function',\n  'Object',\n  'boolean',\n  'bigint',\n  'symbol'\n]\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/\nconst nodeInternalPrefix = '__node_internal_'\nconst codes = {}\nfunction assert(value, message) {\n  if (!value) {\n    throw new codes.ERR_INTERNAL_ASSERTION(message)\n  }\n}\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\nfunction getMessage(key, msg, args) {\n  if (typeof msg === 'function') {\n    assert(\n      msg.length <= args.length,\n      // Default options do not count.\n      `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`\n    )\n    return msg(...args)\n  }\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length\n  assert(\n    expectedLength === args.length,\n    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`\n  )\n  if (args.length === 0) {\n    return msg\n  }\n  return format(msg, ...args)\n}\nfunction E(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n  class NodeError extends Base {\n    constructor(...args) {\n      super(getMessage(code, message, args))\n    }\n    toString() {\n      return `${this.name} [${code}]: ${this.message}`\n    }\n  }\n  Object.defineProperties(NodeError.prototype, {\n    name: {\n      value: Base.name,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    toString: {\n      value() {\n        return `${this.name} [${code}]: ${this.message}`\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  })\n  NodeError.prototype.code = code\n  NodeError.prototype[kIsNodeError] = true\n  codes[code] = NodeError\n}\nfunction hideStackFrames(fn) {\n  // We rename the functions that will be hidden to cut off the stacktrace\n  // at the outermost one\n  const hidden = nodeInternalPrefix + fn.name\n  Object.defineProperty(fn, 'name', {\n    value: hidden\n  })\n  return fn\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n  if (innerError && outerError && innerError !== outerError) {\n    if (Array.isArray(outerError.errors)) {\n      // If `outerError` is already an `AggregateError`.\n      outerError.errors.push(innerError)\n      return outerError\n    }\n    const err = new AggregateError([outerError, innerError], outerError.message)\n    err.code = outerError.code\n    return err\n  }\n  return innerError || outerError\n}\nclass AbortError extends Error {\n  constructor(message = 'The operation was aborted', options = undefined) {\n    if (options !== undefined && typeof options !== 'object') {\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options)\n    }\n    super(message, options)\n    this.code = 'ABORT_ERR'\n    this.name = 'AbortError'\n  }\n}\nE('ERR_ASSERTION', '%s', Error)\nE(\n  'ERR_INVALID_ARG_TYPE',\n  (name, expected, actual) => {\n    assert(typeof name === 'string', \"'name' must be a string\")\n    if (!Array.isArray(expected)) {\n      expected = [expected]\n    }\n    let msg = 'The '\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `\n    } else {\n      msg += `\"${name}\" ${name.includes('.') ? 'property' : 'argument'} `\n    }\n    msg += 'must be '\n    const types = []\n    const instances = []\n    const other = []\n    for (const value of expected) {\n      assert(typeof value === 'string', 'All expected entries have to be of type string')\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase())\n      } else if (classRegExp.test(value)) {\n        instances.push(value)\n      } else {\n        assert(value !== 'object', 'The value \"object\" should be written as \"Object\"')\n        other.push(value)\n      }\n    }\n\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n      const pos = types.indexOf('object')\n      if (pos !== -1) {\n        types.splice(types, pos, 1)\n        instances.push('Object')\n      }\n    }\n    if (types.length > 0) {\n      switch (types.length) {\n        case 1:\n          msg += `of type ${types[0]}`\n          break\n        case 2:\n          msg += `one of type ${types[0]} or ${types[1]}`\n          break\n        default: {\n          const last = types.pop()\n          msg += `one of type ${types.join(', ')}, or ${last}`\n        }\n      }\n      if (instances.length > 0 || other.length > 0) {\n        msg += ' or '\n      }\n    }\n    if (instances.length > 0) {\n      switch (instances.length) {\n        case 1:\n          msg += `an instance of ${instances[0]}`\n          break\n        case 2:\n          msg += `an instance of ${instances[0]} or ${instances[1]}`\n          break\n        default: {\n          const last = instances.pop()\n          msg += `an instance of ${instances.join(', ')}, or ${last}`\n        }\n      }\n      if (other.length > 0) {\n        msg += ' or '\n      }\n    }\n    switch (other.length) {\n      case 0:\n        break\n      case 1:\n        if (other[0].toLowerCase() !== other[0]) {\n          msg += 'an '\n        }\n        msg += `${other[0]}`\n        break\n      case 2:\n        msg += `one of ${other[0]} or ${other[1]}`\n        break\n      default: {\n        const last = other.pop()\n        msg += `one of ${other.join(', ')}, or ${last}`\n      }\n    }\n    if (actual == null) {\n      msg += `. Received ${actual}`\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`\n    } else if (typeof actual === 'object') {\n      var _actual$constructor\n      if (\n        (_actual$constructor = actual.constructor) !== null &&\n        _actual$constructor !== undefined &&\n        _actual$constructor.name\n      ) {\n        msg += `. Received an instance of ${actual.constructor.name}`\n      } else {\n        const inspected = inspect(actual, {\n          depth: -1\n        })\n        msg += `. Received ${inspected}`\n      }\n    } else {\n      let inspected = inspect(actual, {\n        colors: false\n      })\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`\n      }\n      msg += `. Received type ${typeof actual} (${inspected})`\n    }\n    return msg\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_ARG_VALUE',\n  (name, value, reason = 'is invalid') => {\n    let inspected = inspect(value)\n    if (inspected.length > 128) {\n      inspected = inspected.slice(0, 128) + '...'\n    }\n    const type = name.includes('.') ? 'property' : 'argument'\n    return `The ${type} '${name}' ${reason}. Received ${inspected}`\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_RETURN_VALUE',\n  (input, name, value) => {\n    var _value$constructor\n    const type =\n      value !== null &&\n      value !== undefined &&\n      (_value$constructor = value.constructor) !== null &&\n      _value$constructor !== undefined &&\n      _value$constructor.name\n        ? `instance of ${value.constructor.name}`\n        : `type ${typeof value}`\n    return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`\n  },\n  TypeError\n)\nE(\n  'ERR_MISSING_ARGS',\n  (...args) => {\n    assert(args.length > 0, 'At least one arg needs to be specified')\n    let msg\n    const len = args.length\n    args = (Array.isArray(args) ? args : [args]).map((a) => `\"${a}\"`).join(' or ')\n    switch (len) {\n      case 1:\n        msg += `The ${args[0]} argument`\n        break\n      case 2:\n        msg += `The ${args[0]} and ${args[1]} arguments`\n        break\n      default:\n        {\n          const last = args.pop()\n          msg += `The ${args.join(', ')}, and ${last} arguments`\n        }\n        break\n    }\n    return `${msg} must be specified`\n  },\n  TypeError\n)\nE(\n  'ERR_OUT_OF_RANGE',\n  (str, range, input) => {\n    assert(range, 'Missing \"range\" argument')\n    let received\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    } else {\n      received = inspect(input)\n    }\n    return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`\n  },\n  RangeError\n)\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error)\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error)\nE('ERR_STREAM_ALREADY_FINISHED', 'Cannot call %s after a stream was finished', Error)\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error)\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error)\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError)\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error)\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error)\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event', Error)\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error)\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError)\nmodule.exports = {\n  AbortError,\n  aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n  hideStackFrames,\n  codes\n}\n", "/* eslint jsdoc/require-jsdoc: \"error\" */\n\n'use strict'\n\nconst {\n  ArrayIsArray,\n  ArrayPrototypeIncludes,\n  ArrayPrototypeJoin,\n  ArrayPrototypeMap,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberMAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER,\n  NumberParseInt,\n  ObjectPrototypeHasOwnProperty,\n  RegExpPrototypeExec,\n  String,\n  StringPrototypeToUpperCase,\n  StringPrototypeTrim\n} = require('../ours/primordials')\nconst {\n  hideStackFrames,\n  codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }\n} = require('../ours/errors')\nconst { normalizeEncoding } = require('../ours/util')\nconst { isAsyncFunction, isArrayBufferView } = require('../ours/util').types\nconst signals = {}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt32(value) {\n  return value === (value | 0)\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isUint32(value) {\n  return value === value >>> 0\n}\nconst octalReg = /^[0-7]+$/\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string'\n\n/**\n * Parse and validate values that will be converted into mode_t (the S_*\n * constants). Only valid numbers and octal strings are allowed. They could be\n * converted to 32-bit unsigned integers or non-negative signed integers in the\n * C++ land, but any value higher than 0o777 will result in platform-specific\n * behaviors.\n *\n * @param {*} value Values to be validated\n * @param {string} name Name of the argument\n * @param {number} [def] If specified, will be returned for invalid values\n * @returns {number}\n */\nfunction parseFileMode(value, name, def) {\n  if (typeof value === 'undefined') {\n    value = def\n  }\n  if (typeof value === 'string') {\n    if (RegExpPrototypeExec(octalReg, value) === null) {\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc)\n    }\n    value = NumberParseInt(value, 8)\n  }\n  validateUint32(value, name)\n  return value\n}\n\n/**\n * @callback validateInteger\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInteger} */\nconst validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (!NumberIsInteger(value)) throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  if (value < min || value > max) throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n})\n\n/**\n * @callback validateInt32\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInt32} */\nconst validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {\n  // The defaults for min and max correspond to the limits of 32-bit integers.\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateUint32\n * @param {*} value\n * @param {string} name\n * @param {number|boolean} [positive=false]\n * @returns {asserts value is number}\n */\n\n/** @type {validateUint32} */\nconst validateUint32 = hideStackFrames((value, name, positive = false) => {\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  const min = positive ? 1 : 0\n  // 2 ** 32 === 4294967296\n  const max = 4294967295\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateString\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string}\n */\n\n/** @type {validateString} */\nfunction validateString(value, name) {\n  if (typeof value !== 'string') throw new ERR_INVALID_ARG_TYPE(name, 'string', value)\n}\n\n/**\n * @callback validateNumber\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateNumber} */\nfunction validateNumber(value, name, min = undefined, max) {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (\n    (min != null && value < min) ||\n    (max != null && value > max) ||\n    ((min != null || max != null) && NumberIsNaN(value))\n  ) {\n    throw new ERR_OUT_OF_RANGE(\n      name,\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`,\n      value\n    )\n  }\n}\n\n/**\n * @callback validateOneOf\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} oneOf\n */\n\n/** @type {validateOneOf} */\nconst validateOneOf = hideStackFrames((value, name, oneOf) => {\n  if (!ArrayPrototypeIncludes(oneOf, value)) {\n    const allowed = ArrayPrototypeJoin(\n      ArrayPrototypeMap(oneOf, (v) => (typeof v === 'string' ? `'${v}'` : String(v))),\n      ', '\n    )\n    const reason = 'must be one of: ' + allowed\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateBoolean\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean}\n */\n\n/** @type {validateBoolean} */\nfunction validateBoolean(value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value)\n}\n\n/**\n * @param {any} options\n * @param {string} key\n * @param {boolean} defaultValue\n * @returns {boolean}\n */\nfunction getOwnPropertyValueOrDefault(options, key, defaultValue) {\n  return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key]\n}\n\n/**\n * @callback validateObject\n * @param {*} value\n * @param {string} name\n * @param {{\n *   allowArray?: boolean,\n *   allowFunction?: boolean,\n *   nullable?: boolean\n * }} [options]\n */\n\n/** @type {validateObject} */\nconst validateObject = hideStackFrames((value, name, options = null) => {\n  const allowArray = getOwnPropertyValueOrDefault(options, 'allowArray', false)\n  const allowFunction = getOwnPropertyValueOrDefault(options, 'allowFunction', false)\n  const nullable = getOwnPropertyValueOrDefault(options, 'nullable', false)\n  if (\n    (!nullable && value === null) ||\n    (!allowArray && ArrayIsArray(value)) ||\n    (typeof value !== 'object' && (!allowFunction || typeof value !== 'function'))\n  ) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value)\n  }\n})\n\n/**\n * @callback validateDictionary - We are using the Web IDL Standard definition\n *                                of \"dictionary\" here, which means any value\n *                                whose Type is either Undefined, Null, or\n *                                Object (which includes functions).\n * @param {*} value\n * @param {string} name\n * @see https://webidl.spec.whatwg.org/#es-dictionary\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\n */\n\n/** @type {validateDictionary} */\nconst validateDictionary = hideStackFrames((value, name) => {\n  if (value != null && typeof value !== 'object' && typeof value !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'a dictionary', value)\n  }\n})\n\n/**\n * @callback validateArray\n * @param {*} value\n * @param {string} name\n * @param {number} [minLength]\n * @returns {asserts value is any[]}\n */\n\n/** @type {validateArray} */\nconst validateArray = hideStackFrames((value, name, minLength = 0) => {\n  if (!ArrayIsArray(value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Array', value)\n  }\n  if (value.length < minLength) {\n    const reason = `must be longer than ${minLength}`\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateStringArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string[]}\n */\n\n/** @type {validateStringArray} */\nfunction validateStringArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateString(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @callback validateBooleanArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean[]}\n */\n\n/** @type {validateBooleanArray} */\nfunction validateBooleanArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateBoolean(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @param {*} signal\n * @param {string} [name='signal']\n * @returns {asserts signal is keyof signals}\n */\nfunction validateSignalName(signal, name = 'signal') {\n  validateString(signal, name)\n  if (signals[signal] === undefined) {\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\n      throw new ERR_UNKNOWN_SIGNAL(signal + ' (signals must use all capital letters)')\n    }\n    throw new ERR_UNKNOWN_SIGNAL(signal)\n  }\n}\n\n/**\n * @callback validateBuffer\n * @param {*} buffer\n * @param {string} [name='buffer']\n * @returns {asserts buffer is ArrayBufferView}\n */\n\n/** @type {validateBuffer} */\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\n  if (!isArrayBufferView(buffer)) {\n    throw new ERR_INVALID_ARG_TYPE(name, ['Buffer', 'TypedArray', 'DataView'], buffer)\n  }\n})\n\n/**\n * @param {string} data\n * @param {string} encoding\n */\nfunction validateEncoding(data, encoding) {\n  const normalizedEncoding = normalizeEncoding(encoding)\n  const length = data.length\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\n    throw new ERR_INVALID_ARG_VALUE('encoding', encoding, `is invalid for data of length ${length}`)\n  }\n}\n\n/**\n * Check that the port number is not NaN when coerced to a number,\n * is an integer and that it falls within the legal range of port numbers.\n * @param {*} port\n * @param {string} [name='Port']\n * @param {boolean} [allowZero=true]\n * @returns {number}\n */\nfunction validatePort(port, name = 'Port', allowZero = true) {\n  if (\n    (typeof port !== 'number' && typeof port !== 'string') ||\n    (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\n    +port !== +port >>> 0 ||\n    port > 0xffff ||\n    (port === 0 && !allowZero)\n  ) {\n    throw new ERR_SOCKET_BAD_PORT(name, port, allowZero)\n  }\n  return port | 0\n}\n\n/**\n * @callback validateAbortSignal\n * @param {*} signal\n * @param {string} name\n */\n\n/** @type {validateAbortSignal} */\nconst validateAbortSignal = hideStackFrames((signal, name) => {\n  if (signal !== undefined && (signal === null || typeof signal !== 'object' || !('aborted' in signal))) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n})\n\n/**\n * @callback validateFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validateFunction} */\nconst validateFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function') throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validatePlainFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validatePlainFunction} */\nconst validatePlainFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function' || isAsyncFunction(value)) throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validateUndefined\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is undefined}\n */\n\n/** @type {validateUndefined} */\nconst validateUndefined = hideStackFrames((value, name) => {\n  if (value !== undefined) throw new ERR_INVALID_ARG_TYPE(name, 'undefined', value)\n})\n\n/**\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} union\n */\nfunction validateUnion(value, name, union) {\n  if (!ArrayPrototypeIncludes(union, value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, '|')}')`, value)\n  }\n}\n\n/*\n  The rules for the Link header field are described here:\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\n\n  This regex validates any string surrounded by angle brackets\n  (not necessarily a valid URI reference) followed by zero or more\n  link-params separated by semicolons.\n*/\nconst linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/\n\n/**\n * @param {any} value\n * @param {string} name\n */\nfunction validateLinkHeaderFormat(value, name) {\n  if (typeof value === 'undefined' || !RegExpPrototypeExec(linkValueRegExp, value)) {\n    throw new ERR_INVALID_ARG_VALUE(\n      name,\n      value,\n      'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n    )\n  }\n}\n\n/**\n * @param {any} hints\n * @return {string}\n */\nfunction validateLinkHeaderValue(hints) {\n  if (typeof hints === 'string') {\n    validateLinkHeaderFormat(hints, 'hints')\n    return hints\n  } else if (ArrayIsArray(hints)) {\n    const hintsLength = hints.length\n    let result = ''\n    if (hintsLength === 0) {\n      return result\n    }\n    for (let i = 0; i < hintsLength; i++) {\n      const link = hints[i]\n      validateLinkHeaderFormat(link, 'hints')\n      result += link\n      if (i !== hintsLength - 1) {\n        result += ', '\n      }\n    }\n    return result\n  }\n  throw new ERR_INVALID_ARG_VALUE(\n    'hints',\n    hints,\n    'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n  )\n}\nmodule.exports = {\n  isInt32,\n  isUint32,\n  parseFileMode,\n  validateArray,\n  validateStringArray,\n  validateBooleanArray,\n  validateBoolean,\n  validateBuffer,\n  validateDictionary,\n  validateEncoding,\n  validateFunction,\n  validateInt32,\n  validateInteger,\n  validateNumber,\n  validateObject,\n  validateOneOf,\n  validatePlainFunction,\n  validatePort,\n  validateSignalName,\n  validateString,\n  validateUint32,\n  validateUndefined,\n  validateUnion,\n  validateAbortSignal,\n  validateLinkHeaderValue\n}\n", "'use strict'\n\nconst { Symbol, SymbolAsyncIterator, SymbolIterator, SymbolFor } = require('../../ours/primordials')\nconst kDestroyed = Symbol('kDestroyed')\nconst kIsErrored = Symbol('kIsErrored')\nconst kIsReadable = Symbol('kIsReadable')\nconst kIsDisturbed = Symbol('kIsDisturbed')\nconst kIsClosedPromise = SymbolFor('nodejs.webstream.isClosedPromise')\nconst kControllerErrorFunction = SymbolFor('nodejs.webstream.controllerErrorFunction')\nfunction isReadableNodeStream(obj, strict = false) {\n  var _obj$_readableState\n  return !!(\n    (\n      obj &&\n      typeof obj.pipe === 'function' &&\n      typeof obj.on === 'function' &&\n      (!strict || (typeof obj.pause === 'function' && typeof obj.resume === 'function')) &&\n      (!obj._writableState ||\n        ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === undefined\n          ? undefined\n          : _obj$_readableState.readable) !== false) &&\n      // Duplex\n      (!obj._writableState || obj._readableState)\n    ) // Writable has .pipe.\n  )\n}\n\nfunction isWritableNodeStream(obj) {\n  var _obj$_writableState\n  return !!(\n    (\n      obj &&\n      typeof obj.write === 'function' &&\n      typeof obj.on === 'function' &&\n      (!obj._readableState ||\n        ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === undefined\n          ? undefined\n          : _obj$_writableState.writable) !== false)\n    ) // Duplex\n  )\n}\n\nfunction isDuplexNodeStream(obj) {\n  return !!(\n    obj &&\n    typeof obj.pipe === 'function' &&\n    obj._readableState &&\n    typeof obj.on === 'function' &&\n    typeof obj.write === 'function'\n  )\n}\nfunction isNodeStream(obj) {\n  return (\n    obj &&\n    (obj._readableState ||\n      obj._writableState ||\n      (typeof obj.write === 'function' && typeof obj.on === 'function') ||\n      (typeof obj.pipe === 'function' && typeof obj.on === 'function'))\n  )\n}\nfunction isReadableStream(obj) {\n  return !!(\n    obj &&\n    !isNodeStream(obj) &&\n    typeof obj.pipeThrough === 'function' &&\n    typeof obj.getReader === 'function' &&\n    typeof obj.cancel === 'function'\n  )\n}\nfunction isWritableStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === 'function' && typeof obj.abort === 'function')\n}\nfunction isTransformStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.readable === 'object' && typeof obj.writable === 'object')\n}\nfunction isWebStream(obj) {\n  return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj)\n}\nfunction isIterable(obj, isAsync) {\n  if (obj == null) return false\n  if (isAsync === true) return typeof obj[SymbolAsyncIterator] === 'function'\n  if (isAsync === false) return typeof obj[SymbolIterator] === 'function'\n  return typeof obj[SymbolAsyncIterator] === 'function' || typeof obj[SymbolIterator] === 'function'\n}\nfunction isDestroyed(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return !!(stream.destroyed || stream[kDestroyed] || (state !== null && state !== undefined && state.destroyed))\n}\n\n// Have been end():d.\nfunction isWritableEnded(stream) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableEnded === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.ended) !== 'boolean') return null\n  return wState.ended\n}\n\n// Have emitted 'finish'.\nfunction isWritableFinished(stream, strict) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableFinished === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.finished) !== 'boolean') return null\n  return !!(wState.finished || (strict === false && wState.ended === true && wState.length === 0))\n}\n\n// Have been push(null):d.\nfunction isReadableEnded(stream) {\n  if (!isReadableNodeStream(stream)) return null\n  if (stream.readableEnded === true) return true\n  const rState = stream._readableState\n  if (!rState || rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.ended) !== 'boolean') return null\n  return rState.ended\n}\n\n// Have emitted 'end'.\nfunction isReadableFinished(stream, strict) {\n  if (!isReadableNodeStream(stream)) return null\n  const rState = stream._readableState\n  if (rState !== null && rState !== undefined && rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.endEmitted) !== 'boolean') return null\n  return !!(rState.endEmitted || (strict === false && rState.ended === true && rState.length === 0))\n}\nfunction isReadable(stream) {\n  if (stream && stream[kIsReadable] != null) return stream[kIsReadable]\n  if (typeof (stream === null || stream === undefined ? undefined : stream.readable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream)\n}\nfunction isWritable(stream) {\n  if (typeof (stream === null || stream === undefined ? undefined : stream.writable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream)\n}\nfunction isFinished(stream, opts) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (isDestroyed(stream)) {\n    return true\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.readable) !== false && isReadable(stream)) {\n    return false\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.writable) !== false && isWritable(stream)) {\n    return false\n  }\n  return true\n}\nfunction isWritableErrored(stream) {\n  var _stream$_writableStat, _stream$_writableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.writableErrored) {\n    return stream.writableErrored\n  }\n  return (_stream$_writableStat =\n    (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === undefined\n      ? undefined\n      : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== undefined\n    ? _stream$_writableStat\n    : null\n}\nfunction isReadableErrored(stream) {\n  var _stream$_readableStat, _stream$_readableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.readableErrored) {\n    return stream.readableErrored\n  }\n  return (_stream$_readableStat =\n    (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === undefined\n      ? undefined\n      : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== undefined\n    ? _stream$_readableStat\n    : null\n}\nfunction isClosed(stream) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (typeof stream.closed === 'boolean') {\n    return stream.closed\n  }\n  const wState = stream._writableState\n  const rState = stream._readableState\n  if (\n    typeof (wState === null || wState === undefined ? undefined : wState.closed) === 'boolean' ||\n    typeof (rState === null || rState === undefined ? undefined : rState.closed) === 'boolean'\n  ) {\n    return (\n      (wState === null || wState === undefined ? undefined : wState.closed) ||\n      (rState === null || rState === undefined ? undefined : rState.closed)\n    )\n  }\n  if (typeof stream._closed === 'boolean' && isOutgoingMessage(stream)) {\n    return stream._closed\n  }\n  return null\n}\nfunction isOutgoingMessage(stream) {\n  return (\n    typeof stream._closed === 'boolean' &&\n    typeof stream._defaultKeepAlive === 'boolean' &&\n    typeof stream._removedConnection === 'boolean' &&\n    typeof stream._removedContLen === 'boolean'\n  )\n}\nfunction isServerResponse(stream) {\n  return typeof stream._sent100 === 'boolean' && isOutgoingMessage(stream)\n}\nfunction isServerRequest(stream) {\n  var _stream$req\n  return (\n    typeof stream._consuming === 'boolean' &&\n    typeof stream._dumped === 'boolean' &&\n    ((_stream$req = stream.req) === null || _stream$req === undefined ? undefined : _stream$req.upgradeOrConnect) ===\n      undefined\n  )\n}\nfunction willEmitClose(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return (\n    (!state && isServerResponse(stream)) || !!(state && state.autoDestroy && state.emitClose && state.closed === false)\n  )\n}\nfunction isDisturbed(stream) {\n  var _stream$kIsDisturbed\n  return !!(\n    stream &&\n    ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== undefined\n      ? _stream$kIsDisturbed\n      : stream.readableDidRead || stream.readableAborted)\n  )\n}\nfunction isErrored(stream) {\n  var _ref,\n    _ref2,\n    _ref3,\n    _ref4,\n    _ref5,\n    _stream$kIsErrored,\n    _stream$_readableStat3,\n    _stream$_writableStat3,\n    _stream$_readableStat4,\n    _stream$_writableStat4\n  return !!(\n    stream &&\n    ((_ref =\n      (_ref2 =\n        (_ref3 =\n          (_ref4 =\n            (_ref5 =\n              (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== undefined\n                ? _stream$kIsErrored\n                : stream.readableErrored) !== null && _ref5 !== undefined\n              ? _ref5\n              : stream.writableErrored) !== null && _ref4 !== undefined\n            ? _ref4\n            : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === undefined\n            ? undefined\n            : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== undefined\n          ? _ref3\n          : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === undefined\n          ? undefined\n          : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== undefined\n        ? _ref2\n        : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === undefined\n        ? undefined\n        : _stream$_readableStat4.errored) !== null && _ref !== undefined\n      ? _ref\n      : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === undefined\n      ? undefined\n      : _stream$_writableStat4.errored)\n  )\n}\nmodule.exports = {\n  kDestroyed,\n  isDisturbed,\n  kIsDisturbed,\n  isErrored,\n  kIsErrored,\n  isReadable,\n  kIsReadable,\n  kIsClosedPromise,\n  kControllerErrorFunction,\n  isClosed,\n  isDestroyed,\n  isDuplexNodeStream,\n  isFinished,\n  isIterable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableEnded,\n  isReadableFinished,\n  isReadableErrored,\n  isNodeStream,\n  isWebStream,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableEnded,\n  isWritableFinished,\n  isWritableErrored,\n  isServerRequest,\n  isServerResponse,\n  willEmitClose,\n  isTransformStream\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { AbortError, codes } = require('../../ours/errors')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_PREMATURE_CLOSE } = codes\nconst { kEmptyObject, once } = require('../../ours/util')\nconst { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require('../validators')\nconst { Promise, PromisePrototypeThen } = require('../../ours/primordials')\nconst {\n  isClosed,\n  isReadable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableFinished,\n  isReadableErrored,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableFinished,\n  isWritableErrored,\n  isNodeStream,\n  willEmitClose: _willEmitClose,\n  kIsClosedPromise\n} = require('./utils')\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function'\n}\nconst nop = () => {}\nfunction eos(stream, options, callback) {\n  var _options$readable, _options$writable\n  if (arguments.length === 2) {\n    callback = options\n    options = kEmptyObject\n  } else if (options == null) {\n    options = kEmptyObject\n  } else {\n    validateObject(options, 'options')\n  }\n  validateFunction(callback, 'callback')\n  validateAbortSignal(options.signal, 'options.signal')\n  callback = once(callback)\n  if (isReadableStream(stream) || isWritableStream(stream)) {\n    return eosWeb(stream, options, callback)\n  }\n  if (!isNodeStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  const readable =\n    (_options$readable = options.readable) !== null && _options$readable !== undefined\n      ? _options$readable\n      : isReadableNodeStream(stream)\n  const writable =\n    (_options$writable = options.writable) !== null && _options$writable !== undefined\n      ? _options$writable\n      : isWritableNodeStream(stream)\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const onlegacyfinish = () => {\n    if (!stream.writable) {\n      onfinish()\n    }\n  }\n\n  // TODO (ronag): Improve soft detection to include core modules and\n  // common ecosystem modules that do properly emit 'close' but fail\n  // this generic check.\n  let willEmitClose =\n    _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable\n  let writableFinished = isWritableFinished(stream, false)\n  const onfinish = () => {\n    writableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.readable || readable)) {\n      return\n    }\n    if (!readable || readableFinished) {\n      callback.call(stream)\n    }\n  }\n  let readableFinished = isReadableFinished(stream, false)\n  const onend = () => {\n    readableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.writable || writable)) {\n      return\n    }\n    if (!writable || writableFinished) {\n      callback.call(stream)\n    }\n  }\n  const onerror = (err) => {\n    callback.call(stream, err)\n  }\n  let closed = isClosed(stream)\n  const onclose = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    if (readable && !readableFinished && isReadableNodeStream(stream, true)) {\n      if (!isReadableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    if (writable && !writableFinished) {\n      if (!isWritableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    callback.call(stream)\n  }\n  const onclosed = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    callback.call(stream)\n  }\n  const onrequest = () => {\n    stream.req.on('finish', onfinish)\n  }\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish)\n    if (!willEmitClose) {\n      stream.on('abort', onclose)\n    }\n    if (stream.req) {\n      onrequest()\n    } else {\n      stream.on('request', onrequest)\n    }\n  } else if (writable && !wState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish)\n    stream.on('close', onlegacyfinish)\n  }\n\n  // Not all streams will emit 'close' after 'aborted'.\n  if (!willEmitClose && typeof stream.aborted === 'boolean') {\n    stream.on('aborted', onclose)\n  }\n  stream.on('end', onend)\n  stream.on('finish', onfinish)\n  if (options.error !== false) {\n    stream.on('error', onerror)\n  }\n  stream.on('close', onclose)\n  if (closed) {\n    process.nextTick(onclose)\n  } else if (\n    (wState !== null && wState !== undefined && wState.errorEmitted) ||\n    (rState !== null && rState !== undefined && rState.errorEmitted)\n  ) {\n    if (!willEmitClose) {\n      process.nextTick(onclosed)\n    }\n  } else if (\n    !readable &&\n    (!willEmitClose || isReadable(stream)) &&\n    (writableFinished || isWritable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (\n    !writable &&\n    (!willEmitClose || isWritable(stream)) &&\n    (readableFinished || isReadable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (rState && stream.req && stream.aborted) {\n    process.nextTick(onclosed)\n  }\n  const cleanup = () => {\n    callback = nop\n    stream.removeListener('aborted', onclose)\n    stream.removeListener('complete', onfinish)\n    stream.removeListener('abort', onclose)\n    stream.removeListener('request', onrequest)\n    if (stream.req) stream.req.removeListener('finish', onfinish)\n    stream.removeListener('end', onlegacyfinish)\n    stream.removeListener('close', onlegacyfinish)\n    stream.removeListener('finish', onfinish)\n    stream.removeListener('end', onend)\n    stream.removeListener('error', onerror)\n    stream.removeListener('close', onclose)\n  }\n  if (options.signal && !closed) {\n    const abort = () => {\n      // Keep it because cleanup removes it.\n      const endCallback = callback\n      cleanup()\n      endCallback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      const originalCallback = callback\n      callback = once((...args) => {\n        options.signal.removeEventListener('abort', abort)\n        originalCallback.apply(stream, args)\n      })\n      options.signal.addEventListener('abort', abort)\n    }\n  }\n  return cleanup\n}\nfunction eosWeb(stream, options, callback) {\n  let isAborted = false\n  let abort = nop\n  if (options.signal) {\n    abort = () => {\n      isAborted = true\n      callback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      const originalCallback = callback\n      callback = once((...args) => {\n        options.signal.removeEventListener('abort', abort)\n        originalCallback.apply(stream, args)\n      })\n      options.signal.addEventListener('abort', abort)\n    }\n  }\n  const resolverFn = (...args) => {\n    if (!isAborted) {\n      process.nextTick(() => callback.apply(stream, args))\n    }\n  }\n  PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn)\n  return nop\n}\nfunction finished(stream, opts) {\n  var _opts\n  let autoCleanup = false\n  if (opts === null) {\n    opts = kEmptyObject\n  }\n  if ((_opts = opts) !== null && _opts !== undefined && _opts.cleanup) {\n    validateBoolean(opts.cleanup, 'cleanup')\n    autoCleanup = opts.cleanup\n  }\n  return new Promise((resolve, reject) => {\n    const cleanup = eos(stream, opts, (err) => {\n      if (autoCleanup) {\n        cleanup()\n      }\n      if (err) {\n        reject(err)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\nmodule.exports = eos\nmodule.exports.finished = finished\n", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst {\n  aggregateTwoErrors,\n  codes: { ERR_MULTIPLE_CALLBACK },\n  AbortError\n} = require('../../ours/errors')\nconst { Symbol } = require('../../ours/primordials')\nconst { kDestroyed, isDestroyed, isFinished, isServerRequest } = require('./utils')\nconst kDestroy = Symbol('kDestroy')\nconst kConstruct = Symbol('kConstruct')\nfunction checkError(err, w, r) {\n  if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n  }\n}\n\n// Backwards compat. cb() is undocumented and unused in core but\n// unfortunately might be used by modules.\nfunction destroy(err, cb) {\n  const r = this._readableState\n  const w = this._writableState\n  // With duplex streams we use the writable side for state.\n  const s = w || r\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    if (typeof cb === 'function') {\n      cb()\n    }\n    return this\n  }\n\n  // We set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n  checkError(err, w, r)\n  if (w) {\n    w.destroyed = true\n  }\n  if (r) {\n    r.destroyed = true\n  }\n\n  // If still constructing then defer calling _destroy.\n  if (!s.constructed) {\n    this.once(kDestroy, function (er) {\n      _destroy(this, aggregateTwoErrors(er, err), cb)\n    })\n  } else {\n    _destroy(this, err, cb)\n  }\n  return this\n}\nfunction _destroy(self, err, cb) {\n  let called = false\n  function onDestroy(err) {\n    if (called) {\n      return\n    }\n    called = true\n    const r = self._readableState\n    const w = self._writableState\n    checkError(err, w, r)\n    if (w) {\n      w.closed = true\n    }\n    if (r) {\n      r.closed = true\n    }\n    if (typeof cb === 'function') {\n      cb(err)\n    }\n    if (err) {\n      process.nextTick(emitErrorCloseNT, self, err)\n    } else {\n      process.nextTick(emitCloseNT, self)\n    }\n  }\n  try {\n    self._destroy(err || null, onDestroy)\n  } catch (err) {\n    onDestroy(err)\n  }\n}\nfunction emitErrorCloseNT(self, err) {\n  emitErrorNT(self, err)\n  emitCloseNT(self)\n}\nfunction emitCloseNT(self) {\n  const r = self._readableState\n  const w = self._writableState\n  if (w) {\n    w.closeEmitted = true\n  }\n  if (r) {\n    r.closeEmitted = true\n  }\n  if ((w !== null && w !== undefined && w.emitClose) || (r !== null && r !== undefined && r.emitClose)) {\n    self.emit('close')\n  }\n}\nfunction emitErrorNT(self, err) {\n  const r = self._readableState\n  const w = self._writableState\n  if ((w !== null && w !== undefined && w.errorEmitted) || (r !== null && r !== undefined && r.errorEmitted)) {\n    return\n  }\n  if (w) {\n    w.errorEmitted = true\n  }\n  if (r) {\n    r.errorEmitted = true\n  }\n  self.emit('error', err)\n}\nfunction undestroy() {\n  const r = this._readableState\n  const w = this._writableState\n  if (r) {\n    r.constructed = true\n    r.closed = false\n    r.closeEmitted = false\n    r.destroyed = false\n    r.errored = null\n    r.errorEmitted = false\n    r.reading = false\n    r.ended = r.readable === false\n    r.endEmitted = r.readable === false\n  }\n  if (w) {\n    w.constructed = true\n    w.destroyed = false\n    w.closed = false\n    w.closeEmitted = false\n    w.errored = null\n    w.errorEmitted = false\n    w.finalCalled = false\n    w.prefinished = false\n    w.ended = w.writable === false\n    w.ending = w.writable === false\n    w.finished = w.writable === false\n  }\n}\nfunction errorOrDestroy(stream, err, sync) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  const r = stream._readableState\n  const w = stream._writableState\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    return this\n  }\n  if ((r !== null && r !== undefined && r.autoDestroy) || (w !== null && w !== undefined && w.autoDestroy))\n    stream.destroy(err)\n  else if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n    if (sync) {\n      process.nextTick(emitErrorNT, stream, err)\n    } else {\n      emitErrorNT(stream, err)\n    }\n  }\n}\nfunction construct(stream, cb) {\n  if (typeof stream._construct !== 'function') {\n    return\n  }\n  const r = stream._readableState\n  const w = stream._writableState\n  if (r) {\n    r.constructed = false\n  }\n  if (w) {\n    w.constructed = false\n  }\n  stream.once(kConstruct, cb)\n  if (stream.listenerCount(kConstruct) > 1) {\n    // Duplex\n    return\n  }\n  process.nextTick(constructNT, stream)\n}\nfunction constructNT(stream) {\n  let called = false\n  function onConstruct(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : new ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    const r = stream._readableState\n    const w = stream._writableState\n    const s = w || r\n    if (r) {\n      r.constructed = true\n    }\n    if (w) {\n      w.constructed = true\n    }\n    if (s.destroyed) {\n      stream.emit(kDestroy, err)\n    } else if (err) {\n      errorOrDestroy(stream, err, true)\n    } else {\n      process.nextTick(emitConstructNT, stream)\n    }\n  }\n  try {\n    stream._construct((err) => {\n      process.nextTick(onConstruct, err)\n    })\n  } catch (err) {\n    process.nextTick(onConstruct, err)\n  }\n}\nfunction emitConstructNT(stream) {\n  stream.emit(kConstruct)\n}\nfunction isRequest(stream) {\n  return (stream === null || stream === undefined ? undefined : stream.setHeader) && typeof stream.abort === 'function'\n}\nfunction emitCloseLegacy(stream) {\n  stream.emit('close')\n}\nfunction emitErrorCloseLegacy(stream, err) {\n  stream.emit('error', err)\n  process.nextTick(emitCloseLegacy, stream)\n}\n\n// Normalize destroy for legacy.\nfunction destroyer(stream, err) {\n  if (!stream || isDestroyed(stream)) {\n    return\n  }\n  if (!err && !isFinished(stream)) {\n    err = new AbortError()\n  }\n\n  // TODO: Remove isRequest branches.\n  if (isServerRequest(stream)) {\n    stream.socket = null\n    stream.destroy(err)\n  } else if (isRequest(stream)) {\n    stream.abort()\n  } else if (isRequest(stream.req)) {\n    stream.req.abort()\n  } else if (typeof stream.destroy === 'function') {\n    stream.destroy(err)\n  } else if (typeof stream.close === 'function') {\n    // TODO: Don't lose err?\n    stream.close()\n  } else if (err) {\n    process.nextTick(emitErrorCloseLegacy, stream, err)\n  } else {\n    process.nextTick(emitCloseLegacy, stream)\n  }\n  if (!stream.destroyed) {\n    stream[kDestroyed] = true\n  }\n}\nmodule.exports = {\n  construct,\n  destroyer,\n  destroy,\n  undestroy,\n  errorOrDestroy\n}\n", "'use strict'\n\nconst { ArrayIsArray, ObjectSetPrototypeOf } = require('../../ours/primordials')\nconst { EventEmitter: EE } = require('events')\nfunction Stream(opts) {\n  EE.call(this, opts)\n}\nObjectSetPrototypeOf(Stream.prototype, EE.prototype)\nObjectSetPrototypeOf(Stream, EE)\nStream.prototype.pipe = function (dest, options) {\n  const source = this\n  function ondata(chunk) {\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\n      source.pause()\n    }\n  }\n  source.on('data', ondata)\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume()\n    }\n  }\n  dest.on('drain', ondrain)\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend)\n    source.on('close', onclose)\n  }\n  let didOnEnd = false\n  function onend() {\n    if (didOnEnd) return\n    didOnEnd = true\n    dest.end()\n  }\n  function onclose() {\n    if (didOnEnd) return\n    didOnEnd = true\n    if (typeof dest.destroy === 'function') dest.destroy()\n  }\n\n  // Don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup()\n    if (EE.listenerCount(this, 'error') === 0) {\n      this.emit('error', er)\n    }\n  }\n  prependListener(source, 'error', onerror)\n  prependListener(dest, 'error', onerror)\n\n  // Remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata)\n    dest.removeListener('drain', ondrain)\n    source.removeListener('end', onend)\n    source.removeListener('close', onclose)\n    source.removeListener('error', onerror)\n    dest.removeListener('error', onerror)\n    source.removeListener('end', cleanup)\n    source.removeListener('close', cleanup)\n    dest.removeListener('close', cleanup)\n  }\n  source.on('end', cleanup)\n  source.on('close', cleanup)\n  dest.on('close', cleanup)\n  dest.emit('pipe', source)\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest\n}\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn)\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn)\n  else if (ArrayIsArray(emitter._events[event])) emitter._events[event].unshift(fn)\n  else emitter._events[event] = [fn, emitter._events[event]]\n}\nmodule.exports = {\n  Stream,\n  prependListener\n}\n", "'use strict'\n\nconst { AbortError, codes } = require('../../ours/errors')\nconst { isNodeStream, isWebStream, kControllerErrorFunction } = require('./utils')\nconst eos = require('./end-of-stream')\nconst { ERR_INVALID_ARG_TYPE } = codes\n\n// This method is inlined here for readable-stream\n// It also does not allow for signal to not exist on the stream\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\nconst validateAbortSignal = (signal, name) => {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n}\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\n  validateAbortSignal(signal, 'signal')\n  if (!isNodeStream(stream) && !isWebStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  return module.exports.addAbortSignalNoValidate(signal, stream)\n}\nmodule.exports.addAbortSignalNoValidate = function (signal, stream) {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    return stream\n  }\n  const onAbort = isNodeStream(stream)\n    ? () => {\n        stream.destroy(\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n    : () => {\n        stream[kControllerErrorFunction](\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n  if (signal.aborted) {\n    onAbort()\n  } else {\n    signal.addEventListener('abort', onAbort)\n    eos(stream, () => signal.removeEventListener('abort', onAbort))\n  }\n  return stream\n}\n", "'use strict'\n\nconst { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { inspect } = require('../../ours/util')\nmodule.exports = class BufferList {\n  constructor() {\n    this.head = null\n    this.tail = null\n    this.length = 0\n  }\n  push(v) {\n    const entry = {\n      data: v,\n      next: null\n    }\n    if (this.length > 0) this.tail.next = entry\n    else this.head = entry\n    this.tail = entry\n    ++this.length\n  }\n  unshift(v) {\n    const entry = {\n      data: v,\n      next: this.head\n    }\n    if (this.length === 0) this.tail = entry\n    this.head = entry\n    ++this.length\n  }\n  shift() {\n    if (this.length === 0) return\n    const ret = this.head.data\n    if (this.length === 1) this.head = this.tail = null\n    else this.head = this.head.next\n    --this.length\n    return ret\n  }\n  clear() {\n    this.head = this.tail = null\n    this.length = 0\n  }\n  join(s) {\n    if (this.length === 0) return ''\n    let p = this.head\n    let ret = '' + p.data\n    while ((p = p.next) !== null) ret += s + p.data\n    return ret\n  }\n  concat(n) {\n    if (this.length === 0) return Buffer.alloc(0)\n    const ret = Buffer.allocUnsafe(n >>> 0)\n    let p = this.head\n    let i = 0\n    while (p) {\n      TypedArrayPrototypeSet(ret, p.data, i)\n      i += p.data.length\n      p = p.next\n    }\n    return ret\n  }\n\n  // Consumes a specified amount of bytes or characters from the buffered data.\n  consume(n, hasStrings) {\n    const data = this.head.data\n    if (n < data.length) {\n      // `slice` is the same for buffers and strings.\n      const slice = data.slice(0, n)\n      this.head.data = data.slice(n)\n      return slice\n    }\n    if (n === data.length) {\n      // First chunk is a perfect match.\n      return this.shift()\n    }\n    // Result spans more than one buffer.\n    return hasStrings ? this._getString(n) : this._getBuffer(n)\n  }\n  first() {\n    return this.head.data\n  }\n  *[SymbolIterator]() {\n    for (let p = this.head; p; p = p.next) {\n      yield p.data\n    }\n  }\n\n  // Consumes a specified amount of characters from the buffered data.\n  _getString(n) {\n    let ret = ''\n    let p = this.head\n    let c = 0\n    do {\n      const str = p.data\n      if (n > str.length) {\n        ret += str\n        n -= str.length\n      } else {\n        if (n === str.length) {\n          ret += str\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          ret += StringPrototypeSlice(str, 0, n)\n          this.head = p\n          p.data = StringPrototypeSlice(str, n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Consumes a specified amount of bytes from the buffered data.\n  _getBuffer(n) {\n    const ret = Buffer.allocUnsafe(n)\n    const retLen = n\n    let p = this.head\n    let c = 0\n    do {\n      const buf = p.data\n      if (n > buf.length) {\n        TypedArrayPrototypeSet(ret, buf, retLen - n)\n        n -= buf.length\n      } else {\n        if (n === buf.length) {\n          TypedArrayPrototypeSet(ret, buf, retLen - n)\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          TypedArrayPrototypeSet(ret, new Uint8Array(buf.buffer, buf.byteOffset, n), retLen - n)\n          this.head = p\n          p.data = buf.slice(n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Make sure the linked list only shows the minimal necessary information.\n  [Symbol.for('nodejs.util.inspect.custom')](_, options) {\n    return inspect(this, {\n      ...options,\n      // Only inspect one level.\n      depth: 0,\n      // It should not recurse.\n      customInspect: false\n    })\n  }\n}\n", "'use strict'\n\nconst { MathFloor, NumberIsInteger } = require('../../ours/primordials')\nconst { ERR_INVALID_ARG_VALUE } = require('../../ours/errors').codes\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null\n}\nfunction getDefaultHighWaterMark(objectMode) {\n  return objectMode ? 16 : 16 * 1024\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey)\n  if (hwm != null) {\n    if (!NumberIsInteger(hwm) || hwm < 0) {\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark'\n      throw new ERR_INVALID_ARG_VALUE(name, hwm)\n    }\n    return MathFloor(hwm)\n  }\n\n  // Default value\n  return getDefaultHighWaterMark(state.objectMode)\n}\nmodule.exports = {\n  getHighWaterMark,\n  getDefaultHighWaterMark\n}\n", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_NULL_VALUES } = require('../../ours/errors').codes\nfunction from(Readable, iterable, opts) {\n  let iterator\n  if (typeof iterable === 'string' || iterable instanceof Buffer) {\n    return new Readable({\n      objectMode: true,\n      ...opts,\n      read() {\n        this.push(iterable)\n        this.push(null)\n      }\n    })\n  }\n  let isAsync\n  if (iterable && iterable[SymbolAsyncIterator]) {\n    isAsync = true\n    iterator = iterable[SymbolAsyncIterator]()\n  } else if (iterable && iterable[SymbolIterator]) {\n    isAsync = false\n    iterator = iterable[SymbolIterator]()\n  } else {\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable)\n  }\n  const readable = new Readable({\n    objectMode: true,\n    highWaterMark: 1,\n    // TODO(ronag): What options should be allowed?\n    ...opts\n  })\n\n  // Flag to protect against _read\n  // being called before last iteration completion.\n  let reading = false\n  readable._read = function () {\n    if (!reading) {\n      reading = true\n      next()\n    }\n  }\n  readable._destroy = function (error, cb) {\n    PromisePrototypeThen(\n      close(error),\n      () => process.nextTick(cb, error),\n      // nextTick is here in case cb throws\n      (e) => process.nextTick(cb, e || error)\n    )\n  }\n  async function close(error) {\n    const hadError = error !== undefined && error !== null\n    const hasThrow = typeof iterator.throw === 'function'\n    if (hadError && hasThrow) {\n      const { value, done } = await iterator.throw(error)\n      await value\n      if (done) {\n        return\n      }\n    }\n    if (typeof iterator.return === 'function') {\n      const { value } = await iterator.return()\n      await value\n    }\n  }\n  async function next() {\n    for (;;) {\n      try {\n        const { value, done } = isAsync ? await iterator.next() : iterator.next()\n        if (done) {\n          readable.push(null)\n        } else {\n          const res = value && typeof value.then === 'function' ? await value : value\n          if (res === null) {\n            reading = false\n            throw new ERR_STREAM_NULL_VALUES()\n          } else if (readable.push(res)) {\n            continue\n          } else {\n            reading = false\n          }\n        }\n      } catch (err) {\n        readable.destroy(err)\n      }\n      break\n    }\n  }\n  return readable\n}\nmodule.exports = from\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst {\n  ArrayPrototypeIndexOf,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberParseInt,\n  ObjectDefineProperties,\n  ObjectKeys,\n  ObjectSetPrototypeOf,\n  Promise,\n  SafeSet,\n  SymbolAsyncIterator,\n  Symbol\n} = require('../../ours/primordials')\nmodule.exports = Readable\nReadable.ReadableState = ReadableState\nconst { EventEmitter: EE } = require('events')\nconst { Stream, prependListener } = require('./legacy')\nconst { Buffer } = require('buffer')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst eos = require('./end-of-stream')\nlet debug = require('../../ours/util').debuglog('stream', (fn) => {\n  debug = fn\n})\nconst BufferList = require('./buffer_list')\nconst destroyImpl = require('./destroy')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_OUT_OF_RANGE,\n    ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT\n  }\n} = require('../../ours/errors')\nconst { validateObject } = require('../validators')\nconst kPaused = Symbol('kPaused')\nconst { StringDecoder } = require('string_decoder')\nconst from = require('./from')\nObjectSetPrototypeOf(Readable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Readable, Stream)\nconst nop = () => {}\nconst { errorOrDestroy } = destroyImpl\nfunction ReadableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.readableObjectMode)\n\n  // The point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift().\n  this.buffer = new BufferList()\n  this.length = 0\n  this.pipes = []\n  this.flowing = null\n  this.ended = false\n  this.endEmitted = false\n  this.reading = false\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true\n\n  // Whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false\n  this.emittedReadable = false\n  this.readableListening = false\n  this.resumeScheduled = false\n  this[kPaused] = null\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'end' (and potentially 'finish').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Has it been destroyed.\n  this.destroyed = false\n\n  // Indicates whether the stream has errored. When true no further\n  // _read calls, 'data' or 'readable' events should occur. This is needed\n  // since when autoDestroy is disabled we need a way to tell whether the\n  // stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Ref the piped dest which we need a drain event on it\n  // type: null | Writable | Set<Writable>.\n  this.awaitDrainWriters = null\n  this.multiAwaitDrain = false\n\n  // If true, a maybeReadMore has been scheduled.\n  this.readingMore = false\n  this.dataEmitted = false\n  this.decoder = null\n  this.encoding = null\n  if (options && options.encoding) {\n    this.decoder = new StringDecoder(options.encoding)\n    this.encoding = options.encoding\n  }\n}\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options)\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  this._readableState = new ReadableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal && !isDuplex) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    if (this._readableState.needReadable) {\n      maybeReadMore(this, this._readableState)\n    }\n  })\n}\nReadable.prototype.destroy = destroyImpl.destroy\nReadable.prototype._undestroy = destroyImpl.undestroy\nReadable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nReadable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, false)\n}\n\n// Unshift should *always* be something directly out of read().\nReadable.prototype.unshift = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, true)\n}\nfunction readableAddChunk(stream, chunk, encoding, addToFront) {\n  debug('readableAddChunk', chunk)\n  const state = stream._readableState\n  let err\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding\n      if (state.encoding !== encoding) {\n        if (addToFront && state.encoding) {\n          // When unshifting, if state.encoding is set, we have to save\n          // the string in the BufferList with the state encoding.\n          chunk = Buffer.from(chunk, encoding).toString(state.encoding)\n        } else {\n          chunk = Buffer.from(chunk, encoding)\n          encoding = ''\n        }\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = ''\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = ''\n    } else if (chunk != null) {\n      err = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  if (err) {\n    errorOrDestroy(stream, err)\n  } else if (chunk === null) {\n    state.reading = false\n    onEofChunk(stream, state)\n  } else if (state.objectMode || (chunk && chunk.length > 0)) {\n    if (addToFront) {\n      if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT())\n      else if (state.destroyed || state.errored) return false\n      else addChunk(stream, state, chunk, true)\n    } else if (state.ended) {\n      errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF())\n    } else if (state.destroyed || state.errored) {\n      return false\n    } else {\n      state.reading = false\n      if (state.decoder && !encoding) {\n        chunk = state.decoder.write(chunk)\n        if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false)\n        else maybeReadMore(stream, state)\n      } else {\n        addChunk(stream, state, chunk, false)\n      }\n    }\n  } else if (!addToFront) {\n    state.reading = false\n    maybeReadMore(stream, state)\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0)\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount('data') > 0) {\n    // Use the guard to avoid creating `Set()` repeatedly\n    // when we have multiple pipes.\n    if (state.multiAwaitDrain) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n    state.dataEmitted = true\n    stream.emit('data', chunk)\n  } else {\n    // Update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length\n    if (addToFront) state.buffer.unshift(chunk)\n    else state.buffer.push(chunk)\n    if (state.needReadable) emitReadable(stream)\n  }\n  maybeReadMore(stream, state)\n}\nReadable.prototype.isPaused = function () {\n  const state = this._readableState\n  return state[kPaused] === true || state.flowing === false\n}\n\n// Backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  const decoder = new StringDecoder(enc)\n  this._readableState.decoder = decoder\n  // If setEncoding(null), decoder.encoding equals utf8.\n  this._readableState.encoding = this._readableState.decoder.encoding\n  const buffer = this._readableState.buffer\n  // Iterate over current buffer to convert already stored Buffers:\n  let content = ''\n  for (const data of buffer) {\n    content += decoder.write(data)\n  }\n  buffer.clear()\n  if (content !== '') buffer.push(content)\n  this._readableState.length = content.length\n  return this\n}\n\n// Don't raise the hwm > 1GB.\nconst MAX_HWM = 0x40000000\nfunction computeNewHighWaterMark(n) {\n  if (n > MAX_HWM) {\n    throw new ERR_OUT_OF_RANGE('size', '<= 1GiB', n)\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts.\n    n--\n    n |= n >>> 1\n    n |= n >>> 2\n    n |= n >>> 4\n    n |= n >>> 8\n    n |= n >>> 16\n    n++\n  }\n  return n\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || (state.length === 0 && state.ended)) return 0\n  if (state.objectMode) return 1\n  if (NumberIsNaN(n)) {\n    // Only flow one buffer at a time.\n    if (state.flowing && state.length) return state.buffer.first().length\n    return state.length\n  }\n  if (n <= state.length) return n\n  return state.ended ? state.length : 0\n}\n\n// You can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n)\n  // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\n  // in this scenario, so we are doing it manually.\n  if (n === undefined) {\n    n = NaN\n  } else if (!NumberIsInteger(n)) {\n    n = NumberParseInt(n, 10)\n  }\n  const state = this._readableState\n  const nOrig = n\n\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n)\n  if (n !== 0) state.emittedReadable = false\n\n  // If we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (\n    n === 0 &&\n    state.needReadable &&\n    ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)\n  ) {\n    debug('read: emitReadable', state.length, state.ended)\n    if (state.length === 0 && state.ended) endReadable(this)\n    else emitReadable(this)\n    return null\n  }\n  n = howMuchToRead(n, state)\n\n  // If we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this)\n    return null\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  let doRead = state.needReadable\n  debug('need readable', doRead)\n\n  // If we currently have less than the highWaterMark, then also read some.\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true\n    debug('length less than watermark', doRead)\n  }\n\n  // However, if we've ended, then there's no point, if we're already\n  // reading, then it's unnecessary, if we're constructing we have to wait,\n  // and if we're destroyed or errored, then it's not allowed,\n  if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {\n    doRead = false\n    debug('reading, ended or constructing', doRead)\n  } else if (doRead) {\n    debug('do read')\n    state.reading = true\n    state.sync = true\n    // If the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true\n\n    // Call internal read method\n    try {\n      this._read(state.highWaterMark)\n    } catch (err) {\n      errorOrDestroy(this, err)\n    }\n    state.sync = false\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state)\n  }\n  let ret\n  if (n > 0) ret = fromList(n, state)\n  else ret = null\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark\n    n = 0\n  } else {\n    state.length -= n\n    if (state.multiAwaitDrain) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this)\n  }\n  if (ret !== null && !state.errorEmitted && !state.closeEmitted) {\n    state.dataEmitted = true\n    this.emit('data', ret)\n  }\n  return ret\n}\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk')\n  if (state.ended) return\n  if (state.decoder) {\n    const chunk = state.decoder.end()\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk)\n      state.length += state.objectMode ? 1 : chunk.length\n    }\n  }\n  state.ended = true\n  if (state.sync) {\n    // If we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call.\n    emitReadable(stream)\n  } else {\n    // Emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false\n    state.emittedReadable = true\n    // We have to emit readable now that we are EOF. Modules\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\n    emitReadable_(stream)\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  const state = stream._readableState\n  debug('emitReadable', state.needReadable, state.emittedReadable)\n  state.needReadable = false\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing)\n    state.emittedReadable = true\n    process.nextTick(emitReadable_, stream)\n  }\n}\nfunction emitReadable_(stream) {\n  const state = stream._readableState\n  debug('emitReadable_', state.destroyed, state.length, state.ended)\n  if (!state.destroyed && !state.errored && (state.length || state.ended)) {\n    stream.emit('readable')\n    state.emittedReadable = false\n  }\n\n  // The stream needs another readable event if:\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark\n  flow(stream)\n}\n\n// At this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore && state.constructed) {\n    state.readingMore = true\n    process.nextTick(maybeReadMore_, stream, state)\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (\n    !state.reading &&\n    !state.ended &&\n    (state.length < state.highWaterMark || (state.flowing && state.length === 0))\n  ) {\n    const len = state.length\n    debug('maybeReadMore read 0')\n    stream.read(0)\n    if (len === state.length)\n      // Didn't get any data, stop spinning.\n      break\n  }\n  state.readingMore = false\n}\n\n// Abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()')\n}\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  const src = this\n  const state = this._readableState\n  if (state.pipes.length === 1) {\n    if (!state.multiAwaitDrain) {\n      state.multiAwaitDrain = true\n      state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [state.awaitDrainWriters] : [])\n    }\n  }\n  state.pipes.push(dest)\n  debug('pipe count=%d opts=%j', state.pipes.length, pipeOpts)\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr\n  const endFn = doEnd ? onend : unpipe\n  if (state.endEmitted) process.nextTick(endFn)\n  else src.once('end', endFn)\n  dest.on('unpipe', onunpipe)\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe')\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true\n        cleanup()\n      }\n    }\n  }\n  function onend() {\n    debug('onend')\n    dest.end()\n  }\n  let ondrain\n  let cleanedUp = false\n  function cleanup() {\n    debug('cleanup')\n    // Cleanup event handlers once the pipe is broken.\n    dest.removeListener('close', onclose)\n    dest.removeListener('finish', onfinish)\n    if (ondrain) {\n      dest.removeListener('drain', ondrain)\n    }\n    dest.removeListener('error', onerror)\n    dest.removeListener('unpipe', onunpipe)\n    src.removeListener('end', onend)\n    src.removeListener('end', unpipe)\n    src.removeListener('data', ondata)\n    cleanedUp = true\n\n    // If the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) ondrain()\n  }\n  function pause() {\n    // If the user unpiped during `dest.write()`, it is possible\n    // to get stuck in a permanently paused state if that write\n    // also returned false.\n    // => Check whether `dest` is still a piping destination.\n    if (!cleanedUp) {\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\n        debug('false write response, pause', 0)\n        state.awaitDrainWriters = dest\n        state.multiAwaitDrain = false\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\n        debug('false write response, pause', state.awaitDrainWriters.size)\n        state.awaitDrainWriters.add(dest)\n      }\n      src.pause()\n    }\n    if (!ondrain) {\n      // When the dest drains, it reduces the awaitDrain counter\n      // on the source.  This would be more elegant with a .once()\n      // handler in flow(), but adding and removing repeatedly is\n      // too slow.\n      ondrain = pipeOnDrain(src, dest)\n      dest.on('drain', ondrain)\n    }\n  }\n  src.on('data', ondata)\n  function ondata(chunk) {\n    debug('ondata')\n    const ret = dest.write(chunk)\n    debug('dest.write', ret)\n    if (ret === false) {\n      pause()\n    }\n  }\n\n  // If the dest has an error, then stop piping into it.\n  // However, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er)\n    unpipe()\n    dest.removeListener('error', onerror)\n    if (dest.listenerCount('error') === 0) {\n      const s = dest._writableState || dest._readableState\n      if (s && !s.errorEmitted) {\n        // User incorrectly emitted 'error' directly on the stream.\n        errorOrDestroy(dest, er)\n      } else {\n        dest.emit('error', er)\n      }\n    }\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror)\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish)\n    unpipe()\n  }\n  dest.once('close', onclose)\n  function onfinish() {\n    debug('onfinish')\n    dest.removeListener('close', onclose)\n    unpipe()\n  }\n  dest.once('finish', onfinish)\n  function unpipe() {\n    debug('unpipe')\n    src.unpipe(dest)\n  }\n\n  // Tell the dest that it's being piped to.\n  dest.emit('pipe', src)\n\n  // Start the flow if it hasn't been started already.\n\n  if (dest.writableNeedDrain === true) {\n    if (state.flowing) {\n      pause()\n    }\n  } else if (!state.flowing) {\n    debug('pipe resume')\n    src.resume()\n  }\n  return dest\n}\nfunction pipeOnDrain(src, dest) {\n  return function pipeOnDrainFunctionResult() {\n    const state = src._readableState\n\n    // `ondrain` will call directly,\n    // `this` maybe not a reference to dest,\n    // so we use the real dest here.\n    if (state.awaitDrainWriters === dest) {\n      debug('pipeOnDrain', 1)\n      state.awaitDrainWriters = null\n    } else if (state.multiAwaitDrain) {\n      debug('pipeOnDrain', state.awaitDrainWriters.size)\n      state.awaitDrainWriters.delete(dest)\n    }\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount('data')) {\n      src.resume()\n    }\n  }\n}\nReadable.prototype.unpipe = function (dest) {\n  const state = this._readableState\n  const unpipeInfo = {\n    hasUnpiped: false\n  }\n\n  // If we're not piping anywhere, then do nothing.\n  if (state.pipes.length === 0) return this\n  if (!dest) {\n    // remove all.\n    const dests = state.pipes\n    state.pipes = []\n    this.pause()\n    for (let i = 0; i < dests.length; i++)\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      })\n    return this\n  }\n\n  // Try to find the right one.\n  const index = ArrayPrototypeIndexOf(state.pipes, dest)\n  if (index === -1) return this\n  state.pipes.splice(index, 1)\n  if (state.pipes.length === 0) this.pause()\n  dest.emit('unpipe', this, unpipeInfo)\n  return this\n}\n\n// Set up data events if they are asked for\n// Ensure readable listeners eventually get something.\nReadable.prototype.on = function (ev, fn) {\n  const res = Stream.prototype.on.call(this, ev, fn)\n  const state = this._readableState\n  if (ev === 'data') {\n    // Update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0\n\n    // Try start flowing on next tick if stream isn't explicitly paused.\n    if (state.flowing !== false) this.resume()\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true\n      state.flowing = false\n      state.emittedReadable = false\n      debug('on readable', state.length, state.reading)\n      if (state.length) {\n        emitReadable(this)\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this)\n      }\n    }\n  }\n  return res\n}\nReadable.prototype.addListener = Readable.prototype.on\nReadable.prototype.removeListener = function (ev, fn) {\n  const res = Stream.prototype.removeListener.call(this, ev, fn)\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nReadable.prototype.off = Readable.prototype.removeListener\nReadable.prototype.removeAllListeners = function (ev) {\n  const res = Stream.prototype.removeAllListeners.apply(this, arguments)\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nfunction updateReadableListening(self) {\n  const state = self._readableState\n  state.readableListening = self.listenerCount('readable') > 0\n  if (state.resumeScheduled && state[kPaused] === false) {\n    // Flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true\n\n    // Crude way to check if we should resume.\n  } else if (self.listenerCount('data') > 0) {\n    self.resume()\n  } else if (!state.readableListening) {\n    state.flowing = null\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0')\n  self.read(0)\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  const state = this._readableState\n  if (!state.flowing) {\n    debug('resume')\n    // We flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume().\n    state.flowing = !state.readableListening\n    resume(this, state)\n  }\n  state[kPaused] = false\n  return this\n}\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true\n    process.nextTick(resume_, stream, state)\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading)\n  if (!state.reading) {\n    stream.read(0)\n  }\n  state.resumeScheduled = false\n  stream.emit('resume')\n  flow(stream)\n  if (state.flowing && !state.reading) stream.read(0)\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing)\n  if (this._readableState.flowing !== false) {\n    debug('pause')\n    this._readableState.flowing = false\n    this.emit('pause')\n  }\n  this._readableState[kPaused] = true\n  return this\n}\nfunction flow(stream) {\n  const state = stream._readableState\n  debug('flow', state.flowing)\n  while (state.flowing && stream.read() !== null);\n}\n\n// Wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  let paused = false\n\n  // TODO (ronag): Should this.destroy(err) emit\n  // 'error' on the wrapped stream? Would require\n  // a static factory method, e.g. Readable.wrap(stream).\n\n  stream.on('data', (chunk) => {\n    if (!this.push(chunk) && stream.pause) {\n      paused = true\n      stream.pause()\n    }\n  })\n  stream.on('end', () => {\n    this.push(null)\n  })\n  stream.on('error', (err) => {\n    errorOrDestroy(this, err)\n  })\n  stream.on('close', () => {\n    this.destroy()\n  })\n  stream.on('destroy', () => {\n    this.destroy()\n  })\n  this._read = () => {\n    if (paused && stream.resume) {\n      paused = false\n      stream.resume()\n    }\n  }\n\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\n  const streamKeys = ObjectKeys(stream)\n  for (let j = 1; j < streamKeys.length; j++) {\n    const i = streamKeys[j]\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = stream[i].bind(stream)\n    }\n  }\n  return this\n}\nReadable.prototype[SymbolAsyncIterator] = function () {\n  return streamToAsyncIterator(this)\n}\nReadable.prototype.iterator = function (options) {\n  if (options !== undefined) {\n    validateObject(options, 'options')\n  }\n  return streamToAsyncIterator(this, options)\n}\nfunction streamToAsyncIterator(stream, options) {\n  if (typeof stream.read !== 'function') {\n    stream = Readable.wrap(stream, {\n      objectMode: true\n    })\n  }\n  const iter = createAsyncIterator(stream, options)\n  iter.stream = stream\n  return iter\n}\nasync function* createAsyncIterator(stream, options) {\n  let callback = nop\n  function next(resolve) {\n    if (this === stream) {\n      callback()\n      callback = nop\n    } else {\n      callback = resolve\n    }\n  }\n  stream.on('readable', next)\n  let error\n  const cleanup = eos(\n    stream,\n    {\n      writable: false\n    },\n    (err) => {\n      error = err ? aggregateTwoErrors(error, err) : null\n      callback()\n      callback = nop\n    }\n  )\n  try {\n    while (true) {\n      const chunk = stream.destroyed ? null : stream.read()\n      if (chunk !== null) {\n        yield chunk\n      } else if (error) {\n        throw error\n      } else if (error === null) {\n        return\n      } else {\n        await new Promise(next)\n      }\n    }\n  } catch (err) {\n    error = aggregateTwoErrors(error, err)\n    throw error\n  } finally {\n    if (\n      (error || (options === null || options === undefined ? undefined : options.destroyOnReturn) !== false) &&\n      (error === undefined || stream._readableState.autoDestroy)\n    ) {\n      destroyImpl.destroyer(stream, null)\n    } else {\n      stream.off('readable', next)\n      cleanup()\n    }\n  }\n}\n\n// Making it explicit these properties are not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail.\nObjectDefineProperties(Readable.prototype, {\n  readable: {\n    __proto__: null,\n    get() {\n      const r = this._readableState\n      // r.readable === false means that this is part of a Duplex stream\n      // where the readable side was disabled upon construction.\n      // Compat. The user might manually disable readable side through\n      // deprecated setter.\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted\n    },\n    set(val) {\n      // Backwards compat.\n      if (this._readableState) {\n        this._readableState.readable = !!val\n      }\n    }\n  },\n  readableDidRead: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.dataEmitted\n    }\n  },\n  readableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._readableState.readable !== false &&\n        (this._readableState.destroyed || this._readableState.errored) &&\n        !this._readableState.endEmitted\n      )\n    }\n  },\n  readableHighWaterMark: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.highWaterMark\n    }\n  },\n  readableBuffer: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState && this._readableState.buffer\n    }\n  },\n  readableFlowing: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.flowing\n    },\n    set: function (state) {\n      if (this._readableState) {\n        this._readableState.flowing = state\n      }\n    }\n  },\n  readableLength: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState.length\n    }\n  },\n  readableObjectMode: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.objectMode : false\n    }\n  },\n  readableEncoding: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.encoding : null\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.errored : null\n    }\n  },\n  closed: {\n    __proto__: null,\n    get() {\n      return this._readableState ? this._readableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.destroyed : false\n    },\n    set(value) {\n      // We ignore the value if the stream\n      // has not been initialized yet.\n      if (!this._readableState) {\n        return\n      }\n\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      this._readableState.destroyed = value\n    }\n  },\n  readableEnded: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.endEmitted : false\n    }\n  }\n})\nObjectDefineProperties(ReadableState.prototype, {\n  // Legacy getter for `pipesCount`.\n  pipesCount: {\n    __proto__: null,\n    get() {\n      return this.pipes.length\n    }\n  },\n  // Legacy property for `paused`.\n  paused: {\n    __proto__: null,\n    get() {\n      return this[kPaused] !== false\n    },\n    set(value) {\n      this[kPaused] = !!value\n    }\n  }\n})\n\n// Exposed for testing purposes only.\nReadable._fromList = fromList\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered.\n  if (state.length === 0) return null\n  let ret\n  if (state.objectMode) ret = state.buffer.shift()\n  else if (!n || n >= state.length) {\n    // Read it all, truncate the list.\n    if (state.decoder) ret = state.buffer.join('')\n    else if (state.buffer.length === 1) ret = state.buffer.first()\n    else ret = state.buffer.concat(state.length)\n    state.buffer.clear()\n  } else {\n    // read part of list.\n    ret = state.buffer.consume(n, state.decoder)\n  }\n  return ret\n}\nfunction endReadable(stream) {\n  const state = stream._readableState\n  debug('endReadable', state.endEmitted)\n  if (!state.endEmitted) {\n    state.ended = true\n    process.nextTick(endReadableNT, state, stream)\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length)\n\n  // Check that we didn't get one last unshift.\n  if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {\n    state.endEmitted = true\n    stream.emit('end')\n    if (stream.writable && stream.allowHalfOpen === false) {\n      process.nextTick(endWritableNT, stream)\n    } else if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well.\n      const wState = stream._writableState\n      const autoDestroy =\n        !wState ||\n        (wState.autoDestroy &&\n          // We don't expect the writable to ever 'finish'\n          // if writable is explicitly set to false.\n          (wState.finished || wState.writable === false))\n      if (autoDestroy) {\n        stream.destroy()\n      }\n    }\n  }\n}\nfunction endWritableNT(stream) {\n  const writable = stream.writable && !stream.writableEnded && !stream.destroyed\n  if (writable) {\n    stream.end()\n  }\n}\nReadable.from = function (iterable, opts) {\n  return from(Readable, iterable, opts)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nReadable.fromWeb = function (readableStream, options) {\n  return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options)\n}\nReadable.toWeb = function (streamReadable, options) {\n  return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options)\n}\nReadable.wrap = function (src, options) {\n  var _ref, _src$readableObjectMo\n  return new Readable({\n    objectMode:\n      (_ref =\n        (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== undefined\n          ? _src$readableObjectMo\n          : src.objectMode) !== null && _ref !== undefined\n        ? _ref\n        : true,\n    ...options,\n    destroy(err, callback) {\n      destroyImpl.destroyer(src, err)\n      callback(err)\n    }\n  }).wrap(src)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n;('use strict')\nconst {\n  ArrayPrototypeSlice,\n  Error,\n  FunctionPrototypeSymbolHasInstance,\n  ObjectDefineProperty,\n  ObjectDefineProperties,\n  ObjectSetPrototypeOf,\n  StringPrototypeToLowerCase,\n  Symbol,\n  SymbolHasInstance\n} = require('../../ours/primordials')\nmodule.exports = Writable\nWritable.WritableState = WritableState\nconst { EventEmitter: EE } = require('events')\nconst Stream = require('./legacy').Stream\nconst { Buffer } = require('buffer')\nconst destroyImpl = require('./destroy')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED,\n  ERR_STREAM_ALREADY_FINISHED,\n  ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING\n} = require('../../ours/errors').codes\nconst { errorOrDestroy } = destroyImpl\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Writable, Stream)\nfunction nop() {}\nconst kOnFinished = Symbol('kOnFinished')\nfunction WritableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode)\n\n  // The point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write().\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // if _final has been called.\n  this.finalCalled = false\n\n  // drain event flag.\n  this.needDrain = false\n  // At the start of calling end()\n  this.ending = false\n  // When end() has been called, and returned.\n  this.ended = false\n  // When 'finish' is emitted.\n  this.finished = false\n\n  // Has it been destroyed\n  this.destroyed = false\n\n  // Should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  const noDecode = !!(options && options.decodeStrings === false)\n  this.decodeStrings = !noDecode\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0\n\n  // A flag to see when we're in the middle of a write.\n  this.writing = false\n\n  // When true all writes will be buffered until .uncork() call.\n  this.corked = 0\n\n  // A flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true\n\n  // A flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false\n\n  // The callback that's passed to _write(chunk, cb).\n  this.onwrite = onwrite.bind(undefined, stream)\n\n  // The callback that the user supplies to write(chunk, encoding, cb).\n  this.writecb = null\n\n  // The amount that is being written when _write is called.\n  this.writelen = 0\n\n  // Storage for data passed to the afterWrite() callback in case of\n  // synchronous _write() completion.\n  this.afterWriteTickInfo = null\n  resetBuffer(this)\n\n  // Number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted.\n  this.pendingcb = 0\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // Emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams.\n  this.prefinished = false\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'finish' (and potentially 'end').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Indicates whether the stream has errored. When true all write() calls\n  // should return false. This is needed since when autoDestroy\n  // is disabled we need a way to tell whether the stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n  this[kOnFinished] = []\n}\nfunction resetBuffer(state) {\n  state.buffered = []\n  state.bufferedIndex = 0\n  state.allBuffers = true\n  state.allNoop = true\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  return ArrayPrototypeSlice(this.buffered, this.bufferedIndex)\n}\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\n  __proto__: null,\n  get() {\n    return this.buffered.length - this.bufferedIndex\n  }\n})\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options)\n  this._writableState = new WritableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write\n    if (typeof options.writev === 'function') this._writev = options.writev\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.final === 'function') this._final = options.final\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    const state = this._writableState\n    if (!state.writing) {\n      clearBuffer(this, state)\n    }\n    finishMaybe(this, state)\n  })\n}\nObjectDefineProperty(Writable, SymbolHasInstance, {\n  __proto__: null,\n  value: function (object) {\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true\n    if (this !== Writable) return false\n    return object && object._writableState instanceof WritableState\n  }\n})\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE())\n}\nfunction _write(stream, chunk, encoding, cb) {\n  const state = stream._writableState\n  if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = state.defaultEncoding\n  } else {\n    if (!encoding) encoding = state.defaultEncoding\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n    if (typeof cb !== 'function') cb = nop\n  }\n  if (chunk === null) {\n    throw new ERR_STREAM_NULL_VALUES()\n  } else if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      if (state.decodeStrings !== false) {\n        chunk = Buffer.from(chunk, encoding)\n        encoding = 'buffer'\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = 'buffer'\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = 'buffer'\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  let err\n  if (state.ending) {\n    err = new ERR_STREAM_WRITE_AFTER_END()\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('write')\n  }\n  if (err) {\n    process.nextTick(cb, err)\n    errorOrDestroy(stream, err, true)\n    return err\n  }\n  state.pendingcb++\n  return writeOrBuffer(stream, state, chunk, encoding, cb)\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  return _write(this, chunk, encoding, cb) === true\n}\nWritable.prototype.cork = function () {\n  this._writableState.corked++\n}\nWritable.prototype.uncork = function () {\n  const state = this._writableState\n  if (state.corked) {\n    state.corked--\n    if (!state.writing) clearBuffer(this, state)\n  }\n}\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = StringPrototypeToLowerCase(encoding)\n  if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n  this._writableState.defaultEncoding = encoding\n  return this\n}\n\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n  const len = state.objectMode ? 1 : chunk.length\n  state.length += len\n\n  // stream._write resets state.length\n  const ret = state.length < state.highWaterMark\n  // We must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true\n  if (state.writing || state.corked || state.errored || !state.constructed) {\n    state.buffered.push({\n      chunk,\n      encoding,\n      callback\n    })\n    if (state.allBuffers && encoding !== 'buffer') {\n      state.allBuffers = false\n    }\n    if (state.allNoop && callback !== nop) {\n      state.allNoop = false\n    }\n  } else {\n    state.writelen = len\n    state.writecb = callback\n    state.writing = true\n    state.sync = true\n    stream._write(chunk, encoding, state.onwrite)\n    state.sync = false\n  }\n\n  // Return false if errored or destroyed in order to break\n  // any synchronous while(stream.write(data)) loops.\n  return ret && !state.errored && !state.destroyed\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len\n  state.writecb = cb\n  state.writing = true\n  state.sync = true\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'))\n  else if (writev) stream._writev(chunk, state.onwrite)\n  else stream._write(chunk, encoding, state.onwrite)\n  state.sync = false\n}\nfunction onwriteError(stream, state, er, cb) {\n  --state.pendingcb\n  cb(er)\n  // Ensure callbacks are invoked even when autoDestroy is\n  // not enabled. Passing `er` here doesn't make sense since\n  // it's related to one specific write, not to the buffered\n  // writes.\n  errorBuffer(state)\n  // This can emit error, but error must always follow cb.\n  errorOrDestroy(stream, er)\n}\nfunction onwrite(stream, er) {\n  const state = stream._writableState\n  const sync = state.sync\n  const cb = state.writecb\n  if (typeof cb !== 'function') {\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK())\n    return\n  }\n  state.writing = false\n  state.writecb = null\n  state.length -= state.writelen\n  state.writelen = 0\n  if (er) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    er.stack // eslint-disable-line no-unused-expressions\n\n    if (!state.errored) {\n      state.errored = er\n    }\n\n    // In case of duplex streams we need to notify the readable side of the\n    // error.\n    if (stream._readableState && !stream._readableState.errored) {\n      stream._readableState.errored = er\n    }\n    if (sync) {\n      process.nextTick(onwriteError, stream, state, er, cb)\n    } else {\n      onwriteError(stream, state, er, cb)\n    }\n  } else {\n    if (state.buffered.length > state.bufferedIndex) {\n      clearBuffer(stream, state)\n    }\n    if (sync) {\n      // It is a common case that the callback passed to .write() is always\n      // the same. In that case, we do not schedule a new nextTick(), but\n      // rather just increase a counter, to improve performance and avoid\n      // memory allocations.\n      if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n        state.afterWriteTickInfo.count++\n      } else {\n        state.afterWriteTickInfo = {\n          count: 1,\n          cb,\n          stream,\n          state\n        }\n        process.nextTick(afterWriteTick, state.afterWriteTickInfo)\n      }\n    } else {\n      afterWrite(stream, state, 1, cb)\n    }\n  }\n}\nfunction afterWriteTick({ stream, state, count, cb }) {\n  state.afterWriteTickInfo = null\n  return afterWrite(stream, state, count, cb)\n}\nfunction afterWrite(stream, state, count, cb) {\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain\n  if (needDrain) {\n    state.needDrain = false\n    stream.emit('drain')\n  }\n  while (count-- > 0) {\n    state.pendingcb--\n    cb()\n  }\n  if (state.destroyed) {\n    errorBuffer(state)\n  }\n  finishMaybe(stream, state)\n}\n\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n  if (state.writing) {\n    return\n  }\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\n    var _state$errored\n    const { chunk, callback } = state.buffered[n]\n    const len = state.objectMode ? 1 : chunk.length\n    state.length -= len\n    callback(\n      (_state$errored = state.errored) !== null && _state$errored !== undefined\n        ? _state$errored\n        : new ERR_STREAM_DESTROYED('write')\n    )\n  }\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    var _state$errored2\n    onfinishCallbacks[i](\n      (_state$errored2 = state.errored) !== null && _state$errored2 !== undefined\n        ? _state$errored2\n        : new ERR_STREAM_DESTROYED('end')\n    )\n  }\n  resetBuffer(state)\n}\n\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n  if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n    return\n  }\n  const { buffered, bufferedIndex, objectMode } = state\n  const bufferedLength = buffered.length - bufferedIndex\n  if (!bufferedLength) {\n    return\n  }\n  let i = bufferedIndex\n  state.bufferProcessing = true\n  if (bufferedLength > 1 && stream._writev) {\n    state.pendingcb -= bufferedLength - 1\n    const callback = state.allNoop\n      ? nop\n      : (err) => {\n          for (let n = i; n < buffered.length; ++n) {\n            buffered[n].callback(err)\n          }\n        }\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\n    // since `doWrite` will mutate the array.\n    const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i)\n    chunks.allBuffers = state.allBuffers\n    doWrite(stream, state, true, state.length, chunks, '', callback)\n    resetBuffer(state)\n  } else {\n    do {\n      const { chunk, encoding, callback } = buffered[i]\n      buffered[i++] = null\n      const len = objectMode ? 1 : chunk.length\n      doWrite(stream, state, false, len, chunk, encoding, callback)\n    } while (i < buffered.length && !state.writing)\n    if (i === buffered.length) {\n      resetBuffer(state)\n    } else if (i > 256) {\n      buffered.splice(0, i)\n      state.bufferedIndex = 0\n    } else {\n      state.bufferedIndex = i\n    }\n  }\n  state.bufferProcessing = false\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  if (this._writev) {\n    this._writev(\n      [\n        {\n          chunk,\n          encoding\n        }\n      ],\n      cb\n    )\n  } else {\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()')\n  }\n}\nWritable.prototype._writev = null\nWritable.prototype.end = function (chunk, encoding, cb) {\n  const state = this._writableState\n  if (typeof chunk === 'function') {\n    cb = chunk\n    chunk = null\n    encoding = null\n  } else if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = null\n  }\n  let err\n  if (chunk !== null && chunk !== undefined) {\n    const ret = _write(this, chunk, encoding)\n    if (ret instanceof Error) {\n      err = ret\n    }\n  }\n\n  // .end() fully uncorks.\n  if (state.corked) {\n    state.corked = 1\n    this.uncork()\n  }\n  if (err) {\n    // Do nothing...\n  } else if (!state.errored && !state.ending) {\n    // This is forgiving in terms of unnecessary calls to end() and can hide\n    // logic errors. However, usually such errors are harmless and causing a\n    // hard error can be disproportionately destructive. It is not always\n    // trivial for the user to determine whether end() needs to be called\n    // or not.\n\n    state.ending = true\n    finishMaybe(this, state, true)\n    state.ended = true\n  } else if (state.finished) {\n    err = new ERR_STREAM_ALREADY_FINISHED('end')\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('end')\n  }\n  if (typeof cb === 'function') {\n    if (err || state.finished) {\n      process.nextTick(cb, err)\n    } else {\n      state[kOnFinished].push(cb)\n    }\n  }\n  return this\n}\nfunction needFinish(state) {\n  return (\n    state.ending &&\n    !state.destroyed &&\n    state.constructed &&\n    state.length === 0 &&\n    !state.errored &&\n    state.buffered.length === 0 &&\n    !state.finished &&\n    !state.writing &&\n    !state.errorEmitted &&\n    !state.closeEmitted\n  )\n}\nfunction callFinal(stream, state) {\n  let called = false\n  function onFinish(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    state.pendingcb--\n    if (err) {\n      const onfinishCallbacks = state[kOnFinished].splice(0)\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\n        onfinishCallbacks[i](err)\n      }\n      errorOrDestroy(stream, err, state.sync)\n    } else if (needFinish(state)) {\n      state.prefinished = true\n      stream.emit('prefinish')\n      // Backwards compat. Don't check state.sync here.\n      // Some streams assume 'finish' will be emitted\n      // asynchronously relative to _final callback.\n      state.pendingcb++\n      process.nextTick(finish, stream, state)\n    }\n  }\n  state.sync = true\n  state.pendingcb++\n  try {\n    stream._final(onFinish)\n  } catch (err) {\n    onFinish(err)\n  }\n  state.sync = false\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.finalCalled = true\n      callFinal(stream, state)\n    } else {\n      state.prefinished = true\n      stream.emit('prefinish')\n    }\n  }\n}\nfunction finishMaybe(stream, state, sync) {\n  if (needFinish(state)) {\n    prefinish(stream, state)\n    if (state.pendingcb === 0) {\n      if (sync) {\n        state.pendingcb++\n        process.nextTick(\n          (stream, state) => {\n            if (needFinish(state)) {\n              finish(stream, state)\n            } else {\n              state.pendingcb--\n            }\n          },\n          stream,\n          state\n        )\n      } else if (needFinish(state)) {\n        state.pendingcb++\n        finish(stream, state)\n      }\n    }\n  }\n}\nfunction finish(stream, state) {\n  state.pendingcb--\n  state.finished = true\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    onfinishCallbacks[i]()\n  }\n  stream.emit('finish')\n  if (state.autoDestroy) {\n    // In case of duplex streams we need a way to detect\n    // if the readable side is ready for autoDestroy as well.\n    const rState = stream._readableState\n    const autoDestroy =\n      !rState ||\n      (rState.autoDestroy &&\n        // We don't expect the readable to ever 'end'\n        // if readable is explicitly set to false.\n        (rState.endEmitted || rState.readable === false))\n    if (autoDestroy) {\n      stream.destroy()\n    }\n  }\n}\nObjectDefineProperties(Writable.prototype, {\n  closed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.destroyed : false\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly managing destroyed.\n      if (this._writableState) {\n        this._writableState.destroyed = value\n      }\n    }\n  },\n  writable: {\n    __proto__: null,\n    get() {\n      const w = this._writableState\n      // w.writable === false means that this is part of a Duplex stream\n      // where the writable side was disabled upon construction.\n      // Compat. The user might manually disable writable side through\n      // deprecated setter.\n      return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended\n    },\n    set(val) {\n      // Backwards compatible.\n      if (this._writableState) {\n        this._writableState.writable = !!val\n      }\n    }\n  },\n  writableFinished: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.finished : false\n    }\n  },\n  writableObjectMode: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.objectMode : false\n    }\n  },\n  writableBuffer: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.getBuffer()\n    }\n  },\n  writableEnded: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.ending : false\n    }\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    get() {\n      const wState = this._writableState\n      if (!wState) return false\n      return !wState.destroyed && !wState.ending && wState.needDrain\n    }\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.highWaterMark\n    }\n  },\n  writableCorked: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.corked : 0\n    }\n  },\n  writableLength: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.length\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._writableState ? this._writableState.errored : null\n    }\n  },\n  writableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._writableState.writable !== false &&\n        (this._writableState.destroyed || this._writableState.errored) &&\n        !this._writableState.finished\n      )\n    }\n  }\n})\nconst destroy = destroyImpl.destroy\nWritable.prototype.destroy = function (err, cb) {\n  const state = this._writableState\n\n  // Invoke pending callbacks.\n  if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n    process.nextTick(errorBuffer, state)\n  }\n  destroy.call(this, err, cb)\n  return this\n}\nWritable.prototype._undestroy = destroyImpl.undestroy\nWritable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nWritable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nWritable.fromWeb = function (writableStream, options) {\n  return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options)\n}\nWritable.toWeb = function (streamWritable) {\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\n;('use strict')\nconst bufferModule = require('buffer')\nconst {\n  isReadable,\n  isWritable,\n  isIterable,\n  isNodeStream,\n  isReadableNodeStream,\n  isWritableNodeStream,\n  isDuplexNodeStream\n} = require('./utils')\nconst eos = require('./end-of-stream')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE }\n} = require('../../ours/errors')\nconst { destroyer } = require('./destroy')\nconst Duplex = require('./duplex')\nconst Readable = require('./readable')\nconst { createDeferredPromise } = require('../../ours/util')\nconst from = require('./from')\nconst Blob = globalThis.Blob || bufferModule.Blob\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst { FunctionPrototypeCall } = require('../../ours/primordials')\n\n// This is needed for pre node 17.\nclass Duplexify extends Duplex {\n  constructor(options) {\n    super(options)\n\n    // https://github.com/nodejs/node/pull/34385\n\n    if ((options === null || options === undefined ? undefined : options.readable) === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if ((options === null || options === undefined ? undefined : options.writable) === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  }\n}\nmodule.exports = function duplexify(body, name) {\n  if (isDuplexNodeStream(body)) {\n    return body\n  }\n  if (isReadableNodeStream(body)) {\n    return _duplexify({\n      readable: body\n    })\n  }\n  if (isWritableNodeStream(body)) {\n    return _duplexify({\n      writable: body\n    })\n  }\n  if (isNodeStream(body)) {\n    return _duplexify({\n      writable: false,\n      readable: false\n    })\n  }\n\n  // TODO: Webstreams\n  // if (isReadableStream(body)) {\n  //   return _duplexify({ readable: Readable.fromWeb(body) });\n  // }\n\n  // TODO: Webstreams\n  // if (isWritableStream(body)) {\n  //   return _duplexify({ writable: Writable.fromWeb(body) });\n  // }\n\n  if (typeof body === 'function') {\n    const { value, write, final, destroy } = fromAsyncGen(body)\n    if (isIterable(value)) {\n      return from(Duplexify, value, {\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        write,\n        final,\n        destroy\n      })\n    }\n    const then = value === null || value === undefined ? undefined : value.then\n    if (typeof then === 'function') {\n      let d\n      const promise = FunctionPrototypeCall(\n        then,\n        value,\n        (val) => {\n          if (val != null) {\n            throw new ERR_INVALID_RETURN_VALUE('nully', 'body', val)\n          }\n        },\n        (err) => {\n          destroyer(d, err)\n        }\n      )\n      return (d = new Duplexify({\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        readable: false,\n        write,\n        final(cb) {\n          final(async () => {\n            try {\n              await promise\n              process.nextTick(cb, null)\n            } catch (err) {\n              process.nextTick(cb, err)\n            }\n          })\n        },\n        destroy\n      }))\n    }\n    throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or AsyncFunction', name, value)\n  }\n  if (isBlob(body)) {\n    return duplexify(body.arrayBuffer())\n  }\n  if (isIterable(body)) {\n    return from(Duplexify, body, {\n      // TODO (ronag): highWaterMark?\n      objectMode: true,\n      writable: false\n    })\n  }\n\n  // TODO: Webstreams.\n  // if (\n  //   isReadableStream(body?.readable) &&\n  //   isWritableStream(body?.writable)\n  // ) {\n  //   return Duplexify.fromWeb(body);\n  // }\n\n  if (\n    typeof (body === null || body === undefined ? undefined : body.writable) === 'object' ||\n    typeof (body === null || body === undefined ? undefined : body.readable) === 'object'\n  ) {\n    const readable =\n      body !== null && body !== undefined && body.readable\n        ? isReadableNodeStream(body === null || body === undefined ? undefined : body.readable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.readable\n          : duplexify(body.readable)\n        : undefined\n    const writable =\n      body !== null && body !== undefined && body.writable\n        ? isWritableNodeStream(body === null || body === undefined ? undefined : body.writable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.writable\n          : duplexify(body.writable)\n        : undefined\n    return _duplexify({\n      readable,\n      writable\n    })\n  }\n  const then = body === null || body === undefined ? undefined : body.then\n  if (typeof then === 'function') {\n    let d\n    FunctionPrototypeCall(\n      then,\n      body,\n      (val) => {\n        if (val != null) {\n          d.push(val)\n        }\n        d.push(null)\n      },\n      (err) => {\n        destroyer(d, err)\n      }\n    )\n    return (d = new Duplexify({\n      objectMode: true,\n      writable: false,\n      read() {}\n    }))\n  }\n  throw new ERR_INVALID_ARG_TYPE(\n    name,\n    [\n      'Blob',\n      'ReadableStream',\n      'WritableStream',\n      'Stream',\n      'Iterable',\n      'AsyncIterable',\n      'Function',\n      '{ readable, writable } pair',\n      'Promise'\n    ],\n    body\n  )\n}\nfunction fromAsyncGen(fn) {\n  let { promise, resolve } = createDeferredPromise()\n  const ac = new AbortController()\n  const signal = ac.signal\n  const value = fn(\n    (async function* () {\n      while (true) {\n        const _promise = promise\n        promise = null\n        const { chunk, done, cb } = await _promise\n        process.nextTick(cb)\n        if (done) return\n        if (signal.aborted)\n          throw new AbortError(undefined, {\n            cause: signal.reason\n          })\n        ;({ promise, resolve } = createDeferredPromise())\n        yield chunk\n      }\n    })(),\n    {\n      signal\n    }\n  )\n  return {\n    value,\n    write(chunk, encoding, cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        chunk,\n        done: false,\n        cb\n      })\n    },\n    final(cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        done: true,\n        cb\n      })\n    },\n    destroy(err, cb) {\n      ac.abort()\n      cb(err)\n    }\n  }\n}\nfunction _duplexify(pair) {\n  const r = pair.readable && typeof pair.readable.read !== 'function' ? Readable.wrap(pair.readable) : pair.readable\n  const w = pair.writable\n  let readable = !!isReadable(r)\n  let writable = !!isWritable(w)\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    }\n  }\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplexify({\n    // TODO (ronag): highWaterMark?\n    readableObjectMode: !!(r !== null && r !== undefined && r.readableObjectMode),\n    writableObjectMode: !!(w !== null && w !== undefined && w.writableObjectMode),\n    readable,\n    writable\n  })\n  if (writable) {\n    eos(w, (err) => {\n      writable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    d._write = function (chunk, encoding, callback) {\n      if (w.write(chunk, encoding)) {\n        callback()\n      } else {\n        ondrain = callback\n      }\n    }\n    d._final = function (callback) {\n      w.end()\n      onfinish = callback\n    }\n    w.on('drain', function () {\n      if (ondrain) {\n        const cb = ondrain\n        ondrain = null\n        cb()\n      }\n    })\n    w.on('finish', function () {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    eos(r, (err) => {\n      readable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    r.on('readable', function () {\n      if (onreadable) {\n        const cb = onreadable\n        onreadable = null\n        cb()\n      }\n    })\n    r.on('end', function () {\n      d.push(null)\n    })\n    d._read = function () {\n      while (true) {\n        const buf = r.read()\n        if (buf === null) {\n          onreadable = d._read\n          return\n        }\n        if (!d.push(buf)) {\n          return\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      destroyer(w, err)\n      destroyer(r, err)\n    }\n  }\n  return d\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototype inheritance, this class\n// prototypically inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict'\n\nconst {\n  ObjectDefineProperties,\n  ObjectGetOwnPropertyDescriptor,\n  ObjectKeys,\n  ObjectSetPrototypeOf\n} = require('../../ours/primordials')\nmodule.exports = Duplex\nconst Readable = require('./readable')\nconst Writable = require('./writable')\nObjectSetPrototypeOf(Duplex.prototype, Readable.prototype)\nObjectSetPrototypeOf(Duplex, Readable)\n{\n  const keys = ObjectKeys(Writable.prototype)\n  // Allow the keys array to be GC'ed.\n  for (let i = 0; i < keys.length; i++) {\n    const method = keys[i]\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method]\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options)\n  Readable.call(this, options)\n  Writable.call(this, options)\n  if (options) {\n    this.allowHalfOpen = options.allowHalfOpen !== false\n    if (options.readable === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if (options.writable === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  } else {\n    this.allowHalfOpen = true\n  }\n}\nObjectDefineProperties(Duplex.prototype, {\n  writable: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writable')\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableHighWaterMark')\n  },\n  writableObjectMode: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableObjectMode')\n  },\n  writableBuffer: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableBuffer')\n  },\n  writableLength: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableLength')\n  },\n  writableFinished: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableFinished')\n  },\n  writableCorked: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableCorked')\n  },\n  writableEnded: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableEnded')\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableNeedDrain')\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      if (this._readableState === undefined || this._writableState === undefined) {\n        return false\n      }\n      return this._readableState.destroyed && this._writableState.destroyed\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      if (this._readableState && this._writableState) {\n        this._readableState.destroyed = value\n        this._writableState.destroyed = value\n      }\n    }\n  }\n})\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nDuplex.fromWeb = function (pair, options) {\n  return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options)\n}\nDuplex.toWeb = function (duplex) {\n  return lazyWebStreams().newReadableWritablePairFromDuplex(duplex)\n}\nlet duplexify\nDuplex.from = function (body) {\n  if (!duplexify) {\n    duplexify = require('./duplexify')\n  }\n  return duplexify(body, 'body')\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf, Symbol } = require('../../ours/primordials')\nmodule.exports = Transform\nconst { ERR_METHOD_NOT_IMPLEMENTED } = require('../../ours/errors').codes\nconst Duplex = require('./duplex')\nconst { getHighWaterMark } = require('./state')\nObjectSetPrototypeOf(Transform.prototype, Duplex.prototype)\nObjectSetPrototypeOf(Transform, Duplex)\nconst kCallback = Symbol('kCallback')\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options)\n\n  // TODO (ronag): This should preferably always be\n  // applied but would be semver-major. Or even better;\n  // make Transform a Readable with the Writable interface.\n  const readableHighWaterMark = options ? getHighWaterMark(this, options, 'readableHighWaterMark', true) : null\n  if (readableHighWaterMark === 0) {\n    // A Duplex will buffer both on the writable and readable side while\n    // a Transform just wants to buffer hwm number of elements. To avoid\n    // buffering twice we disable buffering on the writable side.\n    options = {\n      ...options,\n      highWaterMark: null,\n      readableHighWaterMark,\n      // TODO (ronag): 0 is not optimal since we have\n      // a \"bug\" where we check needDrain before calling _write and not after.\n      // Refs: https://github.com/nodejs/node/pull/32887\n      // Refs: https://github.com/nodejs/node/pull/35941\n      writableHighWaterMark: options.writableHighWaterMark || 0\n    }\n  }\n  Duplex.call(this, options)\n\n  // We have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false\n  this[kCallback] = null\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform\n    if (typeof options.flush === 'function') this._flush = options.flush\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  // Backwards compat. Some Transform streams incorrectly implement _final\n  // instead of or in addition to _flush. By using 'prefinish' instead of\n  // implementing _final we continue supporting this unfortunate use case.\n  this.on('prefinish', prefinish)\n}\nfunction final(cb) {\n  if (typeof this._flush === 'function' && !this.destroyed) {\n    this._flush((er, data) => {\n      if (er) {\n        if (cb) {\n          cb(er)\n        } else {\n          this.destroy(er)\n        }\n        return\n      }\n      if (data != null) {\n        this.push(data)\n      }\n      this.push(null)\n      if (cb) {\n        cb()\n      }\n    })\n  } else {\n    this.push(null)\n    if (cb) {\n      cb()\n    }\n  }\n}\nfunction prefinish() {\n  if (this._final !== final) {\n    final.call(this)\n  }\n}\nTransform.prototype._final = final\nTransform.prototype._transform = function (chunk, encoding, callback) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_transform()')\n}\nTransform.prototype._write = function (chunk, encoding, callback) {\n  const rState = this._readableState\n  const wState = this._writableState\n  const length = rState.length\n  this._transform(chunk, encoding, (err, val) => {\n    if (err) {\n      callback(err)\n      return\n    }\n    if (val != null) {\n      this.push(val)\n    }\n    if (\n      wState.ended ||\n      // Backwards compat.\n      length === rState.length ||\n      // Backwards compat.\n      rState.length < rState.highWaterMark\n    ) {\n      callback()\n    } else {\n      this[kCallback] = callback\n    }\n  })\n}\nTransform.prototype._read = function () {\n  if (this[kCallback]) {\n    const callback = this[kCallback]\n    this[kCallback] = null\n    callback()\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf } = require('../../ours/primordials')\nmodule.exports = PassThrough\nconst Transform = require('./transform')\nObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype)\nObjectSetPrototypeOf(PassThrough, Transform)\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options)\n  Transform.call(this, options)\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { ArrayIsArray, Promise, SymbolAsyncIterator } = require('../../ours/primordials')\nconst eos = require('./end-of-stream')\nconst { once } = require('../../ours/util')\nconst destroyImpl = require('./destroy')\nconst Duplex = require('./duplex')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_INVALID_RETURN_VALUE,\n    ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED,\n    ERR_STREAM_PREMATURE_CLOSE\n  },\n  AbortError\n} = require('../../ours/errors')\nconst { validateFunction, validateAbortSignal } = require('../validators')\nconst {\n  isIterable,\n  isReadable,\n  isReadableNodeStream,\n  isNodeStream,\n  isTransformStream,\n  isWebStream,\n  isReadableStream,\n  isReadableEnded\n} = require('./utils')\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nlet PassThrough\nlet Readable\nfunction destroyer(stream, reading, writing) {\n  let finished = false\n  stream.on('close', () => {\n    finished = true\n  })\n  const cleanup = eos(\n    stream,\n    {\n      readable: reading,\n      writable: writing\n    },\n    (err) => {\n      finished = !err\n    }\n  )\n  return {\n    destroy: (err) => {\n      if (finished) return\n      finished = true\n      destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED('pipe'))\n    },\n    cleanup\n  }\n}\nfunction popCallback(streams) {\n  // Streams should never be an empty array. It should always contain at least\n  // a single stream. Therefore optimize for the average case instead of\n  // checking for length === 0 as well.\n  validateFunction(streams[streams.length - 1], 'streams[stream.length - 1]')\n  return streams.pop()\n}\nfunction makeAsyncIterable(val) {\n  if (isIterable(val)) {\n    return val\n  } else if (isReadableNodeStream(val)) {\n    // Legacy streams are not Iterable.\n    return fromReadable(val)\n  }\n  throw new ERR_INVALID_ARG_TYPE('val', ['Readable', 'Iterable', 'AsyncIterable'], val)\n}\nasync function* fromReadable(val) {\n  if (!Readable) {\n    Readable = require('./readable')\n  }\n  yield* Readable.prototype[SymbolAsyncIterator].call(val)\n}\nasync function pumpToNode(iterable, writable, finish, { end }) {\n  let error\n  let onresolve = null\n  const resume = (err) => {\n    if (err) {\n      error = err\n    }\n    if (onresolve) {\n      const callback = onresolve\n      onresolve = null\n      callback()\n    }\n  }\n  const wait = () =>\n    new Promise((resolve, reject) => {\n      if (error) {\n        reject(error)\n      } else {\n        onresolve = () => {\n          if (error) {\n            reject(error)\n          } else {\n            resolve()\n          }\n        }\n      }\n    })\n  writable.on('drain', resume)\n  const cleanup = eos(\n    writable,\n    {\n      readable: false\n    },\n    resume\n  )\n  try {\n    if (writable.writableNeedDrain) {\n      await wait()\n    }\n    for await (const chunk of iterable) {\n      if (!writable.write(chunk)) {\n        await wait()\n      }\n    }\n    if (end) {\n      writable.end()\n    }\n    await wait()\n    finish()\n  } catch (err) {\n    finish(error !== err ? aggregateTwoErrors(error, err) : err)\n  } finally {\n    cleanup()\n    writable.off('drain', resume)\n  }\n}\nasync function pumpToWeb(readable, writable, finish, { end }) {\n  if (isTransformStream(writable)) {\n    writable = writable.writable\n  }\n  // https://streams.spec.whatwg.org/#example-manual-write-with-backpressure\n  const writer = writable.getWriter()\n  try {\n    for await (const chunk of readable) {\n      await writer.ready\n      writer.write(chunk).catch(() => {})\n    }\n    await writer.ready\n    if (end) {\n      await writer.close()\n    }\n    finish()\n  } catch (err) {\n    try {\n      await writer.abort(err)\n      finish(err)\n    } catch (err) {\n      finish(err)\n    }\n  }\n}\nfunction pipeline(...streams) {\n  return pipelineImpl(streams, once(popCallback(streams)))\n}\nfunction pipelineImpl(streams, callback, opts) {\n  if (streams.length === 1 && ArrayIsArray(streams[0])) {\n    streams = streams[0]\n  }\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  const outerSignal = opts === null || opts === undefined ? undefined : opts.signal\n\n  // Need to cleanup event listeners if last stream is readable\n  // https://github.com/nodejs/node/issues/35452\n  const lastStreamCleanup = []\n  validateAbortSignal(outerSignal, 'options.signal')\n  function abort() {\n    finishImpl(new AbortError())\n  }\n  outerSignal === null || outerSignal === undefined ? undefined : outerSignal.addEventListener('abort', abort)\n  let error\n  let value\n  const destroys = []\n  let finishCount = 0\n  function finish(err) {\n    finishImpl(err, --finishCount === 0)\n  }\n  function finishImpl(err, final) {\n    if (err && (!error || error.code === 'ERR_STREAM_PREMATURE_CLOSE')) {\n      error = err\n    }\n    if (!error && !final) {\n      return\n    }\n    while (destroys.length) {\n      destroys.shift()(error)\n    }\n    outerSignal === null || outerSignal === undefined ? undefined : outerSignal.removeEventListener('abort', abort)\n    ac.abort()\n    if (final) {\n      if (!error) {\n        lastStreamCleanup.forEach((fn) => fn())\n      }\n      process.nextTick(callback, error, value)\n    }\n  }\n  let ret\n  for (let i = 0; i < streams.length; i++) {\n    const stream = streams[i]\n    const reading = i < streams.length - 1\n    const writing = i > 0\n    const end = reading || (opts === null || opts === undefined ? undefined : opts.end) !== false\n    const isLastStream = i === streams.length - 1\n    if (isNodeStream(stream)) {\n      if (end) {\n        const { destroy, cleanup } = destroyer(stream, reading, writing)\n        destroys.push(destroy)\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n\n      // Catch stream errors that occur after pipe/pump has completed.\n      function onError(err) {\n        if (err && err.name !== 'AbortError' && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n          finish(err)\n        }\n      }\n      stream.on('error', onError)\n      if (isReadable(stream) && isLastStream) {\n        lastStreamCleanup.push(() => {\n          stream.removeListener('error', onError)\n        })\n      }\n    }\n    if (i === 0) {\n      if (typeof stream === 'function') {\n        ret = stream({\n          signal\n        })\n        if (!isIterable(ret)) {\n          throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or Stream', 'source', ret)\n        }\n      } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {\n        ret = stream\n      } else {\n        ret = Duplex.from(stream)\n      }\n    } else if (typeof stream === 'function') {\n      if (isTransformStream(ret)) {\n        var _ret\n        ret = makeAsyncIterable((_ret = ret) === null || _ret === undefined ? undefined : _ret.readable)\n      } else {\n        ret = makeAsyncIterable(ret)\n      }\n      ret = stream(ret, {\n        signal\n      })\n      if (reading) {\n        if (!isIterable(ret, true)) {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable', `transform[${i - 1}]`, ret)\n        }\n      } else {\n        var _ret2\n        if (!PassThrough) {\n          PassThrough = require('./passthrough')\n        }\n\n        // If the last argument to pipeline is not a stream\n        // we must create a proxy stream so that pipeline(...)\n        // always returns a stream which can be further\n        // composed through `.pipe(stream)`.\n\n        const pt = new PassThrough({\n          objectMode: true\n        })\n\n        // Handle Promises/A+ spec, `then` could be a getter that throws on\n        // second use.\n        const then = (_ret2 = ret) === null || _ret2 === undefined ? undefined : _ret2.then\n        if (typeof then === 'function') {\n          finishCount++\n          then.call(\n            ret,\n            (val) => {\n              value = val\n              if (val != null) {\n                pt.write(val)\n              }\n              if (end) {\n                pt.end()\n              }\n              process.nextTick(finish)\n            },\n            (err) => {\n              pt.destroy(err)\n              process.nextTick(finish, err)\n            }\n          )\n        } else if (isIterable(ret, true)) {\n          finishCount++\n          pumpToNode(ret, pt, finish, {\n            end\n          })\n        } else if (isReadableStream(ret) || isTransformStream(ret)) {\n          const toRead = ret.readable || ret\n          finishCount++\n          pumpToNode(toRead, pt, finish, {\n            end\n          })\n        } else {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable or Promise', 'destination', ret)\n        }\n        ret = pt\n        const { destroy, cleanup } = destroyer(ret, false, true)\n        destroys.push(destroy)\n        if (isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n    } else if (isNodeStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount += 2\n        const cleanup = pipe(ret, stream, finish, {\n          end\n        })\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      } else if (isTransformStream(ret) || isReadableStream(ret)) {\n        const toRead = ret.readable || ret\n        finishCount++\n        pumpToNode(toRead, stream, finish, {\n          end\n        })\n      } else if (isIterable(ret)) {\n        finishCount++\n        pumpToNode(ret, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else if (isWebStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount++\n        pumpToWeb(makeAsyncIterable(ret), stream, finish, {\n          end\n        })\n      } else if (isReadableStream(ret) || isIterable(ret)) {\n        finishCount++\n        pumpToWeb(ret, stream, finish, {\n          end\n        })\n      } else if (isTransformStream(ret)) {\n        finishCount++\n        pumpToWeb(ret.readable, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else {\n      ret = Duplex.from(stream)\n    }\n  }\n  if (\n    (signal !== null && signal !== undefined && signal.aborted) ||\n    (outerSignal !== null && outerSignal !== undefined && outerSignal.aborted)\n  ) {\n    process.nextTick(abort)\n  }\n  return ret\n}\nfunction pipe(src, dst, finish, { end }) {\n  let ended = false\n  dst.on('close', () => {\n    if (!ended) {\n      // Finish if the destination closes before the source has completed.\n      finish(new ERR_STREAM_PREMATURE_CLOSE())\n    }\n  })\n  src.pipe(dst, {\n    end: false\n  }) // If end is true we already will have a listener to end dst.\n\n  if (end) {\n    // Compat. Before node v10.12.0 stdio used to throw an error so\n    // pipe() did/does not end() stdio destinations.\n    // Now they allow it but \"secretly\" don't close the underlying fd.\n\n    function endFn() {\n      ended = true\n      dst.end()\n    }\n    if (isReadableEnded(src)) {\n      // End the destination if the source has already ended.\n      process.nextTick(endFn)\n    } else {\n      src.once('end', endFn)\n    }\n  } else {\n    finish()\n  }\n  eos(\n    src,\n    {\n      readable: true,\n      writable: false\n    },\n    (err) => {\n      const rState = src._readableState\n      if (\n        err &&\n        err.code === 'ERR_STREAM_PREMATURE_CLOSE' &&\n        rState &&\n        rState.ended &&\n        !rState.errored &&\n        !rState.errorEmitted\n      ) {\n        // Some readable streams will emit 'close' before 'end'. However, since\n        // this is on the readable side 'end' should still be emitted if the\n        // stream has been ended and no error emitted. This should be allowed in\n        // favor of backwards compatibility. Since the stream is piped to a\n        // destination this should not result in any observable difference.\n        // We don't need to check if this is a writable premature close since\n        // eos will only fail with premature close on the reading side for\n        // duplex streams.\n        src.once('end', finish).once('error', finish)\n      } else {\n        finish(err)\n      }\n    }\n  )\n  return eos(\n    dst,\n    {\n      readable: false,\n      writable: true\n    },\n    finish\n  )\n}\nmodule.exports = {\n  pipelineImpl,\n  pipeline\n}\n", "'use strict'\n\nconst { pipeline } = require('./pipeline')\nconst Duplex = require('./duplex')\nconst { destroyer } = require('./destroy')\nconst {\n  isNodeStream,\n  isReadable,\n  isWritable,\n  isWebStream,\n  isTransformStream,\n  isWritableStream,\n  isReadableStream\n} = require('./utils')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }\n} = require('../../ours/errors')\nconst eos = require('./end-of-stream')\nmodule.exports = function compose(...streams) {\n  if (streams.length === 0) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  if (streams.length === 1) {\n    return Duplex.from(streams[0])\n  }\n  const orgStreams = [...streams]\n  if (typeof streams[0] === 'function') {\n    streams[0] = Duplex.from(streams[0])\n  }\n  if (typeof streams[streams.length - 1] === 'function') {\n    const idx = streams.length - 1\n    streams[idx] = Duplex.from(streams[idx])\n  }\n  for (let n = 0; n < streams.length; ++n) {\n    if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {\n      // TODO(ronag): Add checks for non streams.\n      continue\n    }\n    if (\n      n < streams.length - 1 &&\n      !(isReadable(streams[n]) || isReadableStream(streams[n]) || isTransformStream(streams[n]))\n    ) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be readable')\n    }\n    if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be writable')\n    }\n  }\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    } else if (!readable && !writable) {\n      d.destroy()\n    }\n  }\n  const head = streams[0]\n  const tail = pipeline(streams, onfinished)\n  const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head))\n  const readable = !!(isReadable(tail) || isReadableStream(tail) || isTransformStream(tail))\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplex({\n    // TODO (ronag): highWaterMark?\n    writableObjectMode: !!(head !== null && head !== undefined && head.writableObjectMode),\n    readableObjectMode: !!(tail !== null && tail !== undefined && tail.writableObjectMode),\n    writable,\n    readable\n  })\n  if (writable) {\n    if (isNodeStream(head)) {\n      d._write = function (chunk, encoding, callback) {\n        if (head.write(chunk, encoding)) {\n          callback()\n        } else {\n          ondrain = callback\n        }\n      }\n      d._final = function (callback) {\n        head.end()\n        onfinish = callback\n      }\n      head.on('drain', function () {\n        if (ondrain) {\n          const cb = ondrain\n          ondrain = null\n          cb()\n        }\n      })\n    } else if (isWebStream(head)) {\n      const writable = isTransformStream(head) ? head.writable : head\n      const writer = writable.getWriter()\n      d._write = async function (chunk, encoding, callback) {\n        try {\n          await writer.ready\n          writer.write(chunk).catch(() => {})\n          callback()\n        } catch (err) {\n          callback(err)\n        }\n      }\n      d._final = async function (callback) {\n        try {\n          await writer.ready\n          writer.close().catch(() => {})\n          onfinish = callback\n        } catch (err) {\n          callback(err)\n        }\n      }\n    }\n    const toRead = isTransformStream(tail) ? tail.readable : tail\n    eos(toRead, () => {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    if (isNodeStream(tail)) {\n      tail.on('readable', function () {\n        if (onreadable) {\n          const cb = onreadable\n          onreadable = null\n          cb()\n        }\n      })\n      tail.on('end', function () {\n        d.push(null)\n      })\n      d._read = function () {\n        while (true) {\n          const buf = tail.read()\n          if (buf === null) {\n            onreadable = d._read\n            return\n          }\n          if (!d.push(buf)) {\n            return\n          }\n        }\n      }\n    } else if (isWebStream(tail)) {\n      const readable = isTransformStream(tail) ? tail.readable : tail\n      const reader = readable.getReader()\n      d._read = async function () {\n        while (true) {\n          try {\n            const { value, done } = await reader.read()\n            if (!d.push(value)) {\n              return\n            }\n            if (done) {\n              d.push(null)\n              return\n            }\n          } catch {\n            return\n          }\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      if (isNodeStream(tail)) {\n        destroyer(tail, err)\n      }\n    }\n  }\n  return d\n}\n", "'use strict'\n\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst {\n  codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },\n  AbortError\n} = require('../../ours/errors')\nconst { validateAbortSignal, validateInteger, validateObject } = require('../validators')\nconst kWeakHandler = require('../../ours/primordials').Symbol('kWeak')\nconst { finished } = require('./end-of-stream')\nconst staticCompose = require('./compose')\nconst { addAbortSignalNoValidate } = require('./add-abort-signal')\nconst { isWritable, isNodeStream } = require('./utils')\nconst {\n  ArrayPrototypePush,\n  MathFloor,\n  Number,\n  NumberIsNaN,\n  Promise,\n  PromiseReject,\n  PromisePrototypeThen,\n  Symbol\n} = require('../../ours/primordials')\nconst kEmpty = Symbol('kEmpty')\nconst kEof = Symbol('kEof')\nfunction compose(stream, options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  if (isNodeStream(stream) && !isWritable(stream)) {\n    throw new ERR_INVALID_ARG_VALUE('stream', stream, 'must be writable')\n  }\n  const composedStream = staticCompose(this, stream)\n  if (options !== null && options !== undefined && options.signal) {\n    // Not validating as we already validated before\n    addAbortSignalNoValidate(options.signal, composedStream)\n  }\n  return composedStream\n}\nfunction map(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let concurrency = 1\n  if ((options === null || options === undefined ? undefined : options.concurrency) != null) {\n    concurrency = MathFloor(options.concurrency)\n  }\n  validateInteger(concurrency, 'concurrency', 1)\n  return async function* map() {\n    var _options$signal, _options$signal2\n    const ac = new AbortController()\n    const stream = this\n    const queue = []\n    const signal = ac.signal\n    const signalOpt = {\n      signal\n    }\n    const abort = () => ac.abort()\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal = options.signal) !== null &&\n      _options$signal !== undefined &&\n      _options$signal.aborted\n    ) {\n      abort()\n    }\n    options === null || options === undefined\n      ? undefined\n      : (_options$signal2 = options.signal) === null || _options$signal2 === undefined\n      ? undefined\n      : _options$signal2.addEventListener('abort', abort)\n    let next\n    let resume\n    let done = false\n    function onDone() {\n      done = true\n    }\n    async function pump() {\n      try {\n        for await (let val of stream) {\n          var _val\n          if (done) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          try {\n            val = fn(val, signalOpt)\n          } catch (err) {\n            val = PromiseReject(err)\n          }\n          if (val === kEmpty) {\n            continue\n          }\n          if (typeof ((_val = val) === null || _val === undefined ? undefined : _val.catch) === 'function') {\n            val.catch(onDone)\n          }\n          queue.push(val)\n          if (next) {\n            next()\n            next = null\n          }\n          if (!done && queue.length && queue.length >= concurrency) {\n            await new Promise((resolve) => {\n              resume = resolve\n            })\n          }\n        }\n        queue.push(kEof)\n      } catch (err) {\n        const val = PromiseReject(err)\n        PromisePrototypeThen(val, undefined, onDone)\n        queue.push(val)\n      } finally {\n        var _options$signal3\n        done = true\n        if (next) {\n          next()\n          next = null\n        }\n        options === null || options === undefined\n          ? undefined\n          : (_options$signal3 = options.signal) === null || _options$signal3 === undefined\n          ? undefined\n          : _options$signal3.removeEventListener('abort', abort)\n      }\n    }\n    pump()\n    try {\n      while (true) {\n        while (queue.length > 0) {\n          const val = await queue[0]\n          if (val === kEof) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          if (val !== kEmpty) {\n            yield val\n          }\n          queue.shift()\n          if (resume) {\n            resume()\n            resume = null\n          }\n        }\n        await new Promise((resolve) => {\n          next = resolve\n        })\n      }\n    } finally {\n      ac.abort()\n      done = true\n      if (resume) {\n        resume()\n        resume = null\n      }\n    }\n  }.call(this)\n}\nfunction asIndexedPairs(options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  return async function* asIndexedPairs() {\n    let index = 0\n    for await (const val of this) {\n      var _options$signal4\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal4 = options.signal) !== null &&\n        _options$signal4 !== undefined &&\n        _options$signal4.aborted\n      ) {\n        throw new AbortError({\n          cause: options.signal.reason\n        })\n      }\n      yield [index++, val]\n    }\n  }.call(this)\n}\nasync function some(fn, options = undefined) {\n  for await (const unused of filter.call(this, fn, options)) {\n    return true\n  }\n  return false\n}\nasync function every(fn, options = undefined) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n  return !(await some.call(\n    this,\n    async (...args) => {\n      return !(await fn(...args))\n    },\n    options\n  ))\n}\nasync function find(fn, options) {\n  for await (const result of filter.call(this, fn, options)) {\n    return result\n  }\n  return undefined\n}\nasync function forEach(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function forEachFn(value, options) {\n    await fn(value, options)\n    return kEmpty\n  }\n  // eslint-disable-next-line no-unused-vars\n  for await (const unused of map.call(this, forEachFn, options));\n}\nfunction filter(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function filterFn(value, options) {\n    if (await fn(value, options)) {\n      return value\n    }\n    return kEmpty\n  }\n  return map.call(this, filterFn, options)\n}\n\n// Specific to provide better error to reduce since the argument is only\n// missing if the stream has no items in it - but the code is still appropriate\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\n  constructor() {\n    super('reduce')\n    this.message = 'Reduce of an empty stream requires an initial value'\n  }\n}\nasync function reduce(reducer, initialValue, options) {\n  var _options$signal5\n  if (typeof reducer !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('reducer', ['Function', 'AsyncFunction'], reducer)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let hasInitialValue = arguments.length > 1\n  if (\n    options !== null &&\n    options !== undefined &&\n    (_options$signal5 = options.signal) !== null &&\n    _options$signal5 !== undefined &&\n    _options$signal5.aborted\n  ) {\n    const err = new AbortError(undefined, {\n      cause: options.signal.reason\n    })\n    this.once('error', () => {}) // The error is already propagated\n    await finished(this.destroy(err))\n    throw err\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  if (options !== null && options !== undefined && options.signal) {\n    const opts = {\n      once: true,\n      [kWeakHandler]: this\n    }\n    options.signal.addEventListener('abort', () => ac.abort(), opts)\n  }\n  let gotAnyItemFromStream = false\n  try {\n    for await (const value of this) {\n      var _options$signal6\n      gotAnyItemFromStream = true\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal6 = options.signal) !== null &&\n        _options$signal6 !== undefined &&\n        _options$signal6.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (!hasInitialValue) {\n        initialValue = value\n        hasInitialValue = true\n      } else {\n        initialValue = await reducer(initialValue, value, {\n          signal\n        })\n      }\n    }\n    if (!gotAnyItemFromStream && !hasInitialValue) {\n      throw new ReduceAwareErrMissingArgs()\n    }\n  } finally {\n    ac.abort()\n  }\n  return initialValue\n}\nasync function toArray(options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  const result = []\n  for await (const val of this) {\n    var _options$signal7\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal7 = options.signal) !== null &&\n      _options$signal7 !== undefined &&\n      _options$signal7.aborted\n    ) {\n      throw new AbortError(undefined, {\n        cause: options.signal.reason\n      })\n    }\n    ArrayPrototypePush(result, val)\n  }\n  return result\n}\nfunction flatMap(fn, options) {\n  const values = map.call(this, fn, options)\n  return async function* flatMap() {\n    for await (const val of values) {\n      yield* val\n    }\n  }.call(this)\n}\nfunction toIntegerOrInfinity(number) {\n  // We coerce here to align with the spec\n  // https://github.com/tc39/proposal-iterator-helpers/issues/169\n  number = Number(number)\n  if (NumberIsNaN(number)) {\n    return 0\n  }\n  if (number < 0) {\n    throw new ERR_OUT_OF_RANGE('number', '>= 0', number)\n  }\n  return number\n}\nfunction drop(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* drop() {\n    var _options$signal8\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal8 = options.signal) !== null &&\n      _options$signal8 !== undefined &&\n      _options$signal8.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal9\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal9 = options.signal) !== null &&\n        _options$signal9 !== undefined &&\n        _options$signal9.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- <= 0) {\n        yield val\n      }\n    }\n  }.call(this)\n}\nfunction take(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* take() {\n    var _options$signal10\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal10 = options.signal) !== null &&\n      _options$signal10 !== undefined &&\n      _options$signal10.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal11\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal11 = options.signal) !== null &&\n        _options$signal11 !== undefined &&\n        _options$signal11.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- > 0) {\n        yield val\n      } else {\n        return\n      }\n    }\n  }.call(this)\n}\nmodule.exports.streamReturningOperators = {\n  asIndexedPairs,\n  drop,\n  filter,\n  flatMap,\n  map,\n  take,\n  compose\n}\nmodule.exports.promiseReturningOperators = {\n  every,\n  forEach,\n  reduce,\n  toArray,\n  some,\n  find\n}\n", "'use strict'\n\nconst { ArrayPrototypePop, Promise } = require('../ours/primordials')\nconst { isIterable, isNodeStream, isWebStream } = require('../internal/streams/utils')\nconst { pipelineImpl: pl } = require('../internal/streams/pipeline')\nconst { finished } = require('../internal/streams/end-of-stream')\nrequire('../../lib/stream.js')\nfunction pipeline(...streams) {\n  return new Promise((resolve, reject) => {\n    let signal\n    let end\n    const lastArg = streams[streams.length - 1]\n    if (\n      lastArg &&\n      typeof lastArg === 'object' &&\n      !isNodeStream(lastArg) &&\n      !isIterable(lastArg) &&\n      !isWebStream(lastArg)\n    ) {\n      const options = ArrayPrototypePop(streams)\n      signal = options.signal\n      end = options.end\n    }\n    pl(\n      streams,\n      (err, value) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      },\n      {\n        signal,\n        end\n      }\n    )\n  })\n}\nmodule.exports = {\n  finished,\n  pipeline\n}\n", "/* replacement start */\n\nconst { Buffer } = require('buffer')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst { ObjectDefineProperty, ObjectKeys, ReflectApply } = require('./ours/primordials')\nconst {\n  promisify: { custom: customPromisify }\n} = require('./ours/util')\nconst { streamReturningOperators, promiseReturningOperators } = require('./internal/streams/operators')\nconst {\n  codes: { ERR_ILLEGAL_CONSTRUCTOR }\n} = require('./ours/errors')\nconst compose = require('./internal/streams/compose')\nconst { pipeline } = require('./internal/streams/pipeline')\nconst { destroyer } = require('./internal/streams/destroy')\nconst eos = require('./internal/streams/end-of-stream')\nconst internalBuffer = {}\nconst promises = require('./stream/promises')\nconst utils = require('./internal/streams/utils')\nconst Stream = (module.exports = require('./internal/streams/legacy').Stream)\nStream.isDisturbed = utils.isDisturbed\nStream.isErrored = utils.isErrored\nStream.isReadable = utils.isReadable\nStream.Readable = require('./internal/streams/readable')\nfor (const key of ObjectKeys(streamReturningOperators)) {\n  const op = streamReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return Stream.Readable.from(ReflectApply(op, this, args))\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nfor (const key of ObjectKeys(promiseReturningOperators)) {\n  const op = promiseReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return ReflectApply(op, this, args)\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nStream.Writable = require('./internal/streams/writable')\nStream.Duplex = require('./internal/streams/duplex')\nStream.Transform = require('./internal/streams/transform')\nStream.PassThrough = require('./internal/streams/passthrough')\nStream.pipeline = pipeline\nconst { addAbortSignal } = require('./internal/streams/add-abort-signal')\nStream.addAbortSignal = addAbortSignal\nStream.finished = eos\nStream.destroy = destroyer\nStream.compose = compose\nObjectDefineProperty(Stream, 'promises', {\n  __proto__: null,\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nObjectDefineProperty(pipeline, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.pipeline\n  }\n})\nObjectDefineProperty(eos, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.finished\n  }\n})\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream\nStream._isUint8Array = function isUint8Array(value) {\n  return value instanceof Uint8Array\n}\nStream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n}\n", "'use strict'\n\nconst CustomStream = require('../stream')\nconst promises = require('../stream/promises')\nconst originalDestroy = CustomStream.Readable.destroy\nmodule.exports = CustomStream.Readable\n\n// Explicit export naming is needed for ESM\nmodule.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer\nmodule.exports._isUint8Array = CustomStream._isUint8Array\nmodule.exports.isDisturbed = CustomStream.isDisturbed\nmodule.exports.isErrored = CustomStream.isErrored\nmodule.exports.isReadable = CustomStream.isReadable\nmodule.exports.Readable = CustomStream.Readable\nmodule.exports.Writable = CustomStream.Writable\nmodule.exports.Duplex = CustomStream.Duplex\nmodule.exports.Transform = CustomStream.Transform\nmodule.exports.PassThrough = CustomStream.PassThrough\nmodule.exports.addAbortSignal = CustomStream.addAbortSignal\nmodule.exports.finished = CustomStream.finished\nmodule.exports.destroy = CustomStream.destroy\nmodule.exports.destroy = originalDestroy\nmodule.exports.pipeline = CustomStream.pipeline\nmodule.exports.compose = CustomStream.compose\nObject.defineProperty(CustomStream, 'promises', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nmodule.exports.Stream = CustomStream.Stream\n\n// Allow default importing\nmodule.exports.default = module.exports\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "'use strict'\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/per_context/primordials.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/per_context/primordials.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/\nmodule.exports = {\n  ArrayIsArray(self) {\n    return Array.isArray(self)\n  },\n  ArrayPrototypeIncludes(self, el) {\n    return self.includes(el)\n  },\n  ArrayPrototypeIndexOf(self, el) {\n    return self.indexOf(el)\n  },\n  ArrayPrototypeJoin(self, sep) {\n    return self.join(sep)\n  },\n  ArrayPrototypeMap(self, fn) {\n    return self.map(fn)\n  },\n  ArrayPrototypePop(self, el) {\n    return self.pop(el)\n  },\n  ArrayPrototypePush(self, el) {\n    return self.push(el)\n  },\n  ArrayPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  Error,\n  FunctionPrototypeCall(fn, thisArgs, ...args) {\n    return fn.call(thisArgs, ...args)\n  },\n  FunctionPrototypeSymbolHasInstance(self, instance) {\n    return Function.prototype[Symbol.hasInstance].call(self, instance)\n  },\n  MathFloor: Math.floor,\n  Number,\n  NumberIsInteger: Number.isInteger,\n  NumberIsNaN: Number.isNaN,\n  NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,\n  NumberParseInt: Number.parseInt,\n  ObjectDefineProperties(self, props) {\n    return Object.defineProperties(self, props)\n  },\n  ObjectDefineProperty(self, name, prop) {\n    return Object.defineProperty(self, name, prop)\n  },\n  ObjectGetOwnPropertyDescriptor(self, name) {\n    return Object.getOwnPropertyDescriptor(self, name)\n  },\n  ObjectKeys(obj) {\n    return Object.keys(obj)\n  },\n  ObjectSetPrototypeOf(target, proto) {\n    return Object.setPrototypeOf(target, proto)\n  },\n  Promise,\n  PromisePrototypeCatch(self, fn) {\n    return self.catch(fn)\n  },\n  PromisePrototypeThen(self, thenFn, catchFn) {\n    return self.then(thenFn, catchFn)\n  },\n  PromiseReject(err) {\n    return Promise.reject(err)\n  },\n  ReflectApply: Reflect.apply,\n  RegExpPrototypeTest(self, value) {\n    return self.test(value)\n  },\n  SafeSet: Set,\n  String,\n  StringPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  StringPrototypeToLowerCase(self) {\n    return self.toLowerCase()\n  },\n  StringPrototypeToUpperCase(self) {\n    return self.toUpperCase()\n  },\n  StringPrototypeTrim(self) {\n    return self.trim()\n  },\n  Symbol,\n  SymbolFor: Symbol.for,\n  SymbolAsyncIterator: Symbol.asyncIterator,\n  SymbolHasInstance: Symbol.hasInstance,\n  SymbolIterator: Symbol.iterator,\n  TypedArrayPrototypeSet(self, buf, len) {\n    return self.set(buf, len)\n  },\n  Uint8Array\n}\n", "'use strict'\n\nconst bufferModule = require('buffer')\nconst AsyncFunction = Object.getPrototypeOf(async function () {}).constructor\nconst Blob = globalThis.Blob || bufferModule.Blob\n/* eslint-disable indent */\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        // eslint-disable-next-line indent\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\n/* eslint-enable indent */\n\n// This is a simplified version of AggregateError\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`)\n    }\n    let message = ''\n    for (let i = 0; i < errors.length; i++) {\n      message += `    ${errors[i].stack}\\n`\n    }\n    super(message)\n    this.name = 'AggregateError'\n    this.errors = errors\n  }\n}\nmodule.exports = {\n  AggregateError,\n  kEmptyObject: Object.freeze({}),\n  once(callback) {\n    let called = false\n    return function (...args) {\n      if (called) {\n        return\n      }\n      called = true\n      callback.apply(this, args)\n    }\n  },\n  createDeferredPromise: function () {\n    let resolve\n    let reject\n\n    // eslint-disable-next-line promise/param-names\n    const promise = new Promise((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n    return {\n      promise,\n      resolve,\n      reject\n    }\n  },\n  promisify(fn) {\n    return new Promise((resolve, reject) => {\n      fn((err, ...args) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(...args)\n      })\n    })\n  },\n  debuglog() {\n    return function () {}\n  },\n  format(format, ...args) {\n    // Simplified version of https://nodejs.org/api/util.html#utilformatformat-args\n    return format.replace(/%([sdifj])/g, function (...[_unused, type]) {\n      const replacement = args.shift()\n      if (type === 'f') {\n        return replacement.toFixed(6)\n      } else if (type === 'j') {\n        return JSON.stringify(replacement)\n      } else if (type === 's' && typeof replacement === 'object') {\n        const ctor = replacement.constructor !== Object ? replacement.constructor.name : ''\n        return `${ctor} {}`.trim()\n      } else {\n        return replacement.toString()\n      }\n    })\n  },\n  inspect(value) {\n    // Vastly simplified version of https://nodejs.org/api/util.html#utilinspectobject-options\n    switch (typeof value) {\n      case 'string':\n        if (value.includes(\"'\")) {\n          if (!value.includes('\"')) {\n            return `\"${value}\"`\n          } else if (!value.includes('`') && !value.includes('${')) {\n            return `\\`${value}\\``\n          }\n        }\n        return `'${value}'`\n      case 'number':\n        if (isNaN(value)) {\n          return 'NaN'\n        } else if (Object.is(value, -0)) {\n          return String(value)\n        }\n        return value\n      case 'bigint':\n        return `${String(value)}n`\n      case 'boolean':\n      case 'undefined':\n        return String(value)\n      case 'object':\n        return '{}'\n    }\n  },\n  types: {\n    isAsyncFunction(fn) {\n      return fn instanceof AsyncFunction\n    },\n    isArrayBufferView(arr) {\n      return ArrayBuffer.isView(arr)\n    }\n  },\n  isBlob\n}\nmodule.exports.promisify.custom = Symbol.for('nodejs.util.promisify.custom')\n", "'use strict'\n\nconst { format, inspect, AggregateError: CustomAggregateError } = require('./util')\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/\n\nconst AggregateError = globalThis.AggregateError || CustomAggregateError\nconst kIsNodeError = Symbol('kIsNodeError')\nconst kTypes = [\n  'string',\n  'function',\n  'number',\n  'object',\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\n  'Function',\n  'Object',\n  'boolean',\n  'bigint',\n  'symbol'\n]\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/\nconst nodeInternalPrefix = '__node_internal_'\nconst codes = {}\nfunction assert(value, message) {\n  if (!value) {\n    throw new codes.ERR_INTERNAL_ASSERTION(message)\n  }\n}\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\nfunction getMessage(key, msg, args) {\n  if (typeof msg === 'function') {\n    assert(\n      msg.length <= args.length,\n      // Default options do not count.\n      `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`\n    )\n    return msg(...args)\n  }\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length\n  assert(\n    expectedLength === args.length,\n    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`\n  )\n  if (args.length === 0) {\n    return msg\n  }\n  return format(msg, ...args)\n}\nfunction E(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n  class NodeError extends Base {\n    constructor(...args) {\n      super(getMessage(code, message, args))\n    }\n    toString() {\n      return `${this.name} [${code}]: ${this.message}`\n    }\n  }\n  Object.defineProperties(NodeError.prototype, {\n    name: {\n      value: Base.name,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    toString: {\n      value() {\n        return `${this.name} [${code}]: ${this.message}`\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  })\n  NodeError.prototype.code = code\n  NodeError.prototype[kIsNodeError] = true\n  codes[code] = NodeError\n}\nfunction hideStackFrames(fn) {\n  // We rename the functions that will be hidden to cut off the stacktrace\n  // at the outermost one\n  const hidden = nodeInternalPrefix + fn.name\n  Object.defineProperty(fn, 'name', {\n    value: hidden\n  })\n  return fn\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n  if (innerError && outerError && innerError !== outerError) {\n    if (Array.isArray(outerError.errors)) {\n      // If `outerError` is already an `AggregateError`.\n      outerError.errors.push(innerError)\n      return outerError\n    }\n    const err = new AggregateError([outerError, innerError], outerError.message)\n    err.code = outerError.code\n    return err\n  }\n  return innerError || outerError\n}\nclass AbortError extends Error {\n  constructor(message = 'The operation was aborted', options = undefined) {\n    if (options !== undefined && typeof options !== 'object') {\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options)\n    }\n    super(message, options)\n    this.code = 'ABORT_ERR'\n    this.name = 'AbortError'\n  }\n}\nE('ERR_ASSERTION', '%s', Error)\nE(\n  'ERR_INVALID_ARG_TYPE',\n  (name, expected, actual) => {\n    assert(typeof name === 'string', \"'name' must be a string\")\n    if (!Array.isArray(expected)) {\n      expected = [expected]\n    }\n    let msg = 'The '\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `\n    } else {\n      msg += `\"${name}\" ${name.includes('.') ? 'property' : 'argument'} `\n    }\n    msg += 'must be '\n    const types = []\n    const instances = []\n    const other = []\n    for (const value of expected) {\n      assert(typeof value === 'string', 'All expected entries have to be of type string')\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase())\n      } else if (classRegExp.test(value)) {\n        instances.push(value)\n      } else {\n        assert(value !== 'object', 'The value \"object\" should be written as \"Object\"')\n        other.push(value)\n      }\n    }\n\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n      const pos = types.indexOf('object')\n      if (pos !== -1) {\n        types.splice(types, pos, 1)\n        instances.push('Object')\n      }\n    }\n    if (types.length > 0) {\n      switch (types.length) {\n        case 1:\n          msg += `of type ${types[0]}`\n          break\n        case 2:\n          msg += `one of type ${types[0]} or ${types[1]}`\n          break\n        default: {\n          const last = types.pop()\n          msg += `one of type ${types.join(', ')}, or ${last}`\n        }\n      }\n      if (instances.length > 0 || other.length > 0) {\n        msg += ' or '\n      }\n    }\n    if (instances.length > 0) {\n      switch (instances.length) {\n        case 1:\n          msg += `an instance of ${instances[0]}`\n          break\n        case 2:\n          msg += `an instance of ${instances[0]} or ${instances[1]}`\n          break\n        default: {\n          const last = instances.pop()\n          msg += `an instance of ${instances.join(', ')}, or ${last}`\n        }\n      }\n      if (other.length > 0) {\n        msg += ' or '\n      }\n    }\n    switch (other.length) {\n      case 0:\n        break\n      case 1:\n        if (other[0].toLowerCase() !== other[0]) {\n          msg += 'an '\n        }\n        msg += `${other[0]}`\n        break\n      case 2:\n        msg += `one of ${other[0]} or ${other[1]}`\n        break\n      default: {\n        const last = other.pop()\n        msg += `one of ${other.join(', ')}, or ${last}`\n      }\n    }\n    if (actual == null) {\n      msg += `. Received ${actual}`\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`\n    } else if (typeof actual === 'object') {\n      var _actual$constructor\n      if (\n        (_actual$constructor = actual.constructor) !== null &&\n        _actual$constructor !== undefined &&\n        _actual$constructor.name\n      ) {\n        msg += `. Received an instance of ${actual.constructor.name}`\n      } else {\n        const inspected = inspect(actual, {\n          depth: -1\n        })\n        msg += `. Received ${inspected}`\n      }\n    } else {\n      let inspected = inspect(actual, {\n        colors: false\n      })\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`\n      }\n      msg += `. Received type ${typeof actual} (${inspected})`\n    }\n    return msg\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_ARG_VALUE',\n  (name, value, reason = 'is invalid') => {\n    let inspected = inspect(value)\n    if (inspected.length > 128) {\n      inspected = inspected.slice(0, 128) + '...'\n    }\n    const type = name.includes('.') ? 'property' : 'argument'\n    return `The ${type} '${name}' ${reason}. Received ${inspected}`\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_RETURN_VALUE',\n  (input, name, value) => {\n    var _value$constructor\n    const type =\n      value !== null &&\n      value !== undefined &&\n      (_value$constructor = value.constructor) !== null &&\n      _value$constructor !== undefined &&\n      _value$constructor.name\n        ? `instance of ${value.constructor.name}`\n        : `type ${typeof value}`\n    return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`\n  },\n  TypeError\n)\nE(\n  'ERR_MISSING_ARGS',\n  (...args) => {\n    assert(args.length > 0, 'At least one arg needs to be specified')\n    let msg\n    const len = args.length\n    args = (Array.isArray(args) ? args : [args]).map((a) => `\"${a}\"`).join(' or ')\n    switch (len) {\n      case 1:\n        msg += `The ${args[0]} argument`\n        break\n      case 2:\n        msg += `The ${args[0]} and ${args[1]} arguments`\n        break\n      default:\n        {\n          const last = args.pop()\n          msg += `The ${args.join(', ')}, and ${last} arguments`\n        }\n        break\n    }\n    return `${msg} must be specified`\n  },\n  TypeError\n)\nE(\n  'ERR_OUT_OF_RANGE',\n  (str, range, input) => {\n    assert(range, 'Missing \"range\" argument')\n    let received\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    } else {\n      received = inspect(input)\n    }\n    return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`\n  },\n  RangeError\n)\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error)\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error)\nE('ERR_STREAM_ALREADY_FINISHED', 'Cannot call %s after a stream was finished', Error)\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error)\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error)\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError)\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error)\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error)\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event', Error)\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error)\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError)\nmodule.exports = {\n  AbortError,\n  aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n  hideStackFrames,\n  codes\n}\n", "/* eslint jsdoc/require-jsdoc: \"error\" */\n\n'use strict'\n\nconst {\n  ArrayIsArray,\n  ArrayPrototypeIncludes,\n  ArrayPrototypeJoin,\n  ArrayPrototypeMap,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberMAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER,\n  NumberParseInt,\n  ObjectPrototypeHasOwnProperty,\n  RegExpPrototypeExec,\n  String,\n  StringPrototypeToUpperCase,\n  StringPrototypeTrim\n} = require('../ours/primordials')\nconst {\n  hideStackFrames,\n  codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }\n} = require('../ours/errors')\nconst { normalizeEncoding } = require('../ours/util')\nconst { isAsyncFunction, isArrayBufferView } = require('../ours/util').types\nconst signals = {}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt32(value) {\n  return value === (value | 0)\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isUint32(value) {\n  return value === value >>> 0\n}\nconst octalReg = /^[0-7]+$/\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string'\n\n/**\n * Parse and validate values that will be converted into mode_t (the S_*\n * constants). Only valid numbers and octal strings are allowed. They could be\n * converted to 32-bit unsigned integers or non-negative signed integers in the\n * C++ land, but any value higher than 0o777 will result in platform-specific\n * behaviors.\n *\n * @param {*} value Values to be validated\n * @param {string} name Name of the argument\n * @param {number} [def] If specified, will be returned for invalid values\n * @returns {number}\n */\nfunction parseFileMode(value, name, def) {\n  if (typeof value === 'undefined') {\n    value = def\n  }\n  if (typeof value === 'string') {\n    if (RegExpPrototypeExec(octalReg, value) === null) {\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc)\n    }\n    value = NumberParseInt(value, 8)\n  }\n  validateUint32(value, name)\n  return value\n}\n\n/**\n * @callback validateInteger\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInteger} */\nconst validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (!NumberIsInteger(value)) throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  if (value < min || value > max) throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n})\n\n/**\n * @callback validateInt32\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInt32} */\nconst validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {\n  // The defaults for min and max correspond to the limits of 32-bit integers.\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateUint32\n * @param {*} value\n * @param {string} name\n * @param {number|boolean} [positive=false]\n * @returns {asserts value is number}\n */\n\n/** @type {validateUint32} */\nconst validateUint32 = hideStackFrames((value, name, positive = false) => {\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  const min = positive ? 1 : 0\n  // 2 ** 32 === 4294967296\n  const max = 4294967295\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateString\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string}\n */\n\n/** @type {validateString} */\nfunction validateString(value, name) {\n  if (typeof value !== 'string') throw new ERR_INVALID_ARG_TYPE(name, 'string', value)\n}\n\n/**\n * @callback validateNumber\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateNumber} */\nfunction validateNumber(value, name, min = undefined, max) {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (\n    (min != null && value < min) ||\n    (max != null && value > max) ||\n    ((min != null || max != null) && NumberIsNaN(value))\n  ) {\n    throw new ERR_OUT_OF_RANGE(\n      name,\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`,\n      value\n    )\n  }\n}\n\n/**\n * @callback validateOneOf\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} oneOf\n */\n\n/** @type {validateOneOf} */\nconst validateOneOf = hideStackFrames((value, name, oneOf) => {\n  if (!ArrayPrototypeIncludes(oneOf, value)) {\n    const allowed = ArrayPrototypeJoin(\n      ArrayPrototypeMap(oneOf, (v) => (typeof v === 'string' ? `'${v}'` : String(v))),\n      ', '\n    )\n    const reason = 'must be one of: ' + allowed\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateBoolean\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean}\n */\n\n/** @type {validateBoolean} */\nfunction validateBoolean(value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value)\n}\n\n/**\n * @param {any} options\n * @param {string} key\n * @param {boolean} defaultValue\n * @returns {boolean}\n */\nfunction getOwnPropertyValueOrDefault(options, key, defaultValue) {\n  return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key]\n}\n\n/**\n * @callback validateObject\n * @param {*} value\n * @param {string} name\n * @param {{\n *   allowArray?: boolean,\n *   allowFunction?: boolean,\n *   nullable?: boolean\n * }} [options]\n */\n\n/** @type {validateObject} */\nconst validateObject = hideStackFrames((value, name, options = null) => {\n  const allowArray = getOwnPropertyValueOrDefault(options, 'allowArray', false)\n  const allowFunction = getOwnPropertyValueOrDefault(options, 'allowFunction', false)\n  const nullable = getOwnPropertyValueOrDefault(options, 'nullable', false)\n  if (\n    (!nullable && value === null) ||\n    (!allowArray && ArrayIsArray(value)) ||\n    (typeof value !== 'object' && (!allowFunction || typeof value !== 'function'))\n  ) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value)\n  }\n})\n\n/**\n * @callback validateDictionary - We are using the Web IDL Standard definition\n *                                of \"dictionary\" here, which means any value\n *                                whose Type is either Undefined, Null, or\n *                                Object (which includes functions).\n * @param {*} value\n * @param {string} name\n * @see https://webidl.spec.whatwg.org/#es-dictionary\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\n */\n\n/** @type {validateDictionary} */\nconst validateDictionary = hideStackFrames((value, name) => {\n  if (value != null && typeof value !== 'object' && typeof value !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'a dictionary', value)\n  }\n})\n\n/**\n * @callback validateArray\n * @param {*} value\n * @param {string} name\n * @param {number} [minLength]\n * @returns {asserts value is any[]}\n */\n\n/** @type {validateArray} */\nconst validateArray = hideStackFrames((value, name, minLength = 0) => {\n  if (!ArrayIsArray(value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Array', value)\n  }\n  if (value.length < minLength) {\n    const reason = `must be longer than ${minLength}`\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateStringArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string[]}\n */\n\n/** @type {validateStringArray} */\nfunction validateStringArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateString(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @callback validateBooleanArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean[]}\n */\n\n/** @type {validateBooleanArray} */\nfunction validateBooleanArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateBoolean(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @param {*} signal\n * @param {string} [name='signal']\n * @returns {asserts signal is keyof signals}\n */\nfunction validateSignalName(signal, name = 'signal') {\n  validateString(signal, name)\n  if (signals[signal] === undefined) {\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\n      throw new ERR_UNKNOWN_SIGNAL(signal + ' (signals must use all capital letters)')\n    }\n    throw new ERR_UNKNOWN_SIGNAL(signal)\n  }\n}\n\n/**\n * @callback validateBuffer\n * @param {*} buffer\n * @param {string} [name='buffer']\n * @returns {asserts buffer is ArrayBufferView}\n */\n\n/** @type {validateBuffer} */\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\n  if (!isArrayBufferView(buffer)) {\n    throw new ERR_INVALID_ARG_TYPE(name, ['Buffer', 'TypedArray', 'DataView'], buffer)\n  }\n})\n\n/**\n * @param {string} data\n * @param {string} encoding\n */\nfunction validateEncoding(data, encoding) {\n  const normalizedEncoding = normalizeEncoding(encoding)\n  const length = data.length\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\n    throw new ERR_INVALID_ARG_VALUE('encoding', encoding, `is invalid for data of length ${length}`)\n  }\n}\n\n/**\n * Check that the port number is not NaN when coerced to a number,\n * is an integer and that it falls within the legal range of port numbers.\n * @param {*} port\n * @param {string} [name='Port']\n * @param {boolean} [allowZero=true]\n * @returns {number}\n */\nfunction validatePort(port, name = 'Port', allowZero = true) {\n  if (\n    (typeof port !== 'number' && typeof port !== 'string') ||\n    (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\n    +port !== +port >>> 0 ||\n    port > 0xffff ||\n    (port === 0 && !allowZero)\n  ) {\n    throw new ERR_SOCKET_BAD_PORT(name, port, allowZero)\n  }\n  return port | 0\n}\n\n/**\n * @callback validateAbortSignal\n * @param {*} signal\n * @param {string} name\n */\n\n/** @type {validateAbortSignal} */\nconst validateAbortSignal = hideStackFrames((signal, name) => {\n  if (signal !== undefined && (signal === null || typeof signal !== 'object' || !('aborted' in signal))) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n})\n\n/**\n * @callback validateFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validateFunction} */\nconst validateFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function') throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validatePlainFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validatePlainFunction} */\nconst validatePlainFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function' || isAsyncFunction(value)) throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validateUndefined\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is undefined}\n */\n\n/** @type {validateUndefined} */\nconst validateUndefined = hideStackFrames((value, name) => {\n  if (value !== undefined) throw new ERR_INVALID_ARG_TYPE(name, 'undefined', value)\n})\n\n/**\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} union\n */\nfunction validateUnion(value, name, union) {\n  if (!ArrayPrototypeIncludes(union, value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, '|')}')`, value)\n  }\n}\n\n/*\n  The rules for the Link header field are described here:\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\n\n  This regex validates any string surrounded by angle brackets\n  (not necessarily a valid URI reference) followed by zero or more\n  link-params separated by semicolons.\n*/\nconst linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/\n\n/**\n * @param {any} value\n * @param {string} name\n */\nfunction validateLinkHeaderFormat(value, name) {\n  if (typeof value === 'undefined' || !RegExpPrototypeExec(linkValueRegExp, value)) {\n    throw new ERR_INVALID_ARG_VALUE(\n      name,\n      value,\n      'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n    )\n  }\n}\n\n/**\n * @param {any} hints\n * @return {string}\n */\nfunction validateLinkHeaderValue(hints) {\n  if (typeof hints === 'string') {\n    validateLinkHeaderFormat(hints, 'hints')\n    return hints\n  } else if (ArrayIsArray(hints)) {\n    const hintsLength = hints.length\n    let result = ''\n    if (hintsLength === 0) {\n      return result\n    }\n    for (let i = 0; i < hintsLength; i++) {\n      const link = hints[i]\n      validateLinkHeaderFormat(link, 'hints')\n      result += link\n      if (i !== hintsLength - 1) {\n        result += ', '\n      }\n    }\n    return result\n  }\n  throw new ERR_INVALID_ARG_VALUE(\n    'hints',\n    hints,\n    'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n  )\n}\nmodule.exports = {\n  isInt32,\n  isUint32,\n  parseFileMode,\n  validateArray,\n  validateStringArray,\n  validateBooleanArray,\n  validateBoolean,\n  validateBuffer,\n  validateDictionary,\n  validateEncoding,\n  validateFunction,\n  validateInt32,\n  validateInteger,\n  validateNumber,\n  validateObject,\n  validateOneOf,\n  validatePlainFunction,\n  validatePort,\n  validateSignalName,\n  validateString,\n  validateUint32,\n  validateUndefined,\n  validateUnion,\n  validateAbortSignal,\n  validateLinkHeaderValue\n}\n", "'use strict'\n\nconst { Symbol, SymbolAsyncIterator, SymbolIterator, SymbolFor } = require('../../ours/primordials')\nconst kDestroyed = Symbol('kDestroyed')\nconst kIsErrored = Symbol('kIsErrored')\nconst kIsReadable = Symbol('kIsReadable')\nconst kIsDisturbed = Symbol('kIsDisturbed')\nconst kIsClosedPromise = SymbolFor('nodejs.webstream.isClosedPromise')\nconst kControllerErrorFunction = SymbolFor('nodejs.webstream.controllerErrorFunction')\nfunction isReadableNodeStream(obj, strict = false) {\n  var _obj$_readableState\n  return !!(\n    (\n      obj &&\n      typeof obj.pipe === 'function' &&\n      typeof obj.on === 'function' &&\n      (!strict || (typeof obj.pause === 'function' && typeof obj.resume === 'function')) &&\n      (!obj._writableState ||\n        ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === undefined\n          ? undefined\n          : _obj$_readableState.readable) !== false) &&\n      // Duplex\n      (!obj._writableState || obj._readableState)\n    ) // Writable has .pipe.\n  )\n}\n\nfunction isWritableNodeStream(obj) {\n  var _obj$_writableState\n  return !!(\n    (\n      obj &&\n      typeof obj.write === 'function' &&\n      typeof obj.on === 'function' &&\n      (!obj._readableState ||\n        ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === undefined\n          ? undefined\n          : _obj$_writableState.writable) !== false)\n    ) // Duplex\n  )\n}\n\nfunction isDuplexNodeStream(obj) {\n  return !!(\n    obj &&\n    typeof obj.pipe === 'function' &&\n    obj._readableState &&\n    typeof obj.on === 'function' &&\n    typeof obj.write === 'function'\n  )\n}\nfunction isNodeStream(obj) {\n  return (\n    obj &&\n    (obj._readableState ||\n      obj._writableState ||\n      (typeof obj.write === 'function' && typeof obj.on === 'function') ||\n      (typeof obj.pipe === 'function' && typeof obj.on === 'function'))\n  )\n}\nfunction isReadableStream(obj) {\n  return !!(\n    obj &&\n    !isNodeStream(obj) &&\n    typeof obj.pipeThrough === 'function' &&\n    typeof obj.getReader === 'function' &&\n    typeof obj.cancel === 'function'\n  )\n}\nfunction isWritableStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === 'function' && typeof obj.abort === 'function')\n}\nfunction isTransformStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.readable === 'object' && typeof obj.writable === 'object')\n}\nfunction isWebStream(obj) {\n  return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj)\n}\nfunction isIterable(obj, isAsync) {\n  if (obj == null) return false\n  if (isAsync === true) return typeof obj[SymbolAsyncIterator] === 'function'\n  if (isAsync === false) return typeof obj[SymbolIterator] === 'function'\n  return typeof obj[SymbolAsyncIterator] === 'function' || typeof obj[SymbolIterator] === 'function'\n}\nfunction isDestroyed(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return !!(stream.destroyed || stream[kDestroyed] || (state !== null && state !== undefined && state.destroyed))\n}\n\n// Have been end():d.\nfunction isWritableEnded(stream) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableEnded === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.ended) !== 'boolean') return null\n  return wState.ended\n}\n\n// Have emitted 'finish'.\nfunction isWritableFinished(stream, strict) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableFinished === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.finished) !== 'boolean') return null\n  return !!(wState.finished || (strict === false && wState.ended === true && wState.length === 0))\n}\n\n// Have been push(null):d.\nfunction isReadableEnded(stream) {\n  if (!isReadableNodeStream(stream)) return null\n  if (stream.readableEnded === true) return true\n  const rState = stream._readableState\n  if (!rState || rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.ended) !== 'boolean') return null\n  return rState.ended\n}\n\n// Have emitted 'end'.\nfunction isReadableFinished(stream, strict) {\n  if (!isReadableNodeStream(stream)) return null\n  const rState = stream._readableState\n  if (rState !== null && rState !== undefined && rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.endEmitted) !== 'boolean') return null\n  return !!(rState.endEmitted || (strict === false && rState.ended === true && rState.length === 0))\n}\nfunction isReadable(stream) {\n  if (stream && stream[kIsReadable] != null) return stream[kIsReadable]\n  if (typeof (stream === null || stream === undefined ? undefined : stream.readable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream)\n}\nfunction isWritable(stream) {\n  if (typeof (stream === null || stream === undefined ? undefined : stream.writable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream)\n}\nfunction isFinished(stream, opts) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (isDestroyed(stream)) {\n    return true\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.readable) !== false && isReadable(stream)) {\n    return false\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.writable) !== false && isWritable(stream)) {\n    return false\n  }\n  return true\n}\nfunction isWritableErrored(stream) {\n  var _stream$_writableStat, _stream$_writableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.writableErrored) {\n    return stream.writableErrored\n  }\n  return (_stream$_writableStat =\n    (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === undefined\n      ? undefined\n      : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== undefined\n    ? _stream$_writableStat\n    : null\n}\nfunction isReadableErrored(stream) {\n  var _stream$_readableStat, _stream$_readableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.readableErrored) {\n    return stream.readableErrored\n  }\n  return (_stream$_readableStat =\n    (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === undefined\n      ? undefined\n      : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== undefined\n    ? _stream$_readableStat\n    : null\n}\nfunction isClosed(stream) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (typeof stream.closed === 'boolean') {\n    return stream.closed\n  }\n  const wState = stream._writableState\n  const rState = stream._readableState\n  if (\n    typeof (wState === null || wState === undefined ? undefined : wState.closed) === 'boolean' ||\n    typeof (rState === null || rState === undefined ? undefined : rState.closed) === 'boolean'\n  ) {\n    return (\n      (wState === null || wState === undefined ? undefined : wState.closed) ||\n      (rState === null || rState === undefined ? undefined : rState.closed)\n    )\n  }\n  if (typeof stream._closed === 'boolean' && isOutgoingMessage(stream)) {\n    return stream._closed\n  }\n  return null\n}\nfunction isOutgoingMessage(stream) {\n  return (\n    typeof stream._closed === 'boolean' &&\n    typeof stream._defaultKeepAlive === 'boolean' &&\n    typeof stream._removedConnection === 'boolean' &&\n    typeof stream._removedContLen === 'boolean'\n  )\n}\nfunction isServerResponse(stream) {\n  return typeof stream._sent100 === 'boolean' && isOutgoingMessage(stream)\n}\nfunction isServerRequest(stream) {\n  var _stream$req\n  return (\n    typeof stream._consuming === 'boolean' &&\n    typeof stream._dumped === 'boolean' &&\n    ((_stream$req = stream.req) === null || _stream$req === undefined ? undefined : _stream$req.upgradeOrConnect) ===\n      undefined\n  )\n}\nfunction willEmitClose(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return (\n    (!state && isServerResponse(stream)) || !!(state && state.autoDestroy && state.emitClose && state.closed === false)\n  )\n}\nfunction isDisturbed(stream) {\n  var _stream$kIsDisturbed\n  return !!(\n    stream &&\n    ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== undefined\n      ? _stream$kIsDisturbed\n      : stream.readableDidRead || stream.readableAborted)\n  )\n}\nfunction isErrored(stream) {\n  var _ref,\n    _ref2,\n    _ref3,\n    _ref4,\n    _ref5,\n    _stream$kIsErrored,\n    _stream$_readableStat3,\n    _stream$_writableStat3,\n    _stream$_readableStat4,\n    _stream$_writableStat4\n  return !!(\n    stream &&\n    ((_ref =\n      (_ref2 =\n        (_ref3 =\n          (_ref4 =\n            (_ref5 =\n              (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== undefined\n                ? _stream$kIsErrored\n                : stream.readableErrored) !== null && _ref5 !== undefined\n              ? _ref5\n              : stream.writableErrored) !== null && _ref4 !== undefined\n            ? _ref4\n            : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === undefined\n            ? undefined\n            : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== undefined\n          ? _ref3\n          : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === undefined\n          ? undefined\n          : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== undefined\n        ? _ref2\n        : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === undefined\n        ? undefined\n        : _stream$_readableStat4.errored) !== null && _ref !== undefined\n      ? _ref\n      : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === undefined\n      ? undefined\n      : _stream$_writableStat4.errored)\n  )\n}\nmodule.exports = {\n  kDestroyed,\n  isDisturbed,\n  kIsDisturbed,\n  isErrored,\n  kIsErrored,\n  isReadable,\n  kIsReadable,\n  kIsClosedPromise,\n  kControllerErrorFunction,\n  isClosed,\n  isDestroyed,\n  isDuplexNodeStream,\n  isFinished,\n  isIterable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableEnded,\n  isReadableFinished,\n  isReadableErrored,\n  isNodeStream,\n  isWebStream,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableEnded,\n  isWritableFinished,\n  isWritableErrored,\n  isServerRequest,\n  isServerResponse,\n  willEmitClose,\n  isTransformStream\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { AbortError, codes } = require('../../ours/errors')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_PREMATURE_CLOSE } = codes\nconst { kEmptyObject, once } = require('../../ours/util')\nconst { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require('../validators')\nconst { Promise, PromisePrototypeThen } = require('../../ours/primordials')\nconst {\n  isClosed,\n  isReadable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableFinished,\n  isReadableErrored,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableFinished,\n  isWritableErrored,\n  isNodeStream,\n  willEmitClose: _willEmitClose,\n  kIsClosedPromise\n} = require('./utils')\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function'\n}\nconst nop = () => {}\nfunction eos(stream, options, callback) {\n  var _options$readable, _options$writable\n  if (arguments.length === 2) {\n    callback = options\n    options = kEmptyObject\n  } else if (options == null) {\n    options = kEmptyObject\n  } else {\n    validateObject(options, 'options')\n  }\n  validateFunction(callback, 'callback')\n  validateAbortSignal(options.signal, 'options.signal')\n  callback = once(callback)\n  if (isReadableStream(stream) || isWritableStream(stream)) {\n    return eosWeb(stream, options, callback)\n  }\n  if (!isNodeStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  const readable =\n    (_options$readable = options.readable) !== null && _options$readable !== undefined\n      ? _options$readable\n      : isReadableNodeStream(stream)\n  const writable =\n    (_options$writable = options.writable) !== null && _options$writable !== undefined\n      ? _options$writable\n      : isWritableNodeStream(stream)\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const onlegacyfinish = () => {\n    if (!stream.writable) {\n      onfinish()\n    }\n  }\n\n  // TODO (ronag): Improve soft detection to include core modules and\n  // common ecosystem modules that do properly emit 'close' but fail\n  // this generic check.\n  let willEmitClose =\n    _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable\n  let writableFinished = isWritableFinished(stream, false)\n  const onfinish = () => {\n    writableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.readable || readable)) {\n      return\n    }\n    if (!readable || readableFinished) {\n      callback.call(stream)\n    }\n  }\n  let readableFinished = isReadableFinished(stream, false)\n  const onend = () => {\n    readableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.writable || writable)) {\n      return\n    }\n    if (!writable || writableFinished) {\n      callback.call(stream)\n    }\n  }\n  const onerror = (err) => {\n    callback.call(stream, err)\n  }\n  let closed = isClosed(stream)\n  const onclose = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    if (readable && !readableFinished && isReadableNodeStream(stream, true)) {\n      if (!isReadableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    if (writable && !writableFinished) {\n      if (!isWritableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    callback.call(stream)\n  }\n  const onclosed = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    callback.call(stream)\n  }\n  const onrequest = () => {\n    stream.req.on('finish', onfinish)\n  }\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish)\n    if (!willEmitClose) {\n      stream.on('abort', onclose)\n    }\n    if (stream.req) {\n      onrequest()\n    } else {\n      stream.on('request', onrequest)\n    }\n  } else if (writable && !wState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish)\n    stream.on('close', onlegacyfinish)\n  }\n\n  // Not all streams will emit 'close' after 'aborted'.\n  if (!willEmitClose && typeof stream.aborted === 'boolean') {\n    stream.on('aborted', onclose)\n  }\n  stream.on('end', onend)\n  stream.on('finish', onfinish)\n  if (options.error !== false) {\n    stream.on('error', onerror)\n  }\n  stream.on('close', onclose)\n  if (closed) {\n    process.nextTick(onclose)\n  } else if (\n    (wState !== null && wState !== undefined && wState.errorEmitted) ||\n    (rState !== null && rState !== undefined && rState.errorEmitted)\n  ) {\n    if (!willEmitClose) {\n      process.nextTick(onclosed)\n    }\n  } else if (\n    !readable &&\n    (!willEmitClose || isReadable(stream)) &&\n    (writableFinished || isWritable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (\n    !writable &&\n    (!willEmitClose || isWritable(stream)) &&\n    (readableFinished || isReadable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (rState && stream.req && stream.aborted) {\n    process.nextTick(onclosed)\n  }\n  const cleanup = () => {\n    callback = nop\n    stream.removeListener('aborted', onclose)\n    stream.removeListener('complete', onfinish)\n    stream.removeListener('abort', onclose)\n    stream.removeListener('request', onrequest)\n    if (stream.req) stream.req.removeListener('finish', onfinish)\n    stream.removeListener('end', onlegacyfinish)\n    stream.removeListener('close', onlegacyfinish)\n    stream.removeListener('finish', onfinish)\n    stream.removeListener('end', onend)\n    stream.removeListener('error', onerror)\n    stream.removeListener('close', onclose)\n  }\n  if (options.signal && !closed) {\n    const abort = () => {\n      // Keep it because cleanup removes it.\n      const endCallback = callback\n      cleanup()\n      endCallback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      const originalCallback = callback\n      callback = once((...args) => {\n        options.signal.removeEventListener('abort', abort)\n        originalCallback.apply(stream, args)\n      })\n      options.signal.addEventListener('abort', abort)\n    }\n  }\n  return cleanup\n}\nfunction eosWeb(stream, options, callback) {\n  let isAborted = false\n  let abort = nop\n  if (options.signal) {\n    abort = () => {\n      isAborted = true\n      callback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      const originalCallback = callback\n      callback = once((...args) => {\n        options.signal.removeEventListener('abort', abort)\n        originalCallback.apply(stream, args)\n      })\n      options.signal.addEventListener('abort', abort)\n    }\n  }\n  const resolverFn = (...args) => {\n    if (!isAborted) {\n      process.nextTick(() => callback.apply(stream, args))\n    }\n  }\n  PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn)\n  return nop\n}\nfunction finished(stream, opts) {\n  var _opts\n  let autoCleanup = false\n  if (opts === null) {\n    opts = kEmptyObject\n  }\n  if ((_opts = opts) !== null && _opts !== undefined && _opts.cleanup) {\n    validateBoolean(opts.cleanup, 'cleanup')\n    autoCleanup = opts.cleanup\n  }\n  return new Promise((resolve, reject) => {\n    const cleanup = eos(stream, opts, (err) => {\n      if (autoCleanup) {\n        cleanup()\n      }\n      if (err) {\n        reject(err)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\nmodule.exports = eos\nmodule.exports.finished = finished\n", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst {\n  aggregateTwoErrors,\n  codes: { ERR_MULTIPLE_CALLBACK },\n  AbortError\n} = require('../../ours/errors')\nconst { Symbol } = require('../../ours/primordials')\nconst { kDestroyed, isDestroyed, isFinished, isServerRequest } = require('./utils')\nconst kDestroy = Symbol('kDestroy')\nconst kConstruct = Symbol('kConstruct')\nfunction checkError(err, w, r) {\n  if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n  }\n}\n\n// Backwards compat. cb() is undocumented and unused in core but\n// unfortunately might be used by modules.\nfunction destroy(err, cb) {\n  const r = this._readableState\n  const w = this._writableState\n  // With duplex streams we use the writable side for state.\n  const s = w || r\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    if (typeof cb === 'function') {\n      cb()\n    }\n    return this\n  }\n\n  // We set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n  checkError(err, w, r)\n  if (w) {\n    w.destroyed = true\n  }\n  if (r) {\n    r.destroyed = true\n  }\n\n  // If still constructing then defer calling _destroy.\n  if (!s.constructed) {\n    this.once(kDestroy, function (er) {\n      _destroy(this, aggregateTwoErrors(er, err), cb)\n    })\n  } else {\n    _destroy(this, err, cb)\n  }\n  return this\n}\nfunction _destroy(self, err, cb) {\n  let called = false\n  function onDestroy(err) {\n    if (called) {\n      return\n    }\n    called = true\n    const r = self._readableState\n    const w = self._writableState\n    checkError(err, w, r)\n    if (w) {\n      w.closed = true\n    }\n    if (r) {\n      r.closed = true\n    }\n    if (typeof cb === 'function') {\n      cb(err)\n    }\n    if (err) {\n      process.nextTick(emitErrorCloseNT, self, err)\n    } else {\n      process.nextTick(emitCloseNT, self)\n    }\n  }\n  try {\n    self._destroy(err || null, onDestroy)\n  } catch (err) {\n    onDestroy(err)\n  }\n}\nfunction emitErrorCloseNT(self, err) {\n  emitErrorNT(self, err)\n  emitCloseNT(self)\n}\nfunction emitCloseNT(self) {\n  const r = self._readableState\n  const w = self._writableState\n  if (w) {\n    w.closeEmitted = true\n  }\n  if (r) {\n    r.closeEmitted = true\n  }\n  if ((w !== null && w !== undefined && w.emitClose) || (r !== null && r !== undefined && r.emitClose)) {\n    self.emit('close')\n  }\n}\nfunction emitErrorNT(self, err) {\n  const r = self._readableState\n  const w = self._writableState\n  if ((w !== null && w !== undefined && w.errorEmitted) || (r !== null && r !== undefined && r.errorEmitted)) {\n    return\n  }\n  if (w) {\n    w.errorEmitted = true\n  }\n  if (r) {\n    r.errorEmitted = true\n  }\n  self.emit('error', err)\n}\nfunction undestroy() {\n  const r = this._readableState\n  const w = this._writableState\n  if (r) {\n    r.constructed = true\n    r.closed = false\n    r.closeEmitted = false\n    r.destroyed = false\n    r.errored = null\n    r.errorEmitted = false\n    r.reading = false\n    r.ended = r.readable === false\n    r.endEmitted = r.readable === false\n  }\n  if (w) {\n    w.constructed = true\n    w.destroyed = false\n    w.closed = false\n    w.closeEmitted = false\n    w.errored = null\n    w.errorEmitted = false\n    w.finalCalled = false\n    w.prefinished = false\n    w.ended = w.writable === false\n    w.ending = w.writable === false\n    w.finished = w.writable === false\n  }\n}\nfunction errorOrDestroy(stream, err, sync) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  const r = stream._readableState\n  const w = stream._writableState\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    return this\n  }\n  if ((r !== null && r !== undefined && r.autoDestroy) || (w !== null && w !== undefined && w.autoDestroy))\n    stream.destroy(err)\n  else if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n    if (sync) {\n      process.nextTick(emitErrorNT, stream, err)\n    } else {\n      emitErrorNT(stream, err)\n    }\n  }\n}\nfunction construct(stream, cb) {\n  if (typeof stream._construct !== 'function') {\n    return\n  }\n  const r = stream._readableState\n  const w = stream._writableState\n  if (r) {\n    r.constructed = false\n  }\n  if (w) {\n    w.constructed = false\n  }\n  stream.once(kConstruct, cb)\n  if (stream.listenerCount(kConstruct) > 1) {\n    // Duplex\n    return\n  }\n  process.nextTick(constructNT, stream)\n}\nfunction constructNT(stream) {\n  let called = false\n  function onConstruct(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : new ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    const r = stream._readableState\n    const w = stream._writableState\n    const s = w || r\n    if (r) {\n      r.constructed = true\n    }\n    if (w) {\n      w.constructed = true\n    }\n    if (s.destroyed) {\n      stream.emit(kDestroy, err)\n    } else if (err) {\n      errorOrDestroy(stream, err, true)\n    } else {\n      process.nextTick(emitConstructNT, stream)\n    }\n  }\n  try {\n    stream._construct((err) => {\n      process.nextTick(onConstruct, err)\n    })\n  } catch (err) {\n    process.nextTick(onConstruct, err)\n  }\n}\nfunction emitConstructNT(stream) {\n  stream.emit(kConstruct)\n}\nfunction isRequest(stream) {\n  return (stream === null || stream === undefined ? undefined : stream.setHeader) && typeof stream.abort === 'function'\n}\nfunction emitCloseLegacy(stream) {\n  stream.emit('close')\n}\nfunction emitErrorCloseLegacy(stream, err) {\n  stream.emit('error', err)\n  process.nextTick(emitCloseLegacy, stream)\n}\n\n// Normalize destroy for legacy.\nfunction destroyer(stream, err) {\n  if (!stream || isDestroyed(stream)) {\n    return\n  }\n  if (!err && !isFinished(stream)) {\n    err = new AbortError()\n  }\n\n  // TODO: Remove isRequest branches.\n  if (isServerRequest(stream)) {\n    stream.socket = null\n    stream.destroy(err)\n  } else if (isRequest(stream)) {\n    stream.abort()\n  } else if (isRequest(stream.req)) {\n    stream.req.abort()\n  } else if (typeof stream.destroy === 'function') {\n    stream.destroy(err)\n  } else if (typeof stream.close === 'function') {\n    // TODO: Don't lose err?\n    stream.close()\n  } else if (err) {\n    process.nextTick(emitErrorCloseLegacy, stream, err)\n  } else {\n    process.nextTick(emitCloseLegacy, stream)\n  }\n  if (!stream.destroyed) {\n    stream[kDestroyed] = true\n  }\n}\nmodule.exports = {\n  construct,\n  destroyer,\n  destroy,\n  undestroy,\n  errorOrDestroy\n}\n", "'use strict'\n\nconst { ArrayIsArray, ObjectSetPrototypeOf } = require('../../ours/primordials')\nconst { EventEmitter: EE } = require('events')\nfunction Stream(opts) {\n  EE.call(this, opts)\n}\nObjectSetPrototypeOf(Stream.prototype, EE.prototype)\nObjectSetPrototypeOf(Stream, EE)\nStream.prototype.pipe = function (dest, options) {\n  const source = this\n  function ondata(chunk) {\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\n      source.pause()\n    }\n  }\n  source.on('data', ondata)\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume()\n    }\n  }\n  dest.on('drain', ondrain)\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend)\n    source.on('close', onclose)\n  }\n  let didOnEnd = false\n  function onend() {\n    if (didOnEnd) return\n    didOnEnd = true\n    dest.end()\n  }\n  function onclose() {\n    if (didOnEnd) return\n    didOnEnd = true\n    if (typeof dest.destroy === 'function') dest.destroy()\n  }\n\n  // Don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup()\n    if (EE.listenerCount(this, 'error') === 0) {\n      this.emit('error', er)\n    }\n  }\n  prependListener(source, 'error', onerror)\n  prependListener(dest, 'error', onerror)\n\n  // Remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata)\n    dest.removeListener('drain', ondrain)\n    source.removeListener('end', onend)\n    source.removeListener('close', onclose)\n    source.removeListener('error', onerror)\n    dest.removeListener('error', onerror)\n    source.removeListener('end', cleanup)\n    source.removeListener('close', cleanup)\n    dest.removeListener('close', cleanup)\n  }\n  source.on('end', cleanup)\n  source.on('close', cleanup)\n  dest.on('close', cleanup)\n  dest.emit('pipe', source)\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest\n}\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn)\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn)\n  else if (ArrayIsArray(emitter._events[event])) emitter._events[event].unshift(fn)\n  else emitter._events[event] = [fn, emitter._events[event]]\n}\nmodule.exports = {\n  Stream,\n  prependListener\n}\n", "'use strict'\n\nconst { AbortError, codes } = require('../../ours/errors')\nconst { isNodeStream, isWebStream, kControllerErrorFunction } = require('./utils')\nconst eos = require('./end-of-stream')\nconst { ERR_INVALID_ARG_TYPE } = codes\n\n// This method is inlined here for readable-stream\n// It also does not allow for signal to not exist on the stream\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\nconst validateAbortSignal = (signal, name) => {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n}\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\n  validateAbortSignal(signal, 'signal')\n  if (!isNodeStream(stream) && !isWebStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  return module.exports.addAbortSignalNoValidate(signal, stream)\n}\nmodule.exports.addAbortSignalNoValidate = function (signal, stream) {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    return stream\n  }\n  const onAbort = isNodeStream(stream)\n    ? () => {\n        stream.destroy(\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n    : () => {\n        stream[kControllerErrorFunction](\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n  if (signal.aborted) {\n    onAbort()\n  } else {\n    signal.addEventListener('abort', onAbort)\n    eos(stream, () => signal.removeEventListener('abort', onAbort))\n  }\n  return stream\n}\n", "'use strict'\n\nconst { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { inspect } = require('../../ours/util')\nmodule.exports = class BufferList {\n  constructor() {\n    this.head = null\n    this.tail = null\n    this.length = 0\n  }\n  push(v) {\n    const entry = {\n      data: v,\n      next: null\n    }\n    if (this.length > 0) this.tail.next = entry\n    else this.head = entry\n    this.tail = entry\n    ++this.length\n  }\n  unshift(v) {\n    const entry = {\n      data: v,\n      next: this.head\n    }\n    if (this.length === 0) this.tail = entry\n    this.head = entry\n    ++this.length\n  }\n  shift() {\n    if (this.length === 0) return\n    const ret = this.head.data\n    if (this.length === 1) this.head = this.tail = null\n    else this.head = this.head.next\n    --this.length\n    return ret\n  }\n  clear() {\n    this.head = this.tail = null\n    this.length = 0\n  }\n  join(s) {\n    if (this.length === 0) return ''\n    let p = this.head\n    let ret = '' + p.data\n    while ((p = p.next) !== null) ret += s + p.data\n    return ret\n  }\n  concat(n) {\n    if (this.length === 0) return Buffer.alloc(0)\n    const ret = Buffer.allocUnsafe(n >>> 0)\n    let p = this.head\n    let i = 0\n    while (p) {\n      TypedArrayPrototypeSet(ret, p.data, i)\n      i += p.data.length\n      p = p.next\n    }\n    return ret\n  }\n\n  // Consumes a specified amount of bytes or characters from the buffered data.\n  consume(n, hasStrings) {\n    const data = this.head.data\n    if (n < data.length) {\n      // `slice` is the same for buffers and strings.\n      const slice = data.slice(0, n)\n      this.head.data = data.slice(n)\n      return slice\n    }\n    if (n === data.length) {\n      // First chunk is a perfect match.\n      return this.shift()\n    }\n    // Result spans more than one buffer.\n    return hasStrings ? this._getString(n) : this._getBuffer(n)\n  }\n  first() {\n    return this.head.data\n  }\n  *[SymbolIterator]() {\n    for (let p = this.head; p; p = p.next) {\n      yield p.data\n    }\n  }\n\n  // Consumes a specified amount of characters from the buffered data.\n  _getString(n) {\n    let ret = ''\n    let p = this.head\n    let c = 0\n    do {\n      const str = p.data\n      if (n > str.length) {\n        ret += str\n        n -= str.length\n      } else {\n        if (n === str.length) {\n          ret += str\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          ret += StringPrototypeSlice(str, 0, n)\n          this.head = p\n          p.data = StringPrototypeSlice(str, n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Consumes a specified amount of bytes from the buffered data.\n  _getBuffer(n) {\n    const ret = Buffer.allocUnsafe(n)\n    const retLen = n\n    let p = this.head\n    let c = 0\n    do {\n      const buf = p.data\n      if (n > buf.length) {\n        TypedArrayPrototypeSet(ret, buf, retLen - n)\n        n -= buf.length\n      } else {\n        if (n === buf.length) {\n          TypedArrayPrototypeSet(ret, buf, retLen - n)\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          TypedArrayPrototypeSet(ret, new Uint8Array(buf.buffer, buf.byteOffset, n), retLen - n)\n          this.head = p\n          p.data = buf.slice(n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Make sure the linked list only shows the minimal necessary information.\n  [Symbol.for('nodejs.util.inspect.custom')](_, options) {\n    return inspect(this, {\n      ...options,\n      // Only inspect one level.\n      depth: 0,\n      // It should not recurse.\n      customInspect: false\n    })\n  }\n}\n", "'use strict'\n\nconst { MathFloor, NumberIsInteger } = require('../../ours/primordials')\nconst { ERR_INVALID_ARG_VALUE } = require('../../ours/errors').codes\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null\n}\nfunction getDefaultHighWaterMark(objectMode) {\n  return objectMode ? 16 : 16 * 1024\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey)\n  if (hwm != null) {\n    if (!NumberIsInteger(hwm) || hwm < 0) {\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark'\n      throw new ERR_INVALID_ARG_VALUE(name, hwm)\n    }\n    return MathFloor(hwm)\n  }\n\n  // Default value\n  return getDefaultHighWaterMark(state.objectMode)\n}\nmodule.exports = {\n  getHighWaterMark,\n  getDefaultHighWaterMark\n}\n", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_NULL_VALUES } = require('../../ours/errors').codes\nfunction from(Readable, iterable, opts) {\n  let iterator\n  if (typeof iterable === 'string' || iterable instanceof Buffer) {\n    return new Readable({\n      objectMode: true,\n      ...opts,\n      read() {\n        this.push(iterable)\n        this.push(null)\n      }\n    })\n  }\n  let isAsync\n  if (iterable && iterable[SymbolAsyncIterator]) {\n    isAsync = true\n    iterator = iterable[SymbolAsyncIterator]()\n  } else if (iterable && iterable[SymbolIterator]) {\n    isAsync = false\n    iterator = iterable[SymbolIterator]()\n  } else {\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable)\n  }\n  const readable = new Readable({\n    objectMode: true,\n    highWaterMark: 1,\n    // TODO(ronag): What options should be allowed?\n    ...opts\n  })\n\n  // Flag to protect against _read\n  // being called before last iteration completion.\n  let reading = false\n  readable._read = function () {\n    if (!reading) {\n      reading = true\n      next()\n    }\n  }\n  readable._destroy = function (error, cb) {\n    PromisePrototypeThen(\n      close(error),\n      () => process.nextTick(cb, error),\n      // nextTick is here in case cb throws\n      (e) => process.nextTick(cb, e || error)\n    )\n  }\n  async function close(error) {\n    const hadError = error !== undefined && error !== null\n    const hasThrow = typeof iterator.throw === 'function'\n    if (hadError && hasThrow) {\n      const { value, done } = await iterator.throw(error)\n      await value\n      if (done) {\n        return\n      }\n    }\n    if (typeof iterator.return === 'function') {\n      const { value } = await iterator.return()\n      await value\n    }\n  }\n  async function next() {\n    for (;;) {\n      try {\n        const { value, done } = isAsync ? await iterator.next() : iterator.next()\n        if (done) {\n          readable.push(null)\n        } else {\n          const res = value && typeof value.then === 'function' ? await value : value\n          if (res === null) {\n            reading = false\n            throw new ERR_STREAM_NULL_VALUES()\n          } else if (readable.push(res)) {\n            continue\n          } else {\n            reading = false\n          }\n        }\n      } catch (err) {\n        readable.destroy(err)\n      }\n      break\n    }\n  }\n  return readable\n}\nmodule.exports = from\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst {\n  ArrayPrototypeIndexOf,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberParseInt,\n  ObjectDefineProperties,\n  ObjectKeys,\n  ObjectSetPrototypeOf,\n  Promise,\n  SafeSet,\n  SymbolAsyncIterator,\n  Symbol\n} = require('../../ours/primordials')\nmodule.exports = Readable\nReadable.ReadableState = ReadableState\nconst { EventEmitter: EE } = require('events')\nconst { Stream, prependListener } = require('./legacy')\nconst { Buffer } = require('buffer')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst eos = require('./end-of-stream')\nlet debug = require('../../ours/util').debuglog('stream', (fn) => {\n  debug = fn\n})\nconst BufferList = require('./buffer_list')\nconst destroyImpl = require('./destroy')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_OUT_OF_RANGE,\n    ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT\n  }\n} = require('../../ours/errors')\nconst { validateObject } = require('../validators')\nconst kPaused = Symbol('kPaused')\nconst { StringDecoder } = require('string_decoder')\nconst from = require('./from')\nObjectSetPrototypeOf(Readable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Readable, Stream)\nconst nop = () => {}\nconst { errorOrDestroy } = destroyImpl\nfunction ReadableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.readableObjectMode)\n\n  // The point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift().\n  this.buffer = new BufferList()\n  this.length = 0\n  this.pipes = []\n  this.flowing = null\n  this.ended = false\n  this.endEmitted = false\n  this.reading = false\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true\n\n  // Whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false\n  this.emittedReadable = false\n  this.readableListening = false\n  this.resumeScheduled = false\n  this[kPaused] = null\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'end' (and potentially 'finish').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Has it been destroyed.\n  this.destroyed = false\n\n  // Indicates whether the stream has errored. When true no further\n  // _read calls, 'data' or 'readable' events should occur. This is needed\n  // since when autoDestroy is disabled we need a way to tell whether the\n  // stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Ref the piped dest which we need a drain event on it\n  // type: null | Writable | Set<Writable>.\n  this.awaitDrainWriters = null\n  this.multiAwaitDrain = false\n\n  // If true, a maybeReadMore has been scheduled.\n  this.readingMore = false\n  this.dataEmitted = false\n  this.decoder = null\n  this.encoding = null\n  if (options && options.encoding) {\n    this.decoder = new StringDecoder(options.encoding)\n    this.encoding = options.encoding\n  }\n}\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options)\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  this._readableState = new ReadableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal && !isDuplex) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    if (this._readableState.needReadable) {\n      maybeReadMore(this, this._readableState)\n    }\n  })\n}\nReadable.prototype.destroy = destroyImpl.destroy\nReadable.prototype._undestroy = destroyImpl.undestroy\nReadable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nReadable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, false)\n}\n\n// Unshift should *always* be something directly out of read().\nReadable.prototype.unshift = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, true)\n}\nfunction readableAddChunk(stream, chunk, encoding, addToFront) {\n  debug('readableAddChunk', chunk)\n  const state = stream._readableState\n  let err\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding\n      if (state.encoding !== encoding) {\n        if (addToFront && state.encoding) {\n          // When unshifting, if state.encoding is set, we have to save\n          // the string in the BufferList with the state encoding.\n          chunk = Buffer.from(chunk, encoding).toString(state.encoding)\n        } else {\n          chunk = Buffer.from(chunk, encoding)\n          encoding = ''\n        }\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = ''\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = ''\n    } else if (chunk != null) {\n      err = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  if (err) {\n    errorOrDestroy(stream, err)\n  } else if (chunk === null) {\n    state.reading = false\n    onEofChunk(stream, state)\n  } else if (state.objectMode || (chunk && chunk.length > 0)) {\n    if (addToFront) {\n      if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT())\n      else if (state.destroyed || state.errored) return false\n      else addChunk(stream, state, chunk, true)\n    } else if (state.ended) {\n      errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF())\n    } else if (state.destroyed || state.errored) {\n      return false\n    } else {\n      state.reading = false\n      if (state.decoder && !encoding) {\n        chunk = state.decoder.write(chunk)\n        if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false)\n        else maybeReadMore(stream, state)\n      } else {\n        addChunk(stream, state, chunk, false)\n      }\n    }\n  } else if (!addToFront) {\n    state.reading = false\n    maybeReadMore(stream, state)\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0)\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount('data') > 0) {\n    // Use the guard to avoid creating `Set()` repeatedly\n    // when we have multiple pipes.\n    if (state.multiAwaitDrain) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n    state.dataEmitted = true\n    stream.emit('data', chunk)\n  } else {\n    // Update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length\n    if (addToFront) state.buffer.unshift(chunk)\n    else state.buffer.push(chunk)\n    if (state.needReadable) emitReadable(stream)\n  }\n  maybeReadMore(stream, state)\n}\nReadable.prototype.isPaused = function () {\n  const state = this._readableState\n  return state[kPaused] === true || state.flowing === false\n}\n\n// Backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  const decoder = new StringDecoder(enc)\n  this._readableState.decoder = decoder\n  // If setEncoding(null), decoder.encoding equals utf8.\n  this._readableState.encoding = this._readableState.decoder.encoding\n  const buffer = this._readableState.buffer\n  // Iterate over current buffer to convert already stored Buffers:\n  let content = ''\n  for (const data of buffer) {\n    content += decoder.write(data)\n  }\n  buffer.clear()\n  if (content !== '') buffer.push(content)\n  this._readableState.length = content.length\n  return this\n}\n\n// Don't raise the hwm > 1GB.\nconst MAX_HWM = 0x40000000\nfunction computeNewHighWaterMark(n) {\n  if (n > MAX_HWM) {\n    throw new ERR_OUT_OF_RANGE('size', '<= 1GiB', n)\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts.\n    n--\n    n |= n >>> 1\n    n |= n >>> 2\n    n |= n >>> 4\n    n |= n >>> 8\n    n |= n >>> 16\n    n++\n  }\n  return n\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || (state.length === 0 && state.ended)) return 0\n  if (state.objectMode) return 1\n  if (NumberIsNaN(n)) {\n    // Only flow one buffer at a time.\n    if (state.flowing && state.length) return state.buffer.first().length\n    return state.length\n  }\n  if (n <= state.length) return n\n  return state.ended ? state.length : 0\n}\n\n// You can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n)\n  // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\n  // in this scenario, so we are doing it manually.\n  if (n === undefined) {\n    n = NaN\n  } else if (!NumberIsInteger(n)) {\n    n = NumberParseInt(n, 10)\n  }\n  const state = this._readableState\n  const nOrig = n\n\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n)\n  if (n !== 0) state.emittedReadable = false\n\n  // If we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (\n    n === 0 &&\n    state.needReadable &&\n    ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)\n  ) {\n    debug('read: emitReadable', state.length, state.ended)\n    if (state.length === 0 && state.ended) endReadable(this)\n    else emitReadable(this)\n    return null\n  }\n  n = howMuchToRead(n, state)\n\n  // If we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this)\n    return null\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  let doRead = state.needReadable\n  debug('need readable', doRead)\n\n  // If we currently have less than the highWaterMark, then also read some.\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true\n    debug('length less than watermark', doRead)\n  }\n\n  // However, if we've ended, then there's no point, if we're already\n  // reading, then it's unnecessary, if we're constructing we have to wait,\n  // and if we're destroyed or errored, then it's not allowed,\n  if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {\n    doRead = false\n    debug('reading, ended or constructing', doRead)\n  } else if (doRead) {\n    debug('do read')\n    state.reading = true\n    state.sync = true\n    // If the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true\n\n    // Call internal read method\n    try {\n      this._read(state.highWaterMark)\n    } catch (err) {\n      errorOrDestroy(this, err)\n    }\n    state.sync = false\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state)\n  }\n  let ret\n  if (n > 0) ret = fromList(n, state)\n  else ret = null\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark\n    n = 0\n  } else {\n    state.length -= n\n    if (state.multiAwaitDrain) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this)\n  }\n  if (ret !== null && !state.errorEmitted && !state.closeEmitted) {\n    state.dataEmitted = true\n    this.emit('data', ret)\n  }\n  return ret\n}\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk')\n  if (state.ended) return\n  if (state.decoder) {\n    const chunk = state.decoder.end()\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk)\n      state.length += state.objectMode ? 1 : chunk.length\n    }\n  }\n  state.ended = true\n  if (state.sync) {\n    // If we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call.\n    emitReadable(stream)\n  } else {\n    // Emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false\n    state.emittedReadable = true\n    // We have to emit readable now that we are EOF. Modules\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\n    emitReadable_(stream)\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  const state = stream._readableState\n  debug('emitReadable', state.needReadable, state.emittedReadable)\n  state.needReadable = false\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing)\n    state.emittedReadable = true\n    process.nextTick(emitReadable_, stream)\n  }\n}\nfunction emitReadable_(stream) {\n  const state = stream._readableState\n  debug('emitReadable_', state.destroyed, state.length, state.ended)\n  if (!state.destroyed && !state.errored && (state.length || state.ended)) {\n    stream.emit('readable')\n    state.emittedReadable = false\n  }\n\n  // The stream needs another readable event if:\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark\n  flow(stream)\n}\n\n// At this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore && state.constructed) {\n    state.readingMore = true\n    process.nextTick(maybeReadMore_, stream, state)\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (\n    !state.reading &&\n    !state.ended &&\n    (state.length < state.highWaterMark || (state.flowing && state.length === 0))\n  ) {\n    const len = state.length\n    debug('maybeReadMore read 0')\n    stream.read(0)\n    if (len === state.length)\n      // Didn't get any data, stop spinning.\n      break\n  }\n  state.readingMore = false\n}\n\n// Abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()')\n}\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  const src = this\n  const state = this._readableState\n  if (state.pipes.length === 1) {\n    if (!state.multiAwaitDrain) {\n      state.multiAwaitDrain = true\n      state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [state.awaitDrainWriters] : [])\n    }\n  }\n  state.pipes.push(dest)\n  debug('pipe count=%d opts=%j', state.pipes.length, pipeOpts)\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr\n  const endFn = doEnd ? onend : unpipe\n  if (state.endEmitted) process.nextTick(endFn)\n  else src.once('end', endFn)\n  dest.on('unpipe', onunpipe)\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe')\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true\n        cleanup()\n      }\n    }\n  }\n  function onend() {\n    debug('onend')\n    dest.end()\n  }\n  let ondrain\n  let cleanedUp = false\n  function cleanup() {\n    debug('cleanup')\n    // Cleanup event handlers once the pipe is broken.\n    dest.removeListener('close', onclose)\n    dest.removeListener('finish', onfinish)\n    if (ondrain) {\n      dest.removeListener('drain', ondrain)\n    }\n    dest.removeListener('error', onerror)\n    dest.removeListener('unpipe', onunpipe)\n    src.removeListener('end', onend)\n    src.removeListener('end', unpipe)\n    src.removeListener('data', ondata)\n    cleanedUp = true\n\n    // If the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) ondrain()\n  }\n  function pause() {\n    // If the user unpiped during `dest.write()`, it is possible\n    // to get stuck in a permanently paused state if that write\n    // also returned false.\n    // => Check whether `dest` is still a piping destination.\n    if (!cleanedUp) {\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\n        debug('false write response, pause', 0)\n        state.awaitDrainWriters = dest\n        state.multiAwaitDrain = false\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\n        debug('false write response, pause', state.awaitDrainWriters.size)\n        state.awaitDrainWriters.add(dest)\n      }\n      src.pause()\n    }\n    if (!ondrain) {\n      // When the dest drains, it reduces the awaitDrain counter\n      // on the source.  This would be more elegant with a .once()\n      // handler in flow(), but adding and removing repeatedly is\n      // too slow.\n      ondrain = pipeOnDrain(src, dest)\n      dest.on('drain', ondrain)\n    }\n  }\n  src.on('data', ondata)\n  function ondata(chunk) {\n    debug('ondata')\n    const ret = dest.write(chunk)\n    debug('dest.write', ret)\n    if (ret === false) {\n      pause()\n    }\n  }\n\n  // If the dest has an error, then stop piping into it.\n  // However, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er)\n    unpipe()\n    dest.removeListener('error', onerror)\n    if (dest.listenerCount('error') === 0) {\n      const s = dest._writableState || dest._readableState\n      if (s && !s.errorEmitted) {\n        // User incorrectly emitted 'error' directly on the stream.\n        errorOrDestroy(dest, er)\n      } else {\n        dest.emit('error', er)\n      }\n    }\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror)\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish)\n    unpipe()\n  }\n  dest.once('close', onclose)\n  function onfinish() {\n    debug('onfinish')\n    dest.removeListener('close', onclose)\n    unpipe()\n  }\n  dest.once('finish', onfinish)\n  function unpipe() {\n    debug('unpipe')\n    src.unpipe(dest)\n  }\n\n  // Tell the dest that it's being piped to.\n  dest.emit('pipe', src)\n\n  // Start the flow if it hasn't been started already.\n\n  if (dest.writableNeedDrain === true) {\n    if (state.flowing) {\n      pause()\n    }\n  } else if (!state.flowing) {\n    debug('pipe resume')\n    src.resume()\n  }\n  return dest\n}\nfunction pipeOnDrain(src, dest) {\n  return function pipeOnDrainFunctionResult() {\n    const state = src._readableState\n\n    // `ondrain` will call directly,\n    // `this` maybe not a reference to dest,\n    // so we use the real dest here.\n    if (state.awaitDrainWriters === dest) {\n      debug('pipeOnDrain', 1)\n      state.awaitDrainWriters = null\n    } else if (state.multiAwaitDrain) {\n      debug('pipeOnDrain', state.awaitDrainWriters.size)\n      state.awaitDrainWriters.delete(dest)\n    }\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount('data')) {\n      src.resume()\n    }\n  }\n}\nReadable.prototype.unpipe = function (dest) {\n  const state = this._readableState\n  const unpipeInfo = {\n    hasUnpiped: false\n  }\n\n  // If we're not piping anywhere, then do nothing.\n  if (state.pipes.length === 0) return this\n  if (!dest) {\n    // remove all.\n    const dests = state.pipes\n    state.pipes = []\n    this.pause()\n    for (let i = 0; i < dests.length; i++)\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      })\n    return this\n  }\n\n  // Try to find the right one.\n  const index = ArrayPrototypeIndexOf(state.pipes, dest)\n  if (index === -1) return this\n  state.pipes.splice(index, 1)\n  if (state.pipes.length === 0) this.pause()\n  dest.emit('unpipe', this, unpipeInfo)\n  return this\n}\n\n// Set up data events if they are asked for\n// Ensure readable listeners eventually get something.\nReadable.prototype.on = function (ev, fn) {\n  const res = Stream.prototype.on.call(this, ev, fn)\n  const state = this._readableState\n  if (ev === 'data') {\n    // Update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0\n\n    // Try start flowing on next tick if stream isn't explicitly paused.\n    if (state.flowing !== false) this.resume()\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true\n      state.flowing = false\n      state.emittedReadable = false\n      debug('on readable', state.length, state.reading)\n      if (state.length) {\n        emitReadable(this)\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this)\n      }\n    }\n  }\n  return res\n}\nReadable.prototype.addListener = Readable.prototype.on\nReadable.prototype.removeListener = function (ev, fn) {\n  const res = Stream.prototype.removeListener.call(this, ev, fn)\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nReadable.prototype.off = Readable.prototype.removeListener\nReadable.prototype.removeAllListeners = function (ev) {\n  const res = Stream.prototype.removeAllListeners.apply(this, arguments)\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nfunction updateReadableListening(self) {\n  const state = self._readableState\n  state.readableListening = self.listenerCount('readable') > 0\n  if (state.resumeScheduled && state[kPaused] === false) {\n    // Flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true\n\n    // Crude way to check if we should resume.\n  } else if (self.listenerCount('data') > 0) {\n    self.resume()\n  } else if (!state.readableListening) {\n    state.flowing = null\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0')\n  self.read(0)\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  const state = this._readableState\n  if (!state.flowing) {\n    debug('resume')\n    // We flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume().\n    state.flowing = !state.readableListening\n    resume(this, state)\n  }\n  state[kPaused] = false\n  return this\n}\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true\n    process.nextTick(resume_, stream, state)\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading)\n  if (!state.reading) {\n    stream.read(0)\n  }\n  state.resumeScheduled = false\n  stream.emit('resume')\n  flow(stream)\n  if (state.flowing && !state.reading) stream.read(0)\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing)\n  if (this._readableState.flowing !== false) {\n    debug('pause')\n    this._readableState.flowing = false\n    this.emit('pause')\n  }\n  this._readableState[kPaused] = true\n  return this\n}\nfunction flow(stream) {\n  const state = stream._readableState\n  debug('flow', state.flowing)\n  while (state.flowing && stream.read() !== null);\n}\n\n// Wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  let paused = false\n\n  // TODO (ronag): Should this.destroy(err) emit\n  // 'error' on the wrapped stream? Would require\n  // a static factory method, e.g. Readable.wrap(stream).\n\n  stream.on('data', (chunk) => {\n    if (!this.push(chunk) && stream.pause) {\n      paused = true\n      stream.pause()\n    }\n  })\n  stream.on('end', () => {\n    this.push(null)\n  })\n  stream.on('error', (err) => {\n    errorOrDestroy(this, err)\n  })\n  stream.on('close', () => {\n    this.destroy()\n  })\n  stream.on('destroy', () => {\n    this.destroy()\n  })\n  this._read = () => {\n    if (paused && stream.resume) {\n      paused = false\n      stream.resume()\n    }\n  }\n\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\n  const streamKeys = ObjectKeys(stream)\n  for (let j = 1; j < streamKeys.length; j++) {\n    const i = streamKeys[j]\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = stream[i].bind(stream)\n    }\n  }\n  return this\n}\nReadable.prototype[SymbolAsyncIterator] = function () {\n  return streamToAsyncIterator(this)\n}\nReadable.prototype.iterator = function (options) {\n  if (options !== undefined) {\n    validateObject(options, 'options')\n  }\n  return streamToAsyncIterator(this, options)\n}\nfunction streamToAsyncIterator(stream, options) {\n  if (typeof stream.read !== 'function') {\n    stream = Readable.wrap(stream, {\n      objectMode: true\n    })\n  }\n  const iter = createAsyncIterator(stream, options)\n  iter.stream = stream\n  return iter\n}\nasync function* createAsyncIterator(stream, options) {\n  let callback = nop\n  function next(resolve) {\n    if (this === stream) {\n      callback()\n      callback = nop\n    } else {\n      callback = resolve\n    }\n  }\n  stream.on('readable', next)\n  let error\n  const cleanup = eos(\n    stream,\n    {\n      writable: false\n    },\n    (err) => {\n      error = err ? aggregateTwoErrors(error, err) : null\n      callback()\n      callback = nop\n    }\n  )\n  try {\n    while (true) {\n      const chunk = stream.destroyed ? null : stream.read()\n      if (chunk !== null) {\n        yield chunk\n      } else if (error) {\n        throw error\n      } else if (error === null) {\n        return\n      } else {\n        await new Promise(next)\n      }\n    }\n  } catch (err) {\n    error = aggregateTwoErrors(error, err)\n    throw error\n  } finally {\n    if (\n      (error || (options === null || options === undefined ? undefined : options.destroyOnReturn) !== false) &&\n      (error === undefined || stream._readableState.autoDestroy)\n    ) {\n      destroyImpl.destroyer(stream, null)\n    } else {\n      stream.off('readable', next)\n      cleanup()\n    }\n  }\n}\n\n// Making it explicit these properties are not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail.\nObjectDefineProperties(Readable.prototype, {\n  readable: {\n    __proto__: null,\n    get() {\n      const r = this._readableState\n      // r.readable === false means that this is part of a Duplex stream\n      // where the readable side was disabled upon construction.\n      // Compat. The user might manually disable readable side through\n      // deprecated setter.\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted\n    },\n    set(val) {\n      // Backwards compat.\n      if (this._readableState) {\n        this._readableState.readable = !!val\n      }\n    }\n  },\n  readableDidRead: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.dataEmitted\n    }\n  },\n  readableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._readableState.readable !== false &&\n        (this._readableState.destroyed || this._readableState.errored) &&\n        !this._readableState.endEmitted\n      )\n    }\n  },\n  readableHighWaterMark: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.highWaterMark\n    }\n  },\n  readableBuffer: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState && this._readableState.buffer\n    }\n  },\n  readableFlowing: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.flowing\n    },\n    set: function (state) {\n      if (this._readableState) {\n        this._readableState.flowing = state\n      }\n    }\n  },\n  readableLength: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState.length\n    }\n  },\n  readableObjectMode: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.objectMode : false\n    }\n  },\n  readableEncoding: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.encoding : null\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.errored : null\n    }\n  },\n  closed: {\n    __proto__: null,\n    get() {\n      return this._readableState ? this._readableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.destroyed : false\n    },\n    set(value) {\n      // We ignore the value if the stream\n      // has not been initialized yet.\n      if (!this._readableState) {\n        return\n      }\n\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      this._readableState.destroyed = value\n    }\n  },\n  readableEnded: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.endEmitted : false\n    }\n  }\n})\nObjectDefineProperties(ReadableState.prototype, {\n  // Legacy getter for `pipesCount`.\n  pipesCount: {\n    __proto__: null,\n    get() {\n      return this.pipes.length\n    }\n  },\n  // Legacy property for `paused`.\n  paused: {\n    __proto__: null,\n    get() {\n      return this[kPaused] !== false\n    },\n    set(value) {\n      this[kPaused] = !!value\n    }\n  }\n})\n\n// Exposed for testing purposes only.\nReadable._fromList = fromList\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered.\n  if (state.length === 0) return null\n  let ret\n  if (state.objectMode) ret = state.buffer.shift()\n  else if (!n || n >= state.length) {\n    // Read it all, truncate the list.\n    if (state.decoder) ret = state.buffer.join('')\n    else if (state.buffer.length === 1) ret = state.buffer.first()\n    else ret = state.buffer.concat(state.length)\n    state.buffer.clear()\n  } else {\n    // read part of list.\n    ret = state.buffer.consume(n, state.decoder)\n  }\n  return ret\n}\nfunction endReadable(stream) {\n  const state = stream._readableState\n  debug('endReadable', state.endEmitted)\n  if (!state.endEmitted) {\n    state.ended = true\n    process.nextTick(endReadableNT, state, stream)\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length)\n\n  // Check that we didn't get one last unshift.\n  if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {\n    state.endEmitted = true\n    stream.emit('end')\n    if (stream.writable && stream.allowHalfOpen === false) {\n      process.nextTick(endWritableNT, stream)\n    } else if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well.\n      const wState = stream._writableState\n      const autoDestroy =\n        !wState ||\n        (wState.autoDestroy &&\n          // We don't expect the writable to ever 'finish'\n          // if writable is explicitly set to false.\n          (wState.finished || wState.writable === false))\n      if (autoDestroy) {\n        stream.destroy()\n      }\n    }\n  }\n}\nfunction endWritableNT(stream) {\n  const writable = stream.writable && !stream.writableEnded && !stream.destroyed\n  if (writable) {\n    stream.end()\n  }\n}\nReadable.from = function (iterable, opts) {\n  return from(Readable, iterable, opts)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nReadable.fromWeb = function (readableStream, options) {\n  return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options)\n}\nReadable.toWeb = function (streamReadable, options) {\n  return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options)\n}\nReadable.wrap = function (src, options) {\n  var _ref, _src$readableObjectMo\n  return new Readable({\n    objectMode:\n      (_ref =\n        (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== undefined\n          ? _src$readableObjectMo\n          : src.objectMode) !== null && _ref !== undefined\n        ? _ref\n        : true,\n    ...options,\n    destroy(err, callback) {\n      destroyImpl.destroyer(src, err)\n      callback(err)\n    }\n  }).wrap(src)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n;('use strict')\nconst {\n  ArrayPrototypeSlice,\n  Error,\n  FunctionPrototypeSymbolHasInstance,\n  ObjectDefineProperty,\n  ObjectDefineProperties,\n  ObjectSetPrototypeOf,\n  StringPrototypeToLowerCase,\n  Symbol,\n  SymbolHasInstance\n} = require('../../ours/primordials')\nmodule.exports = Writable\nWritable.WritableState = WritableState\nconst { EventEmitter: EE } = require('events')\nconst Stream = require('./legacy').Stream\nconst { Buffer } = require('buffer')\nconst destroyImpl = require('./destroy')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED,\n  ERR_STREAM_ALREADY_FINISHED,\n  ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING\n} = require('../../ours/errors').codes\nconst { errorOrDestroy } = destroyImpl\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Writable, Stream)\nfunction nop() {}\nconst kOnFinished = Symbol('kOnFinished')\nfunction WritableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode)\n\n  // The point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write().\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // if _final has been called.\n  this.finalCalled = false\n\n  // drain event flag.\n  this.needDrain = false\n  // At the start of calling end()\n  this.ending = false\n  // When end() has been called, and returned.\n  this.ended = false\n  // When 'finish' is emitted.\n  this.finished = false\n\n  // Has it been destroyed\n  this.destroyed = false\n\n  // Should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  const noDecode = !!(options && options.decodeStrings === false)\n  this.decodeStrings = !noDecode\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0\n\n  // A flag to see when we're in the middle of a write.\n  this.writing = false\n\n  // When true all writes will be buffered until .uncork() call.\n  this.corked = 0\n\n  // A flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true\n\n  // A flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false\n\n  // The callback that's passed to _write(chunk, cb).\n  this.onwrite = onwrite.bind(undefined, stream)\n\n  // The callback that the user supplies to write(chunk, encoding, cb).\n  this.writecb = null\n\n  // The amount that is being written when _write is called.\n  this.writelen = 0\n\n  // Storage for data passed to the afterWrite() callback in case of\n  // synchronous _write() completion.\n  this.afterWriteTickInfo = null\n  resetBuffer(this)\n\n  // Number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted.\n  this.pendingcb = 0\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // Emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams.\n  this.prefinished = false\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'finish' (and potentially 'end').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Indicates whether the stream has errored. When true all write() calls\n  // should return false. This is needed since when autoDestroy\n  // is disabled we need a way to tell whether the stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n  this[kOnFinished] = []\n}\nfunction resetBuffer(state) {\n  state.buffered = []\n  state.bufferedIndex = 0\n  state.allBuffers = true\n  state.allNoop = true\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  return ArrayPrototypeSlice(this.buffered, this.bufferedIndex)\n}\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\n  __proto__: null,\n  get() {\n    return this.buffered.length - this.bufferedIndex\n  }\n})\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options)\n  this._writableState = new WritableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write\n    if (typeof options.writev === 'function') this._writev = options.writev\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.final === 'function') this._final = options.final\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    const state = this._writableState\n    if (!state.writing) {\n      clearBuffer(this, state)\n    }\n    finishMaybe(this, state)\n  })\n}\nObjectDefineProperty(Writable, SymbolHasInstance, {\n  __proto__: null,\n  value: function (object) {\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true\n    if (this !== Writable) return false\n    return object && object._writableState instanceof WritableState\n  }\n})\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE())\n}\nfunction _write(stream, chunk, encoding, cb) {\n  const state = stream._writableState\n  if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = state.defaultEncoding\n  } else {\n    if (!encoding) encoding = state.defaultEncoding\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n    if (typeof cb !== 'function') cb = nop\n  }\n  if (chunk === null) {\n    throw new ERR_STREAM_NULL_VALUES()\n  } else if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      if (state.decodeStrings !== false) {\n        chunk = Buffer.from(chunk, encoding)\n        encoding = 'buffer'\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = 'buffer'\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = 'buffer'\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  let err\n  if (state.ending) {\n    err = new ERR_STREAM_WRITE_AFTER_END()\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('write')\n  }\n  if (err) {\n    process.nextTick(cb, err)\n    errorOrDestroy(stream, err, true)\n    return err\n  }\n  state.pendingcb++\n  return writeOrBuffer(stream, state, chunk, encoding, cb)\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  return _write(this, chunk, encoding, cb) === true\n}\nWritable.prototype.cork = function () {\n  this._writableState.corked++\n}\nWritable.prototype.uncork = function () {\n  const state = this._writableState\n  if (state.corked) {\n    state.corked--\n    if (!state.writing) clearBuffer(this, state)\n  }\n}\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = StringPrototypeToLowerCase(encoding)\n  if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n  this._writableState.defaultEncoding = encoding\n  return this\n}\n\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n  const len = state.objectMode ? 1 : chunk.length\n  state.length += len\n\n  // stream._write resets state.length\n  const ret = state.length < state.highWaterMark\n  // We must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true\n  if (state.writing || state.corked || state.errored || !state.constructed) {\n    state.buffered.push({\n      chunk,\n      encoding,\n      callback\n    })\n    if (state.allBuffers && encoding !== 'buffer') {\n      state.allBuffers = false\n    }\n    if (state.allNoop && callback !== nop) {\n      state.allNoop = false\n    }\n  } else {\n    state.writelen = len\n    state.writecb = callback\n    state.writing = true\n    state.sync = true\n    stream._write(chunk, encoding, state.onwrite)\n    state.sync = false\n  }\n\n  // Return false if errored or destroyed in order to break\n  // any synchronous while(stream.write(data)) loops.\n  return ret && !state.errored && !state.destroyed\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len\n  state.writecb = cb\n  state.writing = true\n  state.sync = true\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'))\n  else if (writev) stream._writev(chunk, state.onwrite)\n  else stream._write(chunk, encoding, state.onwrite)\n  state.sync = false\n}\nfunction onwriteError(stream, state, er, cb) {\n  --state.pendingcb\n  cb(er)\n  // Ensure callbacks are invoked even when autoDestroy is\n  // not enabled. Passing `er` here doesn't make sense since\n  // it's related to one specific write, not to the buffered\n  // writes.\n  errorBuffer(state)\n  // This can emit error, but error must always follow cb.\n  errorOrDestroy(stream, er)\n}\nfunction onwrite(stream, er) {\n  const state = stream._writableState\n  const sync = state.sync\n  const cb = state.writecb\n  if (typeof cb !== 'function') {\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK())\n    return\n  }\n  state.writing = false\n  state.writecb = null\n  state.length -= state.writelen\n  state.writelen = 0\n  if (er) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    er.stack // eslint-disable-line no-unused-expressions\n\n    if (!state.errored) {\n      state.errored = er\n    }\n\n    // In case of duplex streams we need to notify the readable side of the\n    // error.\n    if (stream._readableState && !stream._readableState.errored) {\n      stream._readableState.errored = er\n    }\n    if (sync) {\n      process.nextTick(onwriteError, stream, state, er, cb)\n    } else {\n      onwriteError(stream, state, er, cb)\n    }\n  } else {\n    if (state.buffered.length > state.bufferedIndex) {\n      clearBuffer(stream, state)\n    }\n    if (sync) {\n      // It is a common case that the callback passed to .write() is always\n      // the same. In that case, we do not schedule a new nextTick(), but\n      // rather just increase a counter, to improve performance and avoid\n      // memory allocations.\n      if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n        state.afterWriteTickInfo.count++\n      } else {\n        state.afterWriteTickInfo = {\n          count: 1,\n          cb,\n          stream,\n          state\n        }\n        process.nextTick(afterWriteTick, state.afterWriteTickInfo)\n      }\n    } else {\n      afterWrite(stream, state, 1, cb)\n    }\n  }\n}\nfunction afterWriteTick({ stream, state, count, cb }) {\n  state.afterWriteTickInfo = null\n  return afterWrite(stream, state, count, cb)\n}\nfunction afterWrite(stream, state, count, cb) {\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain\n  if (needDrain) {\n    state.needDrain = false\n    stream.emit('drain')\n  }\n  while (count-- > 0) {\n    state.pendingcb--\n    cb()\n  }\n  if (state.destroyed) {\n    errorBuffer(state)\n  }\n  finishMaybe(stream, state)\n}\n\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n  if (state.writing) {\n    return\n  }\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\n    var _state$errored\n    const { chunk, callback } = state.buffered[n]\n    const len = state.objectMode ? 1 : chunk.length\n    state.length -= len\n    callback(\n      (_state$errored = state.errored) !== null && _state$errored !== undefined\n        ? _state$errored\n        : new ERR_STREAM_DESTROYED('write')\n    )\n  }\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    var _state$errored2\n    onfinishCallbacks[i](\n      (_state$errored2 = state.errored) !== null && _state$errored2 !== undefined\n        ? _state$errored2\n        : new ERR_STREAM_DESTROYED('end')\n    )\n  }\n  resetBuffer(state)\n}\n\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n  if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n    return\n  }\n  const { buffered, bufferedIndex, objectMode } = state\n  const bufferedLength = buffered.length - bufferedIndex\n  if (!bufferedLength) {\n    return\n  }\n  let i = bufferedIndex\n  state.bufferProcessing = true\n  if (bufferedLength > 1 && stream._writev) {\n    state.pendingcb -= bufferedLength - 1\n    const callback = state.allNoop\n      ? nop\n      : (err) => {\n          for (let n = i; n < buffered.length; ++n) {\n            buffered[n].callback(err)\n          }\n        }\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\n    // since `doWrite` will mutate the array.\n    const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i)\n    chunks.allBuffers = state.allBuffers\n    doWrite(stream, state, true, state.length, chunks, '', callback)\n    resetBuffer(state)\n  } else {\n    do {\n      const { chunk, encoding, callback } = buffered[i]\n      buffered[i++] = null\n      const len = objectMode ? 1 : chunk.length\n      doWrite(stream, state, false, len, chunk, encoding, callback)\n    } while (i < buffered.length && !state.writing)\n    if (i === buffered.length) {\n      resetBuffer(state)\n    } else if (i > 256) {\n      buffered.splice(0, i)\n      state.bufferedIndex = 0\n    } else {\n      state.bufferedIndex = i\n    }\n  }\n  state.bufferProcessing = false\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  if (this._writev) {\n    this._writev(\n      [\n        {\n          chunk,\n          encoding\n        }\n      ],\n      cb\n    )\n  } else {\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()')\n  }\n}\nWritable.prototype._writev = null\nWritable.prototype.end = function (chunk, encoding, cb) {\n  const state = this._writableState\n  if (typeof chunk === 'function') {\n    cb = chunk\n    chunk = null\n    encoding = null\n  } else if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = null\n  }\n  let err\n  if (chunk !== null && chunk !== undefined) {\n    const ret = _write(this, chunk, encoding)\n    if (ret instanceof Error) {\n      err = ret\n    }\n  }\n\n  // .end() fully uncorks.\n  if (state.corked) {\n    state.corked = 1\n    this.uncork()\n  }\n  if (err) {\n    // Do nothing...\n  } else if (!state.errored && !state.ending) {\n    // This is forgiving in terms of unnecessary calls to end() and can hide\n    // logic errors. However, usually such errors are harmless and causing a\n    // hard error can be disproportionately destructive. It is not always\n    // trivial for the user to determine whether end() needs to be called\n    // or not.\n\n    state.ending = true\n    finishMaybe(this, state, true)\n    state.ended = true\n  } else if (state.finished) {\n    err = new ERR_STREAM_ALREADY_FINISHED('end')\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('end')\n  }\n  if (typeof cb === 'function') {\n    if (err || state.finished) {\n      process.nextTick(cb, err)\n    } else {\n      state[kOnFinished].push(cb)\n    }\n  }\n  return this\n}\nfunction needFinish(state) {\n  return (\n    state.ending &&\n    !state.destroyed &&\n    state.constructed &&\n    state.length === 0 &&\n    !state.errored &&\n    state.buffered.length === 0 &&\n    !state.finished &&\n    !state.writing &&\n    !state.errorEmitted &&\n    !state.closeEmitted\n  )\n}\nfunction callFinal(stream, state) {\n  let called = false\n  function onFinish(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    state.pendingcb--\n    if (err) {\n      const onfinishCallbacks = state[kOnFinished].splice(0)\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\n        onfinishCallbacks[i](err)\n      }\n      errorOrDestroy(stream, err, state.sync)\n    } else if (needFinish(state)) {\n      state.prefinished = true\n      stream.emit('prefinish')\n      // Backwards compat. Don't check state.sync here.\n      // Some streams assume 'finish' will be emitted\n      // asynchronously relative to _final callback.\n      state.pendingcb++\n      process.nextTick(finish, stream, state)\n    }\n  }\n  state.sync = true\n  state.pendingcb++\n  try {\n    stream._final(onFinish)\n  } catch (err) {\n    onFinish(err)\n  }\n  state.sync = false\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.finalCalled = true\n      callFinal(stream, state)\n    } else {\n      state.prefinished = true\n      stream.emit('prefinish')\n    }\n  }\n}\nfunction finishMaybe(stream, state, sync) {\n  if (needFinish(state)) {\n    prefinish(stream, state)\n    if (state.pendingcb === 0) {\n      if (sync) {\n        state.pendingcb++\n        process.nextTick(\n          (stream, state) => {\n            if (needFinish(state)) {\n              finish(stream, state)\n            } else {\n              state.pendingcb--\n            }\n          },\n          stream,\n          state\n        )\n      } else if (needFinish(state)) {\n        state.pendingcb++\n        finish(stream, state)\n      }\n    }\n  }\n}\nfunction finish(stream, state) {\n  state.pendingcb--\n  state.finished = true\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    onfinishCallbacks[i]()\n  }\n  stream.emit('finish')\n  if (state.autoDestroy) {\n    // In case of duplex streams we need a way to detect\n    // if the readable side is ready for autoDestroy as well.\n    const rState = stream._readableState\n    const autoDestroy =\n      !rState ||\n      (rState.autoDestroy &&\n        // We don't expect the readable to ever 'end'\n        // if readable is explicitly set to false.\n        (rState.endEmitted || rState.readable === false))\n    if (autoDestroy) {\n      stream.destroy()\n    }\n  }\n}\nObjectDefineProperties(Writable.prototype, {\n  closed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.destroyed : false\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly managing destroyed.\n      if (this._writableState) {\n        this._writableState.destroyed = value\n      }\n    }\n  },\n  writable: {\n    __proto__: null,\n    get() {\n      const w = this._writableState\n      // w.writable === false means that this is part of a Duplex stream\n      // where the writable side was disabled upon construction.\n      // Compat. The user might manually disable writable side through\n      // deprecated setter.\n      return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended\n    },\n    set(val) {\n      // Backwards compatible.\n      if (this._writableState) {\n        this._writableState.writable = !!val\n      }\n    }\n  },\n  writableFinished: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.finished : false\n    }\n  },\n  writableObjectMode: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.objectMode : false\n    }\n  },\n  writableBuffer: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.getBuffer()\n    }\n  },\n  writableEnded: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.ending : false\n    }\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    get() {\n      const wState = this._writableState\n      if (!wState) return false\n      return !wState.destroyed && !wState.ending && wState.needDrain\n    }\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.highWaterMark\n    }\n  },\n  writableCorked: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.corked : 0\n    }\n  },\n  writableLength: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.length\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._writableState ? this._writableState.errored : null\n    }\n  },\n  writableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._writableState.writable !== false &&\n        (this._writableState.destroyed || this._writableState.errored) &&\n        !this._writableState.finished\n      )\n    }\n  }\n})\nconst destroy = destroyImpl.destroy\nWritable.prototype.destroy = function (err, cb) {\n  const state = this._writableState\n\n  // Invoke pending callbacks.\n  if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n    process.nextTick(errorBuffer, state)\n  }\n  destroy.call(this, err, cb)\n  return this\n}\nWritable.prototype._undestroy = destroyImpl.undestroy\nWritable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nWritable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nWritable.fromWeb = function (writableStream, options) {\n  return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options)\n}\nWritable.toWeb = function (streamWritable) {\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\n;('use strict')\nconst bufferModule = require('buffer')\nconst {\n  isReadable,\n  isWritable,\n  isIterable,\n  isNodeStream,\n  isReadableNodeStream,\n  isWritableNodeStream,\n  isDuplexNodeStream\n} = require('./utils')\nconst eos = require('./end-of-stream')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE }\n} = require('../../ours/errors')\nconst { destroyer } = require('./destroy')\nconst Duplex = require('./duplex')\nconst Readable = require('./readable')\nconst { createDeferredPromise } = require('../../ours/util')\nconst from = require('./from')\nconst Blob = globalThis.Blob || bufferModule.Blob\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst { FunctionPrototypeCall } = require('../../ours/primordials')\n\n// This is needed for pre node 17.\nclass Duplexify extends Duplex {\n  constructor(options) {\n    super(options)\n\n    // https://github.com/nodejs/node/pull/34385\n\n    if ((options === null || options === undefined ? undefined : options.readable) === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if ((options === null || options === undefined ? undefined : options.writable) === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  }\n}\nmodule.exports = function duplexify(body, name) {\n  if (isDuplexNodeStream(body)) {\n    return body\n  }\n  if (isReadableNodeStream(body)) {\n    return _duplexify({\n      readable: body\n    })\n  }\n  if (isWritableNodeStream(body)) {\n    return _duplexify({\n      writable: body\n    })\n  }\n  if (isNodeStream(body)) {\n    return _duplexify({\n      writable: false,\n      readable: false\n    })\n  }\n\n  // TODO: Webstreams\n  // if (isReadableStream(body)) {\n  //   return _duplexify({ readable: Readable.fromWeb(body) });\n  // }\n\n  // TODO: Webstreams\n  // if (isWritableStream(body)) {\n  //   return _duplexify({ writable: Writable.fromWeb(body) });\n  // }\n\n  if (typeof body === 'function') {\n    const { value, write, final, destroy } = fromAsyncGen(body)\n    if (isIterable(value)) {\n      return from(Duplexify, value, {\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        write,\n        final,\n        destroy\n      })\n    }\n    const then = value === null || value === undefined ? undefined : value.then\n    if (typeof then === 'function') {\n      let d\n      const promise = FunctionPrototypeCall(\n        then,\n        value,\n        (val) => {\n          if (val != null) {\n            throw new ERR_INVALID_RETURN_VALUE('nully', 'body', val)\n          }\n        },\n        (err) => {\n          destroyer(d, err)\n        }\n      )\n      return (d = new Duplexify({\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        readable: false,\n        write,\n        final(cb) {\n          final(async () => {\n            try {\n              await promise\n              process.nextTick(cb, null)\n            } catch (err) {\n              process.nextTick(cb, err)\n            }\n          })\n        },\n        destroy\n      }))\n    }\n    throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or AsyncFunction', name, value)\n  }\n  if (isBlob(body)) {\n    return duplexify(body.arrayBuffer())\n  }\n  if (isIterable(body)) {\n    return from(Duplexify, body, {\n      // TODO (ronag): highWaterMark?\n      objectMode: true,\n      writable: false\n    })\n  }\n\n  // TODO: Webstreams.\n  // if (\n  //   isReadableStream(body?.readable) &&\n  //   isWritableStream(body?.writable)\n  // ) {\n  //   return Duplexify.fromWeb(body);\n  // }\n\n  if (\n    typeof (body === null || body === undefined ? undefined : body.writable) === 'object' ||\n    typeof (body === null || body === undefined ? undefined : body.readable) === 'object'\n  ) {\n    const readable =\n      body !== null && body !== undefined && body.readable\n        ? isReadableNodeStream(body === null || body === undefined ? undefined : body.readable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.readable\n          : duplexify(body.readable)\n        : undefined\n    const writable =\n      body !== null && body !== undefined && body.writable\n        ? isWritableNodeStream(body === null || body === undefined ? undefined : body.writable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.writable\n          : duplexify(body.writable)\n        : undefined\n    return _duplexify({\n      readable,\n      writable\n    })\n  }\n  const then = body === null || body === undefined ? undefined : body.then\n  if (typeof then === 'function') {\n    let d\n    FunctionPrototypeCall(\n      then,\n      body,\n      (val) => {\n        if (val != null) {\n          d.push(val)\n        }\n        d.push(null)\n      },\n      (err) => {\n        destroyer(d, err)\n      }\n    )\n    return (d = new Duplexify({\n      objectMode: true,\n      writable: false,\n      read() {}\n    }))\n  }\n  throw new ERR_INVALID_ARG_TYPE(\n    name,\n    [\n      'Blob',\n      'ReadableStream',\n      'WritableStream',\n      'Stream',\n      'Iterable',\n      'AsyncIterable',\n      'Function',\n      '{ readable, writable } pair',\n      'Promise'\n    ],\n    body\n  )\n}\nfunction fromAsyncGen(fn) {\n  let { promise, resolve } = createDeferredPromise()\n  const ac = new AbortController()\n  const signal = ac.signal\n  const value = fn(\n    (async function* () {\n      while (true) {\n        const _promise = promise\n        promise = null\n        const { chunk, done, cb } = await _promise\n        process.nextTick(cb)\n        if (done) return\n        if (signal.aborted)\n          throw new AbortError(undefined, {\n            cause: signal.reason\n          })\n        ;({ promise, resolve } = createDeferredPromise())\n        yield chunk\n      }\n    })(),\n    {\n      signal\n    }\n  )\n  return {\n    value,\n    write(chunk, encoding, cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        chunk,\n        done: false,\n        cb\n      })\n    },\n    final(cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        done: true,\n        cb\n      })\n    },\n    destroy(err, cb) {\n      ac.abort()\n      cb(err)\n    }\n  }\n}\nfunction _duplexify(pair) {\n  const r = pair.readable && typeof pair.readable.read !== 'function' ? Readable.wrap(pair.readable) : pair.readable\n  const w = pair.writable\n  let readable = !!isReadable(r)\n  let writable = !!isWritable(w)\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    }\n  }\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplexify({\n    // TODO (ronag): highWaterMark?\n    readableObjectMode: !!(r !== null && r !== undefined && r.readableObjectMode),\n    writableObjectMode: !!(w !== null && w !== undefined && w.writableObjectMode),\n    readable,\n    writable\n  })\n  if (writable) {\n    eos(w, (err) => {\n      writable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    d._write = function (chunk, encoding, callback) {\n      if (w.write(chunk, encoding)) {\n        callback()\n      } else {\n        ondrain = callback\n      }\n    }\n    d._final = function (callback) {\n      w.end()\n      onfinish = callback\n    }\n    w.on('drain', function () {\n      if (ondrain) {\n        const cb = ondrain\n        ondrain = null\n        cb()\n      }\n    })\n    w.on('finish', function () {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    eos(r, (err) => {\n      readable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    r.on('readable', function () {\n      if (onreadable) {\n        const cb = onreadable\n        onreadable = null\n        cb()\n      }\n    })\n    r.on('end', function () {\n      d.push(null)\n    })\n    d._read = function () {\n      while (true) {\n        const buf = r.read()\n        if (buf === null) {\n          onreadable = d._read\n          return\n        }\n        if (!d.push(buf)) {\n          return\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      destroyer(w, err)\n      destroyer(r, err)\n    }\n  }\n  return d\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototype inheritance, this class\n// prototypically inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict'\n\nconst {\n  ObjectDefineProperties,\n  ObjectGetOwnPropertyDescriptor,\n  ObjectKeys,\n  ObjectSetPrototypeOf\n} = require('../../ours/primordials')\nmodule.exports = Duplex\nconst Readable = require('./readable')\nconst Writable = require('./writable')\nObjectSetPrototypeOf(Duplex.prototype, Readable.prototype)\nObjectSetPrototypeOf(Duplex, Readable)\n{\n  const keys = ObjectKeys(Writable.prototype)\n  // Allow the keys array to be GC'ed.\n  for (let i = 0; i < keys.length; i++) {\n    const method = keys[i]\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method]\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options)\n  Readable.call(this, options)\n  Writable.call(this, options)\n  if (options) {\n    this.allowHalfOpen = options.allowHalfOpen !== false\n    if (options.readable === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if (options.writable === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  } else {\n    this.allowHalfOpen = true\n  }\n}\nObjectDefineProperties(Duplex.prototype, {\n  writable: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writable')\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableHighWaterMark')\n  },\n  writableObjectMode: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableObjectMode')\n  },\n  writableBuffer: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableBuffer')\n  },\n  writableLength: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableLength')\n  },\n  writableFinished: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableFinished')\n  },\n  writableCorked: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableCorked')\n  },\n  writableEnded: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableEnded')\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableNeedDrain')\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      if (this._readableState === undefined || this._writableState === undefined) {\n        return false\n      }\n      return this._readableState.destroyed && this._writableState.destroyed\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      if (this._readableState && this._writableState) {\n        this._readableState.destroyed = value\n        this._writableState.destroyed = value\n      }\n    }\n  }\n})\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nDuplex.fromWeb = function (pair, options) {\n  return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options)\n}\nDuplex.toWeb = function (duplex) {\n  return lazyWebStreams().newReadableWritablePairFromDuplex(duplex)\n}\nlet duplexify\nDuplex.from = function (body) {\n  if (!duplexify) {\n    duplexify = require('./duplexify')\n  }\n  return duplexify(body, 'body')\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf, Symbol } = require('../../ours/primordials')\nmodule.exports = Transform\nconst { ERR_METHOD_NOT_IMPLEMENTED } = require('../../ours/errors').codes\nconst Duplex = require('./duplex')\nconst { getHighWaterMark } = require('./state')\nObjectSetPrototypeOf(Transform.prototype, Duplex.prototype)\nObjectSetPrototypeOf(Transform, Duplex)\nconst kCallback = Symbol('kCallback')\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options)\n\n  // TODO (ronag): This should preferably always be\n  // applied but would be semver-major. Or even better;\n  // make Transform a Readable with the Writable interface.\n  const readableHighWaterMark = options ? getHighWaterMark(this, options, 'readableHighWaterMark', true) : null\n  if (readableHighWaterMark === 0) {\n    // A Duplex will buffer both on the writable and readable side while\n    // a Transform just wants to buffer hwm number of elements. To avoid\n    // buffering twice we disable buffering on the writable side.\n    options = {\n      ...options,\n      highWaterMark: null,\n      readableHighWaterMark,\n      // TODO (ronag): 0 is not optimal since we have\n      // a \"bug\" where we check needDrain before calling _write and not after.\n      // Refs: https://github.com/nodejs/node/pull/32887\n      // Refs: https://github.com/nodejs/node/pull/35941\n      writableHighWaterMark: options.writableHighWaterMark || 0\n    }\n  }\n  Duplex.call(this, options)\n\n  // We have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false\n  this[kCallback] = null\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform\n    if (typeof options.flush === 'function') this._flush = options.flush\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  // Backwards compat. Some Transform streams incorrectly implement _final\n  // instead of or in addition to _flush. By using 'prefinish' instead of\n  // implementing _final we continue supporting this unfortunate use case.\n  this.on('prefinish', prefinish)\n}\nfunction final(cb) {\n  if (typeof this._flush === 'function' && !this.destroyed) {\n    this._flush((er, data) => {\n      if (er) {\n        if (cb) {\n          cb(er)\n        } else {\n          this.destroy(er)\n        }\n        return\n      }\n      if (data != null) {\n        this.push(data)\n      }\n      this.push(null)\n      if (cb) {\n        cb()\n      }\n    })\n  } else {\n    this.push(null)\n    if (cb) {\n      cb()\n    }\n  }\n}\nfunction prefinish() {\n  if (this._final !== final) {\n    final.call(this)\n  }\n}\nTransform.prototype._final = final\nTransform.prototype._transform = function (chunk, encoding, callback) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_transform()')\n}\nTransform.prototype._write = function (chunk, encoding, callback) {\n  const rState = this._readableState\n  const wState = this._writableState\n  const length = rState.length\n  this._transform(chunk, encoding, (err, val) => {\n    if (err) {\n      callback(err)\n      return\n    }\n    if (val != null) {\n      this.push(val)\n    }\n    if (\n      wState.ended ||\n      // Backwards compat.\n      length === rState.length ||\n      // Backwards compat.\n      rState.length < rState.highWaterMark\n    ) {\n      callback()\n    } else {\n      this[kCallback] = callback\n    }\n  })\n}\nTransform.prototype._read = function () {\n  if (this[kCallback]) {\n    const callback = this[kCallback]\n    this[kCallback] = null\n    callback()\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf } = require('../../ours/primordials')\nmodule.exports = PassThrough\nconst Transform = require('./transform')\nObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype)\nObjectSetPrototypeOf(PassThrough, Transform)\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options)\n  Transform.call(this, options)\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { ArrayIsArray, Promise, SymbolAsyncIterator } = require('../../ours/primordials')\nconst eos = require('./end-of-stream')\nconst { once } = require('../../ours/util')\nconst destroyImpl = require('./destroy')\nconst Duplex = require('./duplex')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_INVALID_RETURN_VALUE,\n    ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED,\n    ERR_STREAM_PREMATURE_CLOSE\n  },\n  AbortError\n} = require('../../ours/errors')\nconst { validateFunction, validateAbortSignal } = require('../validators')\nconst {\n  isIterable,\n  isReadable,\n  isReadableNodeStream,\n  isNodeStream,\n  isTransformStream,\n  isWebStream,\n  isReadableStream,\n  isReadableEnded\n} = require('./utils')\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nlet PassThrough\nlet Readable\nfunction destroyer(stream, reading, writing) {\n  let finished = false\n  stream.on('close', () => {\n    finished = true\n  })\n  const cleanup = eos(\n    stream,\n    {\n      readable: reading,\n      writable: writing\n    },\n    (err) => {\n      finished = !err\n    }\n  )\n  return {\n    destroy: (err) => {\n      if (finished) return\n      finished = true\n      destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED('pipe'))\n    },\n    cleanup\n  }\n}\nfunction popCallback(streams) {\n  // Streams should never be an empty array. It should always contain at least\n  // a single stream. Therefore optimize for the average case instead of\n  // checking for length === 0 as well.\n  validateFunction(streams[streams.length - 1], 'streams[stream.length - 1]')\n  return streams.pop()\n}\nfunction makeAsyncIterable(val) {\n  if (isIterable(val)) {\n    return val\n  } else if (isReadableNodeStream(val)) {\n    // Legacy streams are not Iterable.\n    return fromReadable(val)\n  }\n  throw new ERR_INVALID_ARG_TYPE('val', ['Readable', 'Iterable', 'AsyncIterable'], val)\n}\nasync function* fromReadable(val) {\n  if (!Readable) {\n    Readable = require('./readable')\n  }\n  yield* Readable.prototype[SymbolAsyncIterator].call(val)\n}\nasync function pumpToNode(iterable, writable, finish, { end }) {\n  let error\n  let onresolve = null\n  const resume = (err) => {\n    if (err) {\n      error = err\n    }\n    if (onresolve) {\n      const callback = onresolve\n      onresolve = null\n      callback()\n    }\n  }\n  const wait = () =>\n    new Promise((resolve, reject) => {\n      if (error) {\n        reject(error)\n      } else {\n        onresolve = () => {\n          if (error) {\n            reject(error)\n          } else {\n            resolve()\n          }\n        }\n      }\n    })\n  writable.on('drain', resume)\n  const cleanup = eos(\n    writable,\n    {\n      readable: false\n    },\n    resume\n  )\n  try {\n    if (writable.writableNeedDrain) {\n      await wait()\n    }\n    for await (const chunk of iterable) {\n      if (!writable.write(chunk)) {\n        await wait()\n      }\n    }\n    if (end) {\n      writable.end()\n    }\n    await wait()\n    finish()\n  } catch (err) {\n    finish(error !== err ? aggregateTwoErrors(error, err) : err)\n  } finally {\n    cleanup()\n    writable.off('drain', resume)\n  }\n}\nasync function pumpToWeb(readable, writable, finish, { end }) {\n  if (isTransformStream(writable)) {\n    writable = writable.writable\n  }\n  // https://streams.spec.whatwg.org/#example-manual-write-with-backpressure\n  const writer = writable.getWriter()\n  try {\n    for await (const chunk of readable) {\n      await writer.ready\n      writer.write(chunk).catch(() => {})\n    }\n    await writer.ready\n    if (end) {\n      await writer.close()\n    }\n    finish()\n  } catch (err) {\n    try {\n      await writer.abort(err)\n      finish(err)\n    } catch (err) {\n      finish(err)\n    }\n  }\n}\nfunction pipeline(...streams) {\n  return pipelineImpl(streams, once(popCallback(streams)))\n}\nfunction pipelineImpl(streams, callback, opts) {\n  if (streams.length === 1 && ArrayIsArray(streams[0])) {\n    streams = streams[0]\n  }\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  const outerSignal = opts === null || opts === undefined ? undefined : opts.signal\n\n  // Need to cleanup event listeners if last stream is readable\n  // https://github.com/nodejs/node/issues/35452\n  const lastStreamCleanup = []\n  validateAbortSignal(outerSignal, 'options.signal')\n  function abort() {\n    finishImpl(new AbortError())\n  }\n  outerSignal === null || outerSignal === undefined ? undefined : outerSignal.addEventListener('abort', abort)\n  let error\n  let value\n  const destroys = []\n  let finishCount = 0\n  function finish(err) {\n    finishImpl(err, --finishCount === 0)\n  }\n  function finishImpl(err, final) {\n    if (err && (!error || error.code === 'ERR_STREAM_PREMATURE_CLOSE')) {\n      error = err\n    }\n    if (!error && !final) {\n      return\n    }\n    while (destroys.length) {\n      destroys.shift()(error)\n    }\n    outerSignal === null || outerSignal === undefined ? undefined : outerSignal.removeEventListener('abort', abort)\n    ac.abort()\n    if (final) {\n      if (!error) {\n        lastStreamCleanup.forEach((fn) => fn())\n      }\n      process.nextTick(callback, error, value)\n    }\n  }\n  let ret\n  for (let i = 0; i < streams.length; i++) {\n    const stream = streams[i]\n    const reading = i < streams.length - 1\n    const writing = i > 0\n    const end = reading || (opts === null || opts === undefined ? undefined : opts.end) !== false\n    const isLastStream = i === streams.length - 1\n    if (isNodeStream(stream)) {\n      if (end) {\n        const { destroy, cleanup } = destroyer(stream, reading, writing)\n        destroys.push(destroy)\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n\n      // Catch stream errors that occur after pipe/pump has completed.\n      function onError(err) {\n        if (err && err.name !== 'AbortError' && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n          finish(err)\n        }\n      }\n      stream.on('error', onError)\n      if (isReadable(stream) && isLastStream) {\n        lastStreamCleanup.push(() => {\n          stream.removeListener('error', onError)\n        })\n      }\n    }\n    if (i === 0) {\n      if (typeof stream === 'function') {\n        ret = stream({\n          signal\n        })\n        if (!isIterable(ret)) {\n          throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or Stream', 'source', ret)\n        }\n      } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {\n        ret = stream\n      } else {\n        ret = Duplex.from(stream)\n      }\n    } else if (typeof stream === 'function') {\n      if (isTransformStream(ret)) {\n        var _ret\n        ret = makeAsyncIterable((_ret = ret) === null || _ret === undefined ? undefined : _ret.readable)\n      } else {\n        ret = makeAsyncIterable(ret)\n      }\n      ret = stream(ret, {\n        signal\n      })\n      if (reading) {\n        if (!isIterable(ret, true)) {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable', `transform[${i - 1}]`, ret)\n        }\n      } else {\n        var _ret2\n        if (!PassThrough) {\n          PassThrough = require('./passthrough')\n        }\n\n        // If the last argument to pipeline is not a stream\n        // we must create a proxy stream so that pipeline(...)\n        // always returns a stream which can be further\n        // composed through `.pipe(stream)`.\n\n        const pt = new PassThrough({\n          objectMode: true\n        })\n\n        // Handle Promises/A+ spec, `then` could be a getter that throws on\n        // second use.\n        const then = (_ret2 = ret) === null || _ret2 === undefined ? undefined : _ret2.then\n        if (typeof then === 'function') {\n          finishCount++\n          then.call(\n            ret,\n            (val) => {\n              value = val\n              if (val != null) {\n                pt.write(val)\n              }\n              if (end) {\n                pt.end()\n              }\n              process.nextTick(finish)\n            },\n            (err) => {\n              pt.destroy(err)\n              process.nextTick(finish, err)\n            }\n          )\n        } else if (isIterable(ret, true)) {\n          finishCount++\n          pumpToNode(ret, pt, finish, {\n            end\n          })\n        } else if (isReadableStream(ret) || isTransformStream(ret)) {\n          const toRead = ret.readable || ret\n          finishCount++\n          pumpToNode(toRead, pt, finish, {\n            end\n          })\n        } else {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable or Promise', 'destination', ret)\n        }\n        ret = pt\n        const { destroy, cleanup } = destroyer(ret, false, true)\n        destroys.push(destroy)\n        if (isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n    } else if (isNodeStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount += 2\n        const cleanup = pipe(ret, stream, finish, {\n          end\n        })\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      } else if (isTransformStream(ret) || isReadableStream(ret)) {\n        const toRead = ret.readable || ret\n        finishCount++\n        pumpToNode(toRead, stream, finish, {\n          end\n        })\n      } else if (isIterable(ret)) {\n        finishCount++\n        pumpToNode(ret, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else if (isWebStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount++\n        pumpToWeb(makeAsyncIterable(ret), stream, finish, {\n          end\n        })\n      } else if (isReadableStream(ret) || isIterable(ret)) {\n        finishCount++\n        pumpToWeb(ret, stream, finish, {\n          end\n        })\n      } else if (isTransformStream(ret)) {\n        finishCount++\n        pumpToWeb(ret.readable, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else {\n      ret = Duplex.from(stream)\n    }\n  }\n  if (\n    (signal !== null && signal !== undefined && signal.aborted) ||\n    (outerSignal !== null && outerSignal !== undefined && outerSignal.aborted)\n  ) {\n    process.nextTick(abort)\n  }\n  return ret\n}\nfunction pipe(src, dst, finish, { end }) {\n  let ended = false\n  dst.on('close', () => {\n    if (!ended) {\n      // Finish if the destination closes before the source has completed.\n      finish(new ERR_STREAM_PREMATURE_CLOSE())\n    }\n  })\n  src.pipe(dst, {\n    end: false\n  }) // If end is true we already will have a listener to end dst.\n\n  if (end) {\n    // Compat. Before node v10.12.0 stdio used to throw an error so\n    // pipe() did/does not end() stdio destinations.\n    // Now they allow it but \"secretly\" don't close the underlying fd.\n\n    function endFn() {\n      ended = true\n      dst.end()\n    }\n    if (isReadableEnded(src)) {\n      // End the destination if the source has already ended.\n      process.nextTick(endFn)\n    } else {\n      src.once('end', endFn)\n    }\n  } else {\n    finish()\n  }\n  eos(\n    src,\n    {\n      readable: true,\n      writable: false\n    },\n    (err) => {\n      const rState = src._readableState\n      if (\n        err &&\n        err.code === 'ERR_STREAM_PREMATURE_CLOSE' &&\n        rState &&\n        rState.ended &&\n        !rState.errored &&\n        !rState.errorEmitted\n      ) {\n        // Some readable streams will emit 'close' before 'end'. However, since\n        // this is on the readable side 'end' should still be emitted if the\n        // stream has been ended and no error emitted. This should be allowed in\n        // favor of backwards compatibility. Since the stream is piped to a\n        // destination this should not result in any observable difference.\n        // We don't need to check if this is a writable premature close since\n        // eos will only fail with premature close on the reading side for\n        // duplex streams.\n        src.once('end', finish).once('error', finish)\n      } else {\n        finish(err)\n      }\n    }\n  )\n  return eos(\n    dst,\n    {\n      readable: false,\n      writable: true\n    },\n    finish\n  )\n}\nmodule.exports = {\n  pipelineImpl,\n  pipeline\n}\n", "'use strict'\n\nconst { pipeline } = require('./pipeline')\nconst Duplex = require('./duplex')\nconst { destroyer } = require('./destroy')\nconst {\n  isNodeStream,\n  isReadable,\n  isWritable,\n  isWebStream,\n  isTransformStream,\n  isWritableStream,\n  isReadableStream\n} = require('./utils')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }\n} = require('../../ours/errors')\nconst eos = require('./end-of-stream')\nmodule.exports = function compose(...streams) {\n  if (streams.length === 0) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  if (streams.length === 1) {\n    return Duplex.from(streams[0])\n  }\n  const orgStreams = [...streams]\n  if (typeof streams[0] === 'function') {\n    streams[0] = Duplex.from(streams[0])\n  }\n  if (typeof streams[streams.length - 1] === 'function') {\n    const idx = streams.length - 1\n    streams[idx] = Duplex.from(streams[idx])\n  }\n  for (let n = 0; n < streams.length; ++n) {\n    if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {\n      // TODO(ronag): Add checks for non streams.\n      continue\n    }\n    if (\n      n < streams.length - 1 &&\n      !(isReadable(streams[n]) || isReadableStream(streams[n]) || isTransformStream(streams[n]))\n    ) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be readable')\n    }\n    if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be writable')\n    }\n  }\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    } else if (!readable && !writable) {\n      d.destroy()\n    }\n  }\n  const head = streams[0]\n  const tail = pipeline(streams, onfinished)\n  const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head))\n  const readable = !!(isReadable(tail) || isReadableStream(tail) || isTransformStream(tail))\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplex({\n    // TODO (ronag): highWaterMark?\n    writableObjectMode: !!(head !== null && head !== undefined && head.writableObjectMode),\n    readableObjectMode: !!(tail !== null && tail !== undefined && tail.writableObjectMode),\n    writable,\n    readable\n  })\n  if (writable) {\n    if (isNodeStream(head)) {\n      d._write = function (chunk, encoding, callback) {\n        if (head.write(chunk, encoding)) {\n          callback()\n        } else {\n          ondrain = callback\n        }\n      }\n      d._final = function (callback) {\n        head.end()\n        onfinish = callback\n      }\n      head.on('drain', function () {\n        if (ondrain) {\n          const cb = ondrain\n          ondrain = null\n          cb()\n        }\n      })\n    } else if (isWebStream(head)) {\n      const writable = isTransformStream(head) ? head.writable : head\n      const writer = writable.getWriter()\n      d._write = async function (chunk, encoding, callback) {\n        try {\n          await writer.ready\n          writer.write(chunk).catch(() => {})\n          callback()\n        } catch (err) {\n          callback(err)\n        }\n      }\n      d._final = async function (callback) {\n        try {\n          await writer.ready\n          writer.close().catch(() => {})\n          onfinish = callback\n        } catch (err) {\n          callback(err)\n        }\n      }\n    }\n    const toRead = isTransformStream(tail) ? tail.readable : tail\n    eos(toRead, () => {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    if (isNodeStream(tail)) {\n      tail.on('readable', function () {\n        if (onreadable) {\n          const cb = onreadable\n          onreadable = null\n          cb()\n        }\n      })\n      tail.on('end', function () {\n        d.push(null)\n      })\n      d._read = function () {\n        while (true) {\n          const buf = tail.read()\n          if (buf === null) {\n            onreadable = d._read\n            return\n          }\n          if (!d.push(buf)) {\n            return\n          }\n        }\n      }\n    } else if (isWebStream(tail)) {\n      const readable = isTransformStream(tail) ? tail.readable : tail\n      const reader = readable.getReader()\n      d._read = async function () {\n        while (true) {\n          try {\n            const { value, done } = await reader.read()\n            if (!d.push(value)) {\n              return\n            }\n            if (done) {\n              d.push(null)\n              return\n            }\n          } catch {\n            return\n          }\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      if (isNodeStream(tail)) {\n        destroyer(tail, err)\n      }\n    }\n  }\n  return d\n}\n", "'use strict'\n\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst {\n  codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },\n  AbortError\n} = require('../../ours/errors')\nconst { validateAbortSignal, validateInteger, validateObject } = require('../validators')\nconst kWeakHandler = require('../../ours/primordials').Symbol('kWeak')\nconst { finished } = require('./end-of-stream')\nconst staticCompose = require('./compose')\nconst { addAbortSignalNoValidate } = require('./add-abort-signal')\nconst { isWritable, isNodeStream } = require('./utils')\nconst {\n  ArrayPrototypePush,\n  MathFloor,\n  Number,\n  NumberIsNaN,\n  Promise,\n  PromiseReject,\n  PromisePrototypeThen,\n  Symbol\n} = require('../../ours/primordials')\nconst kEmpty = Symbol('kEmpty')\nconst kEof = Symbol('kEof')\nfunction compose(stream, options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  if (isNodeStream(stream) && !isWritable(stream)) {\n    throw new ERR_INVALID_ARG_VALUE('stream', stream, 'must be writable')\n  }\n  const composedStream = staticCompose(this, stream)\n  if (options !== null && options !== undefined && options.signal) {\n    // Not validating as we already validated before\n    addAbortSignalNoValidate(options.signal, composedStream)\n  }\n  return composedStream\n}\nfunction map(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let concurrency = 1\n  if ((options === null || options === undefined ? undefined : options.concurrency) != null) {\n    concurrency = MathFloor(options.concurrency)\n  }\n  validateInteger(concurrency, 'concurrency', 1)\n  return async function* map() {\n    var _options$signal, _options$signal2\n    const ac = new AbortController()\n    const stream = this\n    const queue = []\n    const signal = ac.signal\n    const signalOpt = {\n      signal\n    }\n    const abort = () => ac.abort()\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal = options.signal) !== null &&\n      _options$signal !== undefined &&\n      _options$signal.aborted\n    ) {\n      abort()\n    }\n    options === null || options === undefined\n      ? undefined\n      : (_options$signal2 = options.signal) === null || _options$signal2 === undefined\n      ? undefined\n      : _options$signal2.addEventListener('abort', abort)\n    let next\n    let resume\n    let done = false\n    function onDone() {\n      done = true\n    }\n    async function pump() {\n      try {\n        for await (let val of stream) {\n          var _val\n          if (done) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          try {\n            val = fn(val, signalOpt)\n          } catch (err) {\n            val = PromiseReject(err)\n          }\n          if (val === kEmpty) {\n            continue\n          }\n          if (typeof ((_val = val) === null || _val === undefined ? undefined : _val.catch) === 'function') {\n            val.catch(onDone)\n          }\n          queue.push(val)\n          if (next) {\n            next()\n            next = null\n          }\n          if (!done && queue.length && queue.length >= concurrency) {\n            await new Promise((resolve) => {\n              resume = resolve\n            })\n          }\n        }\n        queue.push(kEof)\n      } catch (err) {\n        const val = PromiseReject(err)\n        PromisePrototypeThen(val, undefined, onDone)\n        queue.push(val)\n      } finally {\n        var _options$signal3\n        done = true\n        if (next) {\n          next()\n          next = null\n        }\n        options === null || options === undefined\n          ? undefined\n          : (_options$signal3 = options.signal) === null || _options$signal3 === undefined\n          ? undefined\n          : _options$signal3.removeEventListener('abort', abort)\n      }\n    }\n    pump()\n    try {\n      while (true) {\n        while (queue.length > 0) {\n          const val = await queue[0]\n          if (val === kEof) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          if (val !== kEmpty) {\n            yield val\n          }\n          queue.shift()\n          if (resume) {\n            resume()\n            resume = null\n          }\n        }\n        await new Promise((resolve) => {\n          next = resolve\n        })\n      }\n    } finally {\n      ac.abort()\n      done = true\n      if (resume) {\n        resume()\n        resume = null\n      }\n    }\n  }.call(this)\n}\nfunction asIndexedPairs(options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  return async function* asIndexedPairs() {\n    let index = 0\n    for await (const val of this) {\n      var _options$signal4\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal4 = options.signal) !== null &&\n        _options$signal4 !== undefined &&\n        _options$signal4.aborted\n      ) {\n        throw new AbortError({\n          cause: options.signal.reason\n        })\n      }\n      yield [index++, val]\n    }\n  }.call(this)\n}\nasync function some(fn, options = undefined) {\n  for await (const unused of filter.call(this, fn, options)) {\n    return true\n  }\n  return false\n}\nasync function every(fn, options = undefined) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n  return !(await some.call(\n    this,\n    async (...args) => {\n      return !(await fn(...args))\n    },\n    options\n  ))\n}\nasync function find(fn, options) {\n  for await (const result of filter.call(this, fn, options)) {\n    return result\n  }\n  return undefined\n}\nasync function forEach(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function forEachFn(value, options) {\n    await fn(value, options)\n    return kEmpty\n  }\n  // eslint-disable-next-line no-unused-vars\n  for await (const unused of map.call(this, forEachFn, options));\n}\nfunction filter(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function filterFn(value, options) {\n    if (await fn(value, options)) {\n      return value\n    }\n    return kEmpty\n  }\n  return map.call(this, filterFn, options)\n}\n\n// Specific to provide better error to reduce since the argument is only\n// missing if the stream has no items in it - but the code is still appropriate\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\n  constructor() {\n    super('reduce')\n    this.message = 'Reduce of an empty stream requires an initial value'\n  }\n}\nasync function reduce(reducer, initialValue, options) {\n  var _options$signal5\n  if (typeof reducer !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('reducer', ['Function', 'AsyncFunction'], reducer)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let hasInitialValue = arguments.length > 1\n  if (\n    options !== null &&\n    options !== undefined &&\n    (_options$signal5 = options.signal) !== null &&\n    _options$signal5 !== undefined &&\n    _options$signal5.aborted\n  ) {\n    const err = new AbortError(undefined, {\n      cause: options.signal.reason\n    })\n    this.once('error', () => {}) // The error is already propagated\n    await finished(this.destroy(err))\n    throw err\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  if (options !== null && options !== undefined && options.signal) {\n    const opts = {\n      once: true,\n      [kWeakHandler]: this\n    }\n    options.signal.addEventListener('abort', () => ac.abort(), opts)\n  }\n  let gotAnyItemFromStream = false\n  try {\n    for await (const value of this) {\n      var _options$signal6\n      gotAnyItemFromStream = true\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal6 = options.signal) !== null &&\n        _options$signal6 !== undefined &&\n        _options$signal6.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (!hasInitialValue) {\n        initialValue = value\n        hasInitialValue = true\n      } else {\n        initialValue = await reducer(initialValue, value, {\n          signal\n        })\n      }\n    }\n    if (!gotAnyItemFromStream && !hasInitialValue) {\n      throw new ReduceAwareErrMissingArgs()\n    }\n  } finally {\n    ac.abort()\n  }\n  return initialValue\n}\nasync function toArray(options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  const result = []\n  for await (const val of this) {\n    var _options$signal7\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal7 = options.signal) !== null &&\n      _options$signal7 !== undefined &&\n      _options$signal7.aborted\n    ) {\n      throw new AbortError(undefined, {\n        cause: options.signal.reason\n      })\n    }\n    ArrayPrototypePush(result, val)\n  }\n  return result\n}\nfunction flatMap(fn, options) {\n  const values = map.call(this, fn, options)\n  return async function* flatMap() {\n    for await (const val of values) {\n      yield* val\n    }\n  }.call(this)\n}\nfunction toIntegerOrInfinity(number) {\n  // We coerce here to align with the spec\n  // https://github.com/tc39/proposal-iterator-helpers/issues/169\n  number = Number(number)\n  if (NumberIsNaN(number)) {\n    return 0\n  }\n  if (number < 0) {\n    throw new ERR_OUT_OF_RANGE('number', '>= 0', number)\n  }\n  return number\n}\nfunction drop(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* drop() {\n    var _options$signal8\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal8 = options.signal) !== null &&\n      _options$signal8 !== undefined &&\n      _options$signal8.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal9\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal9 = options.signal) !== null &&\n        _options$signal9 !== undefined &&\n        _options$signal9.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- <= 0) {\n        yield val\n      }\n    }\n  }.call(this)\n}\nfunction take(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* take() {\n    var _options$signal10\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal10 = options.signal) !== null &&\n      _options$signal10 !== undefined &&\n      _options$signal10.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal11\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal11 = options.signal) !== null &&\n        _options$signal11 !== undefined &&\n        _options$signal11.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- > 0) {\n        yield val\n      } else {\n        return\n      }\n    }\n  }.call(this)\n}\nmodule.exports.streamReturningOperators = {\n  asIndexedPairs,\n  drop,\n  filter,\n  flatMap,\n  map,\n  take,\n  compose\n}\nmodule.exports.promiseReturningOperators = {\n  every,\n  forEach,\n  reduce,\n  toArray,\n  some,\n  find\n}\n", "'use strict'\n\nconst { ArrayPrototypePop, Promise } = require('../ours/primordials')\nconst { isIterable, isNodeStream, isWebStream } = require('../internal/streams/utils')\nconst { pipelineImpl: pl } = require('../internal/streams/pipeline')\nconst { finished } = require('../internal/streams/end-of-stream')\nrequire('../../lib/stream.js')\nfunction pipeline(...streams) {\n  return new Promise((resolve, reject) => {\n    let signal\n    let end\n    const lastArg = streams[streams.length - 1]\n    if (\n      lastArg &&\n      typeof lastArg === 'object' &&\n      !isNodeStream(lastArg) &&\n      !isIterable(lastArg) &&\n      !isWebStream(lastArg)\n    ) {\n      const options = ArrayPrototypePop(streams)\n      signal = options.signal\n      end = options.end\n    }\n    pl(\n      streams,\n      (err, value) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      },\n      {\n        signal,\n        end\n      }\n    )\n  })\n}\nmodule.exports = {\n  finished,\n  pipeline\n}\n", "/* replacement start */\n\nconst { Buffer } = require('buffer')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst { ObjectDefineProperty, ObjectKeys, ReflectApply } = require('./ours/primordials')\nconst {\n  promisify: { custom: customPromisify }\n} = require('./ours/util')\nconst { streamReturningOperators, promiseReturningOperators } = require('./internal/streams/operators')\nconst {\n  codes: { ERR_ILLEGAL_CONSTRUCTOR }\n} = require('./ours/errors')\nconst compose = require('./internal/streams/compose')\nconst { pipeline } = require('./internal/streams/pipeline')\nconst { destroyer } = require('./internal/streams/destroy')\nconst eos = require('./internal/streams/end-of-stream')\nconst internalBuffer = {}\nconst promises = require('./stream/promises')\nconst utils = require('./internal/streams/utils')\nconst Stream = (module.exports = require('./internal/streams/legacy').Stream)\nStream.isDisturbed = utils.isDisturbed\nStream.isErrored = utils.isErrored\nStream.isReadable = utils.isReadable\nStream.Readable = require('./internal/streams/readable')\nfor (const key of ObjectKeys(streamReturningOperators)) {\n  const op = streamReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return Stream.Readable.from(ReflectApply(op, this, args))\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nfor (const key of ObjectKeys(promiseReturningOperators)) {\n  const op = promiseReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return ReflectApply(op, this, args)\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nStream.Writable = require('./internal/streams/writable')\nStream.Duplex = require('./internal/streams/duplex')\nStream.Transform = require('./internal/streams/transform')\nStream.PassThrough = require('./internal/streams/passthrough')\nStream.pipeline = pipeline\nconst { addAbortSignal } = require('./internal/streams/add-abort-signal')\nStream.addAbortSignal = addAbortSignal\nStream.finished = eos\nStream.destroy = destroyer\nStream.compose = compose\nObjectDefineProperty(Stream, 'promises', {\n  __proto__: null,\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nObjectDefineProperty(pipeline, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.pipeline\n  }\n})\nObjectDefineProperty(eos, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.finished\n  }\n})\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream\nStream._isUint8Array = function isUint8Array(value) {\n  return value instanceof Uint8Array\n}\nStream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n}\n", "'use strict'\n\nconst CustomStream = require('../stream')\nconst promises = require('../stream/promises')\nconst originalDestroy = CustomStream.Readable.destroy\nmodule.exports = CustomStream.Readable\n\n// Explicit export naming is needed for ESM\nmodule.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer\nmodule.exports._isUint8Array = CustomStream._isUint8Array\nmodule.exports.isDisturbed = CustomStream.isDisturbed\nmodule.exports.isErrored = CustomStream.isErrored\nmodule.exports.isReadable = CustomStream.isReadable\nmodule.exports.Readable = CustomStream.Readable\nmodule.exports.Writable = CustomStream.Writable\nmodule.exports.Duplex = CustomStream.Duplex\nmodule.exports.Transform = CustomStream.Transform\nmodule.exports.PassThrough = CustomStream.PassThrough\nmodule.exports.addAbortSignal = CustomStream.addAbortSignal\nmodule.exports.finished = CustomStream.finished\nmodule.exports.destroy = CustomStream.destroy\nmodule.exports.destroy = originalDestroy\nmodule.exports.pipeline = CustomStream.pipeline\nmodule.exports.compose = CustomStream.compose\nObject.defineProperty(CustomStream, 'promises', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nmodule.exports.Stream = CustomStream.Stream\n\n// Allow default importing\nmodule.exports.default = module.exports\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "/**\n * A client that can be used to interface with tbDEX PFIs over an HTTP transport\n *\n * [Link to GitHub Repo](https://github.com/TBD54566975/tbdex-js/tree/main/packages/http-client)\n *\n * @packageDocumentation\n */\nexport * from '@tbdex/protocol';\nexport * from './client.js';\nexport * from './types.js';\nexport * from './errors/index.js';\n", "/**\n * Library that can be used to create, parse, verify, and validate\n * the tbDEX Messages and Resources defined in the\n * [protocol specification](https://github.com/TBD54566975/tbdex-protocol/blob/main/README.md).\n *\n * [Link to GitHub Repo](https://github.com/TBD54566975/tbdex-js/tree/main/packages/protocol)\n *\n * @packageDocumentation\n */\nimport { Resource } from './resource.js';\nimport { Message } from './message.js';\nexport * from './resource-kinds/index.js';\nexport * from './message-kinds/index.js';\nexport * from './exchange.js';\nexport * from './did-resolver.js';\nexport * from './dev-tools.js';\nexport * from './crypto.js';\nexport * from './parser.js';\nexport * from './types.js';\nexport { Message, Resource };\n", "import { typeid } from 'typeid-js';\nimport { Crypto } from './crypto.js';\nimport { validate } from './validator.js';\n/**\n * tbDEX Resources are published by PFIs for anyone to consume and generally used as a part of the discovery process.\n * They are not part of the message exchange, i.e Alice cannot reply to a Resource.\n * @beta\n */\nexport class Resource {\n    /** Metadata such as creator, date created, date updated, and ID */\n    metadata;\n    /** Resource kind-specific data */\n    data;\n    /** signature that verifies that authenticity and integrity of a message */\n    _signature;\n    /**\n     * Constructor is primarily for intended for internal use. For a better developer experience,\n     * consumers should use concrete classes to programmatically create and parse resources,\n     * e.g. {@link Offering.parse} and {@link Offering.create}\n     * @param metadata - {@link Resource.metadata}\n     * @param data - {@link Resource.data}\n     * @param signature - {@link Resource._signature}\n     */\n    constructor(metadata, data, signature) {\n        this.metadata = metadata;\n        this.data = data;\n        this._signature = signature;\n    }\n    /** Generates a unique id with the resource kind's prefix */\n    static generateId(resourceKind) {\n        return typeid(resourceKind).toString();\n    }\n    /**\n     * Signs the resource as a jws with detached content and sets the signature property\n     * @param did - the signer's DID\n     * @throws If the signature could not be produced\n     */\n    async sign(did) {\n        this._signature = await Crypto.sign({ did, payload: this.digest(), detached: true });\n    }\n    /**\n     * Validates the resource structure and verifies the cryptographic signature\n     * @throws if the resource signature is invalid\n     * @throws if the signer's DID does not match Resource.metadata.from\n     * @throws if the resource structure is invalid\n     * @throws see {@link Crypto.verify}\n     * @returns Resource signer's DID\n     */\n    async verify() {\n        this.validate();\n        const signer = this.verifySignature();\n        return signer;\n    }\n    /**\n     * Verifies the integrity of the cryptographic signature\n     * @throws if the resource signature is invalid\n     * @throws if the signer's DID does not match Resource.metadata.from\n     * @returns Resource signer's DID\n     */\n    async verifySignature() {\n        if (this.signature === undefined) {\n            throw new Error('Could not verify message signature because no signature is missing');\n        }\n        const signer = await Crypto.verify({ detachedPayload: this.digest(), signature: this.signature });\n        if (this.metadata.from !== signer) { // ensure that DID used to sign matches `from` property in metadata\n            throw new Error('Signature verification failed: Expected DID in kid of JWS header must match metadata.from');\n        }\n        return signer;\n    }\n    /**\n     * Computes a digest of the payload by:\n     * * JSON serializing the payload as per [RFC-8785: JSON Canonicalization Scheme](https://www.rfc-editor.org/rfc/rfc8785)\n     * * sha256 hashing the serialized payload\n     *\n     * @returns The SHA-256 hash of the canonicalized payload, represented as a byte array.\n     */\n    digest() {\n        return Crypto.digest({ metadata: this.metadata, data: this.data });\n    }\n    /**\n     * Valid structure of the resource including the presence of the signature\n     * using the official spec JSON Schemas\n     * @throws If the resource's structure does not match the JSON schemas\n     */\n    validate() {\n        validate(this.toJSON(), 'resource');\n        this.validateData();\n    }\n    /**\n     * Validates `data` section of resource only using the official TBDex JSON Schemas.\n     * This is useful for partially validating unsigned resources.\n     * @throws If the structure of the Resource's data does not match the JSON schemas\n     */\n    validateData() {\n        validate(this.data, this.kind);\n    }\n    /**\n     * returns the resource as a json object. Automatically used by `JSON.stringify` method.\n     */\n    toJSON() {\n        return {\n            metadata: this.metadata,\n            data: this.data,\n            signature: this.signature\n        };\n    }\n    /** the resource's cryptographic signature */\n    get signature() {\n        return this._signature;\n    }\n    /** the resource's id */\n    get id() {\n        return this.metadata.id;\n    }\n    /** The sender's DID */\n    get from() {\n        return this.metadata.from;\n    }\n    /** Resource creation time. Expressed as ISO8601 */\n    get createdAt() {\n        return this.metadata.createdAt;\n    }\n    /** Resource last updated time. Expressed as ISO8601 */\n    get updatedAt() {\n        return this.metadata.updatedAt;\n    }\n    /** the protocol version */\n    get protocol() {\n        return this.metadata.protocol;\n    }\n    /** offering type guard */\n    isOffering() {\n        return this.metadata.kind === 'offering';\n    }\n    /** balance type guard */\n    isBalance() {\n        return this.metadata.kind === 'balance';\n    }\n}\n", "import {\n  TypeID,\n  typeid\n} from \"./chunk-FOHWUNKU.mjs\";\nimport \"./chunk-4WQUCFGE.mjs\";\nimport \"./chunk-5QL2QZCM.mjs\";\nimport \"./chunk-R5Q6Z3GN.mjs\";\nexport {\n  TypeID,\n  typeid\n};\n//# sourceMappingURL=index.mjs.map", "/* eslint-disable no-bitwise */\nconst alphabet: string = \"0123456789abcdefghjkmnpqrstvwxyz\";\n\n// Decoding table\nconst dec: Uint8Array = new Uint8Array([\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,\n  0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,\n  0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,\n  0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,\n  0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n]);\n\nexport function encode(src: Uint8Array): string {\n  const dst: string[] = new Array(26).fill(\"\");\n\n  if (src.length !== 16) {\n    throw new Error(\"Invalid length\");\n  }\n\n  // 10 byte timestamp\n  dst[0] = alphabet[(src[0] & 224) >> 5];\n  dst[1] = alphabet[src[0] & 31];\n  dst[2] = alphabet[(src[1] & 248) >> 3];\n  dst[3] = alphabet[((src[1] & 7) << 2) | ((src[2] & 192) >> 6)];\n  dst[4] = alphabet[(src[2] & 62) >> 1];\n  dst[5] = alphabet[((src[2] & 1) << 4) | ((src[3] & 240) >> 4)];\n  dst[6] = alphabet[((src[3] & 15) << 1) | ((src[4] & 128) >> 7)];\n  dst[7] = alphabet[(src[4] & 124) >> 2];\n  dst[8] = alphabet[((src[4] & 3) << 3) | ((src[5] & 224) >> 5)];\n  dst[9] = alphabet[src[5] & 31];\n\n  // 16 bytes of randomness\n  dst[10] = alphabet[(src[6] & 248) >> 3];\n  dst[11] = alphabet[((src[6] & 7) << 2) | ((src[7] & 192) >> 6)];\n  dst[12] = alphabet[(src[7] & 62) >> 1];\n  dst[13] = alphabet[((src[7] & 1) << 4) | ((src[8] & 240) >> 4)];\n  dst[14] = alphabet[((src[8] & 15) << 1) | ((src[9] & 128) >> 7)];\n  dst[15] = alphabet[(src[9] & 124) >> 2];\n  dst[16] = alphabet[((src[9] & 3) << 3) | ((src[10] & 224) >> 5)];\n  dst[17] = alphabet[src[10] & 31];\n  dst[18] = alphabet[(src[11] & 248) >> 3];\n  dst[19] = alphabet[((src[11] & 7) << 2) | ((src[12] & 192) >> 6)];\n  dst[20] = alphabet[(src[12] & 62) >> 1];\n  dst[21] = alphabet[((src[12] & 1) << 4) | ((src[13] & 240) >> 4)];\n  dst[22] = alphabet[((src[13] & 15) << 1) | ((src[14] & 128) >> 7)];\n  dst[23] = alphabet[(src[14] & 124) >> 2];\n  dst[24] = alphabet[((src[14] & 3) << 3) | ((src[15] & 224) >> 5)];\n  dst[25] = alphabet[src[15] & 31];\n\n  return dst.join(\"\");\n}\n\nexport function decode(s: string): Uint8Array {\n  if (s.length !== 26) {\n    throw new Error(\"Invalid length\");\n  }\n\n  const encoder = new TextEncoder();\n  const v: Uint8Array = encoder.encode(s);\n\n  // Check if all the characters are part of the expected base32 character set.\n  if (\n    dec[v[0]] === 0xFF ||\n    dec[v[1]] === 0xFF ||\n    dec[v[2]] === 0xFF ||\n    dec[v[3]] === 0xFF ||\n    dec[v[4]] === 0xFF ||\n    dec[v[5]] === 0xFF ||\n    dec[v[6]] === 0xFF ||\n    dec[v[7]] === 0xFF ||\n    dec[v[8]] === 0xFF ||\n    dec[v[9]] === 0xFF ||\n    dec[v[10]] === 0xFF ||\n    dec[v[11]] === 0xFF ||\n    dec[v[12]] === 0xFF ||\n    dec[v[13]] === 0xFF ||\n    dec[v[14]] === 0xFF ||\n    dec[v[15]] === 0xFF ||\n    dec[v[16]] === 0xFF ||\n    dec[v[17]] === 0xFF ||\n    dec[v[18]] === 0xFF ||\n    dec[v[19]] === 0xFF ||\n    dec[v[20]] === 0xFF ||\n    dec[v[21]] === 0xFF ||\n    dec[v[22]] === 0xFF ||\n    dec[v[23]] === 0xFF ||\n    dec[v[24]] === 0xFF ||\n    dec[v[25]] === 0xFF) {\n    throw new Error(\"Invalid base32 character\");\n  }\n\n  const id = new Uint8Array(16);\n\n  // 6 bytes timestamp (48 bits)\n  id[0] = (dec[v[0]] << 5) | dec[v[1]];\n  id[1] = (dec[v[2]] << 3) | (dec[v[3]] >> 2);\n  id[2] = ((dec[v[3]] & 3) << 6) | (dec[v[4]] << 1) | (dec[v[5]] >> 4);\n  id[3] = ((dec[v[5]] & 15) << 4) | (dec[v[6]] >> 1);\n  id[4] = ((dec[v[6]] & 1) << 7) | (dec[v[7]] << 2) | (dec[v[8]] >> 3);\n  id[5] = ((dec[v[8]] & 7) << 5) | dec[v[9]];\n\n  // 10 bytes of entropy (80 bits)\n  id[6] = (dec[v[10]] << 3) | (dec[v[11]] >> 2);\n  id[7] = ((dec[v[11]] & 3) << 6) | (dec[v[12]] << 1) | (dec[v[13]] >> 4);\n  id[8] = ((dec[v[13]] & 15) << 4) | (dec[v[14]] >> 1);\n  id[9] = ((dec[v[14]] & 1) << 7) | (dec[v[15]] << 2) | (dec[v[16]] >> 3);\n  id[10] = ((dec[v[16]] & 7) << 5) | dec[v[17]];\n  id[11] = (dec[v[18]] << 3) | (dec[v[19]] >> 2);\n  id[12] = ((dec[v[19]] & 3) << 6) | (dec[v[20]] << 1) | (dec[v[21]] >> 4);\n  id[13] = ((dec[v[21]] & 15) << 4) | (dec[v[22]] >> 1);\n  id[14] = ((dec[v[22]] & 1) << 7) | (dec[v[23]] << 2) | (dec[v[24]] >> 3);\n  id[15] = ((dec[v[24]] & 7) << 5) | dec[v[25]];\n\n  return id;\n}", "/* eslint-disable no-bitwise */\nexport function parseUUID(uuid: string) {\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Block 1\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = (v >>> 16) & 0xff;\n  arr[2] = (v >>> 8) & 0xff;\n  arr[3] = v & 0xff;\n\n  // Block 2\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Block 3\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Block 4\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Block 5\n  arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff;\n  arr[11] = (v / 0x100000000) & 0xff;\n  arr[12] = (v >>> 24) & 0xff;\n  arr[13] = (v >>> 16) & 0xff;\n  arr[14] = (v >>> 8) & 0xff;\n  arr[15] = v & 0xff;\n\n  return arr;\n}", "var __pow = Math.pow;\n\nexport {\n  __pow\n};\n//# sourceMappingURL=chunk-R5Q6Z3GN.mjs.map", "/**\n * uuidv7: An experimental implementation of the proposed UUID Version 7\n *\n * @license Apache-2.0\n * @copyright 2021-2023 LiosK\n * @packageDocumentation\n */\nconst DIGITS = \"0123456789abcdef\";\n/** Represents a UUID as a 16-byte byte array. */\nexport class UUID {\n    /** @param bytes - The 16-byte byte array representation. */\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.length !== 16) {\n            throw new TypeError(\"not 128-bit length\");\n        }\n    }\n    /**\n     * Builds a byte array from UUIDv7 field values.\n     *\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\n     * @param randA - A 12-bit `rand_a` field value.\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\n     */\n    static fromFieldsV7(unixTsMs, randA, randBHi, randBLo) {\n        if (!Number.isInteger(unixTsMs) ||\n            !Number.isInteger(randA) ||\n            !Number.isInteger(randBHi) ||\n            !Number.isInteger(randBLo) ||\n            unixTsMs < 0 ||\n            randA < 0 ||\n            randBHi < 0 ||\n            randBLo < 0 ||\n            unixTsMs > 281474976710655 ||\n            randA > 0xfff ||\n            randBHi > 1073741823 ||\n            randBLo > 4294967295) {\n            throw new RangeError(\"invalid field value\");\n        }\n        const bytes = new Uint8Array(16);\n        bytes[0] = unixTsMs / 2 ** 40;\n        bytes[1] = unixTsMs / 2 ** 32;\n        bytes[2] = unixTsMs / 2 ** 24;\n        bytes[3] = unixTsMs / 2 ** 16;\n        bytes[4] = unixTsMs / 2 ** 8;\n        bytes[5] = unixTsMs;\n        bytes[6] = 0x70 | (randA >>> 8);\n        bytes[7] = randA;\n        bytes[8] = 0x80 | (randBHi >>> 24);\n        bytes[9] = randBHi >>> 16;\n        bytes[10] = randBHi >>> 8;\n        bytes[11] = randBHi;\n        bytes[12] = randBLo >>> 24;\n        bytes[13] = randBLo >>> 16;\n        bytes[14] = randBLo >>> 8;\n        bytes[15] = randBLo;\n        return new UUID(bytes);\n    }\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\n    toString() {\n        let text = \"\";\n        for (let i = 0; i < this.bytes.length; i++) {\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\n                text += \"-\";\n            }\n        }\n        return text;\n    }\n    /** Creates an object from `this`. */\n    clone() {\n        return new UUID(this.bytes.slice(0));\n    }\n    /** Returns true if `this` is equivalent to `other`. */\n    equals(other) {\n        return this.compareTo(other) === 0;\n    }\n    /**\n     * Returns a negative integer, zero, or positive integer if `this` is less\n     * than, equal to, or greater than `other`, respectively.\n     */\n    compareTo(other) {\n        for (let i = 0; i < 16; i++) {\n            const diff = this.bytes[i] - other.bytes[i];\n            if (diff !== 0) {\n                return Math.sign(diff);\n            }\n        }\n        return 0;\n    }\n}\n/** Encapsulates the monotonic counter state. */\nclass V7Generator {\n    constructor() {\n        this.timestamp = 0;\n        this.counter = 0;\n        this.random = new DefaultRandom();\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method resets the generator and returns a new\n     * UUID based on the current timestamp.\n     */\n    generate() {\n        const value = this.generateOrAbort();\n        if (value !== undefined) {\n            return value;\n        }\n        else {\n            // reset state and resume\n            this.timestamp = 0;\n            return this.generateOrAbort();\n        }\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method aborts and returns `undefined`.\n     */\n    generateOrAbort() {\n        const MAX_COUNTER = 4398046511103;\n        const ROLLBACK_ALLOWANCE = 10000; // 10 seconds\n        const ts = Date.now();\n        if (ts > this.timestamp) {\n            this.timestamp = ts;\n            this.resetCounter();\n        }\n        else if (ts + ROLLBACK_ALLOWANCE > this.timestamp) {\n            // go on with previous timestamp if new one is not much smaller\n            this.counter++;\n            if (this.counter > MAX_COUNTER) {\n                // increment timestamp at counter overflow\n                this.timestamp++;\n                this.resetCounter();\n            }\n        }\n        else {\n            // abort if clock went backwards to unbearable extent\n            return undefined;\n        }\n        return UUID.fromFieldsV7(this.timestamp, Math.trunc(this.counter / 2 ** 30), this.counter & (2 ** 30 - 1), this.random.nextUint32());\n    }\n    /** Initializes the counter at a 42-bit random integer. */\n    resetCounter() {\n        this.counter =\n            this.random.nextUint32() * 0x400 + (this.random.nextUint32() & 0x3ff);\n    }\n}\n/** Stores `crypto.getRandomValues()` available in the environment. */\nlet getRandomValues = (buffer) => {\n    // fall back on Math.random() unless the flag is set to true\n    if (typeof UUIDV7_DENY_WEAK_RNG !== \"undefined\" && UUIDV7_DENY_WEAK_RNG) {\n        throw new Error(\"no cryptographically strong RNG available\");\n    }\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] =\n            Math.trunc(Math.random() * 65536) * 65536 +\n                Math.trunc(Math.random() * 65536);\n    }\n    return buffer;\n};\n// detect Web Crypto API\nif (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\n    getRandomValues = (buffer) => crypto.getRandomValues(buffer);\n}\n/**\n * Wraps `crypto.getRandomValues()` and compatibles to enable buffering; this\n * uses a small buffer by default to avoid unbearable throughput decline in some\n * environments as well as the waste of time and space for unused values.\n */\nclass DefaultRandom {\n    constructor() {\n        this.buffer = new Uint32Array(8);\n        this.cursor = 99;\n    }\n    nextUint32() {\n        if (this.cursor >= this.buffer.length) {\n            getRandomValues(this.buffer);\n            this.cursor = 0;\n        }\n        return this.buffer[this.cursor++];\n    }\n}\nlet defaultGenerator;\n/**\n * Generates a UUIDv7 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv7 = () => uuidv7obj().toString();\n/** Generates a UUIDv7 object. */\nexport const uuidv7obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generate();\n/**\n * Generates a UUIDv4 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv4 = () => uuidv4obj().toString();\n/** Generates a UUIDv4 object. */\nexport const uuidv4obj = () => {\n    const bytes = getRandomValues(new Uint8Array(16));\n    bytes[6] = 0x40 | (bytes[6] >>> 4);\n    bytes[8] = 0x80 | (bytes[8] >>> 2);\n    return new UUID(bytes);\n};\n", "import { uuidv7obj, UUID } from \"uuidv7\";\nimport { parseUUID } from \"./parse_uuid\";\nimport { encode, decode } from \"./base32\";\n\nfunction isValidPrefix(str: string): boolean {\n  if (str.length > 63) {\n    return false;\n  }\n\n  let code; let i; let len;\n\n  for (i = 0, len = str.length; i < len; i += 1) {\n    code = str.charCodeAt(i);\n    if (!(code > 96 && code < 123)) { // lower alpha (a-z)\n      return false;\n    }\n  }\n  return true;\n};\n\nexport class TypeID<const T extends string> {\n  constructor(private prefix: T, private suffix: string = \"\") {\n    if (!isValidPrefix(prefix)) {\n      throw new Error(\"Invalid prefix. Must be at most 63 ascii letters [a-z]\");\n    }\n    this.prefix = prefix;\n\n    if (suffix) {\n      this.suffix = suffix;\n    } else {\n      const uuid = uuidv7obj();\n      this.suffix = encode(uuid.bytes);\n    }\n\n    if (this.suffix.length !== 26) {\n      throw new Error(`Invalid length. Suffix should have 26 characters, got ${suffix.length}`);\n    }\n\n    if (this.suffix[0] > \"7\") {\n      throw new Error(\"Invalid suffix. First character must be in the range [0-7]\");\n    }\n\n    // Validate the suffix by decoding it. If it's invalid, an error will be thrown.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const unused = decode(this.suffix);\n  }\n\n  public getType(): T {\n    return this.prefix;\n  }\n\n  public getSuffix(): string {\n    return this.suffix;\n  }\n\n  public asType<const U extends string>(prefix: U): TypeID<U> {\n    const self = this as unknown as TypeID<U>;\n    if (self.prefix !== prefix) {\n      throw new Error(`Cannot convert TypeID of type ${self.prefix} to type ${prefix}`);\n    }\n    return self;\n  }\n\n  public toUUIDBytes(): Uint8Array {\n    return decode(this.suffix);\n  }\n\n  public toUUID(): string {\n    const uuid = new UUID(this.toUUIDBytes());\n    return uuid.toString();\n  }\n\n  public toString(): string {\n    if (this.prefix === \"\") {\n      return this.suffix;\n    }\n    return `${this.prefix}_${this.suffix}`;\n  }\n\n  static fromString<const T extends string>(str: string): TypeID<T> {\n    const parts = str.split(\"_\");\n    if (parts.length === 1) {\n      return new TypeID<T>(\"\" as T, parts[0]);\n    }\n    if (parts.length === 2) {\n      if (parts[0] === \"\") {\n        throw new Error(`Invalid TypeID. Prefix cannot be empty when there's a separator: ${str}`);\n      }\n      return new TypeID<T>(parts[0] as T, parts[1]);\n    }\n    throw new Error(`Invalid TypeID string: ${str}`);\n  }\n\n  static fromUUIDBytes<const T extends string>(prefix: T, bytes: Uint8Array): TypeID<T> {\n    const suffix = encode(bytes);\n    return new TypeID(prefix, suffix);\n  }\n\n  static fromUUID<const T extends string>(prefix: T, uuid: string): TypeID<T> {\n    const suffix = encode(parseUUID(uuid));\n    return new TypeID(prefix, suffix);\n  }\n}\n\nexport function typeid<T extends string>(): TypeID<''>;\nexport function typeid<T extends string>(prefix: T): TypeID<T>;\nexport function typeid<T extends string>(prefix: T, suffix: string): TypeID<T>;\nexport function typeid<T extends string>(prefix: T = \"\" as T, suffix: string = \"\"): TypeID<T> {\n  return new TypeID(prefix, suffix);\n}\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { Convert } from '@web5/common';\nimport { LocalKeyManager } from '@web5/crypto';\nimport { DidResolver, isVerificationMethod } from './did-resolver.js';\nimport canonicalize from 'canonicalize';\nconst keyManager = new LocalKeyManager();\n/**\n * Cryptographic utility functions, such as hashing, signing, and verifying\n * @beta\n */\nexport class Crypto {\n    /**\n     * Computes a digest of the payload by:\n     * * JSON serializing the payload as per [RFC-8785: JSON Canonicalization Scheme](https://www.rfc-editor.org/rfc/rfc8785)\n     * * sha256 hashing the serialized payload\n     *\n     * @returns The SHA-256 hash of the canonicalized payload, represented as a byte array.\n     */\n    static digest(payload) {\n        // @ts-ignore\n        const canonicalized = canonicalize(payload);\n        const canonicalizedBytes = Convert.string(canonicalized).toUint8Array();\n        return sha256(canonicalizedBytes);\n    }\n    /**\n     * Signs the provided payload and produces a compact JSON Web Signature (JWS).\n     *\n     * @param opts - The options required for signing.\n     * @returns A promise that resolves to the generated compact JWS.\n     * @throws Will throw an error if the specified algorithm is not supported.\n     */\n    static async sign(opts) {\n        const { did, payload, detached } = opts;\n        const signer = await did.getSigner();\n        let verificationMethodId = signer.keyId;\n        if (verificationMethodId.startsWith('#')) {\n            verificationMethodId = `${did.uri}${verificationMethodId}`;\n        }\n        const jwsHeader = { alg: signer.algorithm, kid: verificationMethodId };\n        const base64UrlEncodedJwsHeader = Convert.object(jwsHeader).toBase64Url();\n        const base64urlEncodedJwsPayload = Convert.uint8Array(payload).toBase64Url();\n        const toSign = `${base64UrlEncodedJwsHeader}.${base64urlEncodedJwsPayload}`;\n        const toSignBytes = Convert.string(toSign).toUint8Array();\n        const signatureBytes = await signer.sign({ data: toSignBytes });\n        const base64UrlEncodedSignature = Convert.uint8Array(signatureBytes).toBase64Url();\n        if (detached) {\n            // compact JWS with detached content: https://datatracker.ietf.org/doc/html/rfc7515#appendix-F\n            return `${base64UrlEncodedJwsHeader}..${base64UrlEncodedSignature}`;\n        }\n        else {\n            return `${base64UrlEncodedJwsHeader}.${base64urlEncodedJwsPayload}.${base64UrlEncodedSignature}`;\n        }\n    }\n    /**\n     * Verifies the integrity of a message or resource's signature.\n     *\n     * @param opts - The options required for verification.\n     * @returns A promise that resolves to the DID of the signer if verification is successful.\n     * @throws Various errors related to invalid input or failed verification.\n     */\n    static async verify(opts) {\n        const { signature, detachedPayload } = opts;\n        if (!signature) {\n            throw new Error('Signature verification failed: Expected signature property to exist');\n        }\n        const splitJws = signature.split('.');\n        if (splitJws.length !== 3) {\n            throw new Error('Signature verification failed: Expected valid JWS with detached content');\n        }\n        let [base64UrlEncodedJwsHeader, base64urlEncodedJwsPayload, base64UrlEncodedSignature] = splitJws;\n        if (detachedPayload) {\n            if (base64urlEncodedJwsPayload.length !== 0) { // ensure that JWS payload is empty\n                throw new Error('Signature verification failed: Expected valid JWS with detached content');\n            }\n            base64urlEncodedJwsPayload = Convert.uint8Array(detachedPayload).toBase64Url();\n        }\n        const jwsHeader = Convert.base64Url(base64UrlEncodedJwsHeader).toObject();\n        if (!jwsHeader.alg || !jwsHeader.kid) { // ensure that JWS header has required properties\n            throw new Error('Signature verification failed: Expected JWS header to contain alg and kid');\n        }\n        const dereferenceResult = await DidResolver.dereference(jwsHeader.kid);\n        const verificationMethod = dereferenceResult.contentStream;\n        if (!isVerificationMethod(verificationMethod)) { // ensure that appropriate verification method was found\n            throw new Error('Signature verification failed: Expected kid in JWS header to dereference to a DID Document Verification Method');\n        }\n        // will be used to verify signature\n        const publicKeyJwk = verificationMethod.publicKeyJwk;\n        if (!publicKeyJwk) { // ensure that Verification Method includes public key as a JWK.\n            throw new Error('Signature verification failed: Expected kid in JWS header to dereference to a DID Document Verification Method with publicKeyJwk');\n        }\n        const signedData = `${base64UrlEncodedJwsHeader}.${base64urlEncodedJwsPayload}`;\n        const signedDataBytes = Convert.string(signedData).toUint8Array();\n        const signatureBytes = Convert.base64Url(base64UrlEncodedSignature).toUint8Array();\n        const isLegit = await keyManager.verify({ key: publicKeyJwk, data: signedDataBytes, signature: signatureBytes });\n        if (!isLegit) {\n            throw new Error('Signature verification failed: Integrity mismatch');\n        }\n        const [did] = jwsHeader.kid.split('#');\n        return did;\n    }\n}\n", "export type * from './types.js';\n\nexport * from './cache.js';\nexport * from './convert.js';\nexport * from './multicodec.js';\nexport * from './object.js';\nexport * from './stores.js';\nexport * from './stream.js';\nexport * from './stream-node.js';\nexport * from './type-utils.js';", "import TTLCache from '@isaacs/ttlcache';\nexport { TTLCache as TtlCache };", "/**\n * Represents an array of a fixed length, preventing modifications to its size.\n *\n * The `FixedLengthArray` utility type transforms a standard array into a variant where\n * methods that could alter the length are omitted. It leverages TypeScript's advanced types,\n * such as conditional types and mapped types, to ensure that the array cannot be resized\n * through methods like `push`, `pop`, `splice`, `shift`, and `unshift`. The utility type\n * maintains all other characteristics of a standard array, including indexing, iteration,\n * and type checking for its elements.\n *\n * Note: The type does not prevent direct assignment to indices, even if it would exceed\n * the original length. However, such actions would lead to TypeScript type errors.\n *\n * @example\n * ```ts\n * // Declare a variable with a type of fixed-length array of three strings.\n * let myFixedLengthArray: FixedLengthArray< [string, string, string]>;\n *\n * // Array declaration tests\n * myFixedLengthArray = [ 'a', 'b', 'c' ];  // OK\n * myFixedLengthArray = [ 'a', 'b', 123 ];  // TYPE ERROR\n * myFixedLengthArray = [ 'a' ];            // LENGTH ERROR\n * myFixedLengthArray = [ 'a', 'b' ];       // LENGTH ERROR\n *\n * // Index assignment tests\n * myFixedLengthArray[1] = 'foo';           // OK\n * myFixedLengthArray[1000] = 'foo';        // INVALID INDEX ERROR\n *\n * // Methods that mutate array length\n * myFixedLengthArray.push('foo');          // MISSING METHOD ERROR\n * myFixedLengthArray.pop();                // MISSING METHOD ERROR\n *\n * // Direct length manipulation\n * myFixedLengthArray.length = 123;         // READ-ONLY ERROR\n *\n * // Destructuring\n * let [ a ] = myFixedLengthArray;          // OK\n * let [ a, b ] = myFixedLengthArray;       // OK\n * let [ a, b, c ] = myFixedLengthArray;    // OK\n * let [ a, b, c, d ] = myFixedLengthArray; // INVALID INDEX ERROR\n * ```\n *\n * @template T extends any[] - The array type to be transformed.\n */\nexport type FixedLengthArray<T extends any[]> =\n  Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>>\n  & {\n    /**\n     * Custom iterator for the `FixedLengthArray` type.\n     *\n     * This iterator allows the `FixedLengthArray` to be used in standard iteration\n     * contexts, such as `for...of` loops and spread syntax. It ensures that even though\n     * the array is of a fixed length with disabled mutation methods, it still retains\n     * iterable behavior similar to a regular array.\n     *\n     * @returns An IterableIterator for the array items.\n     */\n    [Symbol.iterator]: () => IterableIterator<ArrayItems<T>>\n  };\n\n/** Helper types for {@link FixedLengthArray} */\ntype ArrayLengthMutationKeys = 'splice' | 'push' | 'pop' | 'shift' | 'unshift' | number;\ntype ArrayItems<T extends Array<any>> = T extends Array<infer TItems> ? TItems : never;\n\n/**\n * isArrayBufferSlice\n *\n * Checks if the ArrayBufferView represents a slice (subarray or a subview)\n * of an ArrayBuffer.\n *\n * An ArrayBufferView (TypedArray or DataView) can represent a portion of an\n * ArrayBuffer - such a view is said to be a \"slice\" of the original buffer.\n * This can occur when the `subarray` or `slice` method is called on a\n * TypedArray or when a DataView is created with a byteOffset and/or\n * byteLength that doesn't cover the full ArrayBuffer.\n *\n * @param arrayBufferView - The ArrayBufferView to be checked\n * @returns true if the ArrayBufferView represents a slice of an ArrayBuffer; false otherwise.\n */\nexport function isArrayBufferSlice(arrayBufferView: ArrayBufferView): boolean {\n  return arrayBufferView.byteOffset !== 0 || arrayBufferView.byteLength !== arrayBufferView.buffer.byteLength;\n}\n\n/**\n * Checks if the given object is an AsyncIterable.\n *\n * An AsyncIterable is an object that implements the AsyncIterable protocol,\n * which means it has a [Symbol.asyncIterator] method. This function checks\n * if the provided object conforms to this protocol by verifying the presence\n * and type of the [Symbol.asyncIterator] method.\n *\n * @param obj - The object to be checked for AsyncIterable conformity.\n * @returns True if the object is an AsyncIterable, false otherwise.\n *\n * @example\n * ```ts\n * // Returns true for a valid AsyncIterable\n * const asyncIterable = {\n *   async *[Symbol.asyncIterator]() {\n *     yield 1;\n *     yield 2;\n *   }\n * };\n * console.log(isAsyncIterable(asyncIterable)); // true\n * ```\n *\n * @example\n * ```ts\n * // Returns false for a regular object\n * console.log(isAsyncIterable({ a: 1, b: 2 })); // false\n * ```\n */\nexport function isAsyncIterable(obj: any): obj is AsyncIterable<any> {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * isDefined\n *\n * Utility function to check if a variable is neither null nor undefined.\n * This function helps in making TypeScript infer the type of the variable\n * as being defined, excluding `null` and `undefined`.\n *\n * The function uses strict equality (`!==`) for the comparison, ensuring\n * that the variable is not just falsy (like an empty string or zero),\n * but is truly either `null` or `undefined`.\n *\n * @param arg - The variable to be checked\n * @returns true if the variable is neither `null` nor `undefined`\n */\nexport function isDefined<T>(arg: T): arg is Exclude<T, null | undefined> {\n  return arg !== null && typeof arg !== 'undefined';\n}\n\n/**\n * Utility type that transforms a type `T` to have only certain keys `K` as required, while the\n * rest remain optional, except for keys specified in `O`, which are omitted entirely.\n *\n * This type is useful when you need a variation of a type where only specific properties are\n * required, and others are either optional or not included at all. It allows for more flexible type\n * definitions based on existing types without the need to redefine them.\n *\n * @template T - The original type to be transformed.\n * @template K - The keys of `T` that should be required.\n * @template O - The keys of `T` that should be omitted from the resulting type (optional).\n *\n * @example\n * ```ts\n * // Given an interface\n * interface Example {\n *   requiredProp: string;\n *   optionalProp?: number;\n *   anotherOptionalProp?: boolean;\n * }\n *\n * // Making 'optionalProp' required and omitting 'anotherOptionalProp'\n * type ModifiedExample = RequireOnly<Example, 'optionalProp', 'anotherOptionalProp'>;\n * // Result: { requiredProp?: string; optionalProp: number; }\n * ```\n */\nexport type RequireOnly<T, K extends keyof T, O extends keyof T = never> = Required<Pick<T, K>> & Omit<Partial<T>, O>;\n\n/**\n * universalTypeOf\n *\n * Why does this function exist?\n *\n * You can typically check if a value is of a particular type, such as\n * Uint8Array or ArrayBuffer, by using the `instanceof` operator. The\n * `instanceof` operator checks the prototype property of a constructor\n * in the object's prototype chain.\n *\n * However, there is a caveat with the `instanceof` check if the value\n * was created from a different JavaScript context (like an iframe or\n * a web worker). In those cases, the `instanceof` check might fail\n * because each context has a different global object, and therefore,\n * different built-in constructor functions.\n *\n * The `typeof` operator provides information about the type of the\n * operand in a less detailed way. For basic data types like number,\n * string, boolean, and undefined, the `typeof` operator works as\n * expected.  However, for objects, including arrays and null,\n * it always returns \"object\".  For functions, it returns \"function\".\n * So, while `typeof` is good for basic type checking, it doesn't\n * give detailed information about complex data types.\n *\n * Unlike `instanceof` and `typeof`, `Object.prototype.toString.call(value)`\n * can ensure a consistent result across different JavaScript\n * contexts.\n *\n * Credit for inspiration:\n *   Angus Croll\n *   https://github.com/angus-c\n *   https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n */\nexport function universalTypeOf(value: unknown) {\n  // Returns '[Object Type]' string.\n  const typeString = Object.prototype.toString.call(value);\n  // Returns ['Object', 'Type'] array or null.\n  const match = typeString.match(/\\s([a-zA-Z0-9]+)/);\n  // Deconstructs the array and gets just the type from index 1.\n  const [_, type] = match as RegExpMatchArray;\n\n  return type;\n}\n\n/**\n * Utility type to extract the type resolved by a Promise.\n *\n * This type unwraps the type `T` from `Promise<T>` if `T` is a Promise, otherwise returns `T` as\n * is. It's useful in situations where you need to handle the type returned by a promise-based\n * function in a synchronous context, such as defining types for test vectors or handling return\n * types in non-async code blocks.\n *\n * @template T - The type to unwrap from the Promise.\n *\n * @example\n * ```ts\n * // For a Promise type, it extracts the resolved type.\n * type AsyncNumber = Promise<number>;\n * type UnwrappedNumber = UnwrapPromise<AsyncNumber>; // number\n *\n * // For a non-Promise type, it returns the type as is.\n * type StringValue = string;\n * type UnwrappedString = UnwrapPromise<StringValue>; // string\n * ```\n */\nexport type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;", "import type { Multibase } from 'multiformats';\n\nimport { base32z } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base64url } from 'multiformats/bases/base64';\n\nimport { isAsyncIterable, isArrayBufferSlice, universalTypeOf } from './type-utils.js';\n\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\n\nexport class Convert {\n  data: any;\n  format: string;\n\n  constructor(data: any, format: string) {\n    this.data = data;\n    this.format = format;\n  }\n\n  static arrayBuffer(data: ArrayBuffer): Convert {\n    return new Convert(data, 'ArrayBuffer');\n  }\n\n  static asyncIterable(data: AsyncIterable<any>): Convert {\n    if (!isAsyncIterable(data)) {\n      throw new TypeError('Input must be of type AsyncIterable.');\n    }\n    return new Convert(data, 'AsyncIterable');\n  }\n\n  static base32Z(data: string): Convert {\n    return new Convert(data, 'Base32Z');\n  }\n\n  static base58Btc(data: string): Convert {\n    return new Convert(data, 'Base58Btc');\n  }\n\n  static base64Url(data: string): Convert {\n    return new Convert(data, 'Base64Url');\n  }\n\n  /**\n   * Reference:\n   * The BufferSource type is a TypeScript type that represents an ArrayBuffer\n   * or one of the ArrayBufferView types, such a TypedArray (e.g., Uint8Array)\n   * or a DataView.\n   */\n  static bufferSource(data: BufferSource): Convert {\n    return new Convert(data, 'BufferSource');\n  }\n\n  static hex(data: string): Convert {\n    if (typeof data !== 'string') {\n      throw new TypeError('Hex input must be a string.');\n    }\n    if (data.length % 2 !== 0) {\n      throw new TypeError('Hex input must have an even number of characters.');\n    }\n    return new Convert(data, 'Hex');\n  }\n\n  static multibase(data: string): Convert {\n    return new Convert(data, 'Multibase');\n  }\n\n  static object(data: Record<string, any>): Convert {\n    return new Convert(data, 'Object');\n  }\n\n  static string(data: string): Convert {\n    return new Convert(data, 'String');\n  }\n\n  static uint8Array(data: Uint8Array): Convert {\n    return new Convert(data, 'Uint8Array');\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    switch (this.format) {\n\n      case 'Base58Btc': {\n        return base58btc.baseDecode(this.data).buffer;\n      }\n\n      case 'Base64Url': {\n        return base64url.baseDecode(this.data).buffer;\n      }\n\n      case 'BufferSource': {\n        const dataType = universalTypeOf(this.data);\n        if (dataType === 'ArrayBuffer') {\n          // Data is already an ArrayBuffer, No conversion is necessary.\n          return this.data;\n        } else if (ArrayBuffer.isView(this.data)) {\n          // Data is a DataView or a different TypedArray (e.g., Uint16Array).\n          if (isArrayBufferSlice(this.data)) {\n            // Data is a slice of an ArrayBuffer. Return a new ArrayBuffer or ArrayBufferView of the same slice.\n            return this.data.buffer.slice(this.data.byteOffset, this.data.byteOffset + this.data.byteLength);\n          } else {\n            // Data is a whole ArrayBuffer viewed as a different TypedArray or DataView. Return the whole ArrayBuffer.\n            return this.data.buffer;\n          }\n        } else {\n          throw new TypeError(`${this.format} value is not of type: ArrayBuffer, DataView, or TypedArray.`);\n        }\n      }\n\n      case 'Hex': {\n        return this.toUint8Array().buffer;\n      }\n\n      case 'String': {\n        return this.toUint8Array().buffer;\n      }\n\n      case 'Uint8Array': {\n        return this.data.buffer;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to ArrayBuffer is not supported.`);\n    }\n  }\n\n  async toArrayBufferAsync(): Promise<ArrayBuffer> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        const blob = await this.toBlobAsync();\n        return await blob.arrayBuffer();\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to ArrayBuffer is not supported.`);\n    }\n  }\n\n  toBase32Z(): string {\n    switch (this.format) {\n\n      case 'Uint8Array': {\n        return base32z.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base64Z is not supported.`);\n    }\n  }\n\n  toBase58Btc(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = new Uint8Array(this.data);\n        return base58btc.baseEncode(u8a);\n      }\n\n      case 'Multibase': {\n        return this.data.substring(1);\n      }\n\n      case 'Uint8Array': {\n        return base58btc.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base58Btc is not supported.`);\n    }\n  }\n\n  toBase64Url(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = new Uint8Array(this.data);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'BufferSource': {\n        const u8a = this.toUint8Array();\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'Object': {\n        const string = JSON.stringify(this.data);\n        const u8a = textEncoder.encode(string);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'String': {\n        const u8a = textEncoder.encode(this.data);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'Uint8Array': {\n        return base64url.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base64Url is not supported.`);\n    }\n  }\n\n  async toBlobAsync(): Promise<Blob> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Initialize an array to hold the chunks from the AsyncIterable.\n        const chunks = [];\n\n        // Asynchronously iterate over each chunk in the AsyncIterable.\n        for await (const chunk of (this.data as AsyncIterable<any>)) {\n          // Append each chunk to the chunks array. These chunks can be of any type, typically binary data or text.\n          chunks.push(chunk);\n        }\n\n        // Create a new Blob from the aggregated chunks.\n        // The Blob constructor combines these chunks into a single Blob object.\n        const blob = new Blob(chunks);\n\n        return blob;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Blob is not supported.`);\n    }\n  }\n\n  toHex(): string {\n    // pre-calculating Hex values improves runtime by 6-10x.\n    const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = this.toUint8Array();\n        return Convert.uint8Array(u8a).toHex();\n      }\n\n      case 'Base64Url': {\n        const u8a = this.toUint8Array();\n        return Convert.uint8Array(u8a).toHex();\n      }\n\n      case 'Uint8Array': {\n        let hex = '';\n        for (let i = 0; i < this.data.length; i++) {\n          hex += hexes[this.data[i]];\n        }\n        return hex;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Hex is not supported.`);\n    }\n  }\n\n  toMultibase(): Multibase<any> {\n    switch (this.format) {\n      case 'Base58Btc': {\n        return `z${this.data}`;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Multibase is not supported.`);\n    }\n  }\n\n  toObject(): object {\n    switch (this.format) {\n\n      case 'Base64Url': {\n        const u8a = base64url.baseDecode(this.data);\n        const text = textDecoder.decode(u8a);\n        return JSON.parse(text);\n      }\n\n      case 'String': {\n        return JSON.parse(this.data);\n      }\n\n      case 'Uint8Array': {\n        const text = textDecoder.decode(this.data);\n        return JSON.parse(text);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Object is not supported.`);\n    }\n  }\n\n  async toObjectAsync(): Promise<any> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Convert the AsyncIterable to a String.\n        const text = await this.toStringAsync();\n\n        // Parse the string as JSON. This step assumes that the string represents a valid JSON structure.\n        // JSON.parse() will convert the string into a corresponding JavaScript object.\n        const json = JSON.parse(text);\n\n        // Return the parsed JavaScript object. The type of this object will depend on the structure\n        // of the JSON in the stream. It could be an object, array, string, number, etc.\n        return json;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Object is not supported.`);\n    }\n  }\n\n  toString(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        return textDecoder.decode(this.data);\n      }\n\n      case 'Base64Url': {\n        const u8a = base64url.baseDecode(this.data);\n        return textDecoder.decode(u8a);\n      }\n\n      case 'Object': {\n        return JSON.stringify(this.data);\n      }\n\n      case 'Uint8Array': {\n        return textDecoder.decode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to String is not supported.`);\n    }\n  }\n\n  async toStringAsync(): Promise<string> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Initialize an empty string to accumulate the decoded text.\n        let str = '';\n\n        // Iterate over the chunks from the AsyncIterable.\n        for await (const chunk of (this.data as AsyncIterable<any>)) {\n          // If the chunk is already a string, concatenate it directly.\n          if (typeof chunk === 'string')\n            str += chunk;\n          else\n          // If the chunk is a Uint8Array or similar, use the decoder to convert it to a string.\n          // The `stream: true` option lets the decoder handle multi-byte characters spanning\n          // multiple chunks.\n            str += textDecoder.decode(chunk, { stream: true });\n        }\n\n        // Finalize the decoding process to handle any remaining bytes and signal the end of the stream.\n        // The `stream: false` option flushes the decoder's internal state.\n        str += textDecoder.decode(undefined, { stream: false });\n\n        // Return the accumulated string.\n        return str;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to String is not supported.`);\n    }\n  }\n\n  toUint8Array(): Uint8Array {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        // Çreate Uint8Array as a view on the ArrayBuffer.\n        // Note: The Uint8Array shares the same memory as the ArrayBuffer, so this operation is very efficient.\n        return new Uint8Array(this.data);\n      }\n\n      case 'Base32Z': {\n        return base32z.baseDecode(this.data);\n      }\n\n      case 'Base58Btc': {\n        return base58btc.baseDecode(this.data);\n      }\n\n      case 'Base64Url': {\n        return base64url.baseDecode(this.data);\n      }\n\n      case 'BufferSource': {\n        const dataType = universalTypeOf(this.data);\n        if (dataType === 'Uint8Array') {\n          // Data is already a Uint8Array. No conversion is necessary.\n          // Note: Uint8Array is a type of BufferSource.\n          return this.data;\n        } else if (dataType === 'ArrayBuffer') {\n          // Data is an ArrayBuffer, create Uint8Array as a view on the ArrayBuffer.\n          // Note: The Uint8Array shares the same memory as the ArrayBuffer, so this operation is very efficient.\n          return new Uint8Array(this.data);\n        } else if (ArrayBuffer.isView(this.data)) {\n          // Data is a DataView or a different TypedArray (e.g., Uint16Array).\n          return new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\n        } else {\n          throw new TypeError(`${this.format} value is not of type: ArrayBuffer, DataView, or TypedArray.`);\n        }\n      }\n\n      case 'Hex': {\n        const u8a = new Uint8Array(this.data.length / 2);\n        for (let i = 0; i < this.data.length; i += 2) {\n          const byteValue = parseInt(this.data.substring(i, i + 2), 16);\n          if (isNaN(byteValue)) {\n            throw new TypeError('Input is not a valid hexadecimal string.');\n          }\n          u8a[i / 2] = byteValue;\n        }\n        return u8a;\n      }\n\n      case 'Object': {\n        const string = JSON.stringify(this.data);\n        return textEncoder.encode(string);\n      }\n\n      case 'String': {\n        return textEncoder.encode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Uint8Array is not supported.`);\n    }\n  }\n\n  async toUint8ArrayAsync(): Promise<Uint8Array> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        const arrayBuffer = await this.toArrayBufferAsync();\n        return new Uint8Array(arrayBuffer);\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Uint8Array is not supported.`);\n    }\n  }\n}", "import { varint } from 'multiformats';\n\nexport type MulticodecCode = number;\n\nexport type MulticodecDefinition<MulticodecCode> = {\n  code: MulticodecCode;\n  // codeBytes: Uint8Array;\n  name: string;\n}\n\n/**\n * The `Multicodec` class provides an interface to prepend binary data\n * with a prefix that identifies the data that follows.\n * https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Multicodec is a self-describing multiformat, it wraps other formats with\n * a tiny bit of self-description. A multicodec identifier is a\n * varint (variable integer) that indicates the format of the data.\n *\n * The canonical table of multicodecs can be access at the following URL:\n * https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Example usage:\n *\n * ```ts\n * Multicodec.registerCodec({ code: 0xed, name: 'ed25519-pub' });\n * const prefixedData = Multicodec.addPrefix({ code: 0xed, data: new Uint8Array(32) });\n * ```\n */\nexport class Multicodec {\n  /**\n   * A static field containing a map of codec codes to their corresponding names.\n   */\n  static codeToName = new Map<MulticodecCode, string>();\n\n  /**\n   * A static field containing a map of codec names to their corresponding codes.\n   */\n  static nameToCode = new Map<string, MulticodecCode>();\n\n  /**\n   * Adds a multicodec prefix to input data.\n   *\n   * @param options - The options for adding a prefix.\n   * @param options.code - The codec code. Either the code or name must be provided.\n   * @param options.name - The codec name. Either the code or name must be provided.\n   * @param options.data - The data to be prefixed.\n   * @returns The data with the added prefix as a Uint8Array.\n   */\n  public static addPrefix(options: {\n    code?: MulticodecCode,\n    data: Uint8Array,\n    name?: string,\n  }): Uint8Array {\n    let { code, data, name } = options;\n\n    if (!(name ? !code : code)) {\n      throw new Error(`Either 'name' or 'code' must be defined, but not both.`);\n    }\n\n    // If code was given, confirm it exists, or lookup code by name.\n    code = Multicodec.codeToName.has(code!) ? code : Multicodec.nameToCode.get(name!);\n\n    // Throw error if a registered Codec wasn't found.\n    if (code === undefined) {\n      throw new Error(`Unsupported multicodec: ${options.name ?? options.code}`);\n    }\n\n    // Create a new array to store the prefix and input data.\n    const prefixLength = varint.encodingLength(code);\n    const dataWithPrefix = new Uint8Array(prefixLength + data.byteLength);\n    dataWithPrefix.set(data, prefixLength);\n\n    // Prepend the prefix.\n    varint.encodeTo(code, dataWithPrefix);\n\n    return dataWithPrefix;\n  }\n\n  /**\n   * Get the Multicodec code from given prefixed data.\n   *\n   * @param options - The options for getting the codec code.\n   * @param options.prefixedData - The data to extract the codec code from.\n   * @returns - The Multicodec code as a number.\n   */\n  public static getCodeFromData(options: {\n    prefixedData: Uint8Array\n  }): MulticodecCode {\n    const { prefixedData } = options;\n    const [code, _] = varint.decode(prefixedData);\n\n    return code;\n  }\n\n  /**\n   * Get the Multicodec code from given Multicodec name.\n   *\n   * @param options - The options for getting the codec code.\n   * @param options.name - The name to lookup.\n   * @returns - The Multicodec code as a number.\n   */\n  public static getCodeFromName(options: {\n    name: string\n  }): MulticodecCode {\n    const { name } = options;\n\n    // Throw error if a registered Codec wasn't found.\n    const code = Multicodec.nameToCode.get(name);\n    if (code === undefined) {\n      throw new Error(`Unsupported multicodec: ${name}`);\n    }\n\n    return code;\n  }\n\n  /**\n   * Get the Multicodec name from given Multicodec code.\n   *\n   * @param options - The options for getting the codec name.\n   * @param options.name - The code to lookup.\n   * @returns - The Multicodec name as a string.\n   */\n  public static getNameFromCode(options: {\n    code: MulticodecCode\n  }): string {\n    const { code } = options;\n\n    // Throw error if a registered Codec wasn't found.\n    const name = Multicodec.codeToName.get(code);\n    if (name === undefined) {\n      throw new Error(`Unsupported multicodec: ${code}`);\n    }\n\n    return name;\n  }\n\n  /**\n   * Registers a new codec in the Multicodec class.\n   *\n   * @param codec - The codec to be registered.\n   */\n  public static registerCodec(codec: MulticodecDefinition<MulticodecCode>) {\n    Multicodec.codeToName.set(codec.code, codec.name);\n    Multicodec.nameToCode.set(codec.name, codec.code);\n  }\n\n  /**\n   * Returns the data with the Multicodec prefix removed.\n   *\n   * @param refixedData - The data to extract the codec code from.\n   * @returns {Uint8Array}\n   */\n  public static removePrefix(options: {\n    prefixedData: Uint8Array\n  }): { code: MulticodecCode, name: string, data: Uint8Array } {\n    const { prefixedData } = options;\n    const [code, codeByteLength] = varint.decode(prefixedData);\n\n    // Throw error if a registered Codec wasn't found.\n    const name = Multicodec.codeToName.get(code);\n    if (name === undefined) {\n      throw new Error(`Unsupported multicodec: ${code}`);\n    }\n\n    return { code, data: prefixedData.slice(codeByteLength), name };\n  }\n}\n\n// Pre-defined registered codecs:\nMulticodec.registerCodec({ code: 0xed, name: 'ed25519-pub' });\nMulticodec.registerCodec({ code: 0x1300, name: 'ed25519-priv' });\nMulticodec.registerCodec({ code: 0xec, name: 'x25519-pub' });\nMulticodec.registerCodec({ code: 0x1302, name: 'x25519-priv' });\nMulticodec.registerCodec({ code: 0xe7, name: 'secp256k1-pub' });\nMulticodec.registerCodec({ code: 0x1301, name: 'secp256k1-priv' });", "/**\n * Checks whether the given object has any properties.\n */\nexport function isEmptyObject(obj: unknown): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  if (Object.getOwnPropertySymbols(obj).length > 0) {\n    return false;\n  }\n\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Recursively removes all properties with an empty object or array as its value from the given object.\n */\nexport function removeEmptyObjects(obj: Record<string, unknown>): void {\n  Object.keys(obj).forEach(key => {\n    if (typeof(obj[key]) === 'object') {\n      // recursive remove empty object or array properties in nested objects\n      removeEmptyObjects(obj[key] as Record<string, unknown>);\n    }\n\n    if (isEmptyObject(obj[key])) {\n      delete obj[key];\n    }\n  });\n}\n\n/**\n * Recursively removes all properties with `undefined` as its value from the given object.\n */\nexport function removeUndefinedProperties(obj: Record<string, unknown>): void {\n  Object.keys(obj).forEach(key => {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    } else if (typeof(obj[key]) === 'object') {\n      removeUndefinedProperties(obj[key] as Record<string, unknown>); // recursive remove `undefined` properties in nested objects\n    }\n  });\n}", "import type { AbstractLevel } from 'abstract-level';\n\nimport { Level } from 'level';\n\nimport type { KeyValueStore } from './types.js';\n\nexport class LevelStore<K = string, V = any> implements KeyValueStore<K, V> {\n  private store: AbstractLevel<string | Buffer | Uint8Array, K, V>;\n\n  constructor({ db, location = 'DATASTORE' }: {\n    db?: AbstractLevel<string | Buffer | Uint8Array, K, V>;\n    location?: string;\n  } = {}) {\n    this.store = db ?? new Level<K, V>(location);\n  }\n\n  async clear(): Promise<void> {\n    await this.store.clear();\n  }\n\n  async close(): Promise<void> {\n    await this.store.close();\n  }\n\n  async delete(key: K): Promise<void> {\n    await this.store.del(key);\n  }\n\n  async get(key: K): Promise<V | undefined> {\n    try {\n      return await this.store.get(key);\n    } catch (error: any) {\n      // Don't throw when a key wasn't found.\n      if (error.notFound) return undefined;\n      throw error;\n    }\n  }\n\n  async set(key: K, value: V): Promise<void> {\n    await this.store.put(key, value);\n  }\n}\n\n/**\n * The `MemoryStore` class is an implementation of\n * `KeyValueStore` that holds data in memory.\n *\n * It provides a basic key-value store that works synchronously and keeps all\n * data in memory. This can be used for testing, or for handling small amounts\n * of data with simple key-value semantics.\n *\n * Example usage:\n *\n * ```ts\n * const memoryStore = new MemoryStore<string, number>();\n * await memoryStore.set(\"key1\", 1);\n * const value = await memoryStore.get(\"key1\");\n * console.log(value); // 1\n * ```\n *\n * @public\n */\nexport class MemoryStore<K, V> implements KeyValueStore<K, V> {\n  /**\n   * A private field that contains the Map used as the key-value store.\n   */\n  private store: Map<K, V> = new Map();\n\n  /**\n   * Clears all entries in the key-value store.\n   *\n   * @returns A Promise that resolves when the operation is complete.\n   */\n  async clear(): Promise<void> {\n    this.store.clear();\n  }\n\n  /**\n   * This operation is no-op for `MemoryStore`\n   * and will log a warning if called.\n   */\n  async close(): Promise<void> {\n    /** no-op */\n  }\n\n  /**\n   * Deletes an entry from the key-value store by its key.\n   *\n   * @param id - The key of the entry to delete.\n   * @returns A Promise that resolves to a boolean indicating whether the entry was successfully deleted.\n   */\n  async delete(id: K): Promise<boolean> {\n    return this.store.delete(id);\n  }\n\n  /**\n   * Retrieves the value of an entry by its key.\n   *\n   * @param id - The key of the entry to retrieve.\n   * @returns A Promise that resolves to the value of the entry, or `undefined` if the entry does not exist.\n   */\n  async get(id: K): Promise<V | undefined> {\n    return this.store.get(id);\n  }\n\n  /**\n   * Checks for the presence of an entry by key.\n   *\n   * @param id - The key to check for the existence of.\n   * @returns A Promise that resolves to a boolean indicating whether an element with the specified key exists or not.\n   */\n  async has(id: K): Promise<boolean> {\n    return this.store.has(id);\n  }\n\n  /**\n   * Retrieves all values in the key-value store.\n   *\n   * @returns A Promise that resolves to an array of all values in the store.\n   */\n  async list(): Promise<V[]> {\n    return Array.from(this.store.values());\n  }\n\n  /**\n   * Sets the value of an entry in the key-value store.\n   *\n   * @param id - The key of the entry to set.\n   * @param key - The new value for the entry.\n   * @returns A Promise that resolves when the operation is complete.\n   */\n  async set(id: K, key: V): Promise<void> {\n    this.store.set(id, key);\n  }\n}", "import type { Duplex, ReadableStateOptions, Transform, Writable } from 'readable-stream';\n\nimport { Readable } from 'readable-stream';\nimport { Stream } from './stream.js';\nimport { Convert } from './convert.js';\n\nexport { Readable } from 'readable-stream';\n\nexport class NodeStream {\n  /**\n   * Consumes a `Readable` stream and returns its contents as an `ArrayBuffer`.\n   *\n   * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into\n   * an `ArrayBuffer`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const arrayBuffer = await NodeStream.consumeToArrayBuffer({ readable: nodeReadable });\n   * ```\n   *\n   * @param readable - The Node.js Readable stream whose data will be consumed.\n   * @returns A Promise that resolves to an `ArrayBuffer` containing all the data from the stream.\n   */\n  public static async consumeToArrayBuffer({ readable }: { readable: Readable}): Promise<ArrayBuffer> {\n    const arrayBuffer = await Convert.asyncIterable(readable).toArrayBufferAsync();\n\n    return arrayBuffer;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a `Blob`.\n   *\n   * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into\n   * a `Blob`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const blob = await NodeStream.consumeToBlob({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n   * @returns A Promise that resolves to a `Blob` containing all the data from the stream.\n   */\n  public static async consumeToBlob({ readable }: { readable: Readable }): Promise<Blob> {\n    const blob = await Convert.asyncIterable(readable).toBlobAsync();\n\n    return blob;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a `Uint8Array`.\n   *\n   * This method reads all data from a Node.js `Readable`, collects it, and converts it into a\n   * `Uint8Array`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const bytes = await NodeStream.consumeToBytes({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n   * @returns A Promise that resolves to a `Uint8Array` containing all the data from the stream.\n   */\n  public static async consumeToBytes({ readable }: { readable: Readable }): Promise<Uint8Array> {\n    const bytes = await Convert.asyncIterable(readable).toUint8ArrayAsync();\n\n    return bytes;\n  }\n\n  /**\n   * Consumes a `Readable` stream and parses its contents as JSON.\n   *\n   * This method reads all the data from the stream, converts it to a text string, and then parses\n   * it as JSON, returning the resulting object.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const jsonData = await NodeStream.consumeToJson({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose JSON content will be consumed.\n   * @returns A Promise that resolves to the parsed JSON object from the stream's data.\n   */\n  public static async consumeToJson({ readable }: { readable: Readable }): Promise<any> {\n    const object = await Convert.asyncIterable(readable).toObjectAsync();\n\n    return object;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a text string.\n   *\n   * This method reads all the data from the stream, converting it into a single string.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const text = await NodeStream.consumeToText({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose text content will be consumed.\n   * @returns A Promise that resolves to a string containing all the data from the stream.\n   */\n  public static async consumeToText({ readable }: { readable: Readable}): Promise<string> {\n    const text = await Convert.asyncIterable(readable).toStringAsync();\n\n    return text;\n  }\n\n  /**\n   * Converts a Web `ReadableStream` to a Node.js `Readable` stream.\n   *\n   * This method takes a Web `ReadableStream` and converts it to a Node.js `Readable` stream.\n   * The conversion is done by reading chunks from the Web `ReadableStream` and pushing them\n   * into the Node.js `Readable` stream.\n   *\n   * @example\n   * ```ts\n   * const webReadableStream = getWebReadableStreamSomehow();\n   * const nodeReadableStream = NodeStream.fromWebReadable({ readableStream: webReadableStream });\n   * ```\n   *\n   * @param readableStream - The Web `ReadableStream` to be converted.\n   * @param readableOptions - Optional `Readable` stream options for the Node.js stream.\n   * @returns The Node.js `Readable` stream.\n   */\n  public static fromWebReadable({ readableStream, readableOptions }: {\n    readableStream: ReadableStream,\n    readableOptions?: ReadableStateOptions\n  }): Readable {\n    if (!Stream.isReadableStream(readableStream)) {\n      throw new TypeError(`NodeStream.fromWebReadable: 'readableStream' is not a Web ReadableStream.`);\n    }\n\n    const reader = readableStream.getReader();\n    let closed = false;\n\n    const nodeReadable = new Readable({\n      ...readableOptions,\n\n      read: function () {\n        reader.read().then(({ done, value }) => {\n          if (done) {\n            this.push(null); // Push null to signify end of stream.\n          } else {\n            if (!this.push(value)) {\n              // When push returns false, we should stop reading until _read is called again.\n              return;\n            }\n          }\n        }).catch((error) => {\n          // If an error occurs while reading, destroy the stream.\n          this.destroy(error);\n        });\n      },\n\n      destroy: function (error, callback) {\n        function done() {\n          callback(error);\n        }\n\n        if (!closed) {\n          reader.cancel(error)\n            .then(done)\n            .catch(done);\n          return;\n        }\n        done();\n      }\n    });\n\n    reader.closed\n      .then(() => {\n        closed = true; // Prevents reader.cancel() from being called in destroy()\n      })\n      .catch((error) => {\n        closed = true; // Prevents reader.cancel() from being called in destroy()\n        nodeReadable.destroy(error);\n      });\n\n    return nodeReadable;\n  }\n\n  /**\n   * Checks if a Node.js stream (`Readable`, `Writable`, `Duplex`, or `Transform`) has been destroyed.\n   *\n   * This method determines whether the provided Node.js stream has been destroyed. A stream\n   * is considered destroyed if its 'destroyed' property is set to true or if its internal state\n   * indicates it has been destroyed.\n   *\n   * @example\n   * ```ts\n   * const stream = getStreamSomehow();\n   * stream.destroy(); // Destroy the stream.\n   * const isDestroyed = NodeStream.isDestroyed({ stream });\n   * console.log(isDestroyed); // Output: true\n   * ```\n   *\n   * @param stream - The Node.js stream to check.\n   * @returns `true` if the stream has been destroyed; otherwise, `false`.\n   */\n  public static isDestroyed({ stream }: { stream: Readable | Writable | Duplex | Transform }): boolean {\n    if (!NodeStream.isStream(stream)) {\n      throw new TypeError(`NodeStream.isDestroyed: 'stream' is not a Node stream.`);\n    }\n\n    const writableState = '_writableState' in stream ? stream._writableState : undefined;\n    const readableState = stream._readableState;\n    const state = writableState || readableState;\n\n    return !!(stream.destroyed || state.destroyed);\n  }\n\n  /**\n   * Checks if a Node.js `Readable` stream is still readable.\n   *\n   * This method checks if a Node.js `Readable` stream is still in a state that allows reading from\n   * it. A stream is considered readable if it has not ended, has not been destroyed, and is not\n   * currently paused.\n   *\n   * @example\n   * ```ts\n   * const readableStream = new Readable();\n   * const isReadable = NodeStream.isReadable({ readable: readableStream });\n   * console.log(isReadable); // Output: true or false\n   * ```\n   *\n   * @param readable - The Node.js `Readable` stream to be checked.\n   * @returns `true` if the stream is still readable; otherwise, `false`.\n   */\n  public static isReadable({ readable }: { readable: Readable }): boolean {\n    // Check if the object is a Node Readable stream.\n    if (!NodeStream.isReadableStream(readable)) {\n      return false;\n    }\n\n    // Check if the stream is still readable.\n    return (\n      readable.readable && // Is the stream readable?\n        (typeof readable._readableState.ended === 'boolean' && !readable._readableState.ended) && // Has the 'end' method been called?\n        (typeof readable._readableState.endEmitted === 'boolean' && !readable._readableState.endEmitted) && // Has the 'end' event been emitted?\n        !readable.destroyed && // Has the 'destroy' method been called?\n        !readable.isPaused() // Is the stream paused?\n    );\n  }\n\n  /**\n   * Checks if an object is a Node.js `Readable` stream.\n   *\n   * This method verifies if the provided object is a Node.js `Readable` stream by checking for\n   * specific properties and methods typical of a `Readable` stream in Node.js.\n   *\n   * @example\n   * ```ts\n   * const obj = getSomeObject();\n   * if (NodeStream.isReadableStream(obj)) {\n   *   // obj is a Node.js Readable stream\n   * }\n   * ```\n   *\n   * @param obj - The object to be checked.\n   * @returns `true` if `obj` is a Node.js `Readable` stream; otherwise, `false`.\n   */\n  static isReadableStream(obj: unknown): obj is Readable {\n    return (\n      typeof obj === 'object' &&\n        obj !== null &&\n        ('pipe' in obj && typeof obj.pipe === 'function') &&\n        ('on' in obj && typeof obj.on === 'function') &&\n        (!('_writableState' in obj) && '_readableState' in obj)\n    );\n  }\n\n  /**\n   * Checks if the provided object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`).\n   *\n   * This method checks for the presence of internal properties specific to Node.js streams:\n   * `_readableState` and `_writableState`. These properties are present in Node.js stream\n   * instances, allowing identification of the stream type.\n   *\n   * The `_readableState` property is found in `Readable` and `Duplex` streams (including\n   * `Transform` streams, which are a type of `Duplex` stream), indicating that the stream can be\n   * read from. The `_writableState` property is found in `Writable` and `Duplex` streams,\n   * indicating that the stream can be written to.\n   *\n   * @example\n   * ```ts\n   * const { Readable, Writable, Duplex, Transform } = require('stream');\n   *\n   * const readableStream = new Readable();\n   * console.log(NodeStream.isStream(readableStream)); // Output: true\n   *\n   * const writableStream = new Writable();\n   * console.log(NodeStream.isStream(writableStream)); // Output: true\n   *\n   * const duplexStream = new Duplex();\n   * console.log(NodeStream.isStream(duplexStream)); // Output: true\n   *\n   * const transformStream = new Transform();\n   * console.log(NodeStream.isStream(transformStream)); // Output: true\n   *\n   * const nonStreamObject = {};\n   * console.log(NodeStream.isStream(nonStreamObject)); // Output: false\n   * ```\n   *\n   * @remarks\n   * - This method does not differentiate between the different types of streams (Readable,\n   *   Writable, Duplex, Transform). It simply checks if the object is any kind of Node.js stream.\n   * - While this method can identify standard Node.js streams, it may not recognize custom or\n   *   third-party stream-like objects that do not inherit directly from Node.js's stream classes\n   *   or do not have these internal state properties. This is intentional as many of the methods\n   *   in this library are designed to work with standard Node.js streams.\n   *\n   * @param obj - The object to be checked for being a Node.js stream.\n   * @returns `true` if the object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`); otherwise, `false`.\n   */\n  public static isStream(obj: unknown): obj is Duplex | Readable | Writable | Transform  {\n    return (\n      typeof obj === 'object' && obj !== null &&\n      ('_readableState' in obj || '_writableState' in obj)\n    );\n  }\n\n  /**\n   * Converts a Node.js `Readable` stream to a Web `ReadableStream`.\n   *\n   * This method provides a bridge between Node.js streams and the Web Streams API by converting a\n   * Node.js `Readable` stream into a Web `ReadableStream`. It listens for 'data', 'end', and 'error'\n   * events on the Node.js stream and appropriately enqueues data, closes, or errors the Web\n   * `ReadableStream`.\n   *\n   * If the Node.js stream is already destroyed, the method returns an immediately cancelled\n   * Web `ReadableStream`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getNodeReadableStreamSomehow();\n   * const webReadableStream = NodeStream.toWebReadable({ readable: nodeReadable });\n   * ```\n   *\n   * @param readable - The Node.js `Readable` stream to be converted.\n   * @returns A Web `ReadableStream` corresponding to the provided Node.js `Readable` stream.\n   * @throws TypeError if `readable` is not a Node.js `Readable` stream.\n   * @throws Error if the Node.js `Readable` stream is already destroyed.\n   */\n  static toWebReadable({ readable }: { readable: Readable }): ReadableStream {\n    if (!NodeStream.isReadableStream(readable)) {\n      throw new TypeError(`NodeStream.toWebReadable: 'readable' is not a Node Readable stream.`);\n    }\n\n    if (NodeStream.isDestroyed({ stream: readable })) {\n      const readable = new ReadableStream();\n      readable.cancel();\n      return readable;\n    }\n\n    return new ReadableStream({\n      start(controller) {\n        readable.on('data', (chunk) => {\n          controller.enqueue(chunk);\n        });\n\n        readable.on('end', () => {\n          controller.close();\n        });\n\n        readable.on('error', (err) => {\n          controller.error(err);\n        });\n      },\n\n      cancel() {\n        readable.destroy();\n      }\n    });\n  }\n}", "export * from './local-key-manager.js';\nexport * as utils from './utils.js';\n\nexport * from './algorithms/aes-ctr.js';\nexport * from './algorithms/aes-gcm.js';\nexport * from './algorithms/crypto-algorithm.js';\nexport * from './algorithms/ecdsa.js';\nexport * from './algorithms/eddsa.js';\nexport * from './algorithms/sha-2.js';\n\nexport * from './jose/jwe.js';\nexport * from './jose/jwk.js';\nexport * from './jose/jws.js';\nexport * from './jose/jwt.js';\nexport * from './jose/utils.js';\n\nexport * from './primitives/aes-ctr.js';\nexport * from './primitives/aes-gcm.js';\nexport * from './primitives/concat-kdf.js';\nexport * from './primitives/ed25519.js';\nexport * from './primitives/secp256r1.js';\nexport * from './primitives/pbkdf2.js';\nexport * from './primitives/secp256k1.js';\nexport * from './primitives/sha256.js';\nexport * from './primitives/x25519.js';\nexport * from './primitives/xchacha20.js';\nexport * from './primitives/xchacha20-poly1305.js';\n\nexport type * from './types/cipher.js';\nexport type * from './types/crypto-api.js';\nexport type * from './types/hasher.js';\nexport type * from './types/identifier.js';\nexport type * from './types/key-compressor.js';\nexport type * from './types/key-converter.js';\nexport type * from './types/key-deriver.js';\nexport type * from './types/key-generator.js';\nexport type * from './types/key-io.js';\nexport type * from './types/key-wrapper.js';\nexport type * from './types/params-direct.js';\nexport type * from './types/params-enclosed.js';\nexport type * from './types/params-kms.js';\nexport type * from './types/signer.js';", "import { sha256 } from '@noble/hashes/sha256';\n\n/**\n * The `Sha256` class provides an interface for generating SHA-256 hash digests.\n *\n * This class utilizes the '@noble/hashes/sha256' function to generate hash digests\n * of the provided data. The SHA-256 algorithm is widely used in cryptographic\n * applications to produce a fixed-size 256-bit (32-byte) hash.\n *\n * The methods of this class are asynchronous and return Promises. They use the Uint8Array\n * type for input data and the resulting digest, ensuring a consistent interface\n * for binary data processing.\n *\n * @example\n * ```ts\n * const data = new Uint8Array([...]);\n * const hash = await Sha256.digest({ data });\n * ```\n */\nexport class Sha256 {\n  /**\n   * Generates a SHA-256 hash digest for the given data.\n   *\n   * @remarks\n   * This method produces a hash digest using the SHA-256 algorithm. The resultant digest\n   * is deterministic, meaning the same data will always produce the same hash, but\n   * is computationally infeasible to regenerate the original data from the hash.\n   *\n   * @example\n   * ```ts\n   * const data = new Uint8Array([...]);\n   * const hash = await Sha256.digest({ data });\n   * ```\n   *\n   * @param params - The parameters for the hashing operation.\n   * @param params.data - The data to hash, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the SHA-256 hash digest of the provided data as a Uint8Array.\n   */\n  public static async digest({ data }: {\n    data: Uint8Array;\n  }): Promise<Uint8Array> {\n    const hash = sha256(data);\n\n    return hash;\n  }\n}", "/**\n * Base class for all cryptographic algorithm implementations.\n */\nexport abstract class CryptoAlgorithm {}", "import type { Hasher } from '../types/hasher.js';\nimport type { DigestParams } from '../types/params-direct.js';\n\nimport { Sha256 } from '../primitives/sha256.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\n\n/**\n * The `Sha2DigestParams` interface defines the algorithm-specific parameters that should be\n * passed into the `digest()` method when using the SHA-2 algorithm.\n */\nexport interface Sha2DigestParams extends DigestParams {\n  /**\n   * A string defining the name of hash function to use. The value must be one of the following:\n   * - `\"SHA-256\"`: Generates a 256-bit digest.\n   */\n  algorithm: 'SHA-256';\n}\n\n/**\n * The `Sha2Algorithm` class is an implementation of the {@link Hasher | `Hasher`} interface for the\n * SHA-2 family of cryptographic hash functions. The `digest` method takes the algorithm identifier\n * of the hash function and arbitrary data as input and returns the hash digest of the data.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class Sha2Algorithm extends CryptoAlgorithm\n  implements Hasher<Sha2DigestParams> {\n\n  /**\n   * Generates a hash digest of the provided data.\n   *\n   * @remarks\n   * A digest is the output of the hash function. It's a fixed-size string of bytes\n   * that uniquely represents the data input into the hash function. The digest is often used for\n   * data integrity checks, as any alteration in the input data results in a significantly\n   * different digest.\n   *\n   * It takes the algorithm identifier of the hash function and data to digest as input and returns\n   * the digest of the data.\n   *\n   * @example\n   * ```ts\n   * const sha2 = new Sha2Algorithm();\n   * const data = new TextEncoder().encode('Messsage');\n   * const digest = await sha2.digest({ data });\n   * ```\n   *\n   * @param params - The parameters for the digest operation.\n   * @param params.algorithm - The name of hash function to use.\n   * @param params.data - The data to digest.\n   *\n   * @returns A Promise which will be fulfilled with the hash digest.\n   */\n  public async digest({ algorithm, data }: Sha2DigestParams): Promise<Uint8Array> {\n    switch (algorithm) {\n\n      case 'SHA-256': {\n        const hash = await Sha256.digest({ data });\n        return hash;\n      }\n    }\n\n  }\n}", "/**\n * Canonicalizes a given object according to RFC 8785 (https://tools.ietf.org/html/rfc8785),\n * which describes JSON Canonicalization Scheme (JCS). This function sorts the keys of the\n * object and its nested objects alphabetically and then returns a stringified version of it.\n * This method handles nested objects, array values, and null values appropriately.\n *\n * @param obj - The object to canonicalize.\n * @returns The stringified version of the input object with its keys sorted alphabetically\n * per RFC 8785.\n */\nexport function canonicalize(obj: { [key: string]: any }): string {\n  /**\n   * Recursively sorts the keys of an object.\n   *\n   * @param obj - The object whose keys are to be sorted.\n   * @returns A new object with sorted keys.\n   */\n  const sortObjKeys = (obj: { [key: string]: any }): { [key: string]: any } => {\n    if (obj !== null && typeof obj === 'object' && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj).sort();\n      const sortedObj: { [key: string]: any } = {};\n      for (const key of sortedKeys) {\n        // Recursively sort keys of nested objects.\n        sortedObj[key] = sortObjKeys(obj[key]);\n      }\n      return sortedObj;\n    }\n    return obj;\n  };\n\n  // Stringify and return the final sorted object.\n  const sortedObj = sortObjKeys(obj);\n  return JSON.stringify(sortedObj);\n}", "import { Convert, removeUndefinedProperties } from '@web5/common';\n\nimport { canonicalize } from './utils.js';\nimport { Sha256 } from '../primitives/sha256.js';\n\n/**\n * Constant defining the prefix for JSON Web Keys (JWK) key URIs in this library.\n *\n * The prefix 'urn:jwk:' makes it explicit that a string represents a JWK, referenced by a\n * {@link https://datatracker.ietf.org/doc/html/rfc3986 | URI} (Uniform Resource Identifier),\n * which ensures consistent key referencing across all Web5 Key Management System (KMS)\n * implementations.\n *\n * These key URIs take the form `urn:jwk:<JWK thumbprint>`, where the\n * {@link https://datatracker.ietf.org/doc/html/rfc7638 | JWK thumbprint}, derived from the JWK, is\n * unique to the key's material, unaffected by the order or optional properties in the JWK.\n */\nexport const KEY_URI_PREFIX_JWK = 'urn:jwk:';\n\n/**\n * JSON Web Key Operations\n *\n * The \"key_ops\" (key operations) parameter identifies the operation(s)\n * for which the key is intended to be used.  The \"key_ops\" parameter is\n * intended for use cases in which public, private, or symmetric keys\n * may be present.\n *\n * Its value is an array of key operation values.  Values defined by\n * {@link https://www.rfc-editor.org/rfc/rfc7517.html#section-4.3 | RFC 7517 Section 4.3} are:\n *\n * - \"decrypt\"    : Decrypt content and validate decryption, if applicable\n * - \"deriveBits\" : Derive bits not to be used as a key\n * - \"deriveKey\"  : Derive key\n * - \"encrypt\"    : Encrypt content\n * - \"sign\"       : Compute digital signature or MAC\n * - \"unwrapKey\"  : Decrypt key and validate decryption, if applicable\n * - \"verify\"     : Verify digital signature or MAC\n * - \"wrapKey\"    : Encrypt key\n *\n * Other values MAY be used.  The key operation values are case-\n * sensitive strings.  Duplicate key operation values MUST NOT be\n * present in the array.  Use of the \"key_ops\" member is OPTIONAL,\n * unless the application requires its presence.\n *\n * The \"use\" and \"key_ops\" JWK members SHOULD NOT be used together;\n * however, if both are used, the information they convey MUST be\n * consistent.  Applications should specify which of these members they\n * use, if either is to be used by the application.\n */\nexport type JwkOperation = 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'deriveKey' | 'deriveBits' | 'wrapKey' | 'unwrapKey';\n\n/**\n * JSON Web Key Use\n *\n * The \"use\" (public key use) parameter identifies the intended use of\n * the public key.  The \"use\" parameter is employed to indicate whether\n * a public key is used for encrypting data or verifying the signature\n * on data.\n *\n * Values defined by {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.2 | RFC 7517 Section 4.2} are:\n *\n * - \"sig\" (signature)\n * - \"enc\" (encryption)\n *\n * Other values MAY be used.  The \"use\" value is a case-sensitive\n * string.  Use of the \"use\" member is OPTIONAL, unless the application\n * requires its presence.\n *\n * The \"use\" and \"key_ops\" JWK members SHOULD NOT be used together;\n * however, if both are used, the information they convey MUST be\n * consistent.  Applications should specify which of these members they\n * use, if either is to be used by the application.\n *\n * When a key is used to wrap another key and a public key use\n * designation for the first key is desired, the \"enc\" (encryption) key\n * use value is used, since key wrapping is a kind of encryption.  The\n * \"enc\" value is also to be used for public keys used for key agreement\n * operations.\n */\nexport type JwkUse = 'sig' | 'enc' | string;\n\n/**\n * JSON Web Key Types\n */\nexport type JwkType =\n  /**\n   * Elliptic Curve\n   * Used with Elliptic Curve Digital Signature Algorithm (ECDSA) and Elliptic\n   * Curve Diffie-Hellman (ECDH), including secp256k1, P-256, P-384, and P-521.\n   */\n  | 'EC'\n  /**\n   * RSA\n   * Widely used for encryption and digital signatures. RSA keys are used in\n   * various algorithms like RS256, RS384, RS512, etc.\n   */\n  | 'RSA'\n  /**\n   * Octet sequence\n   * Used with symmetric signing (e.g., HMAC HS256, HS512, etc.) and\n   * symmetric encryption (e.g., A256CBC-HS512, A256GCM, etc.) algorithms.\n   */\n  | 'oct'\n  /**\n   * Octet string key pairs (OKP)\n   * A type of public key that is used with algorithms such as EdDSA (Ed25519 and\n   * Ed448 curves) and ECDH (X25519 and X448 curves).\n   */\n  | 'OKP'\n\n/**\n * JSON Web Key Elliptic Curve\n */\nexport type JwkNamedCurves =\n  // P-256 Curve\n  | 'P-256'\n  // P-384 Curve\n  | 'P-384'\n  // P-521 Curve\n  | 'P-521'\n  // Ed25519 signature algorithm key pairs\n  | 'Ed25519'\n  // Ed448 signature algorithm key pairs\n  | 'Ed448'\n  // X25519 function key pairs\n  | 'X25519'\n  // X448 function key pairs\n  | 'X448'\n  // SECG secp256k1 curve\n  | 'secp256k1';\n\n/**\n * JSON Web Key Parameters\n */\n\n/** Parameters used with any \"kty\" (key type) value. */\nexport type JwkParamsAnyKeyType = {\n  /** JWK Algorithm Parameter. The algorithm intended for use with the key. */\n  alg?: string;\n  /** JWK Extractable Parameter */\n  ext?: 'true' | 'false';\n  /** JWK Key Operations Parameter */\n  key_ops?: JwkOperation[];\n  /** JWK Key ID Parameter */\n  kid?: string;\n  /** JWK Key Type Parameter */\n  kty: JwkType;\n  /** JWK Public Key Use Parameter */\n  use?: JwkUse;\n  /** JWK X.509 Certificate Chain Parameter */\n  x5c?: string;\n  /** JWK X.509 Certificate SHA-1 Thumbprint Parameter */\n  x5t?: string;\n  /** JWK X.509 Certificate SHA-256 Thumbprint Parameter */\n  'x5t#S256'?: string;\n  /** JWK X.509 URL Parameter */\n  x5u?: string;\n}\n\n/** Parameters used with \"EC\" (elliptic curve) public keys. */\nexport type JwkParamsEcPublic = Omit<JwkParamsAnyKeyType, 'alg' | 'kty'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * ES256  : ECDSA using P-256 and SHA-256\n   * ES256K : ECDSA using secp256k1 curve and SHA-256\n   * ES384  : ECDSA using P-384 and SHA-384\n   * ES512  : ECDSA using P-521 and SHA-512\n   */\n  alg?: 'ES256' | 'ES256K' | 'ES384' | 'ES512';\n\n  /**\n   * Elliptic Curve key pair.\n   */\n  kty: 'EC';\n\n  /**\n   * The cryptographic curve used with the key.\n   * MUST be present for all EC public keys.\n   */\n  crv: 'secp256k1' | 'P-256' | 'P-384' | 'P-521';\n\n  /**\n   * The x-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC public keys\n   */\n  x: string;\n\n  /**\n   * The y-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present only for secp256k1 public keys.\n   */\n  y?: string;\n}\n\n/** Parameters used with \"EC\" (elliptic curve) private keys. */\nexport type JwkParamsEcPrivate = JwkParamsEcPublic & {\n  /**\n   * The d-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC private keys.\n   */\n  d: string;\n}\n\n/** Parameters used with \"OKP\" (octet key pair) public keys. */\nexport type JwkParamsOkpPublic =\n  Omit<JwkParamsAnyKeyType, 'kty' | 'alg' | 'crv'> &\n  Pick<JwkParamsEcPublic, 'x'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * EdDSA: Edwards Curve Digital Signature Algorithm\n   */\n  alg?: 'EdDSA';\n\n  /**\n   * The cryptographic curve used with the key.\n   * MUST be present for all OKP public keys.\n   */\n  crv: 'Ed25519' | 'Ed448' | 'X25519' | 'X448';\n\n  /**\n   * Key type\n   * OKP (Octet Key Pair) is defined for public key algorithms that use octet\n   * strings as private and public keys.\n   */\n  kty: 'OKP';\n}\n\n/** Parameters used with \"OKP\" (octet key pair) private keys. */\nexport type JwkParamsOkpPrivate = JwkParamsOkpPublic & {\n  /**\n   * The d-coordinate for the Edwards Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC private keys.\n   */\n  d: string;\n};\n\n/** Parameters used with \"oct\" (octet sequence) private keys. */\nexport type JwkParamsOctPrivate = Omit<JwkParamsAnyKeyType, 'alg' | 'kty'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * Used with symmetric signing (e.g., HMAC HS256, etc.) and\n   * symmetric encryption (e.g., A256GCM, etc.) algorithms.\n   */\n  alg?:\n    // AES CBC using 128-bit key\n    | 'A128CBC'\n    // AES CBC using 192-bit key\n    | 'A192CBC'\n    // AES CBC using 256-bit key\n    | 'A256CBC'\n    // AES CTR using 128-bit key\n    | 'A128CTR'\n    // AES CTR using 192-bit key\n    | 'A192CTR'\n    // AES CTR using 256-bit key\n    | 'A256CTR'\n    // AES GCM using a 128-bit key\n    | 'A128GCM'\n    // AES GCM using a 192-bit key\n    | 'A192GCM'\n    // AES GCM using a 256-bit key\n    | 'A256GCM'\n    // HMAC using SHA-256\n    | 'HS256'\n    // HMAC using SHA-384\n    | 'HS384'\n    // HMAC using SHA-512\n    | 'HS512'\n\n  /**\n   * The \"k\" (key value) parameter contains the value of the symmetric\n   * (or other single-valued) key.  It is represented as the base64url\n   * encoding of the octet sequence containing the key value.\n   */\n  k: string;\n\n  /**\n   * Key type\n   * oct (Octet Sequence) is defined for symmetric encryption and\n   * symmetric signature algorithms.\n   */\n  kty: 'oct';\n}\n\n/** Parameters Used with \"RSA\" public keys. */\nexport type JwkParamsRsaPublic = Omit<JwkParamsAnyKeyType, 'kty'> & {\n  /** Public exponent for RSA */\n  e: string;\n\n  /**\n   * Key type\n   * RSA is widely used for encryption and digital signatures.\n   */\n  kty: 'RSA';\n\n  /** Modulus for RSA */\n  n: string;\n};\n\n/** Parameters used with \"RSA\" private keys. */\nexport type JwkParamsRsaPrivate = JwkParamsRsaPublic & {\n  /** Private exponent for RSA */\n  d: string;\n  /** First prime factor for RSA */\n  p?: string;\n  /** Second prime factor for RSA */\n  q?: string;\n  /** First factor's CRT exponent for RSA */\n  dp?: string;\n  /** Second factor's CRT exponent for RSA */\n  dq?: string;\n  /** First CRT coefficient for RSA */\n  qi?: string;\n  /** Other primes information (optional in RFC 7518) */\n  oth?: {\n    /** Other primes' factor */\n    r: string;\n    /** Other primes' CRT exponent */\n    d: string;\n    /** Other primes' CRT coefficient */\n    t: string;\n  }[];\n};\n\n/** Parameters used with public keys in JWK format. */\nexport type PublicKeyJwk = JwkParamsEcPublic | JwkParamsOkpPublic | JwkParamsRsaPublic;\n\n/** Parameters used with private keys in JWK format. */\nexport type PrivateKeyJwk = JwkParamsEcPrivate | JwkParamsOkpPrivate | JwkParamsOctPrivate | JwkParamsRsaPrivate;\n\n/**\n * JSON Web Key ({@link https://datatracker.ietf.org/doc/html/rfc7517 | JWK}).\n * \"RSA\", \"EC\", \"OKP\", and \"oct\" key types are supported.\n */\nexport interface Jwk {\n  // Common properties that apply to all key types.\n\n  /** JWK Algorithm Parameter. The algorithm intended for use with the key. */\n  alg?: string;\n  /** JWK Extractable Parameter */\n  ext?: 'true' | 'false';\n  /** JWK Key Operations Parameter */\n  key_ops?: JwkOperation[];\n  /** JWK Key ID Parameter */\n  kid?: string;\n  /** JWK Key Type Parameter */\n  kty: JwkType;\n  /** JWK Public Key Use Parameter */\n  use?: JwkUse;\n  /** JWK X.509 Certificate Chain Parameter */\n  x5c?: string;\n  /** JWK X.509 Certificate SHA-1 Thumbprint Parameter */\n  x5t?: string;\n  /** JWK X.509 Certificate SHA-256 Thumbprint Parameter */\n  'x5t#S256'?: string;\n  /** JWK X.509 URL Parameter */\n  x5u?: string;\n\n  // Elliptic Curve (EC or OKP) public key properties.\n\n  /** The cryptographic curve used with the key. */\n  crv?: string;\n  /** The x-coordinate for the Elliptic Curve point. */\n  x?: string;\n  /** The y-coordinate for the Elliptic Curve point. */\n  y?: string;\n\n  // Symmetric key properties.\n\n  /** The \"k\" (key value) parameter contains the value of the symmetric (or other single-valued) key. */\n  k?: string;\n\n  // RSA public key properties.\n\n  /** Public exponent for RSA */\n  e?: string;\n  /** Modulus for RSA */\n  n?: string;\n  /** First prime factor for RSA */\n  p?: string;\n  /** Second prime factor for RSA */\n  q?: string;\n  /** First factor's CRT exponent for RSA */\n  dp?: string;\n  /** Second factor's CRT exponent for RSA */\n  dq?: string;\n  /** First CRT coefficient for RSA */\n  qi?: string;\n  /** Other primes information (optional in RFC 7518) */\n  oth?: {\n    /** Other primes' factor */\n    r: string;\n    /** Other primes' CRT exponent */\n    d: string;\n    /** Other primes' CRT coefficient */\n    t: string;\n  }[];\n\n  // Elliptic Curve and RSA private key properties.\n\n  /** Private key component for EC, OKP, or RSA keys. */\n  d?: string;\n\n  // Additional public or private properties.\n  [key: string]: unknown;\n}\n\n/**\n * JSON Web Key Set ({@link https://datatracker.ietf.org/doc/html/rfc7517 | JWK Set})\n *\n * @remarks\n * A JWK Set is a JSON object that represents a set of JWKs. The JSON object MUST have a \"keys\"\n * member, with its value being an array of JWKs.\n *\n * Additional members can be present in the JWK Set but member names MUST be unique. If not\n * understood by implementations encountering them, they MUST be ignored. Parameters for\n * representing additional properties of JWK Sets should either be registered in the IANA\n * \"JSON Web Key Set Parameters\" registry or be a value that contains a Collision-Resistant Name.\n */\nexport interface JwkSet {\n  /** Array of JWKs */\n  keys: Jwk[]\n}\n\n/**\n * Computes the thumbprint of a JSON Web Key (JWK) using the method\n * specified in RFC 7638. This function accepts RSA, EC, OKP, and oct keys\n * and returns the thumbprint as a base64url encoded SHA-256 hash of the\n * JWK's required members, serialized and sorted lexicographically.\n *\n * Purpose:\n * - Uniquely Identifying Keys: The thumbprint allows the unique\n *   identification of a specific JWK within a set of JWKs. It provides a\n *   deterministic way to generate a value that can be used as a key\n *   identifier (kid) or to match a specific key.\n *\n * - Simplifying Key Management: In systems where multiple keys are used,\n *   managing and identifying individual keys can become complex. The\n *   thumbprint method simplifies this by creating a standardized, unique\n *   identifier for each key.\n *\n * - Enabling Interoperability: By standardizing the method to compute a\n *   thumbprint, different systems can compute the same thumbprint value for\n *   a given JWK. This enables interoperability among systems that use JWKs.\n *\n * - Secure Comparison: The thumbprint provides a way to securely compare\n *   JWKs to determine if they are equivalent.\n *\n * @example\n * ```ts\n * const jwk: PublicKeyJwk = {\n *   'kty': 'EC',\n *   'crv': 'secp256k1',\n *   'x': '61iPYuGefxotzBdQZtDvv6cWHZmXrTTscY-u7Y2pFZc',\n *   'y': '88nPCVLfrAY9i-wg5ORcwVbHWC_tbeAd1JE2e0co0lU'\n * };\n *\n * const thumbprint = jwkThumbprint(jwk);\n * console.log(`JWK thumbprint: ${thumbprint}`);\n * ```\n *\n * @see {@link https://datatracker.ietf.org/doc/html/rfc7638 | RFC7638} for\n * the specification of JWK thumbprint computation.\n *\n * @param jwk - The JSON Web Key for which the thumbprint will be computed.\n *              This must be an RSA, EC, OKP, or oct key.\n * @returns The thumbprint as a base64url encoded string.\n * @throws Throws an `Error` if the provided key type is unsupported.\n */\nexport async function computeJwkThumbprint({ jwk }: {\n  jwk: Jwk\n}): Promise<string> {\n  /** Step 1 - Normalization: The JWK is normalized to include only specific\n   * members and in lexicographic order.\n   */\n  const keyType = jwk.kty;\n  let normalizedJwk: Jwk;\n  if (keyType === 'EC') {\n    normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };\n  } else if (keyType === 'oct') {\n    normalizedJwk = { k: jwk.k, kty: jwk.kty };\n  } else if (keyType === 'OKP') {\n    normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };\n  } else if (keyType === 'RSA') {\n    normalizedJwk = { e: jwk.e, kty: jwk.kty, n: jwk.n };\n  } else {\n    throw new Error(`Unsupported key type: ${keyType}`);\n  }\n  removeUndefinedProperties(normalizedJwk);\n\n  /** Step 2 - Serialization: The normalized JWK is serialized to a UTF-8\n   * representation of its JSON encoding. */\n  const serializedJwk = canonicalize(normalizedJwk);\n\n  /** Step 3 - Digest Calculation: A cryptographic hash function\n   * (SHA-256 is recommended) is applied to the serialized JWK,\n   * resulting in the thumbprint. */\n  const utf8Bytes = Convert.string(serializedJwk).toUint8Array();\n  const digest = await Sha256.digest({ data: utf8Bytes });\n\n  // Encode as Base64Url.\n  const thumbprint = Convert.uint8Array(digest).toBase64Url();\n\n  return thumbprint;\n}\n\n/**\n * Checks if the provided object is a valid elliptic curve private key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid EC private JWK; otherwise, false.\n */\nexport function isEcPrivateJwk(obj: unknown): obj is JwkParamsEcPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj && 'd' in obj)) return false;\n  if (obj.kty !== 'EC') return false;\n  if (typeof obj.d !== 'string') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid elliptic curve public key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid EC public JWK; otherwise, false.\n */\nexport function isEcPublicJwk(obj: unknown): obj is JwkParamsEcPublic {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj)) return false;\n  if ('d' in obj) return false;\n  if (obj.kty !== 'EC') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet sequence (symmetric key) in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid oct private JWK; otherwise, false.\n */\nexport function isOctPrivateJwk(obj: unknown): obj is JwkParamsOctPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'k' in obj)) return false;\n  if (obj.kty !== 'oct') return false;\n  if (typeof obj.k !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet key pair private key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid OKP private JWK; otherwise, false.\n */\nexport function isOkpPrivateJwk(obj: unknown): obj is JwkParamsOkpPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj && 'd' in obj)) return false;\n  if (obj.kty !== 'OKP') return false;\n  if (typeof obj.d !== 'string') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet key pair public key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid OKP public JWK; otherwise, false.\n */\nexport function isOkpPublicJwk(obj: unknown): obj is JwkParamsOkpPublic {\n  if (!obj || typeof obj !== 'object') return false;\n  if ('d' in obj) return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj)) return false;\n  if (obj.kty !== 'OKP') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid private key in JWK format of any supported type.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid private JWK; otherwise, false.\n */\nexport function isPrivateJwk(obj: unknown): obj is PrivateKeyJwk {\n  if (!obj || typeof obj !== 'object') return false;\n\n  const kty = (obj as { kty: string }).kty;\n\n  switch (kty) {\n    case 'EC':\n    case 'OKP':\n    case 'RSA':\n      return 'd' in obj;\n    case 'oct':\n      return 'k' in obj;\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks if the provided object is a valid public key in JWK format of any supported type.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid public JWK; otherwise, false.\n */\nexport function isPublicJwk(obj: unknown): obj is PublicKeyJwk {\n  if (!obj || typeof obj !== 'object') return false;\n\n  const kty = (obj as { kty: string }).kty;\n\n  switch (kty) {\n    case 'EC':\n    case 'OKP':\n      return 'x' in obj && !('d' in obj);\n    case 'RSA':\n      return 'n' in obj && 'e' in obj && !('d' in obj);\n    default:\n      return false;\n  }\n}", "import type { AffinePoint } from '@noble/curves/abstract/weierstrass';\n\nimport { Convert } from '@web5/common';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToBytesBE } from '@noble/curves/abstract/utils';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Secp256k1` class provides a comprehensive suite of utilities for working with\n * the secp256k1 elliptic curve, commonly used in blockchain and cryptographic applications.\n * This class includes methods for key generation, conversion, signing, verification, and\n * Elliptic Curve Diffie-Hellman (ECDH) key agreement.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * adheres to RFC6979 for ECDSA signing and verification and RFC6090 for ECDH.\n *\n * Key Features:\n * - Key Generation: Generate secp256k1 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n * - ECDSA Signing and Verification: Sign data and verify signatures with secp256k1 keys.\n * - Key Validation: Validate the mathematical correctness of secp256k1 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Secp256k1.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Secp256k1.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Secp256k1.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await Secp256k1.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // ECDSA Signing\n * const signature = await Secp256k1.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // ECDSA Signature Verification\n * const isValid = await Secp256k1.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });\n * const compressedPublicKey = await Secp256k1.compressPublicKey({ publicKeyBytes });\n * const uncompressedPublicKey = await Secp256k1.decompressPublicKey({ publicKeyBytes });\n *\n * // Key Validation\n * const isPrivateKeyValid = await Secp256k1.validatePrivateKey({ privateKeyBytes });\n * const isPublicKeyValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Secp256k1 {\n  /**\n   * Adjusts an ECDSA signature to a normalized, low-S form.\n   *\n   * @remarks\n   * All ECDSA signatures, regardless of the curve, consist of two components, `r` and `s`, both of\n   * which are integers. The curve's order (the total number of points on the curve) is denoted by\n   * `n`. In a valid ECDSA signature, both `r` and `s` must be in the range [1, n-1]. However, due\n   * to the mathematical properties of ECDSA, if `(r, s)` is a valid signature, then `(r, n - s)` is\n   * also a valid signature for the same message and public key. In other words, for every\n   * signature, there's a \"mirror\" signature that's equally valid. For these elliptic curves:\n   *\n   * - Low S Signature: A signature where the `s` component is in the lower half of the range,\n   *                    specifically less than or equal to `n/2`.\n   *\n   * - High S Signature: This is where the `s` component is in the upper half of the range, greater\n   *                     than `n/2`.\n   *\n   * The practical implication is that a third-party can forge a second valid signature for the same\n   * message by negating the `s` component of the original signature, without any knowledge of the\n   * private key. This is known as a \"signature malleability\" attack.\n   *\n   * This type of forgery is not a problem in all systems, but it can be an issue in systems that\n   * rely on digital signature uniqueness to ensure transaction integrity. For example, in Bitcoin,\n   * transaction malleability is an issue because it allows for the modification of transaction\n   * identifiers (and potentially, transactions themselves) after they're signed but before they're\n   * confirmed in a block. By enforcing low `s` values, the Bitcoin network reduces the likelihood of\n   * this occurring, making the system more secure and predictable.\n   *\n   * For this reason, it's common practice to normalize ECDSA signatures to a low-S form. This\n   * form is considered standard and preferable in some systems and is known as the \"normalized\"\n   * form of the signature.\n   *\n   * This method takes a signature, and if it's high-S, returns the normalized low-S form. If the\n   * signature is already low-S, it's returned unmodified. It's important to note that this\n   * method does not change the validity of the signature but makes it compliant with systems that\n   * enforce low-S signatures.\n   *\n   * @example\n   * ```ts\n   * const signature = new Uint8Array([...]); // Your ECDSA signature\n   * const adjustedSignature = await Secp256k1.adjustSignatureToLowS({ signature });\n   * // Now 'adjustedSignature' is in the low-S form.\n   * ```\n   *\n   * @param params - The parameters for the signature adjustment.\n   * @param params.signature - The ECDSA signature as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the adjusted signature in low-S form as a `Uint8Array`.\n   */\n  public static async adjustSignatureToLowS({ signature }: {\n    signature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the signature to a `secp256k1.Signature` object.\n    const signatureObject = secp256k1.Signature.fromCompact(signature);\n\n    if (signatureObject.hasHighS()) {\n      // Adjust the signature to low-S format if it's high-S.\n      const adjustedSignatureObject = signatureObject.normalizeS();\n\n      // Convert the adjusted signature object back to a byte array.\n      const adjustedSignature = adjustedSignatureObject.toCompactRawBytes();\n\n      return adjustedSignature;\n\n    } else {\n      // Return the unmodified signature if it is already in low-S format.\n      return signature;\n    }\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method takes a private key represented as a byte array (Uint8Array) and\n   * converts it into a JWK object. The conversion involves extracting the\n   * elliptic curve point (x and y coordinates) from the private key and encoding\n   * them into base64url format, alongside other JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Secp256k1.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key in a byte array (Uint8Array) format and\n   * transforms it to a JWK object. It involves decoding the elliptic curve point\n   * (x and y coordinates) from the raw public key bytes and encoding them into\n   * base64url format, along with setting appropriate JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await Secp256k1.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided public key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: publicKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a public key to its compressed form.\n   *\n   * @remarks\n   * This method takes a public key represented as a byte array and compresses it. Public key\n   * compression is a process that reduces the size of the public key by removing the y-coordinate,\n   * making it more efficient for storage and transmission. The compressed key retains the same\n   * level of security as the uncompressed key.\n   *\n   * @example\n   * ```ts\n   * const uncompressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual uncompressed public key bytes\n   * const compressedPublicKey = await Secp256k1.compressPublicKey({\n   *   publicKeyBytes: uncompressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key compression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the compressed public key as a Uint8Array.\n   */\n  public static async compressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the compressed form of the public key.\n    return point.toRawBytes(true);\n  }\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The derivation process involves converting the private key to a raw\n   * byte array, then computing the elliptic curve point (x and y coordinates) from this private\n   * key. These coordinates are then encoded into base64url format to construct the public key in\n   * JWK format.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the secp256k1 elliptic curve standards. This method is useful in cryptographic\n   * operations where a public key is needed for operations like signature verification, but only\n   * the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const publicKey = await Secp256k1.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Secp256k1.privateKeyToBytes({ privateKey: key });\n\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an ASN.1 DER encoded ECDSA signature to a compact R+S format.\n   *\n   * @remarks\n   * This method is used for converting an ECDSA signature from the ASN.1 DER encoding to the more\n   * compact R+S format. This conversion is often required when dealing with ECDSA signatures in\n   * certain cryptographic standards such as JWS (JSON Web Signature).\n   *\n   * The method decodes the DER-encoded signature, extracts the R and S values, and concatenates\n   * them into a single byte array. This process involves handling the ASN.1 structure to correctly\n   * parse the R and S values, considering padding and integer encoding specifics of DER.\n   *\n   * @example\n   * ```ts\n   * const derSignature = new Uint8Array([...]); // Replace with your DER-encoded signature\n   * const signature = await Secp256k1.convertDerToCompactSignature({ derSignature });\n   * ```\n   *\n   * @param params - The parameters for the signature conversion.\n   * @param params.derSignature - The signature in ASN.1 DER format as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the signature in compact R+S format as a `Uint8Array`.\n   */\n  public static async convertDerToCompactSignature({ derSignature }: {\n    derSignature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the DER-encoded signature into a `secp256k1.Signature` object.\n    // This involves parsing the ASN.1 DER structure to extract the R and S components.\n    const signatureObject = secp256k1.Signature.fromDER(derSignature);\n\n    // Convert the signature object into compact R+S format, which concatenates the R and S values\n    // into a single byte array.\n    const compactSignature = signatureObject.toCompactRawBytes();\n\n    return  compactSignature;\n  }\n\n  /**\n   * Converts a public key to its uncompressed form.\n   *\n   * @remarks\n   * This method takes a compressed public key represented as a byte array and decompresses it.\n   * Public key decompression involves reconstructing the y-coordinate from the x-coordinate,\n   * resulting in the full public key. This method is used when the uncompressed key format is\n   * required for certain cryptographic operations or interoperability.\n   *\n   * @example\n   * ```ts\n   * const compressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual compressed public key bytes\n   * const decompressedPublicKey = await Secp256k1.decompressPublicKey({\n   *   publicKeyBytes: compressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key decompression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the uncompressed public key as a Uint8Array.\n   */\n  public static async decompressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the uncompressed form of the public key.\n    return point.toRawBytes(false);\n  }\n\n  /**\n   * Generates a secp256k1 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the secp256k1\n   * elliptic curve. The key is generated using cryptographically secure random\n   * number generation to ensure its uniqueness and security. The resulting\n   * private key adheres to the JWK format, specifically tailored for secp256k1,\n   * making it compatible with common cryptographic standards and easy to use in\n   * various cryptographic processes.\n   *\n   * The private key generated by this method includes the following components:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, derived from the private key, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, derived from the private key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in signin and key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Secp256k1.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = secp256k1.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Secp256k1.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from a secp256k1 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const publicKey = await Secp256k1.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    // Verify the provided JWK represents an elliptic curve (EC) secp256k1 private key.\n    if (!(isEcPrivateJwk(key) && key.crv === 'secp256k1')) {\n      throw new Error(`Secp256k1: The provided key is not a secp256k1 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method takes a private key in JWK format and extracts its raw byte representation.\n   * It specifically focuses on the 'd' parameter of the JWK, which represents the private\n   * key component in base64url encoding. The method decodes this value into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC secp256k1 private key.\n    if (!isEcPrivateJwk(privateKey)) {\n      throw new Error(`Secp256k1: The provided key is not a valid EC private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'x' and 'y' parameters of the JWK\n   * (which represent the x and y coordinates of the elliptic curve point, respectively)\n   * from base64url format into a byte array. The method then concatenates these values,\n   * along with a prefix indicating the key format, to form the full public key.\n   *\n   * This function is particularly useful for use cases where the public key is needed\n   * in its raw byte format, such as for certain cryptographic operations or when\n   * interfacing with systems that require raw key formats.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // A Jwk public key object\n   * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC secp256k1 public key, which must have a 'y' value.\n    if (!(isEcPublicJwk(publicKey) && publicKey.y)) {\n      throw new Error(`Secp256k1: The provided key is not a valid EC public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const prefix = new Uint8Array([0x04]); // Designates an uncompressed key.\n    const x = Convert.base64Url(publicKey.x).toUint8Array();\n    const y = Convert.base64Url(publicKey.y).toUint8Array();\n\n    // Concatenate the prefix, x-coordinate, and y-coordinate as a single byte array.\n    const publicKeyBytes = new Uint8Array([...prefix, ...x, ...y]);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256k1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256k1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk private key object for party A\n   * const publicKeyB = { ... }; // A Jwk public key object for party B\n   * const sharedSecret = await Secp256k1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`Secp256k1: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await Secp256k1.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await Secp256k1.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the compact representation shared secret between the public and private keys.\n    const sharedSecret = secp256k1.getSharedSecret(privateKeyABytes, publicKeyBBytes, true);\n\n    // Remove the leading byte that indicates the sign of the y-coordinate\n    // of the point on the elliptic curve.  See note above.\n    return sharedSecret.slice(1);\n  }\n\n  /**\n   * Generates an RFC6979-compliant ECDSA signature of given data using a secp256k1 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the ECDSA\n   * (Elliptic Curve Digital Signature Algorithm) signature algorithm, as defined in RFC6979.\n   * The data to be signed is first hashed using the SHA-256 algorithm, and this hash is then\n   * signed using the private key. The output is a digital signature in the form of a\n   * Uint8Array, which uniquely corresponds to both the data and the private key used for signing.\n   *\n   * This method is commonly used in cryptographic applications to ensure data integrity and\n   * authenticity. The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const signature = await Secp256k1.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ data, key }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    // Sign the provided data using the ECDSA algorithm.\n    // The `secp256k1.sign` operation returns a signature object with { r, s, recovery } properties.\n    const signatureObject = secp256k1.sign(digest, privateKeyBytes);\n\n    // Convert the signature object to Uint8Array.\n    const signature = signatureObject.toCompactRawBytes();\n\n    return signature;\n  }\n\n  /**\n   * Validates a given private key to ensure its compliance with the secp256k1 curve standards.\n   *\n   * @remarks\n   * This method checks whether a provided private key is a valid 32-byte number and falls within\n   * the range defined by the secp256k1 curve's order. It is essential for ensuring the private\n   * key's mathematical correctness in the context of secp256k1-based cryptographic operations.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // A 32-byte private key\n   * const isValid = await Secp256k1.validatePrivateKey({ privateKeyBytes });\n   * console.log(isValid); // true or false based on the key's validity\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.privateKeyBytes - The private key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the private key is valid.\n   */\n  public static async validatePrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    return secp256k1.utils.isValidPrivateKey(privateKeyBytes);\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the secp256k1 curve.\n   *\n   * @remarks\n   * This method checks if the provided public key represents a valid point on the secp256k1 curve.\n   * It decodes the key's Weierstrass points (x and y coordinates) and verifies their validity\n   * against the curve's parameters. A valid point must lie on the curve and meet specific\n   * mathematical criteria defined by the curve's equation.\n   *\n   * It's important to note that this method does not verify the key's ownership or whether it has\n   * been compromised; it solely focuses on the key's adherence to the curve's mathematical\n   * principles.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the secp256k1 curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating the public key's validity on\n   *          the secp256k1 curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n      // Decode Weierstrass points from key bytes.\n      const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Short Weierstrass curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC6979-compliant ECDSA signature against given data and a secp256k1 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure that it was generated by the holder of the\n   * corresponding private key and that the signed data has not been altered. The signature\n   * verification is performed using the ECDSA (Elliptic Curve Digital Signature Algorithm) as\n   * specified in RFC6979. The data to be verified is first hashed using the SHA-256 algorithm, and\n   * this hash is then used along with the public key to verify the signature.\n   *\n   * The method returns a boolean value indicating whether the signature is valid. A valid signature\n   * proves that the signed data was indeed signed by the owner of the private key corresponding to\n   * the provided public key and that the data has not been tampered with since it was signed.\n   *\n   * Note: The verification process does not consider the malleability of low-s signatures, which\n   * may be relevant in certain contexts, such as Bitcoin transactions.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isSignatureValid = await Secp256k1.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * console.log(isSignatureValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key used for verification, represented in JWK format.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    /** Perform the verification of the signature.\n     * This verify operation has the malleability check disabled. Guaranteed support\n     * for low-s signatures across languages is unlikely especially in the context\n     * of SSI. Notable Cloud KMS providers do not natively support it either. It is\n     * also worth noting that low-s signatures are a requirement for Bitcoin. */\n    const isValid = secp256k1.verify(signature, digest, publicKeyBytes, { lowS: false });\n\n    return isValid;\n  }\n\n  /**\n   * Returns the elliptic curve point (x and y coordinates) for a given secp256k1 key.\n   *\n   * @remarks\n   * This method extracts the elliptic curve point from a given secp256k1 key, whether\n   * it's a private or a public key. For a private key, the method first computes the\n   * corresponding public key and then extracts the x and y coordinates. For a public key,\n   * it directly returns these coordinates. The coordinates are represented as Uint8Array.\n   *\n   * The x and y coordinates represent the key's position on the elliptic curve and can be\n   * used in various cryptographic operations, such as digital signatures or key agreement\n   * protocols.\n   *\n   * @example\n   * ```ts\n   * // For a private key\n   * const privateKey = new Uint8Array([...]); // A 32-byte private key\n   * const { x: xFromPrivateKey, y: yFromPrivateKey } = await Secp256k1.getCurvePoint({ keyBytes: privateKey });\n   *\n   * // For a public key\n   * const publicKey = new Uint8Array([...]); // A 33-byte or 65-byte public key\n   * const { x: xFromPublicKey, y: yFromPublicKey } = await Secp256k1.getCurvePoint({ keyBytes: publicKey });\n   * ```\n   *\n   * @param params - The parameters for the curve point decoding operation.\n   * @param params.keyBytes - The key for which to get the elliptic curve point.\n   *                          Can be either a private key or a public key.\n   *                          The key should be passed as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to an object with properties 'x' and 'y',\n   *          each being a Uint8Array representing the x and y coordinates of the key point on the\n   *          elliptic curve.\n   */\n  private static async getCurvePoint({ keyBytes }: {\n    keyBytes: Uint8Array;\n  }): Promise<AffinePoint<Uint8Array>> {\n    // If key is a private key, first compute the public key.\n    if (keyBytes.byteLength === 32) {\n      keyBytes = secp256k1.getPublicKey(keyBytes);\n    }\n\n    // Decode Weierstrass affine point from key bytes.\n    const point = secp256k1.ProjectivePoint.fromHex(keyBytes);\n\n    // Get x- and y-coordinate values and convert to Uint8Array.\n    const x = numberToBytesBE(point.x, 32);\n    const y = numberToBytesBE(point.y, 32);\n\n    return { x, y };\n  }\n}", "import type { AffinePoint } from '@noble/curves/abstract/weierstrass';\n\nimport { Convert } from '@web5/common';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { numberToBytesBE } from '@noble/curves/abstract/utils';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Secp256r1` class provides a comprehensive suite of utilities for working with\n * the secp256r1 (aka P-256) elliptic curve, commonly used in blockchain and cryptographic\n * applications. This class includes methods for key generation, conversion, signing, verification,\n * and Elliptic Curve Diffie-Hellman (ECDH) key agreement.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * adheres to RFC6979 for ECDSA signing and verification and RFC6090 for ECDH.\n *\n * Key Features:\n * - Key Generation: Generate secp256r1 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n * - ECDSA Signing and Verification: Sign data and verify signatures with secp256r1 keys.\n * - Key Validation: Validate the mathematical correctness of secp256r1 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Secp256r1.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Secp256r1.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Secp256r1.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await Secp256r1.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // ECDSA Signing\n * const signature = await Secp256r1.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // ECDSA Signature Verification\n * const isValid = await Secp256r1.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey });\n * const compressedPublicKey = await Secp256r1.compressPublicKey({ publicKeyBytes });\n * const uncompressedPublicKey = await Secp256r1.decompressPublicKey({ publicKeyBytes });\n *\n * // Key Validation\n * const isPrivateKeyValid = await Secp256r1.validatePrivateKey({ privateKeyBytes });\n * const isPublicKeyValid = await Secp256r1.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Secp256r1 {\n/**\n   * Adjusts an ECDSA signature to a normalized, low-S form.\n   *\n   * @remarks\n   * All ECDSA signatures, regardless of the curve, consist of two components, `r` and `s`, both of\n   * which are integers. The curve's order (the total number of points on the curve) is denoted by\n   * `n`. In a valid ECDSA signature, both `r` and `s` must be in the range [1, n-1]. However, due\n   * to the mathematical properties of ECDSA, if `(r, s)` is a valid signature, then `(r, n - s)` is\n   * also a valid signature for the same message and public key. In other words, for every\n   * signature, there's a \"mirror\" signature that's equally valid. For these elliptic curves:\n   *\n   * - Low S Signature: A signature where the `s` component is in the lower half of the range,\n   *                    specifically less than or equal to `n/2`.\n   *\n   * - High S Signature: This is where the `s` component is in the upper half of the range, greater\n   *                     than `n/2`.\n   *\n   * The practical implication is that a third-party can forge a second valid signature for the same\n   * message by negating the `s` component of the original signature, without any knowledge of the\n   * private key. This is known as a \"signature malleability\" attack.\n   *\n   * This type of forgery is not a problem in all systems, but it can be an issue in systems that\n   * rely on digital signature uniqueness to ensure transaction integrity. For example, in Bitcoin,\n   * transaction malleability is an issue because it allows for the modification of transaction\n   * identifiers (and potentially, transactions themselves) after they're signed but before they're\n   * confirmed in a block. By enforcing low `s` values, the Bitcoin network reduces the likelihood of\n   * this occurring, making the system more secure and predictable.\n   *\n   * For this reason, it's common practice to normalize ECDSA signatures to a low-S form. This\n   * form is considered standard and preferable in some systems and is known as the \"normalized\"\n   * form of the signature.\n   *\n   * This method takes a signature, and if it's high-S, returns the normalized low-S form. If the\n   * signature is already low-S, it's returned unmodified. It's important to note that this\n   * method does not change the validity of the signature but makes it compliant with systems that\n   * enforce low-S signatures.\n   *\n   * @example\n   * ```ts\n   * const signature = new Uint8Array([...]); // Your ECDSA signature\n   * const adjustedSignature = await Secp256r1.adjustSignatureToLowS({ signature });\n   * // Now 'adjustedSignature' is in the low-S form.\n   * ```\n   *\n   * @param params - The parameters for the signature adjustment.\n   * @param params.signature - The ECDSA signature as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the adjusted signature in low-S form as a `Uint8Array`.\n   */\n  public static async adjustSignatureToLowS({ signature }: {\n    signature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the signature to a `Secp256r1.Signature` object.\n    const signatureObject = secp256r1.Signature.fromCompact(signature);\n\n    if (signatureObject.hasHighS()) {\n      // Adjust the signature to low-S format if it's high-S.\n      const adjustedSignatureObject = signatureObject.normalizeS();\n\n      // Convert the adjusted signature object back to a byte array.\n      const adjustedSignature = adjustedSignatureObject.toCompactRawBytes();\n\n      return adjustedSignature;\n\n    } else {\n      // Return the unmodified signature if it is already in low-S format.\n      return signature;\n    }\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method takes a private key represented as a byte array (Uint8Array) and\n   * converts it into a JWK object. The conversion involves extracting the\n   * elliptic curve point (x and y coordinates) from the private key and encoding\n   * them into base64url format, alongside other JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Secp256r1.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve points (x and y coordinates) for the provided private key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key in a byte array (Uint8Array) format and\n   * transforms it to a JWK object. It involves decoding the elliptic curve point\n   * (x and y coordinates) from the raw public key bytes and encoding them into\n   * base64url format, along with setting appropriate JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await Secp256r1.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided public key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: publicKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a public key to its compressed form.\n   *\n   * @remarks\n   * This method takes a public key represented as a byte array and compresses it. Public key\n   * compression is a process that reduces the size of the public key by removing the y-coordinate,\n   * making it more efficient for storage and transmission. The compressed key retains the same\n   * level of security as the uncompressed key.\n   *\n   * @example\n   * ```ts\n   * const uncompressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual uncompressed public key bytes\n   * const compressedPublicKey = await Secp256r1.compressPublicKey({\n   *   publicKeyBytes: uncompressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key compression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the compressed public key as a Uint8Array.\n   */\n  public static async compressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the compressed form of the public key.\n    return point.toRawBytes(true);\n  }\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The derivation process involves converting the private key to a raw\n   * byte array, then computing the elliptic curve point (x and y coordinates) from this private\n   * key. These coordinates are then encoded into base64url format to construct the public key in\n   * JWK format.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the secp256r1 elliptic curve standards. This method is useful in cryptographic\n   * operations where a public key is needed for operations like signature verification, but only\n   * the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const publicKey = await Secp256r1.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Secp256r1.privateKeyToBytes({ privateKey: key });\n\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an ASN.1 DER encoded ECDSA signature to a compact R+S format.\n   *\n   * @remarks\n   * This method is used for converting an ECDSA signature from the ASN.1 DER encoding to the more\n   * compact R+S format. This conversion is often required when dealing with ECDSA signatures in\n   * certain cryptographic standards such as JWS (JSON Web Signature).\n   *\n   * The method decodes the DER-encoded signature, extracts the R and S values, and concatenates\n   * them into a single byte array. This process involves handling the ASN.1 structure to correctly\n   * parse the R and S values, considering padding and integer encoding specifics of DER.\n   *\n   * @example\n   * ```ts\n   * const derSignature = new Uint8Array([...]); // Replace with your DER-encoded signature\n   * const signature = await Secp256r1.convertDerToCompactSignature({ derSignature });\n   * ```\n   *\n   * @param params - The parameters for the signature conversion.\n   * @param params.derSignature - The signature in ASN.1 DER format as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the signature in compact R+S format as a `Uint8Array`.\n   */\n  public static async convertDerToCompactSignature({ derSignature }: {\n    derSignature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the DER-encoded signature into a `Secp256r1.Signature` object.\n    // This involves parsing the ASN.1 DER structure to extract the R and S components.\n    const signatureObject = secp256r1.Signature.fromDER(derSignature);\n\n    // Convert the signature object into compact R+S format, which concatenates the R and S values\n    // into a single byte array.\n    const compactSignature = signatureObject.toCompactRawBytes();\n\n    return  compactSignature;\n  }\n\n  /**\n   * Converts a public key to its uncompressed form.\n   *\n   * @remarks\n   * This method takes a compressed public key represented as a byte array and decompresses it.\n   * Public key decompression involves reconstructing the y-coordinate from the x-coordinate,\n   * resulting in the full public key. This method is used when the uncompressed key format is\n   * required for certain cryptographic operations or interoperability.\n   *\n   * @example\n   * ```ts\n   * const compressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual compressed public key bytes\n   * const decompressedPublicKey = await Secp256r1.decompressPublicKey({\n   *   publicKeyBytes: compressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key decompression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the uncompressed public key as a Uint8Array.\n   */\n  public static async decompressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the uncompressed form of the public key.\n    return point.toRawBytes(false);\n  }\n\n  /**\n   * Generates a secp256r1 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the secp256r1\n   * elliptic curve. The key is generated using cryptographically secure random\n   * number generation to ensure its uniqueness and security. The resulting\n   * private key adheres to the JWK format, specifically tailored for secp256r1,\n   * making it compatible with common cryptographic standards and easy to use in\n   * various cryptographic processes.\n   *\n   * The private key generated by this method includes the following components:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, derived from the private key, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, derived from the private key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in signin and key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Secp256r1.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = secp256r1.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Secp256r1.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from a secp256r1 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const publicKey = await Secp256r1.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    // Verify the provided JWK represents an elliptic curve (EC) secp256r1 private key.\n    if (!(isEcPrivateJwk(key) && key.crv === 'P-256')) {\n      throw new Error(`Secp256r1: The provided key is not a 'P-256' private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method takes a private key in JWK format and extracts its raw byte representation.\n   * It specifically focuses on the 'd' parameter of the JWK, which represents the private\n   * key component in base64url encoding. The method decodes this value into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC P-256 private key.\n    if (!isEcPrivateJwk(privateKey)) {\n      throw new Error(`Secp256r1: The provided key is not a valid EC private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'x' and 'y' parameters of the JWK\n   * (which represent the x and y coordinates of the elliptic curve point, respectively)\n   * from base64url format into a byte array. The method then concatenates these values,\n   * along with a prefix indicating the key format, to form the full public key.\n   *\n   * This function is particularly useful for use cases where the public key is needed\n   * in its raw byte format, such as for certain cryptographic operations or when\n   * interfacing with systems that require raw key formats.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // A Jwk public key object\n   * const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC P-256 public key, which must have a 'y' value.\n    if (!(isEcPublicJwk(publicKey) && publicKey.y)) {\n      throw new Error(`Secp256r1: The provided key is not a valid EC public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const prefix = new Uint8Array([0x04]); // Designates an uncompressed key.\n    const x = Convert.base64Url(publicKey.x).toUint8Array();\n    const y = Convert.base64Url(publicKey.y).toUint8Array();\n\n    // Concatenate the prefix, x-coordinate, and y-coordinate as a single byte array.\n    const publicKeyBytes = new Uint8Array([...prefix, ...x, ...y]);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256r1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256r1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk private key object for party A\n   * const publicKeyB = { ... }; // A Jwk public key object for party B\n   * const sharedSecret = await Secp256r1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`Secp256r1: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await Secp256r1.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await Secp256r1.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the compact representation shared secret between the public and private keys.\n    const sharedSecret = secp256r1.getSharedSecret(privateKeyABytes, publicKeyBBytes, true);\n\n    // Remove the leading byte that indicates the sign of the y-coordinate\n    // of the point on the elliptic curve.  See note above.\n    return sharedSecret.slice(1);\n  }\n\n  /**\n   * Generates an RFC6979-compliant ECDSA signature of given data using a secp256r1 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the ECDSA\n   * (Elliptic Curve Digital Signature Algorithm) signature algorithm, as defined in RFC6979.\n   * The data to be signed is first hashed using the SHA-256 algorithm, and this hash is then\n   * signed using the private key. The output is a digital signature in the form of a\n   * Uint8Array, which uniquely corresponds to both the data and the private key used for signing.\n   *\n   * This method is commonly used in cryptographic applications to ensure data integrity and\n   * authenticity. The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const signature = await Secp256r1.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ data, key }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    // Sign the provided data using the ECDSA algorithm.\n    // The `Secp256r1.sign` operation returns a signature object with { r, s, recovery } properties.\n    const signatureObject = secp256r1.sign(digest, privateKeyBytes);\n\n    // Convert the signature object to Uint8Array.\n    const signature = signatureObject.toCompactRawBytes();\n\n    return signature;\n  }\n\n  /**\n   * Validates a given private key to ensure its compliance with the secp256r1 curve standards.\n   *\n   * @remarks\n   * This method checks whether a provided private key is a valid 32-byte number and falls within\n   * the range defined by the secp256r1 curve's order. It is essential for ensuring the private\n   * key's mathematical correctness in the context of secp256r1-based cryptographic operations.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // A 32-byte private key\n   * const isValid = await Secp256r1.validatePrivateKey({ privateKeyBytes });\n   * console.log(isValid); // true or false based on the key's validity\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.privateKeyBytes - The private key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the private key is valid.\n   */\n  public static async validatePrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    return secp256r1.utils.isValidPrivateKey(privateKeyBytes);\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the secp256r1 curve.\n   *\n   * @remarks\n   * This method checks if the provided public key represents a valid point on the secp256r1 curve.\n   * It decodes the key's Weierstrass points (x and y coordinates) and verifies their validity\n   * against the curve's parameters. A valid point must lie on the curve and meet specific\n   * mathematical criteria defined by the curve's equation.\n   *\n   * It's important to note that this method does not verify the key's ownership or whether it has\n   * been compromised; it solely focuses on the key's adherence to the curve's mathematical\n   * principles.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Secp256r1.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the secp256r1 curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating the public key's validity on\n   *          the secp256r1 curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n      // Decode Weierstrass points from key bytes.\n      const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Short Weierstrass curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC6979-compliant ECDSA signature against given data and a secp256r1 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure that it was generated by the holder of the\n   * corresponding private key and that the signed data has not been altered. The signature\n   * verification is performed using the ECDSA (Elliptic Curve Digital Signature Algorithm) as\n   * specified in RFC6979. The data to be verified is first hashed using the SHA-256 algorithm, and\n   * this hash is then used along with the public key to verify the signature.\n   *\n   * The method returns a boolean value indicating whether the signature is valid. A valid signature\n   * proves that the signed data was indeed signed by the owner of the private key corresponding to\n   * the provided public key and that the data has not been tampered with since it was signed.\n   *\n   * Note: The verification process does not consider the malleability of low-s signatures, which\n   * may be relevant in certain contexts, such as Bitcoin transactions.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isSignatureValid = await Secp256r1.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * console.log(isSignatureValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key used for verification, represented in JWK format.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    /** Perform the verification of the signature.\n     * This verify operation has the malleability check disabled. Guaranteed support\n     * for low-s signatures across languages is unlikely especially in the context\n     * of SSI. Notable Cloud KMS providers do not natively support it either. It is\n     * also worth noting that low-s signatures are a requirement for Bitcoin. */\n    const isValid = secp256r1.verify(signature, digest, publicKeyBytes, { lowS: false });\n\n    return isValid;\n  }\n\n  /**\n   * Returns the elliptic curve point (x and y coordinates) for a given secp256r1 key.\n   *\n   * @remarks\n   * This method extracts the elliptic curve point from a given secp256r1 key, whether\n   * it's a private or a public key. For a private key, the method first computes the\n   * corresponding public key and then extracts the x and y coordinates. For a public key,\n   * it directly returns these coordinates. The coordinates are represented as Uint8Array.\n   *\n   * The x and y coordinates represent the key's position on the elliptic curve and can be\n   * used in various cryptographic operations, such as digital signatures or key agreement\n   * protocols.\n   *\n   * @example\n   * ```ts\n   * // For a private key\n   * const privateKey = new Uint8Array([...]); // A 32-byte private key\n   * const { x: xFromPrivateKey, y: yFromPrivateKey } = await Secp256r1.getCurvePoint({ keyBytes: privateKey });\n   *\n   * // For a public key\n   * const publicKey = new Uint8Array([...]); // A 33-byte or 65-byte public key\n   * const { x: xFromPublicKey, y: yFromPublicKey } = await Secp256r1.getCurvePoint({ keyBytes: publicKey });\n   * ```\n   *\n   * @param params - The parameters for the curve point decoding operation.\n   * @param params.keyBytes - The key for which to get the elliptic curve point.\n   *                          Can be either a private key or a public key.\n   *                          The key should be passed as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to an object with properties 'x' and 'y',\n   *          each being a Uint8Array representing the x and y coordinates of the key point on the\n   *          elliptic curve.\n   */\n  private static async getCurvePoint({ keyBytes }: {\n    keyBytes: Uint8Array;\n  }): Promise<AffinePoint<Uint8Array>> {\n    // If key is a private key, first compute the public key.\n    if (keyBytes.byteLength === 32) {\n      keyBytes = secp256r1.getPublicKey(keyBytes);\n    }\n\n    // Decode Weierstrass affine point from key bytes.\n    const point = secp256r1.ProjectivePoint.fromHex(keyBytes);\n\n    // Get x- and y-coordinate values and convert to Uint8Array.\n    const x = numberToBytesBE(point.x, 32);\n    const y = numberToBytesBE(point.y, 32);\n\n    return { x, y };\n  }\n}\n\nexport { Secp256r1 as P256 };", "import type { Jwk } from '../jose/jwk.js';\nimport type { Signer } from '../types/signer.js';\nimport type { AsymmetricKeyGenerator } from '../types/key-generator.js';\nimport type { ComputePublicKeyParams, GenerateKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { Secp256k1 } from '../primitives/secp256k1.js';\nimport { Secp256r1 } from '../primitives/secp256r1.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\nimport { isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `EcdsaGenerateKeyParams` interface defines the algorithm-specific parameters that should be\n * passed into the `generateKey()` method when using the ECDSA algorithm.\n */\nexport interface EcdsaGenerateKeyParams extends GenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"ES256\"`: ECDSA using the secp256r1 (P-256) curve and SHA-256.\n   * - `\"ES256K\"`: ECDSA using the secp256k1 curve and SHA-256.\n   * - `\"secp256k1\"`: ECDSA using the secp256k1 curve and SHA-256.\n   * - `\"secp256r1\"`: ECDSA using the secp256r1 (P-256) curve and SHA-256.\n   */\n  algorithm: 'ES256' | 'ES256K' | 'secp256k1' | 'secp256r1';\n}\n\n/**\n * The `EcdsaAlgorithm` class provides a concrete implementation for cryptographic operations using\n * the Elliptic Curve Digital Signature Algorithm (ECDSA). This class implements both\n * {@link Signer | `Signer`} and { @link AsymmetricKeyGenerator | `AsymmetricKeyGenerator`}\n * interfaces, providing private key generation, public key derivation, and creation/verification\n * of signatures.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class EcdsaAlgorithm extends CryptoAlgorithm\n  implements AsymmetricKeyGenerator<EcdsaGenerateKeyParams, Jwk, GetPublicKeyParams>,\n             Signer<SignParams, VerifyParams> {\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The process ensures that the derived public key correctly corresponds to\n   * the given private key.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await ecdsa.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        const publicKey = await Secp256k1.computePublicKey({ key });\n        publicKey.alg = 'ES256K';\n        return publicKey;\n      }\n\n      case 'P-256': {\n        const publicKey = await Secp256r1.computePublicKey({ key });\n        publicKey.alg = 'ES256';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates a new private key with the specified algorithm in JSON Web Key (JWK) format.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = await ecdsa.generateKey({ algorithm: 'ES256K' });\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation.\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public async generateKey({ algorithm }:\n    EcdsaGenerateKeyParams\n  ): Promise<Jwk> {\n    switch (algorithm) {\n\n      case 'ES256K':\n      case 'secp256k1': {\n        const privateKey = await Secp256k1.generateKey();\n        privateKey.alg = 'ES256K';\n        return privateKey;\n      }\n\n      case 'ES256':\n      case 'secp256r1': {\n        const privateKey = await Secp256r1.generateKey();\n        privateKey.alg = 'ES256';\n        return privateKey;\n      }\n    }\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an ECDSA private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await ecdsa.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        const publicKey = await Secp256k1.getPublicKey({ key });\n        publicKey.alg = 'ES256K';\n        return publicKey;\n      }\n\n      case 'P-256': {\n        const publicKey = await Secp256r1.getPublicKey({ key });\n        publicKey.alg = 'ES256';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates an ECDSA signature of given data using a private key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the given `algorithm` to sign the\n   * provided data.\n   *\n   * The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const data = new TextEncoder().encode('Message');\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const signature = await ecdsa.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        return await Secp256k1.sign({ key, data });\n      }\n\n      case 'P-256': {\n        return await Secp256r1.sign({ key, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Verifies an ECDSA signature associated with the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `crv` property of the provided key\n   * to check the validity of a digital signature against the original data. It confirms whether the\n   * signature was created by the holder of the corresponding private key and that the data has not\n   * been tampered with.\n   *s\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const data = new TextEncoder().encode('Message');\n   * const isValid = await ecdsa.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    if (!isEcPublicJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) public key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        return await Secp256k1.verify({ key, signature, data });\n      }\n\n      case 'P-256': {\n        return await Secp256r1.verify({ key, signature, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n}", "import { Convert } from '@web5/common';\nimport { ed25519, edwardsToMontgomeryPub, edwardsToMontgomeryPriv, x25519 } from '@noble/curves/ed25519';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Ed25519` class provides a comprehensive suite of utilities for working with the Ed25519\n * elliptic curve, widely used in modern cryptographic applications. This class includes methods for\n * key generation, conversion, signing, verification, and public key derivation.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * follows the guidelines and specifications outlined in RFC8032 for EdDSA (Edwards-curve Digital\n * Signature Algorithm) operations.\n *\n * Key Features:\n * - Key Generation: Generate Ed25519 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - Signing and Verification: Sign data and verify signatures with Ed25519 keys.\n * - Key Validation: Validate the mathematical correctness of Ed25519 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Ed25519.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Ed25519.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Ed25519.getPublicKey({ key: privateKey })); // Output: true\n *\n * // EdDSA Signing\n * const signature = await Ed25519.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // EdDSA Signature Verification\n * const isValid = await Ed25519.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n * const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n *\n * // Key Validation\n * const isPublicKeyValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Ed25519 {\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a private key as a byte array (Uint8Array) for the Curve25519 curve in\n   * Twisted Edwards form and transforms it into a JWK object. The process involves first deriving\n   * the public key from the private key, then encoding both the private and public keys into\n   * base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'Ed25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The computed public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Ed25519.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Derive the public key from the private key.\n    const publicKeyBytes  = ed25519.getPublicKey(privateKeyBytes);\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      crv : 'Ed25519',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      kty : 'OKP',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key as a byte array (Uint8Array) for the Curve25519 curve in\n   * Twisted Edwards form and transforms it into a JWK object. The process involves encoding the\n   * public key bytes into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `x`: The public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await X25519.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'Ed25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Derives the public key in JWK format from a given Ed25519 private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format.  The derivation process involves converting the private key to a\n   * raw byte array and then computing the corresponding public key on the Curve25519 curve in\n   * Twisted Edwards form. The public key is then encoded into base64url format to construct\n   * a JWK representation.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const publicKey = await Ed25519.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the computed public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Ed25519.privateKeyToBytes({ privateKey: key });\n\n    // Derive the public key from the private key.\n    const publicKeyBytes  = ed25519.getPublicKey(privateKeyBytes);\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'Ed25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an Ed25519 private key to its X25519 counterpart.\n   *\n   * @remarks\n   * This method enables the use of the same key pair for both digital signature (Ed25519)\n   * and key exchange (X25519) operations. It takes an Ed25519 private key and converts it\n   * to the corresponding X25519 format, facilitating interoperability between signing\n   * and encryption protocols.\n   *\n   * @example\n   * ```ts\n   * const ed25519PrivateKey = { ... }; // An Ed25519 private key in JWK format\n   * const x25519PrivateKey = await Ed25519.convertPrivateKeyToX25519({\n   *   privateKey: ed25519PrivateKey\n   * });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The Ed25519 private key to convert, in JWK format.\n   *\n   * @returns A Promise that resolves to the X25519 private key in JWK format.\n   */\n  public static async convertPrivateKeyToX25519({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Jwk> {\n    // Convert the provided Ed25519 private key to bytes.\n    const ed25519PrivateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n\n    // Convert the Ed25519 private key to an X25519 private key.\n    const x25519PrivateKeyBytes = edwardsToMontgomeryPriv(ed25519PrivateKeyBytes);\n\n    // Derive the X25519 public key from the X25519 private key.\n    const x25519PublicKeyBytes = x25519.getPublicKey(x25519PrivateKeyBytes);\n\n    // Construct the X25519 private key in JWK format.\n    const x25519PrivateKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      d   : Convert.uint8Array(x25519PrivateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(x25519PublicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    x25519PrivateKey.kid = await computeJwkThumbprint({ jwk: x25519PrivateKey });\n\n    return x25519PrivateKey;\n  }\n\n  /**\n   * Converts an Ed25519 public key to its X25519 counterpart.\n   *\n   * @remarks\n   * This method enables the use of the same key pair for both digital signature (Ed25519)\n   * and key exchange (X25519) operations. It takes an Ed25519 public key and converts it\n   * to the corresponding X25519 format, facilitating interoperability between signing\n   * and encryption protocols.\n   *\n   * @example\n   * ```ts\n   * const ed25519PublicKey = { ... }; // An Ed25519 public key in JWK format\n   * const x25519PublicKey = await Ed25519.convertPublicKeyToX25519({\n   *   publicKey: ed25519PublicKey\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The Ed25519 public key to convert, in JWK format.\n   *\n   * @returns A Promise that resolves to the X25519 public key in JWK format.\n   */\n  public static async convertPublicKeyToX25519({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const ed25519PublicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n\n    // Verify Edwards public key is valid.\n    const isValid = await Ed25519.validatePublicKey({ publicKeyBytes: ed25519PublicKeyBytes });\n    if (!isValid) {\n      throw new Error('Ed25519: Invalid public key.');\n    }\n\n    // Convert the Ed25519 public key to an X25519 private key.\n    const x25519PublicKeyBytes = edwardsToMontgomeryPub(ed25519PublicKeyBytes);\n\n    // Construct the X25519 private key in JWK format.\n    const x25519PublicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(x25519PublicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    x25519PublicKey.kid = await computeJwkThumbprint({ jwk: x25519PublicKey });\n\n    return x25519PublicKey;\n  }\n\n  /**\n   * Generates an Ed25519 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the Curve25519 elliptic curve in\n   * Twisted Edwards form. The key generation process involves using cryptographically secure\n   * random number generation to ensure the uniqueness and security of the key. The resulting\n   * private key adheres to the JWK format making it compatible with common cryptographic\n   * standards and easy to use in various cryptographic processes.\n   *\n   * The generated private key in JWK format includes the following components:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'Ed25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Ed25519.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = ed25519.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Ed25519.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an Ed25519 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 100 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const publicKey = await Ed25519.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n  // Verify the provided JWK represents an octet key pair (OKP) Ed25519 private key.\n    if (!(isOkpPrivateJwk(key) && key.crv === 'Ed25519')) {\n      throw new Error(`Ed25519: The provided key is not an Ed25519 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a private key in JWK format and extracts its raw byte representation.\n   *\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'd' parameter of the JWK\n   * from base64url format into a byte array.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An Ed25519 private key in JWK format\n   * const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP private key.\n    if (!isOkpPrivateJwk(privateKey)) {\n      throw new Error(`Ed25519: The provided key is not a valid OKP private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary form.\n   * The conversion process involves decoding the 'x' parameter of the JWK (which represent the\n   * x coordinate of the elliptic curve point) from base64url format into a byte array.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // An Ed25519 public key in JWK format\n   * const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP public key.\n    if (!isOkpPublicJwk(publicKey)) {\n      throw new Error(`Ed25519: The provided key is not a valid OKP public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const publicKeyBytes = Convert.base64Url(publicKey.x).toUint8Array();\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Generates an RFC8032-compliant EdDSA signature of given data using an Ed25519 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the EdDSA\n   * (Edwards-curve Digital Signature Algorithm) as defined in RFC8032. It\n   * involves converting the private key from JWK format to a byte array and then employing\n   * the Ed25519 algorithm to sign the data. The output is a digital signature in the form\n   * of a Uint8Array, uniquely corresponding to both the data and the private key used for\n   * signing.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const signature = await Ed25519.sign({ key: privateKey, data });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey: key });\n\n    // Sign the provided data using the EdDSA algorithm.\n    const signature = ed25519.sign(data, privateKeyBytes);\n\n    return signature;\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the Edwards curve.\n   *\n   * @remarks\n   * This method decodes the Edwards points from the key bytes and asserts their validity on the\n   * Curve25519 curve in Twisted Edwards form. If the points are not valid, the method returns\n   * false. If the points are valid, the method returns true.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the Edwards curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the public key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the key\n   *          corresponds to a valid point on the Edwards curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n    // Decode Edwards points from key bytes.\n      const point = ed25519.ExtendedPoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Twisted Edwards curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC8032-compliant EdDSA signature against given data using an Ed25519 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure its authenticity and integrity.\n   * It uses the EdDSA (Edwards-curve Digital Signature Algorithm) as specified in RFC8032.\n   * The verification process involves converting the public key from JWK format to a raw\n   * byte array and using the Ed25519 algorithm to validate the signature against the provided data.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // A Jwk object representing an Ed25519 public key\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isValid = await Ed25519.verify({ key: publicKey, signature, data });\n   * console.log(isValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key in JWK format used for verification.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey: key });\n\n    // Perform the verification of the signature.\n    const isValid = ed25519.verify(signature, data, publicKeyBytes);\n\n    return isValid;\n  }\n}", "import type { Jwk } from '../jose/jwk.js';\nimport type { Signer } from '../types/signer.js';\nimport type { AsymmetricKeyGenerator } from '../types/key-generator.js';\nimport type {\n  SignParams,\n  VerifyParams,\n  GenerateKeyParams,\n  GetPublicKeyParams,\n  ComputePublicKeyParams,\n} from '../types/params-direct.js';\n\nimport { Ed25519 } from '../primitives/ed25519.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\nimport { isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `EdDsaGenerateKeyParams` interface defines the algorithm-specific parameters that should be\n * passed into the `generateKey()` method when using the EdDSA algorithm.\n */\nexport interface EdDsaGenerateKeyParams extends GenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"Ed25519\"`: EdDSA using the Ed25519 curve.\n   */\n  algorithm: 'Ed25519';\n}\n\n/**\n * The `EdDsaAlgorithm` class provides a concrete implementation for cryptographic operations using\n * the Edwards-curve Digital Signature Algorithm (EdDSA). This class implements both\n * {@link Signer | `Signer`} and { @link AsymmetricKeyGenerator | `AsymmetricKeyGenerator`}\n * interfaces, providing private key generation, public key derivation, and creation/verification\n * of signatures.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class EdDsaAlgorithm extends CryptoAlgorithm\n  implements AsymmetricKeyGenerator<EdDsaGenerateKeyParams, Jwk, GetPublicKeyParams>,\n             Signer<SignParams, VerifyParams> {\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The process ensures that the derived public key correctly corresponds to\n   * the given private key.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await eddsa.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        const publicKey = await Ed25519.computePublicKey({ key });\n        publicKey.alg = 'EdDSA';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates a new private key with the specified algorithm in JSON Web Key (JWK) format.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = await eddsa.generateKey({ algorithm: 'Ed25519' });\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation.\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  async generateKey({ algorithm }:\n    EdDsaGenerateKeyParams\n  ): Promise<Jwk> {\n    switch (algorithm) {\n\n      case 'Ed25519': {\n        const privateKey = await Ed25519.generateKey();\n        privateKey.alg = 'EdDSA';\n        return privateKey;\n      }\n    }\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an EdDSA private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key.\n   *\n   * Note: This method offers a significant performance advantage, being about 100 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await eddsa.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        const publicKey = await Ed25519.getPublicKey({ key });\n        publicKey.alg = 'EdDSA';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates an EdDSA signature of given data using a private key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the given `algorithm` to sign the\n   * provided data.\n   *\n   * The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const data = new TextEncoder().encode('Message');\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const signature = await eddsa.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        return await Ed25519.sign({ key, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Verifies an EdDSA signature associated with the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `crv` property of the provided key\n   * to check the validity of a digital signature against the original data. It confirms whether the\n   * signature was created by the holder of the corresponding private key and that the data has not\n   * been tampered with.\n   *s\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const data = new TextEncoder().encode('Message');\n   * const isValid = await eddsa.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    if (!isOkpPublicJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) public key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        return await Ed25519.verify({ key, signature, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n}", "import { KeyValueStore, MemoryStore } from '@web5/common';\n\nimport type { Jwk } from './jose/jwk.js';\nimport type { Hasher } from './types/hasher.js';\nimport type { Signer } from './types/signer.js';\nimport type { CryptoApi } from './types/crypto-api.js';\nimport type { KeyIdentifier } from './types/identifier.js';\nimport type { KeyImporterExporter } from './types/key-io.js';\nimport type { KeyGenerator, AsymmetricKeyGenerator } from './types/key-generator.js';\nimport type { GetPublicKeyParams, SignParams, VerifyParams } from './types/params-direct.js';\nimport type {\n  KmsSignParams,\n  KmsDigestParams,\n  KmsVerifyParams,\n  KmsExportKeyParams,\n  KmsGetKeyUriParams,\n  KmsImportKeyParams,\n  KmsGenerateKeyParams,\n  KmsGetPublicKeyParams,\n} from './types/params-kms.js';\n\nimport { Sha2Algorithm } from './algorithms/sha-2.js';\nimport { EcdsaAlgorithm } from './algorithms/ecdsa.js';\nimport { EdDsaAlgorithm } from './algorithms/eddsa.js';\nimport { CryptoAlgorithm } from './algorithms/crypto-algorithm.js';\nimport { computeJwkThumbprint, isPrivateJwk, KEY_URI_PREFIX_JWK } from './jose/jwk.js';\n\n/**\n * `supportedAlgorithms` is an object mapping algorithm names to their respective implementations\n * Each entry in this map specifies the algorithm name and its associated properties, including the\n * implementation class and any relevant names or identifiers for the algorithm. This structure\n * allows for easy retrieval and instantiation of algorithm implementations based on the algorithm\n * name or key specification. It facilitates the support of multiple algorithms within the\n * `LocalKeyManager` class.\n */\nconst supportedAlgorithms = {\n  'Ed25519': {\n    implementation : EdDsaAlgorithm,\n    names          : ['Ed25519'],\n  },\n  'secp256k1': {\n    implementation : EcdsaAlgorithm,\n    names          : ['ES256K', 'secp256k1'],\n  },\n  'secp256r1': {\n    implementation : EcdsaAlgorithm,\n    names          : ['ES256', 'secp256r1'],\n  },\n  'SHA-256': {\n    implementation : Sha2Algorithm,\n    names          : ['SHA-256']\n  }\n} satisfies {\n  [key: string]: {\n    implementation : typeof CryptoAlgorithm;\n    names          : string[];\n  }\n};\n\n/* Helper type for `supportedAlgorithms`. */\ntype SupportedAlgorithm = keyof typeof supportedAlgorithms;\n\n/* Helper type for `supportedAlgorithms` implementations. */\ntype AlgorithmConstructor = typeof supportedAlgorithms[SupportedAlgorithm]['implementation'];\n\n/**\n * The `LocalKeyManagerParams` interface specifies the parameters for initializing an instance of\n * `LocalKeyManager`. It allows the optional inclusion of a `KeyValueStore` instance for key\n * management. If not provided, a default `MemoryStore` instance will be used for storing keys in\n * memory. Note that the `MemoryStore` is not persistent and will be cleared when the application\n * exits.\n */\nexport type LocalKeyManagerParams = {\n  /**\n   * An optional property to specify a custom `KeyValueStore` instance for key management. If not\n   * provided, {@link LocalKeyManager | `LocalKeyManager`} uses a default `MemoryStore` instance.\n   * This store is responsible for managing cryptographic keys, allowing them to be retrieved,\n   * stored, and managed during cryptographic operations.\n   */\n  keyStore?: KeyValueStore<KeyIdentifier, Jwk>;\n};\n\n/**\n * The `LocalKeyManagerDigestParams` interface defines the algorithm-specific parameters that should\n * be passed into the {@link LocalKeyManager.digest | `LocalKeyManager.digest()`} method.\n */\nexport interface LocalKeyManagerDigestParams extends KmsDigestParams {\n  /**\n   * A string defining the name of hash function to use. The value must be one of the following:\n   * - `\"SHA-256\"`: Generates a 256-bit digest.\n   */\n  algorithm: 'SHA-256';\n}\n\n/**\n * The `LocalKeyManagerGenerateKeyParams` interface defines the algorithm-specific parameters that\n * should be passed into the {@link LocalKeyManager.generateKey | `LocalKeyManager.generateKey()`}\n * method when generating a key in the local KMS.\n */\nexport interface LocalKeyManagerGenerateKeyParams extends KmsGenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"Ed25519\"`\n   * - `\"secp256k1\"`\n   */\n  algorithm: 'Ed25519' | 'secp256k1' | 'secp256r1';\n}\n\nexport class LocalKeyManager implements\n    CryptoApi,\n    KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams> {\n\n  /**\n   * A private map that stores instances of cryptographic algorithm implementations. Each key in\n   * this map is an `AlgorithmConstructor`, and its corresponding value is an instance of a class\n   * that implements a specific cryptographic algorithm. This map is used to cache and reuse\n   * instances for performance optimization, ensuring that each algorithm is instantiated only once.\n   */\n  private _algorithmInstances: Map<AlgorithmConstructor, InstanceType<typeof CryptoAlgorithm>> = new Map();\n\n  /**\n   * The `_keyStore` private variable in `LocalKeyManager` is a `KeyValueStore` instance used for\n   * storing and managing cryptographic keys. It allows the `LocalKeyManager` class to save,\n   * retrieve, and handle keys efficiently within the local Key Management System (KMS) context.\n   * This variable can be configured to use different storage backends, like in-memory storage or\n   * persistent storage, providing flexibility in key management according to the application's\n   * requirements.\n   */\n  private _keyStore: KeyValueStore<KeyIdentifier, Jwk>;\n\n  constructor(params?: LocalKeyManagerParams) {\n    this._keyStore = params?.keyStore ?? new MemoryStore<KeyIdentifier, Jwk>();\n  }\n\n  /**\n   * Generates a hash digest of the provided data.\n   *\n   * @remarks\n   * A digest is the output of the hash function. It's a fixed-size string of bytes\n   * that uniquely represents the data input into the hash function. The digest is often used for\n   * data integrity checks, as any alteration in the input data results in a significantly\n   * different digest.\n   *\n   * It takes the algorithm identifier of the hash function and data to digest as input and returns\n   * the digest of the data.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const data = new Uint8Array([...]);\n   * const digest = await keyManager.digest({ algorithm: 'SHA-256', data });\n   * ```\n   *\n   * @param params - The parameters for the digest operation.\n   * @param params.algorithm - The name of hash function to use.\n   * @param params.data - The data to digest.\n   *\n   * @returns A Promise which will be fulfilled with the hash digest.\n   */\n  public async digest({ algorithm, data }:\n    LocalKeyManagerDigestParams\n  ): Promise<Uint8Array> {\n    // Get the hash function implementation based on the specified `algorithm` parameter.\n    const hasher = this.getAlgorithm({ algorithm }) as Hasher<KmsDigestParams>;\n\n    // Compute the hash.\n    const hash = await hasher.digest({ algorithm, data });\n\n    return hash;\n  }\n\n  /**\n   * Exports a private key identified by the provided key URI from the local KMS.\n   *\n   * @remarks\n   * This method retrieves the key from the key store and returns it. It is primarily used\n   * for extracting keys for backup or transfer purposes.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const privateKey = await keyManager.exportKey({ keyUri });\n   * ```\n   *\n   * @param params - Parameters for exporting the key.\n   * @param params.keyUri - The key URI identifying the key to export.\n   *\n   * @returns A Promise resolving to the JWK representation of the exported key.\n   */\n  public async exportKey({ keyUri }:\n    KmsExportKeyParams\n  ): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    return privateKey;\n  }\n\n  /**\n   * Generates a new cryptographic key in the local KMS with the specified algorithm and returns a\n   * unique key URI which can be used to reference the key in subsequent operations.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * console.log(keyUri); // Outputs the key URI\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation, defined in `SupportedAlgorithm`.\n   *\n   * @returns A Promise that resolves to the key URI, a unique identifier for the generated key.\n   */\n  public async generateKey({ algorithm }:\n    LocalKeyManagerGenerateKeyParams\n  ): Promise<KeyIdentifier> {\n    // Get the key generator implementation based on the specified `algorithm` parameter.\n    const keyGenerator = this.getAlgorithm({ algorithm }) as KeyGenerator<LocalKeyManagerGenerateKeyParams, Jwk>;\n\n    // Generate the key.\n    const key = await keyGenerator.generateKey({ algorithm });\n\n    if (key?.kid === undefined) {\n      throw new Error('Generated key is missing a required property: kid');\n    }\n\n    // Construct the key URI.\n    const keyUri = `${KEY_URI_PREFIX_JWK}${key.kid}`;\n\n    // Store the key in the key store.\n    await this._keyStore.set(keyUri, key);\n\n    return keyUri;\n  }\n\n  /**\n   * Computes the Key URI for a given public JWK (JSON Web Key).\n   *\n   * @remarks\n   * This method generates a {@link https://datatracker.ietf.org/doc/html/rfc3986 | URI}\n   * (Uniform Resource Identifier) for the given JWK, which uniquely identifies the key across all\n   * `CryptoApi` implementations. The key URI is constructed by appending the\n   * {@link https://datatracker.ietf.org/doc/html/rfc7638 | JWK thumbprint} to the prefix\n   * `urn:jwk:`. The JWK thumbprint is deterministically computed from the JWK and is consistent\n   * regardless of property order or optional property inclusion in the JWK. This ensures that the\n   * same key material represented as a JWK will always yield the same thumbprint, and therefore,\n   * the same key URI.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const publicKey = await keyManager.getPublicKey({ keyUri });\n   * const keyUriFromPublicKey = await keyManager.getKeyUri({ key: publicKey });\n   * console.log(keyUri === keyUriFromPublicKey); // Outputs `true`\n   * ```\n   *\n   * @param params - The parameters for getting the key URI.\n   * @param params.key - The JWK for which to compute the key URI.\n   *\n   * @returns A Promise that resolves to the key URI as a string.\n   */\n  public async getKeyUri({ key }:\n    KmsGetKeyUriParams\n  ): Promise<KeyIdentifier> {\n    // Compute the JWK thumbprint.\n    const jwkThumbprint = await computeJwkThumbprint({ jwk: key });\n\n    // Construct the key URI by appending the JWK thumbprint to the key URI prefix.\n    const keyUri = `${KEY_URI_PREFIX_JWK}${jwkThumbprint}`;\n\n    return keyUri;\n  }\n\n  /**\n   * Retrieves the public key associated with a previously generated private key, identified by\n   * the provided key URI.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const publicKey = await keyManager.getPublicKey({ keyUri });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key.\n   * @param params.keyUri - The key URI of the private key to retrieve the public key for.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ keyUri }:\n    KmsGetPublicKeyParams\n  ): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key: privateKey });\n\n    // Get the key generator based on the algorithm name.\n    const keyGenerator = this.getAlgorithm({ algorithm }) as AsymmetricKeyGenerator<LocalKeyManagerGenerateKeyParams, Jwk, GetPublicKeyParams>;\n\n    // Get the public key properties from the private JWK.\n    const publicKey = await keyGenerator.getPublicKey({ key: privateKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Imports a private key into the local KMS.\n   *\n   * @remarks\n   * This method stores the provided JWK in the key store, making it available for subsequent\n   * cryptographic operations. It is particularly useful for initializing the KMS with pre-existing\n   * keys or for restoring keys from backups.\n   *\n   * Note that, if defined, the `kid` (key ID) property of the JWK is used as the key URI for the\n   * imported key. If the `kid` property is not provided, the key URI is computed from the JWK\n   * thumbprint of the key.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const privateKey = { ... } // A private key in JWK format\n   * const keyUri = await keyManager.importKey({ key: privateKey });\n   * ```\n   *\n   * @param params - Parameters for importing the key.\n   * @param params.key - The private key to import to in JWK format.\n   *\n   * @returns A Promise resolving to the key URI, uniquely identifying the imported key.\n   */\n  public async importKey({ key }:\n    KmsImportKeyParams\n  ): Promise<KeyIdentifier> {\n    if (!isPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be a private key in JWK format.');\n\n    // Make a deep copy of the key to avoid mutating the original.\n    const privateKey = structuredClone(key);\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    privateKey.kid ??= await computeJwkThumbprint({ jwk: privateKey });\n\n    // Compute the key URI for the key.\n    const keyUri = await this.getKeyUri({ key: privateKey });\n\n    // Store the key in the key store.\n    await this._keyStore.set(keyUri, privateKey);\n\n    return keyUri;\n  }\n\n  /**\n   * Signs the provided data using the private key identified by the provided key URI.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `alg` and/or `crv` properties of the\n   * private key identified by the provided key URI to sign the provided data. The signature can\n   * later be verified by parties with access to the corresponding public key, ensuring that the\n   * data has not been tampered with and was indeed signed by the holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const data = new TextEncoder().encode('Message to sign');\n   * const signature = await keyManager.sign({ keyUri, data });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.keyUri - The key URI of the private key to use for signing.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ keyUri, data }:\n    KmsSignParams\n  ): Promise<Uint8Array> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key: privateKey });\n\n    // Get the signature algorithm based on the algorithm name.\n    const signer = this.getAlgorithm({ algorithm }) as Signer<SignParams, VerifyParams>;\n\n    // Sign the data.\n    const signature = signer.sign({ data, key: privateKey });\n\n    return signature;\n  }\n\n  /**\n   * Verifies a digital signature associated the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `alg` and/or `crv` properties of the\n   * provided key to check the validity of a digital signature against the original data. It\n   * confirms whether the signature was created by the holder of the corresponding private key and\n   * that the data has not been tampered with.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const data = new TextEncoder().encode('Message to sign');\n   * const signature = await keyManager.sign({ keyUri, data });\n   * const isSignatureValid = await keyManager.verify({ keyUri, data, signature });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    KmsVerifyParams\n  ): Promise<boolean> {\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key });\n\n    // Get the signature algorithm based on the algorithm name.\n    const signer = this.getAlgorithm({ algorithm }) as Signer<SignParams, VerifyParams>;\n\n    // Verify the signature.\n    const isSignatureValid = signer.verify({ key, signature, data });\n\n    return isSignatureValid;\n  }\n\n  /**\n   * Retrieves an algorithm implementation instance based on the provided algorithm name.\n   *\n   * @remarks\n   * This method checks if the requested algorithm is supported and returns a cached instance\n   * if available. If an instance does not exist, it creates and caches a new one. This approach\n   * optimizes performance by reusing algorithm instances across cryptographic operations.\n   *\n   * @example\n   * ```ts\n   * const signer = this.getAlgorithm({ algorithm: 'Ed25519' });\n   * ```\n   *\n   * @param params - The parameters for retrieving the algorithm implementation.\n   * @param params.algorithm - The name of the algorithm to retrieve.\n   *\n   * @returns An instance of the requested algorithm implementation.\n   *\n   * @throws Error if the requested algorithm is not supported.\n   */\n  private getAlgorithm({ algorithm }: {\n    algorithm: SupportedAlgorithm;\n  }): InstanceType<typeof CryptoAlgorithm> {\n    // Check if algorithm is supported.\n    const AlgorithmImplementation = supportedAlgorithms[algorithm]?.['implementation'];\n    if (!AlgorithmImplementation) {\n      throw new Error(`Algorithm not supported: ${algorithm}`);\n    }\n\n    // Check if instance already exists for the `AlgorithmImplementation`.\n    if (!this._algorithmInstances.has(AlgorithmImplementation)) {\n    // If not, create a new instance and store it in the cache\n      this._algorithmInstances.set(AlgorithmImplementation, new AlgorithmImplementation());\n    }\n\n    // Return the cached instance\n    return this._algorithmInstances.get(AlgorithmImplementation)!;\n  }\n\n  /**\n   * Determines the name of the algorithm based on the key's properties.\n   *\n   * @remarks\n   * This method facilitates the identification of the correct algorithm for cryptographic\n   * operations based on the `alg` or `crv` properties of a {@link Jwk | JWK}.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // Public key in JWK format\n   * const algorithm = this.getAlgorithmName({ key: publicKey });\n   * ```\n   *\n   * @param params - The parameters for determining the algorithm name.\n   * @param params.key - A JWK containing the `alg` or `crv` properties.\n   *\n   * @returns The name of the algorithm associated with the key.\n   *\n   * @throws Error if the algorithm cannot be determined from the provided input.\n   */\n  private getAlgorithmName({ key }: {\n    key: { alg?: string, crv?: string };\n  }): SupportedAlgorithm {\n    const algProperty = key.alg;\n    const crvProperty = key.crv;\n\n    for (const algName in supportedAlgorithms) {\n      const algorithmInfo = supportedAlgorithms[algName as SupportedAlgorithm];\n      if (algProperty && algorithmInfo.names.includes(algProperty)) {\n        return algName as SupportedAlgorithm;\n      } else if (crvProperty && algorithmInfo.names.includes(crvProperty)) {\n        return algName as SupportedAlgorithm;\n      }\n    }\n\n    throw new Error(`Unable to determine algorithm based on provided input: alg=${algProperty}, crv=${crvProperty}`);\n  }\n\n  /**\n   * Retrieves a private key from the key store based on the provided key URI.\n   *\n   * @example\n   * ```ts\n   * const privateKey = this.getPrivateKey({ keyUri: 'urn:jwk:...' });\n   * ```\n   *\n   * @param params - Parameters for retrieving the private key.\n   * @param params.keyUri - The key URI identifying the private key to retrieve.\n   *\n   * @returns A Promise resolving to the JWK representation of the private key.\n   *\n   * @throws Error if the key is not found in the key store.\n   */\n  private async getPrivateKey({ keyUri }: {\n    keyUri: KeyIdentifier;\n  }): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this._keyStore.get(keyUri);\n\n    if (!privateKey) {\n      throw new Error(`Key not found: ${keyUri}`);\n    }\n\n    return privateKey;\n  }\n}", "import type { Jwk } from './jose/jwk.js';\n\nimport { crypto } from '@noble/hashes/crypto';\nimport { randomBytes as nobleRandomBytes } from '@noble/hashes/utils';\n\n/**\n * Checks whether the properties object provided contains the specified property.\n *\n * @example\n * ```ts\n * const obj = { a: 'Bob', t: 30 };\n * checkRequiredProperty({ property: 'a', inObject: obj }); // No error\n * checkRequiredProperty({ property: 'z', inObject: obj }); // Throws TypeError\n * ```\n *\n * @param params - The parameters for the check.\n * @param params.property - Property key to check for.\n * @param params.properties - Properties object to check within.\n * @returns void\n * @throws {TypeError} If the property is not a key in the properties object.\n */\nexport function checkRequiredProperty(params: {\n  property: string,\n  inObject: object\n}): void {\n  if (!params || params.property === undefined || params.inObject === undefined) {\n    throw new TypeError(`One or more required parameters missing: 'property, properties'`);\n  }\n  const { property, inObject } = params;\n  if (!(property in inObject)) {\n    throw new TypeError(`Required parameter missing: '${property}'`);\n  }\n}\n\n/**\n * Checks whether the property specified is a member of the list of valid properties.\n *\n * @example\n * ```ts\n * const property = 'color';\n * const allowedProperties = ['size', 'shape', 'color'];\n * checkValidProperty({ property, allowedProperties }); // No error\n * checkValidProperty({ property: 'weight', allowedProperties }); // Throws TypeError\n * ```\n *\n * @param property Property key to check for.\n * @param allowedProperties Properties Array, Map, or Set to check within.\n * @returns void\n * @throws {TypeError} If the property is not a member of the allowedProperties Array, Map, or Set.\n */\nexport function checkValidProperty(params: {\n  property: string, allowedProperties: ReadonlyArray<string> | Array<string> | Map<string, unknown> | Set<string>\n}): void {\n  if (!params || params.property === undefined || params.allowedProperties === undefined) {\n    throw new TypeError(`One or more required parameters missing: 'property, allowedProperties'`);\n  }\n  const { property, allowedProperties } = params;\n  if (\n    (Array.isArray(allowedProperties) && !allowedProperties.includes(property)) ||\n    (allowedProperties instanceof Set && !allowedProperties.has(property)) ||\n    (allowedProperties instanceof Map && !allowedProperties.has(property))\n  ) {\n    const validProperties = Array.from((allowedProperties instanceof Map) ? allowedProperties.keys() : allowedProperties).join(', ');\n    throw new TypeError(`Out of range: '${property}'. Must be one of '${validProperties}'`);\n  }\n}\n\n/**\n * Determines the JOSE algorithm identifier of the digital signature algorithm based on the `alg` or\n * `crv` property of a {@link Jwk | JWK}.\n *\n * If the `alg` property is present, its value takes precedence and is returned. Otherwise, the\n * `crv` property is used to determine the algorithm.\n *\n * @see {@link https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms | JOSE Algorithms}\n * @see {@link https://datatracker.ietf.org/doc/draft-ietf-jose-fully-specified-algorithms/ | Fully-Specified Algorithms for JOSE and COSE}\n *\n * @example\n * ```ts\n * const publicKey: Jwk = {\n *   \"kty\": \"OKP\",\n *   \"crv\": \"Ed25519\",\n *   \"x\": \"FEJG7OakZi500EydXxuE8uMc8uaAzEJkmQeG8khXANw\"\n * }\n * const algorithm = getJoseSignatureAlgorithmFromPublicKey(publicKey);\n * console.log(algorithm); // Output: \"EdDSA\"\n * ```\n *\n * @param publicKey - A JWK containing the `alg` and/or `crv` properties.\n * @returns The name of the algorithm associated with the key.\n * @throws Error if the algorithm cannot be determined from the provided input.\n */\nexport function getJoseSignatureAlgorithmFromPublicKey(publicKey: Jwk): string {\n  const curveToJoseAlgorithm: Record<string, string> = {\n    'Ed25519'   : 'EdDSA',\n    'P-256'     : 'ES256',\n    'P-384'     : 'ES384',\n    'P-521'     : 'ES512',\n    'secp256k1' : 'ES256K',\n  };\n\n  // If the key contains an `alg` property that matches a JOSE registered algorithm identifier,\n  // return its value.\n  if (publicKey.alg && Object.values(curveToJoseAlgorithm).includes(publicKey.alg)) {\n    return publicKey.alg;\n  }\n\n  // If the key contains a `crv` property, return the corresponding algorithm.\n  if (publicKey.crv && Object.keys(curveToJoseAlgorithm).includes(publicKey.crv)) {\n    return curveToJoseAlgorithm[publicKey.crv];\n  }\n\n  throw new Error(\n    `Unable to determine algorithm based on provided input: alg=${publicKey.alg}, crv=${publicKey.crv}. ` +\n    `Supported 'alg' values: ${Object.values(curveToJoseAlgorithm).join(', ')}. ` +\n    `Supported 'crv' values: ${Object.keys(curveToJoseAlgorithm).join(', ')}.`\n  );\n}\n\n/**\n * Checks if the Web Crypto API is supported in the current runtime environment.\n *\n * @remarks\n * The function uses `globalThis` to provide a universal reference to the global\n * scope, regardless of the environment. `globalThis` is a standard feature introduced\n * in ECMAScript 2020 that is agnostic to the underlying JavaScript environment, making\n * the code portable across browser, Node.js, and Web Workers environments.\n *\n * In a web browser, `globalThis` is equivalent to the `window` object. In Node.js, it\n * is equivalent to the `global` object, and in Web Workers, it corresponds to `self`.\n *\n * This method checks for the `crypto` object and its `subtle` property on the global scope\n * to determine the availability of the Web Crypto API. If both are present, the API is\n * supported; otherwise, it is not.\n *\n * @example\n * ```ts\n * if (isWebCryptoSupported()) {\n *   console.log('Crypto operations can be performed');\n * } else {\n *   console.log('Crypto operations are not supported in this environment');\n * }\n * ```\n *\n * @returns A boolean indicating whether the Web Crypto API is supported in the current environment.\n */\nexport function isWebCryptoSupported(): boolean {\n  if (globalThis.crypto && globalThis.crypto.subtle) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Generates secure pseudorandom values of the specified length using\n * `crypto.getRandomValues`, which defers to the operating system.\n *\n * @remarks\n * This function is a wrapper around `randomBytes` from the '@noble/hashes'\n * package. It's designed to be cryptographically strong, suitable for\n * generating initialization vectors, nonces, and other random values.\n *\n * @see {@link https://www.npmjs.com/package/@noble/hashes | @noble/hashes on NPM} for more\n * information about the underlying implementation.\n *\n * @example\n * ```ts\n * const bytes = randomBytes(32); // Generates 32 random bytes\n * ```\n *\n * @param bytesLength - The number of bytes to generate.\n * @returns A Uint8Array containing the generated random bytes.\n */\nexport function randomBytes(bytesLength: number): Uint8Array {\n  return nobleRandomBytes(bytesLength);\n}\n\n/**\n * Generates a UUID (Universally Unique Identifier) using a\n * cryptographically strong random number generator following\n * the version 4 format, as specified in RFC 4122.\n *\n * A version 4 UUID is a randomly generated UUID. The 13th character\n * is set to '4' to denote version 4, and the 17th character is one\n * of '8', '9', 'A', or 'B' to comply with the variant 1 format of\n * UUIDs (the high bits are set to '10').\n *\n * The UUID is a 36 character string, including hyphens, and looks like this:\n * xxxxxxxx-xxxx-4xxx-axxx-xxxxxxxxxxxx\n *\n * Note that while UUIDs are not guaranteed to be unique, they are\n * practically unique\" given the large number of possible UUIDs and\n * the randomness of generation.\n *\n * @example\n * ```ts\n * const uuid = randomUuid();\n * console.log(uuid); // Outputs a version 4 UUID, e.g., '123e4567-e89b-12d3-a456-426655440000'\n * ```\n *\n * @returns A string containing a randomly generated, 36 character long v4 UUID.\n */\nexport function randomUuid(): string {\n  const uuid = crypto.randomUUID();\n\n  return uuid;\n}", "export {};\n//# sourceMappingURL=jwe.js.map", "export {};\n//# sourceMappingURL=jws.js.map", "export {};\n//# sourceMappingURL=jwt.js.map", "import { Convert } from '@web5/common';\nimport { x25519 } from '@noble/curves/ed25519';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `X25519` class provides a comprehensive suite of utilities for working with the X25519\n * elliptic curve, widely used for key agreement protocols and cryptographic applications. It\n * provides methods for key generation, conversion, and Elliptic Curve Diffie-Hellman (ECDH)\n * key agreement,  all aligned with standard cryptographic practices.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats,\n * making it versatile for various cryptographic tasks. It adheres to RFC6090 for ECDH, ensuring\n * secure and effective handling of keys and cryptographic operations.\n *\n * Key Features:\n * - Key Generation: Generate X25519 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await X25519.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await X25519.computePublicKey({ key: privateKey });\n * console.log(publicKey === await X25519.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await X25519.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await X25519.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await X25519.privateKeyToBytes({ privateKey });\n * ```\n */\nexport class X25519 {\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a private key as a byte array (Uint8Array) for the X25519 elliptic curve\n   * and transforms it into a JWK object. The process involves first deriving the public key from\n   * the private key, then encoding both the private and public keys into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await X25519.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Derive the public key from the private key.\n    const publicKeyBytes  = x25519.getPublicKey(privateKeyBytes);\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key as a byte array (Uint8Array) for the X25519 elliptic curve\n   * and transforms it into a JWK object. The conversion process involves encoding the public\n   * key bytes into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `x`: The public key, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await X25519.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Derives the public key in JWK format from a given X25519 private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format.  The derivation process involves converting the private key to a\n   * raw byte array and then computing the corresponding public key on the Curve25519 curve.\n   * The public key is then encoded into base64url format to construct a JWK representation.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the Curve25519 elliptic curve in Twisted Edwards form standards. This method is\n   * useful in cryptographic operations where a public key is needed for operations like signature\n   * verification, but only the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an X25519 private key\n   * const publicKey = await X25519.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await X25519.privateKeyToBytes({ privateKey: key });\n\n    // Derive the public key from the private key.\n    const publicKeyBytes = x25519.getPublicKey(privateKeyBytes);\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Generates an X25519 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the X25519 elliptic curve.\n   * The key generation process involves using cryptographically secure random number generation\n   * to ensure the uniqueness and security of the key. The resulting private key adheres to the\n   * JWK format making it compatible with common cryptographic standards and easy to use in various\n   * cryptographic processes.\n   *\n   * The generated private key in JWK format includes the following components:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await X25519.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = x25519.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await X25519.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an X25519 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 500 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an X25519 private key\n   * const publicKey = await X25519.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n  // Verify the provided JWK represents an octet key pair (OKP) X25519 private key.\n    if (!(isOkpPrivateJwk(key) && key.crv === 'X25519')) {\n      throw new Error(`X25519: The provided key is not an X25519 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a private key in JWK format and extracts its raw byte representation.\n   *\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'd' parameter of the JWK\n   * from base64url format into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await X25519.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP private key.\n    if (!isOkpPrivateJwk(privateKey)) {\n      throw new Error(`X25519: The provided key is not a valid OKP private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary form.\n   * The conversion process involves decoding the 'x' parameter of the JWK (which represent the\n   * x coordinate of the elliptic curve point) from base64url format into a byte array.\n   *\n   * This conversion is essential for operations that require the public key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // An X25519 public key in JWK format\n   * const publicKeyBytes = await X25519.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP public key.\n    if (!isOkpPublicJwk(publicKey)) {\n      throw new Error(`X25519: The provided key is not a valid OKP public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const publicKeyBytes = Convert.base64Url(publicKey.x).toUint8Array();\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256k1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256k1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk object for party A\n   * const publicKeyB = { ... }; // A PublicKeyJwk object for party B\n   * const sharedSecret = await Secp256k1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`X25519: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await X25519.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await X25519.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the shared secret between the public and private keys.\n    const sharedSecret = x25519.getSharedSecret(privateKeyABytes, publicKeyBBytes);\n\n    return sharedSecret;\n  }\n}", "import { UniversalResolver, DidDht, DidJwk, DidWeb } from '@web5/dids';\n/**\n * Can be used to resolve and dereference did:dht, did:jwk, and did:web DIDs\n *\n * @beta\n */\nexport const DidResolver = new UniversalResolver({\n    didResolvers: [DidDht, DidJwk, DidWeb]\n});\n/**\n * Resolves the DID provided\n * @param did - the DID to resolve\n * @returns {@link @web5/dids#DidDocument}\n * @beta\n */\nexport async function resolveDid(did) {\n    const { didResolutionMetadata, didDocument } = await DidResolver.resolve(did);\n    if (didResolutionMetadata.error) {\n        throw new Error(`Failed to resolve DID: ${did}. Error: ${didResolutionMetadata.error}`);\n    }\n    // If did resolution has no errors, assume we have did document\n    return didDocument;\n}\n/**\n * type guard for {@link @web5/dids#VerificationMethod}\n * @param didResource - the resource to check\n * @returns true if the didResource is a `VerificationMethod`\n * @beta\n */\nexport function isVerificationMethod(didResource) {\n    return !!didResource && 'id' in didResource && 'type' in didResource && 'controller' in didResource;\n}\n", "export * from './types/did-core.js';\nexport * from './types/did-resolution.js';\nexport type * from './types/multibase.js';\nexport type * from './types/portable-did.js';\n\nexport * from './did.js';\nexport * from './did-error.js';\nexport * from './bearer-did.js';\n\nexport * from './methods/did-dht.js';\nexport * from './methods/did-ion.js';\nexport * from './methods/did-jwk.js';\nexport * from './methods/did-key.js';\nexport * from './methods/did-method.js';\nexport * from './methods/did-web.js';\n\nexport * from './resolver/resolver-cache-level.js';\nexport * from './resolver/resolver-cache-noop.js';\nexport * from './resolver/universal-resolver.js';\n\nexport * as utils from './utils.js';", "import { Jwk } from '@web5/crypto';\n\n/**\n * Represents metadata related to the process of DID dereferencing.\n *\n * This type includes fields that provide information about the outcome of a DID dereferencing operation,\n * including the content type of the returned resource and any errors that occurred during the dereferencing process.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-metadata | DID Core Specification, § DID URL Dereferencing Metadata}\n */\nexport type DidDereferencingMetadata = {\n  /**\n   * The Media Type of the returned contentStream SHOULD be expressed using this property if\n   * dereferencing is successful.\n   */\n  contentType?: string;\n\n  /**\n   * The error code from the dereferencing process. This property is REQUIRED when there is an\n   * error in the dereferencing process. The value of this property MUST be a single keyword\n   * expressed as an ASCII string. The possible property values of this field SHOULD be registered\n   * in the {@link https://www.w3.org/TR/did-spec-registries/ | DID Specification Registries}.\n   * The DID Core specification defines the following common error values:\n   *\n   * - `invalidDidUrl`: The DID URL supplied to the DID URL dereferencing function does not conform\n   *                    to valid syntax.\n   * - `notFound`: The DID URL dereferencer was unable to find the `contentStream` resulting from\n   *               this dereferencing request.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-metadata | DID Core Specification, § DID URL Dereferencing Metadata}\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents the options that can be used during the process of DID dereferencing.\n *\n * This interface allows the caller to specify preferences and additional parameters for the DID\n * dereferencing operation.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-options}\n */\nexport interface DidDereferencingOptions {\n  /** The Media Type that the caller prefers for contentStream. */\n  accept?: string;\n\n  /** Additional properties used during DID dereferencing. */\n  [key: string]: any;\n}\n\n/**\n * Represents the result of a DID dereferencing operation.\n *\n * This type encapsulates the outcomes of the DID URL dereferencing process, including metadata\n * about the dereferencing operation, the content stream retrieved (if any), and metadata about the\n * content stream.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core Specification, § DID URL Dereferencing}\n */\nexport type DidDereferencingResult = {\n  /**\n   * A metadata structure consisting of values relating to the results of the DID URL dereferencing\n   * process. This structure is REQUIRED, and in the case of an error in the dereferencing process,\n   * this MUST NOT be empty. Properties defined by this specification are in 7.2.2 DID URL\n   * Dereferencing Metadata. If the dereferencing is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   */\n  dereferencingMetadata: DidDereferencingMetadata;\n\n  /**\n   * If the `dereferencing` function was called and successful, this MUST contain a resource\n   * corresponding to the DID URL. The contentStream MAY be a resource such as:\n   *   - a DID document that is serializable in one of the conformant representations\n   *   - a Verification Method\n   *   - a service.\n   *   - any other resource format that can be identified via a Media Type and obtained through the\n   *     resolution process.\n   *\n   * If the dereferencing is unsuccessful, this value MUST be empty.\n   */\n  contentStream: DidResource | null;\n\n  /**\n   * If the dereferencing is successful, this MUST be a metadata structure, but the structure MAY be\n   * empty. This structure contains metadata about the contentStream. If the contentStream is a DID\n   * document, this MUST be a didDocumentMetadata structure as described in DID Resolution. If the\n   * dereferencing is unsuccessful, this output MUST be an empty metadata structure.\n   */\n  contentMetadata: DidDocumentMetadata;\n}\n\n/**\n * A set of data describing the Decentralized Identifierr (DID) subject.\n *\n * A DID Document contains information associated with the DID, such as cryptographic public keys\n * and service endpoints, enabling trustable interactions associated with the DID subject.\n *\n * - Cryptographic public keys - Used by the DID subject or a DID delegate to authenticate itself\n *                               and prove its association with the DID.\n * - Service endpoints - Used to communicate or interact with the DID subject or associated\n *                       entities. Examples include discovery, agent, social networking, file\n *                       storage, and verifiable credential repository services.\n *\n * A DID Document can be retrieved by resolving a DID, as described in\n * {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core Specification, § DID Resolution}.\n */\nexport interface DidDocument {\n  /**\n   * A JSON-LD context link, which provides a JSON-LD processor with the information necessary to\n   * interpret the DID document JSON. The default context URL is 'https://www.w3.org/ns/did/v1'.\n   */\n  '@context'?: 'https://www.w3.org/ns/did/v1' | string | (string | Record<string, any>)[];\n\n  /**\n   * The DID Subject to which this DID Document pertains.\n   *\n   * The `id` property is REQUIRED and must be a valid DID.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-subject | DID Core Specification, § DID Subject}\n   */\n  id: string;\n\n  /**\n   * A DID subject can have multiple identifiers for different purposes, or at different times.\n   * The assertion that two or more DIDs (or other types of URI) refer to the same DID subject can\n   * be made using the `alsoKnownAs` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#also-known-as | DID Core Specification, § Also Known As}\n   */\n  alsoKnownAs?: string[];\n\n  /**\n   * A DID controller is an entity that is authorized to make changes to a DID document. Typically,\n   * only the DID Subject (i.e., the value of `id` property in the DID document) is authoritative.\n   * However, another DID can be specified as the DID controller, and when doing so, any\n   * verification methods contained in the DID document for the other DID should be accepted as\n   * authoritative.  In other words, proofs created by the controller DID should be considered\n   * equivalent to proofs created by the DID Subject.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-controller | DID Core Specification, § DID Controller}\n   */\n  controller?: string | string[];\n\n  /**\n   * A DID document can express verification methods, such as cryptographic public keys, which can\n   * be used to authenticate or authorize interactions with the DID subject or associated parties.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   */\n  verificationMethod?: DidVerificationMethod[];\n\n  /**\n   * The `assertionMethod` verification relationship is used to specify how the DID subject is\n   * expected to express claims, such as for the purposes of issuing a Verifiable Credential.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#assertion | DID Core Specification, § Assertion}\n   */\n  assertionMethod?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `authentication` verification relationship is used to specify how the DID subject is expected\n   * to be authenticated, for purposes such as logging into a website or engaging in any sort of\n   * challenge-response protocol.\n\n   * @see {@link https://www.w3.org/TR/did-core/#authentication | DID Core Specification, § Authentication}\n   */\n  authentication?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `keyAgreement` verification relationship is used to specify how an entity can generate\n   * encryption material in order to transmit confidential  information intended for the DID\n   * subject, such as for the purposes of establishing a secure communication channel with the\n   * recipient.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#key-agreement | DID Core Specification, § Key Agreement}\n   */\n  keyAgreement?: (DidVerificationMethod | string)[];\n\n  /**\n   *  The `capabilityDelegation` verification relationship is used to specify a mechanism that might\n   * be used by the DID subject to delegate a cryptographic capability to another party, such as\n   * delegating the authority to access a specific HTTP API to a subordinate.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-delegation | DID Core Specification, § Capability Delegation}\n   */\n  capabilityDelegation?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `capabilityInvocation` verification relationship is used to specify a verification method\n   * that might be used by the DID subject to invoke a cryptographic capability, such as the\n   * authorization to update the DID Document.\n   */\n  capabilityInvocation?: (DidVerificationMethod | string)[];\n\n  /**\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   */\n  service?: DidService[];\n}\n\n/**\n * Represents metadata about the DID document resulting from a DID resolution operation.\n *\n * This metadata typically does not change between invocations of the `resolve` and\n * `resolveRepresentation` functions unless the DID document changes, as it represents metadata\n * about the DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-document-metadata | DID Core Specification, § DID Document Metadata}\n */\nexport interface DidDocumentMetadata {\n  /**\n   * Timestamp of the Create operation.\n   *\n   * The value of the property MUST be a string formatted as an XML Datetime normalized to\n   * UTC 00:00:00 and  without sub-second decimal precision. For example: `2020-12-20T19:17:47Z`.\n   */\n  created?: string;\n\n  /**\n   * Timestamp of the last Update operation for the document version which was resolved.\n   *\n   * The value of the property MUST follow the same formatting rules as the `created` property.\n   * The `updated` property is omitted if an Update operation has never been performed on the DID\n   * document. If an `updated` property exists, it can be the same value as the `created` property\n   * when the difference between the two timestamps is less than one second.\n   */\n  updated?: string;\n\n  /**\n   * Whether the DID has been deactivated.\n   *\n   * If a DID has been deactivated, DID document metadata MUST include this property with the\n   * boolean value `true`. If a DID has not been deactivated, this properrty is OPTIONAL, but if\n   * present, MUST have the boolean value `false`.\n   */\n  deactivated?: boolean;\n\n  /**\n   * Version ID of the last Update operation for the document version which was resolved.\n   */\n  versionId?: string;\n\n  /**\n   * Timestamp of the next Update operation if the resolved document version is not the latest\n   * version of the document.\n   *\n   * The value of the property MUST follow the same formatting rules as the `created` property.\n   */\n  nextUpdate?: string;\n\n  /**\n   * Version ID of the next Update operation if the resolved document version is not the latest\n   * version of the document.\n   */\n  nextVersionId?: string;\n\n  /**\n   * A DID method can define different forms of a DID that are logically equivalent. An example is\n   * when a DID takes one form prior to registration in a verifiable data registry and another form\n   * after such registration. In this case, the DID method specification might need to express one\n   * or more DIDs that are logically equivalent to the resolved DID as a property of the DID\n   * document. This is the purpose of the `equivalentId` property.\n   *\n   * A requesting party is expected to retain the values from the id and equivalentId properties to\n   * ensure any subsequent interactions with any of the values they contain are correctly handled as\n   * logically equivalent (e.g., retain all variants in a database so an interaction with any one\n   * maps to the same underlying account).\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-equivalentid | DID Core Specification, § DID Document Metadata}\n  */\n equivalentId?: string[];\n\n /**\n  * The `canonicalId` property is identical to the `equivalentId` property except:\n  * - it is associated with a single value rather than a set\n  * - the DID is defined to be the canonical ID for the DID subject within the scope of the\n  *   containing DID document.\n  *\n  * A requesting party is expected to use the `canonicalId` value as its primary ID value for the\n  * DID subject and treat all other equivalent values as secondary aliases (e.g., update\n  * corresponding primary references in their systems to reflect the new canonical ID directive).\n  *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-canonicalid | DID Core Specification, § DID Document Metadata}\n   */\n  canonicalId?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents metadata related to the result of a DID resolution operation.\n *\n * This type includes fields that provide information about the outcome of a DID resolution process,\n * including the content type of the returned DID document and any errors that occurred during the\n * resolution process.\n *\n * This metadata typically changes between invocations of the `resolve` and `resolveRepresentation`\n * functions, as it represents data about the resolution process itself.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-metadata | DID Core Specification, § DID Resolution Metadata}\n */\nexport type DidResolutionMetadata = {\n  /**\n   * The Media Type of the returned `didDocumentStream`.\n   *\n   * This property is REQUIRED if resolution is successful and if the `resolveRepresentation`\n   * function was called. This property MUST NOT be present if the `resolve` function was called.\n   * The value of this property MUST be an ASCII string that is the Media Type of the conformant\n   * representations. The caller of the `resolveRepresentation` function MUST use this value when\n   * determining how to parse and process the `didDocumentStream` returned by this function into the\n   * data model.\n   */\n  contentType?: string;\n\n  /**\n   * An error code indicating issues encountered during the DID Resolution or DID URL\n   * Dereferencing process.\n   *\n   * Defined error codes include:\n   *   - `internalError`: An unexpected error occurred during DID Resolution or DID URL\n   *                      dereferencing process.\n   *   - `invalidDid`: The provided DID is invalid.\n   *   - `methodNotSupported`: The DID method specified is not supported.\n   *   - `notFound`: The DID or DID URL does not exist.\n   *   - `representationNotSupported`: The DID document representation is not supported.\n   *   - Custom error codes can also be provided as strings.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-resolution-metadata | DID Core Specification, § DID Resolution Metadata}\n   * @see {@link https://www.w3.org/TR/did-spec-registries/#error | DID Specification Registries, § Error}\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n};\n\n/**\n * DID Resolution input metadata.\n*\n* The DID Core specification defines the following common properties:\n*  - `accept`: The Media Type that the caller prefers for the returned representation of the DID\n*              Document.\n*\n* The possible properties within this structure and their possible values are registered in the\n* {@link https://www.w3.org/TR/did-spec-registries/#did-resolution-options | DID Specification Registries}.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-options | DID Core Specification, § DID Resolution Options}\n */\nexport interface DidResolutionOptions {\n  /**\n   * The Media Type that the caller prefers for the returned representation of the DID Document.\n   *\n   * This property is REQUIRED if the `resolveRepresentation` function was called. This property\n   * MUST NOT be present if the `resolve` function was called.\n   *\n   * The value of this property MUST be an ASCII string that is the Media Type of the conformant\n   * representations. The caller of the `resolveRepresentation` function MUST use this value when\n   * determining how to parse and process the `didDocumentStream` returned by this function into the\n   * data model.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-resolution-options | DID Core Specification, § DID Resolution Options}\n   */\n  accept?: string;\n\n  // Additional properties used during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents the result of a Decentralized Identifier (DID) resolution operation.\n *\n * This type encapsulates the complete outcome of resolving a DID, including the resolution metadata,\n * the DID document (if resolution is successful), and metadata about the DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core Specification, § DID Resolution}\n */\nexport type DidResolutionResult = {\n  /**\n   * A JSON-LD context link, which provides the JSON-LD processor with the information necessary to\n   * interpret the resolution result JSON. The default context URL is\n   * 'https://w3id.org/did-resolution/v1'.\n   */\n  '@context'?: 'https://w3id.org/did-resolution/v1' | string | (string | Record<string, any>)[];\n\n  /**\n   * A metadata structure consisting of values relating to the results of the DID resolution\n   * process.\n   *\n   * This structure is REQUIRED, and in the case of an error in the resolution process,\n   * this MUST NOT be empty. If the resolution is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-didresolutionmetadata | DID Core Specification, § DID Resolution Metadata}\n   */\n  didResolutionMetadata: DidResolutionMetadata;\n\n  /**\n   * The DID document resulting from the resolution process, if successful.\n   *\n   * If the `resolve` function was called and successful, this MUST contain a DID document\n   * corresponding to the DID. If the resolution is unsuccessful, this value MUST be empty.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  didDocument: DidDocument | null;\n\n  /**\n   * Metadata about the DID Document.\n   *\n   * This structure contains information about the DID Document like creation and update timestamps,\n   * deactivation status, versioning information, and other details relevant to the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocumentmetadata | DID Core Specification, § DID Document Metadata}\n   */\n  didDocumentMetadata: DidDocumentMetadata;\n};\n\n/**\n * A DID Resource is either a DID Document, a DID Verification method or a DID Service\n */\nexport type DidResource = DidDocument | DidService | DidVerificationMethod;\n\n/**\n * Services are used in DID documents to express ways of communicating with the DID subject or\n * associated entities. A service can be any type of service the DID subject wants to advertise.\n *\n * @see {@link https://www.w3.org/TR/did-core/#services}\n */\nexport type DidService = {\n  /**\n   * Identifier of the service.\n   *\n   * The `id` property is REQUIRED. It MUST be a URI conforming to\n   * {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986} and MUST be unique within the\n   * DID document.\n   */\n  id: string;\n\n  /**\n   * The type of service being described.\n   *\n   * The `type` property is REQUIRED. It MUST be a string. To maximize interoperability, the value\n   * SHOULD be registered in the\n   * {@link https://www.w3.org/TR/did-spec-registries/ | DID Specification Registries}. Examples of\n   * service types can be found in\n   * {@link https://www.w3.org/TR/did-spec-registries/#service-types | § Service Types}.\n   */\n  type: string;\n\n  /**\n   * A URI that can be used to interact with the DID service.\n   *\n   * The value of the `serviceEndpoint` property MUST be a string, an object containing key/value\n   * pairs, or an array composed of strings or objects. All string values MUST be valid URIs\n   * conforming to {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986}.\n   */\n  serviceEndpoint: DidServiceEndpoint | DidServiceEndpoint[];\n\n  // DID methods MAY include additional service properties.\n  [key: string]: any;\n};\n\n/**\n * A service endpoint is a URI (Uniform Resource Identifier) that can be used to interact with the\n * DID service.\n *\n * The value of the `serviceEndpoint` property MUST be a string or an object containing key/value\n * pairs. All string values MUST be valid URIs conforming to\n * {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986}.\n *\n * @see {@link https://www.w3.org/TR/did-core/#dfn-serviceendpoint | RFC3986, § 5.4 Services}\n */\nexport type DidServiceEndpoint = string | Record<string, any>;\n\n/**\n * Represents a verification method in the context of a DID document.\n *\n * A verification method is a mechanism by which a DID controller can cryptographically assert proof\n * of ownership or control over a DID or DID document. This can include, but is not limited to,\n * cryptographic public keys or other data that can be used to authenticate or authorize actions.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n */\nexport interface DidVerificationMethod {\n  /**\n   * The identifier of the verification method, which must be a URI.\n   */\n  id: string;\n\n  /**\n   * The type of the verification method.\n   *\n   * To maximize interoperability this value SHOULD be one of the valid verification method types\n   * registered in the {@link https://www.w3.org/TR/did-spec-registries/#verification-method-types | DID Specification Registries}.\n   */\n  type: string;\n\n  /**\n   * The DID of the entity that controls this verification method.\n   */\n  controller: string;\n\n  /**\n   * (Optional) A public key in JWK format.\n   *\n   * A JSON Web Key (JWK) that conforms to {@link https://datatracker.ietf.org/doc/html/rfc7517 | RFC 7517}.\n   */\n  publicKeyJwk?: Jwk;\n\n  /**\n   * (Optional) A public key in Multibase format.\n   *\n   * A multibase key that conforms to the draft\n   * {@link https://datatracker.ietf.org/doc/draft-multiformats-multibase/ | Multibase specification}.\n   */\n  publicKeyMultibase?: string;\n}\n\n/**\n * Represents the various verification relationships defined in a DID document.\n *\n * These verification relationships indicate the intended usage of verification methods within a DID\n * document. Each relationship signifies a different purpose or context in which a verification\n * method can be used, such as authentication, assertionMethod, keyAgreement, capabilityDelegation,\n * and capabilityInvocation. The array provides a standardized set of relationship names for\n * consistent referencing and implementation across different DID methods.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-relationships | DID Core Specification, § Verification Relationships}\n */\nexport enum DidVerificationRelationship {\n  /**\n   * Specifies how the DID subject is expected to be authenticated. This is commonly used for\n   * purposes like logging into a website or participating in challenge-response protocols.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#authentication | DID Core Specification, § Authentication}\n   */\n  authentication = 'authentication',\n\n  /**\n   * Specifies how the DID subject is expected to express claims, such as for issuing Verifiable\n   * Credentials. This relationship is typically used when the DID subject is the issuer of a\n   * credential.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#assertion | DID Core Specification, § Assertion}\n   */\n  assertionMethod = 'assertionMethod',\n\n  /**\n   * Specifies how an entity can generate encryption material to communicate confidentially with the\n   * DID subject. Often used in scenarios requiring secure communication channels.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#key-agreement | DID Core Specification, § Key Agreement}\n   */\n  keyAgreement = 'keyAgreement',\n\n  /**\n   * Specifies a mechanism used by the DID subject to delegate a cryptographic capability to another\n   * party. This can include delegating access to a specific resource or API.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-delegation | DID Core Specification, § Capability Delegation}\n   */\n  capabilityDelegation = 'capabilityDelegation',\n\n  /**\n   * Specifies a verification method used by the DID subject to invoke a cryptographic capability.\n   * This is frequently associated with authorization actions, like updating the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-invocation | DID Core Specification, § Capability Invocation}\n   */\n  capabilityInvocation = 'capabilityInvocation'\n}", "import type { KeyValueStore } from '@web5/common';\n\nimport type { DidDereferencingOptions, DidDereferencingResult, DidResolutionOptions, DidResolutionResult } from './did-core.js';\n\n/**\n * Represents the interface for resolving a Decentralized Identifier (DID) to its corresponding DID\n * document.\n *\n * The `DidResolver` interface defines a single method, `resolve`, which takes a DID URL as input\n * and returns a `Promise` that resolves to a `DidResolutionResult`. This result contains the DID\n * document associated with the given DID, along with metadata about the resolution process.\n *\n * Implementations of this interface are expected to support resolution of DIDs according to the\n * specific rules and methods defined by the DID scheme in use.\n *\n * More information on DID URL dereferencing can be found in the\n * {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core specification}.\n *\n * @example\n * ```typescript\n * const resolutionResult = await didResolver.resolve('did:example:123456789abcdefghi');\n * ```\n */\nexport interface DidResolver {\n  /**\n   * Resolves a DID URI to a DID document and associated metadata.\n   *\n   * This function should resolve the DID URI in accordance with the relevant DID method\n   * specification, using the provided `options`.\n   *\n   * @param didUri - The DID URI to be resolved.\n   * @param options - Optional. The options used for resolving the DID.\n   * @returns A {@link DidResolutionResult} object containing the DID document and metadata or an\n   *          error.\n   */\n  resolve(didUrl: string, options?: DidResolutionOptions): Promise<DidResolutionResult>;\n}\n\n/**\n * Interface for cache implementations used by to store resolved DID documents.\n */\nexport interface DidResolverCache extends KeyValueStore<string, DidResolutionResult | void> {}\n\n/**\n * Represents the interface for dereferencing a DID URL to a specific resource within a DID\n * document.\n *\n * The `DidUrlDereferencer` interface defines a single method, `dereference`, which takes a DID URL\n * as input and returns a `Promise` that resolves to a `DidDereferencingResult`. This result\n * includes the dereferenced resource (if found) and metadata about the dereferencing process.\n *\n * Dereferencing a DID URL involves parsing the URL to identify the specific part of the DID\n * document being referenced, which could be a verification method, a service endpoint, or the\n * entire document itself.\n *\n * Implementations of this interface must adhere to the dereferencing mechanisms defined in the DID\n * Core specifications, handling various components of the DID URL including the DID itself, path,\n * query, and fragment.\n *\n * More information on DID URL dereferencing can be found in the\n * {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core specification}.\n *\n * @example\n * ```typescript\n * const dereferenceResult = await didUrlDereferencer.dereference('did:example:123456789abcdefghi#keys-1');\n * ```\n */\nexport interface DidUrlDereferencer {\n  /**\n   * Dereferences a DID (Decentralized Identifier) URL to a corresponding DID resource.\n   *\n   * This method interprets the DID URL's components, which include the DID method, method-specific\n   * identifier, path, query, and fragment, and retrieves the related resource as per the DID Core\n   * specifications.\n   *\n   * @param didUrl - The DID URL string to dereference.\n   * @param options - Input options to the dereference function. Optional.\n   * @returns a {@link DidDereferencingResult}\n   */\n  dereference(didUrl: string, options?: DidDereferencingOptions): Promise<DidDereferencingResult>;\n}\n\n/**\n * A constant representing an empty DID Resolution Result. This object is used as the basis for a\n * result of DID resolution and is typically augmented with additional properties by the\n * DID method resolver.\n */\nexport const EMPTY_DID_RESOLUTION_RESULT: DidResolutionResult = {\n  '@context'            : 'https://w3id.org/did-resolution/v1',\n  didResolutionMetadata : {},\n  didDocument           : null,\n  didDocumentMetadata   : {},\n};", "/**\n * The `Did` class represents a Decentralized Identifier (DID) Uniform Resource Identifier (URI).\n *\n * This class provides a method for parsing a DID URI string into its component parts, as well as a\n * method for serializing a DID URI object into a string.\n *\n * A DID URI is composed of the following components:\n * - scheme\n * - method\n * - id\n * - path\n * - query\n * - fragment\n * - params\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-syntax | DID Core Specification, § DID Syntax}\n */\nexport class Did {\n  /** Regular expression pattern for matching the method component of a DID URI. */\n  static readonly METHOD_PATTERN = '([a-z0-9]+)';\n  /** Regular expression pattern for matching percent-encoded characters in a method identifier. */\n  static readonly PCT_ENCODED_PATTERN = '(?:%[0-9a-fA-F]{2})';\n  /** Regular expression pattern for matching the characters allowed in a method identifier. */\n  static readonly ID_CHAR_PATTERN = `(?:[a-zA-Z0-9._-]|${Did.PCT_ENCODED_PATTERN})`;\n  /** Regular expression pattern for matching the method identifier component of a DID URI. */\n  static readonly METHOD_ID_PATTERN = `((?:${Did.ID_CHAR_PATTERN}*:)*(${Did.ID_CHAR_PATTERN}+))`;\n  /** Regular expression pattern for matching the path component of a DID URI. */\n  static readonly PATH_PATTERN = `(/[^#?]*)?`;\n  /** Regular expression pattern for matching the query component of a DID URI. */\n  static readonly QUERY_PATTERN = `([?][^#]*)?`;\n  /** Regular expression pattern for matching the fragment component of a DID URI. */\n  static readonly FRAGMENT_PATTERN = `(#.*)?`;\n  /** Regular expression pattern for matching all of the components of a DID URI. */\n  static readonly DID_URI_PATTERN = new RegExp(\n    `^did:(?<method>${Did.METHOD_PATTERN}):(?<id>${Did.METHOD_ID_PATTERN})(?<path>${Did.PATH_PATTERN})(?<query>${Did.QUERY_PATTERN})(?<fragment>${Did.FRAGMENT_PATTERN})$`\n  );\n\n  /**\n   * A string representation of the DID.\n   *\n   * A DID is a URI composed of three parts: the scheme `did:`, a method identifier, and a unique,\n   * method-specific identifier specified by the DID method.\n   *\n   * @example\n   * did:dht:h4d3ixkwt6q5a455tucw7j14jmqyghdtbr6cpiz6on5oxj5bpr3o\n   */\n  uri: string;\n\n  /**\n   * The name of the DID method.\n   *\n   * Examples of DID method names are `dht`, `jwk`, and `web`, among others.\n   */\n  method: string;\n\n  /**\n   * The DID method identifier.\n   *\n   * @example\n   * h4d3ixkwt6q5a455tucw7j14jmqyghdtbr6cpiz6on5oxj5bpr3o\n   */\n  id: string;\n\n  /**\n      * Optional path component of the DID URI.\n      *\n      * @example\n      * did:web:tbd.website/path\n      */\n  path?: string;\n\n  /**\n      * Optional query component of the DID URI.\n      *\n      * @example\n      * did:web:tbd.website?versionId=1\n      */\n  query?: string;\n\n  /**\n   * Optional fragment component of the DID URI.\n   *\n   * @example\n   * did:web:tbd.website#key-1\n   */\n  fragment?: string;\n\n  /**\n    * Optional query parameters in the DID URI.\n    *\n    * @example\n    * did:web:tbd.website?service=files&relativeRef=/whitepaper.pdf\n    */\n  params?: Record<string, string>;\n\n  /**\n   * Constructs a new `Did` instance from individual components.\n   *\n   * @param params - An object containing the parameters to be included in the DID URI.\n   * @param params.method - The name of the DID method.\n   * @param params.id - The DID method identifier.\n   * @param params.path - Optional. The path component of the DID URI.\n   * @param params.query - Optional. The query component of the DID URI.\n   * @param params.fragment - Optional. The fragment component of the DID URI.\n   * @param params.params - Optional. The query parameters in the DID URI.\n   */\n  constructor({ method, id, path, query, fragment, params }: {\n    method: string,\n    id: string,\n    path?: string,\n    query?: string,\n    fragment?: string,\n    params?: Record<string, string>\n  }) {\n    this.uri = `did:${method}:${id}`;\n    this.method = method;\n    this.id = id;\n    this.path = path;\n    this.query = query;\n    this.fragment = fragment;\n    this.params = params;\n  }\n\n  /**\n   * Parses a DID URI string into its individual components.\n   *\n   * @example\n   * ```ts\n   * const did = Did.parse('did:example:123?service=agent&relativeRef=/credentials#degree');\n   *\n   * console.log(did.uri)      // Output: 'did:example:123'\n   * console.log(did.method)   // Output: 'example'\n   * console.log(did.id)       // Output: '123'\n   * console.log(did.query)    // Output: 'service=agent&relativeRef=/credentials'\n   * console.log(did.fragment) // Output: 'degree'\n   * console.log(did.params)   // Output: { service: 'agent', relativeRef: '/credentials' }\n   * ```\n   *\n   * @params didUri - The DID URI string to be parsed.\n   * @returns A `Did` object representing the parsed DID URI, or `null` if the input string is not a valid DID URI.\n   */\n  static parse(didUri: string): Did | null {\n    // Return null if the input string is empty or not provided.\n    if (!didUri) return null;\n\n    // Execute the regex pattern on the input string to extract URI components.\n    const match = Did.DID_URI_PATTERN.exec(didUri);\n\n    // If the pattern does not match, or if the required groups are not found, return null.\n    if (!match || !match.groups) return null;\n\n    // Extract the method, id, params, path, query, and fragment from the regex match groups.\n    const { method, id, path, query, fragment } = match.groups;\n\n    // Initialize a new Did object with the uri, method and id.\n    const did: Did = {\n      uri: `did:${method}:${id}`,\n      method,\n      id,\n    };\n\n    // If path is present, add it to the Did object.\n    if (path) did.path = path;\n\n    // If query is present, add it to the Did object, removing the leading '?'.\n    if (query) did.query = query.slice(1);\n\n    // If fragment is present, add it to the Did object, removing the leading '#'.\n    if (fragment) did.fragment = fragment.slice(1);\n\n    // If query params are present, parse them into a key-value object and add to the Did object.\n    if (query) {\n      const parsedParams = {} as Record<string, string>;\n      // Split the query string by '&' to get individual parameter strings.\n      const paramPairs = query.slice(1).split('&');\n      for (const pair of paramPairs) {\n        // Split each parameter string by '=' to separate keys and values.\n        const [key, value] = pair.split('=');\n        parsedParams[key] = value;\n      }\n      did.params = parsedParams;\n    }\n\n    return did;\n  }\n}", "/**\n * A custom error class for DID-related errors.\n */\nexport class DidError extends Error {\n  /**\n   * Constructs an instance of DidError, a custom error class for handling DID-related errors.\n   *\n   * @param code - A {@link DidErrorCode} representing the specific type of error encountered.\n   * @param message - A human-readable description of the error.\n   */\n  constructor(public code: DidErrorCode, message: string) {\n    super(message);\n    this.name = 'DidError';\n\n    // Ensures that instanceof works properly, the correct prototype chain when using inheritance,\n    // and that V8 stack traces (like Chrome, Edge, and Node.js) are more readable and relevant.\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    // Captures the stack trace in V8 engines (like Chrome, Edge, and Node.js).\n    // In non-V8 environments, the stack trace will still be captured.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, DidError);\n    }\n  }\n}\n\n/**\n * An enumeration of possible DID error codes.\n */\nexport enum DidErrorCode {\n  /** The DID supplied does not conform to valid syntax. */\n  InvalidDid = 'invalidDid',\n\n  /** The supplied method name is not supported by the DID method and/or DID resolver implementation. */\n  MethodNotSupported = 'methodNotSupported',\n\n  /** An unexpected error occurred during the requested DID operation. */\n  InternalError = 'internalError',\n\n  /** The DID document supplied does not conform to valid syntax. */\n  InvalidDidDocument = 'invalidDidDocument',\n\n  /** The byte length of a DID document does not match the expected value. */\n  InvalidDidDocumentLength = 'invalidDidDocumentLength',\n\n  /** The DID URL supplied to the dereferencing function does not conform to valid syntax. */\n  InvalidDidUrl = 'invalidDidUrl',\n\n  /** An invalid public key is detected during a DID operation. */\n  InvalidPublicKey = 'invalidPublicKey',\n\n  /** The byte length of a public key does not match the expected value. */\n  InvalidPublicKeyLength = 'invalidPublicKeyLength',\n\n  /** An invalid public key type was detected during a DID operation. */\n  InvalidPublicKeyType = 'invalidPublicKeyType',\n\n  /** Verification of a signature failed during a DID operation. */\n  InvalidSignature = 'invalidSignature',\n\n  /** The DID resolver was unable to find the DID document resulting from the resolution request. */\n  NotFound = 'notFound',\n\n  /**\n   * The representation requested via the `accept` input metadata property is not supported by the\n   * DID method and/or DID resolver implementation.\n   */\n  RepresentationNotSupported = 'representationNotSupported',\n\n  /** The type of a public key is not supported by the DID method and/or DID resolver implementation. */\n  UnsupportedPublicKeyType = 'unsupportedPublicKeyType',\n}", "import type { Jwk } from '@web5/crypto';\nimport type { RequireOnly } from '@web5/common';\n\nimport { Convert, Multicodec } from '@web5/common';\nimport { computeJwkThumbprint } from '@web5/crypto';\n\nimport type { KeyWithMulticodec } from './types/multibase.js';\n\nimport { DidError, DidErrorCode } from './did-error.js';\nimport {\n  DidService,\n  DidDocument,\n  DidVerificationMethod,\n  DidVerificationRelationship,\n} from './types/did-core.js';\n\n/**\n * Represents a Decentralized Web Node (DWN) service in a DID Document.\n *\n * A DWN DID service is a specialized type of DID service with the `type` set to\n * `DecentralizedWebNode`. It includes specific properties `enc` and `sig` that are used to identify\n * the public keys that can be used to interact with the DID Subject. The values of these properties\n * are strings or arrays of strings containing one or more verification method `id` values present in\n * the same DID document. If the `enc` and/or `sig` properties are an array of strings, an entity\n * interacting with the DID subject is expected to use the verification methods in the order they\n * are listed.\n *\n * @example\n * ```ts\n * const service: DwnDidService = {\n *   id: 'did:example:123#dwn',\n *   type: 'DecentralizedWebNode',\n *   serviceEndpoint: 'https://dwn.tbddev.org/dwn0',\n *   enc: 'did:example:123#key-1',\n *   sig: 'did:example:123#key-2'\n * }\n * ```\n *\n * @see {@link https://identity.foundation/decentralized-web-node/spec/ | DIF Decentralized Web Node (DWN) Specification}\n */\nexport interface DwnDidService extends DidService {\n  /**\n   * One or more verification method `id` values that can be used to encrypt information\n   * intended for the DID subject.\n   */\n  enc?: string | string[];\n\n  /**\n   * One or more verification method `id` values that will be used by the DID subject to sign data\n   * or by another entity to verify signatures created by the DID subject.\n   */\n  sig: string | string[];\n}\n\n/**\n * Extracts the fragment part of a Decentralized Identifier (DID) verification method identifier.\n *\n * This function takes any input and aims to return only the fragment of a DID identifier,\n * which comes after the '#' symbol in a DID string. It's designed specifically for handling\n * DID verification method identifiers. The function returns undefined for non-string inputs, inputs\n * that do not contain a '#', or complex data structures like objects or arrays, ensuring that only\n * the fragment part of a DID string is extracted when present.\n *\n * @example\n * ```ts\n * console.log(extractDidFragment(\"did:example:123#key-1\")); // Output: \"key-1\"\n * console.log(extractDidFragment(\"did:example:123\")); // Output: undefined\n * console.log(extractDidFragment({ id: \"did:example:123#0\", type: \"JsonWebKey\" })); // Output: undefined\n * console.log(extractDidFragment(undefined)); // Output: undefined\n * ```\n *\n * @param input - The input to be processed. Can be of any type, but the function is designed\n *                to work with strings that represent DID verification method identifiers.\n * @returns The fragment part of the DID identifier if the input is a string containing a '#'.\n *          Returns an empty string for all other inputs, including non-string types, strings\n *          without a '#', and complex data structures.\n */\nexport function extractDidFragment(input: unknown): string | undefined {\n  if (typeof input !== 'string') return undefined;\n  if (input.length === 0) return undefined;\n  return input.split('#').pop();\n}\n\n/**\n * Retrieves services from a given DID document, optionally filtered by `id` or `type`.\n *\n * If no `id` or `type` filters are provided, all defined services are returned.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = { ... }; // W3C DID document\n * const services = getServices({ didDocument, type: 'DecentralizedWebNode' });\n * ```\n *\n * @param params - An object containing input parameters for retrieving services.\n * @param params.didDocument - The DID document from which services are retrieved.\n * @param params.id - Optional. A string representing the specific service ID to match. If provided, only the service with this ID will be returned.\n * @param params.type - Optional. A string representing the specific service type to match. If provided, only the service(s) of this type will be returned.\n * @returns An array of services. If no matching service is found, an empty array is returned.\n */\nexport function getServices({ didDocument, id, type }: {\n  didDocument: DidDocument;\n  id?: string;\n  type?: string;\n}): DidService[] {\n  return didDocument?.service?.filter(service => {\n    if (id && service.id !== id) return false;\n    if (type && service.type !== type) return false;\n    return true;\n  }) ?? [];\n}\n\n/**\n * Retrieves a verification method object from a DID document if there is a match for the given\n * public key.\n *\n * This function searches the verification methods in a given DID document for a match with the\n * provided public key (either in JWK or multibase format). If a matching verification method is\n * found it is returned. If no match is found `null` is returned.\n *\n *\n * @example\n * ```ts\n * const didDocument = {\n *   // ... contents of a DID document ...\n * };\n * const publicKeyJwk = { kty: 'OKP', crv: 'Ed25519', x: '...' };\n *\n * const verificationMethod = await getVerificationMethodByKey({\n *   didDocument,\n *   publicKeyJwk\n * });\n * ```\n *\n * @param params - An object containing input parameters for retrieving the verification method ID.\n * @param params.didDocument - The DID document to search for the verification method.\n * @param params.publicKeyJwk - The public key in JSON Web Key (JWK) format to match against the verification methods in the DID document.\n * @param params.publicKeyMultibase - The public key as a multibase encoded string to match against the verification methods in the DID document.\n * @returns A promise that resolves with the matching verification method, or `null` if no match is found.\n * @throws Throws an `Error` if the `didDocument` parameter is missing or if the `didDocument` does not contain any verification methods.\n */\nexport async function getVerificationMethodByKey({ didDocument, publicKeyJwk, publicKeyMultibase }: {\n  didDocument: DidDocument;\n  publicKeyJwk?: Jwk;\n  publicKeyMultibase?: string;\n}): Promise<DidVerificationMethod | null> {\n  // Collect all verification methods from the DID document.\n  const verificationMethods = getVerificationMethods({ didDocument });\n\n  for (let method of verificationMethods) {\n    if (publicKeyJwk && method.publicKeyJwk) {\n      const publicKeyThumbprint = await computeJwkThumbprint({ jwk: publicKeyJwk });\n      if (publicKeyThumbprint === await computeJwkThumbprint({ jwk: method.publicKeyJwk })) {\n        return method;\n      }\n    } else if (publicKeyMultibase && method.publicKeyMultibase) {\n      if (publicKeyMultibase === method.publicKeyMultibase) {\n        return method;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Retrieves all verification methods from a given DID document, including embedded methods.\n *\n * This function consolidates all verification methods into a single array for easy access and\n * processing. It checks both the primary `verificationMethod` array and the individual verification\n * relationship properties `authentication`, `assertionMethod`, `keyAgreement`,\n * `capabilityInvocation`, and `capabilityDelegation` for embedded methods.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = { ... }; // W3C DID document\n * const verificationMethods = getVerificationMethods({ didDocument });\n * ```\n *\n * @param params - An object containing input parameters for retrieving verification methods.\n * @param params.didDocument - The DID document from which verification methods are retrieved.\n * @returns An array of `DidVerificationMethod`. If no verification methods are found, an empty array is returned.\n * @throws Throws an `TypeError` if the `didDocument` parameter is missing.\n */\nexport function getVerificationMethods({ didDocument }: {\n  didDocument: DidDocument;\n}): DidVerificationMethod[] {\n  if (!didDocument) throw new TypeError(`Required parameter missing: 'didDocument'`);\n\n  const verificationMethods: DidVerificationMethod[] = [];\n\n  // Check the 'verificationMethod' array.\n  verificationMethods.push(...didDocument.verificationMethod?.filter(isDidVerificationMethod) ?? []);\n\n  // Check verification relationship properties for embedded verification methods.\n  Object.keys(DidVerificationRelationship).forEach((relationship) => {\n    verificationMethods.push(\n      ...(didDocument[relationship as keyof DidDocument] as (string | DidVerificationMethod)[])\n        ?.filter(isDidVerificationMethod) ?? []\n    );\n  });\n\n  return verificationMethods;\n}\n\n/**\n * Retrieves all DID verification method types from a given DID document.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = {\n *   verificationMethod: [\n *     {\n *       'id'              : 'did:example:123#key-0',\n *       'type'            : 'Ed25519VerificationKey2018',\n *       'controller'      : 'did:example:123',\n *       'publicKeyBase58' : '3M5RCDjPTWPkKSN3sxUmmMqHbmRPegYP1tjcKyrDbt9J'\n *     },\n *     {\n *       'id'              : 'did:example:123#key-1',\n *       'type'            : 'X25519KeyAgreementKey2019',\n *       'controller'      : 'did:example:123',\n *       'publicKeyBase58' : 'FbQWLPRhTH95MCkQUeFYdiSoQt8zMwetqfWoxqPgaq7x'\n *     },\n *     {\n *       'id'           : 'did:example:123#key-3',\n *       'type'         : 'JsonWebKey2020',\n *       'controller'   : 'did:example:123',\n *       'publicKeyJwk' : {\n *         'kty' : 'EC',\n *         'crv' : 'P-256',\n *         'x'   : 'Er6KSSnAjI70ObRWhlaMgqyIOQYrDJTE94ej5hybQ2M',\n *         'y'   : 'pPVzCOTJwgikPjuUE6UebfZySqEJ0ZtsWFpj7YSPGEk'\n *       }\n *     }\n *   ]\n * },\n * const vmTypes = getVerificationMethodTypes({ didDocument });\n * console.log(vmTypes);\n * // Output: ['Ed25519VerificationKey2018', 'X25519KeyAgreementKey2019', 'JsonWebKey2020']\n * ```\n *\n * @param params - An object containing input parameters for retrieving types.\n * @param params.didDocument - The DID document from which types are retrieved.\n * @returns An array of types. If no types were found, an empty array is returned.\n */\nexport function getVerificationMethodTypes({ didDocument }: {\n  didDocument: DidDocument;\n}): string[] {\n  // Collect all verification methods from the DID document.\n  const verificationMethods = getVerificationMethods({ didDocument });\n\n  // Map to extract 'type' from each verification method.\n  const types = verificationMethods.map(method => method.type);\n\n  return [...new Set(types)]; // Return only unique types.\n}\n\n/**\n * Retrieves a list of DID verification relationships by a specific method ID from a DID document.\n *\n * This function examines the specified DID document to identify any verification relationships\n * (e.g., `authentication`, `assertionMethod`) that reference a verification method by its method ID\n * or contain an embedded verification method matching the method ID. The method ID is typically a\n * fragment of a DID (e.g., `did:example:123#key-1`) that uniquely identifies a verification method\n * within the DID document.\n *\n * The search considers both direct references to verification methods by their IDs and verification\n * methods embedded within the verification relationship arrays. It returns an array of\n * `DidVerificationRelationship` enums corresponding to the verification relationships that contain\n * the specified method ID.\n *\n * @param params - An object containing input parameters for retrieving verification relationships.\n * @param params.didDocument - The DID document to search for verification relationships.\n * @param params.methodId - The method ID to search for within the verification relationships.\n * @returns An array of `DidVerificationRelationship` enums representing the types of verification\n *          relationships that reference the specified method ID.\n *\n * @example\n * ```ts\n * const didDocument: DidDocument = {\n *   // ...contents of a DID document...\n * };\n *\n * const relationships = getVerificationRelationshipsById({\n *   didDocument,\n *   methodId: 'key-1'\n * });\n * console.log(relationships);\n * // Output might include ['authentication', 'assertionMethod'] if those relationships\n * // reference or contain the specified method ID.\n * ```\n */\nexport function getVerificationRelationshipsById({ didDocument, methodId }: {\n  didDocument: DidDocument;\n  methodId: string;\n}): DidVerificationRelationship[] {\n  const relationships: DidVerificationRelationship[] = [];\n\n  Object.keys(DidVerificationRelationship).forEach((relationship) => {\n    if (Array.isArray(didDocument[relationship as keyof DidDocument])) {\n      const relationshipMethods = didDocument[relationship as keyof DidDocument] as (string | DidVerificationMethod)[];\n\n      const methodIdFragment = extractDidFragment(methodId);\n\n      // Check if the verification relationship property contains a matching method ID either\n      // directly referenced or as an embedded verification method.\n      const containsMethodId = relationshipMethods.some(method => {\n        const isByReferenceMatch = extractDidFragment(method) === methodIdFragment;\n        const isEmbeddedMethodMatch = isDidVerificationMethod(method) && extractDidFragment(method.id) === methodIdFragment;\n        return isByReferenceMatch || isEmbeddedMethodMatch;\n      });\n\n      if (containsMethodId) {\n        relationships.push(relationship as DidVerificationRelationship);\n      }\n    }\n  });\n\n  return relationships;\n}\n\n/**\n * Checks if a given object is a {@link DidService}.\n *\n * A {@link DidService} in the context of DID resources must include the properties `id`, `type`,\n * and `serviceEndpoint`. The `serviceEndpoint` can be a `DidServiceEndpoint` or an array of\n * `DidServiceEndpoint` objects.\n *\n * @example\n * ```ts\n * const service = {\n *   id: \"did:example:123#service-1\",\n *   type: \"OidcService\",\n *   serviceEndpoint: \"https://example.com/oidc\"\n * };\n *\n * if (isDidService(service)) {\n *   console.log('The object is a DidService');\n * } else {\n *   console.log('The object is not a DidService');\n * }\n * ```\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a `DidService`; otherwise, `false`.\n */\nexport function isDidService(obj: unknown): obj is DidService {\n  // Validate that the given value is an object.\n  if (!obj || typeof obj !== 'object' || obj === null) return false;\n\n  // Validate that the object has the necessary properties of DidService.\n  return 'id' in obj && 'type' in obj && 'serviceEndpoint' in obj;\n}\n\n/**\n * Checks if a given object is a {@link DwnDidService}.\n *\n * A {@link DwnDidService} is defined as {@link DidService} object with a `type` of\n * \"DecentralizedWebNode\" and `enc` and `sig` properties, where both properties are either strings\n * or arrays of strings.\n *\n * @example\n * ```ts\n * const didDocument: DidDocument = {\n *   id: 'did:example:123',\n *   verificationMethod: [\n *     {\n *       id: 'did:example:123#key-1',\n *       type: 'JsonWebKey2020',\n *       controller: 'did:example:123',\n *       publicKeyJwk: { ... }\n *     },\n *     {\n *       id: 'did:example:123#key-2',\n *       type: 'JsonWebKey2020',\n *       controller: 'did:example:123',\n *       publicKeyJwk: { ... }\n *     }\n *   ],\n *   service: [\n *     {\n *       id: 'did:example:123#dwn',\n *       type: 'DecentralizedWebNode',\n *       serviceEndpoint: 'https://dwn.tbddev.org/dwn0',\n *       enc: 'did:example:123#key-1',\n *       sig: 'did:example:123#key-2'\n *     }\n *   ]\n * };\n *\n * if (isDwnService(didDocument.service[0])) {\n *   console.log('The object is a DwnDidService');\n * } else {\n *   console.log('The object is not a DwnDidService');\n * }\n * ```\n *\n * @see {@link https://identity.foundation/decentralized-web-node/spec/ | Decentralized Web Node (DWN) Specification}\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a DwnDidService; otherwise, `false`.\n */\nexport function isDwnDidService(obj: unknown): obj is DwnDidService {\n  // Validate that the given value is a {@link DidService}.\n  if (!isDidService(obj)) return false;\n\n  // Validate that the `type` property is `DecentralizedWebNode`.\n  if (obj.type !== 'DecentralizedWebNode') return false;\n\n  // Validate that the given object has the `enc` and `sig` properties.\n  if (!('enc' in obj && 'sig' in obj)) return false;\n\n  // Validate that the `enc` and `sig` properties are either strings or arrays of strings.\n  const isStringOrStringArray = (prop: any): boolean =>\n    typeof prop === 'string' || Array.isArray(prop) && prop.every(item => typeof item === 'string');\n  return (isStringOrStringArray(obj.enc)) && (isStringOrStringArray(obj.sig));\n}\n\n/**\n * Checks if a given object is a DID Verification Method.\n *\n * A {@link DidVerificationMethod} in the context of DID resources must include the properties `id`,\n * `type`, and `controller`.\n *\n * @example\n * ```ts\n * const resource = {\n *  id           : \"did:example:123#0\",\n *  type         : \"JsonWebKey2020\",\n *  controller   : \"did:example:123\",\n *  publicKeyJwk : { ... }\n * };\n *\n * if (isDidVerificationMethod(resource)) {\n *   console.log('The resource is a DidVerificationMethod');\n * } else {\n *   console.log('The resource is not a DidVerificationMethod');\n * }\n * ```\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a `DidVerificationMethod`; otherwise, `false`.\n */\nexport function isDidVerificationMethod(obj: unknown): obj is DidVerificationMethod {\n  // Validate that the given value is an object.\n  if (!obj || typeof obj !== 'object' || obj === null) return false;\n\n  // Validate that the object has the necessary properties of a DidVerificationMethod.\n  if (!('id' in obj && 'type' in obj && 'controller' in obj)) return false;\n\n  if (typeof obj.id !== 'string') return false;\n  if (typeof obj.type !== 'string') return false;\n  if (typeof obj.controller !== 'string') return false;\n\n  return true;\n}\n\n/**\n * Converts a cryptographic key to a multibase identifier.\n *\n * @remarks\n * This method provides a way to represent a cryptographic key as a multibase identifier.\n * It takes a `Uint8Array` representing the key, and either the multicodec code or multicodec name\n * as input. The method first adds the multicodec prefix to the key, then encodes it into Base58\n * format. Finally, it converts the Base58 encoded key into a multibase identifier.\n *\n * @example\n * ```ts\n * const key = new Uint8Array([...]); // Cryptographic key as Uint8Array\n * const multibaseId = keyBytesToMultibaseId({ key, multicodecName: 'ed25519-pub' });\n * ```\n *\n * @param params - The parameters for the conversion.\n * @returns The multibase identifier as a string.\n */\nexport function keyBytesToMultibaseId({ keyBytes, multicodecCode, multicodecName }:\n  RequireOnly<KeyWithMulticodec, 'keyBytes'>\n): string {\n  const prefixedKey = Multicodec.addPrefix({\n    code : multicodecCode,\n    data : keyBytes,\n    name : multicodecName\n  });\n  const prefixedKeyB58 = Convert.uint8Array(prefixedKey).toBase58Btc();\n  const multibaseKeyId = Convert.base58Btc(prefixedKeyB58).toMultibase();\n\n  return multibaseKeyId;\n}\n\n/**\n * Converts a multibase identifier to a cryptographic key.\n *\n * @remarks\n * This function decodes a multibase identifier back into a cryptographic key. It first decodes the\n * identifier from multibase format into Base58 format, and then converts it into a `Uint8Array`.\n * Afterward, it removes the multicodec prefix, extracting the raw key data along with the\n * multicodec code and name.\n *\n * @example\n * ```ts\n * const multibaseKeyId = '...'; // Multibase identifier of the key\n * const { key, multicodecCode, multicodecName } = multibaseIdToKey({ multibaseKeyId });\n * ```\n *\n * @param params - The parameters for the conversion.\n * @param params.multibaseKeyId - The multibase identifier string of the key.\n * @returns An object containing the key as a `Uint8Array` and its multicodec code and name.\n * @throws `DidError` if the multibase identifier is invalid.\n */\nexport function multibaseIdToKeyBytes({ multibaseKeyId }: {\n  multibaseKeyId: string\n}): Required<KeyWithMulticodec> {\n  try {\n    const prefixedKeyB58 = Convert.multibase(multibaseKeyId).toBase58Btc();\n    const prefixedKey = Convert.base58Btc(prefixedKeyB58).toUint8Array();\n    const { code, data, name } = Multicodec.removePrefix({ prefixedData: prefixedKey });\n\n    return { keyBytes: data, multicodecCode: code, multicodecName: name };\n  } catch (error: any) {\n    throw new DidError(DidErrorCode.InvalidDid, `Invalid multibase identifier: ${multibaseKeyId}`);\n  }\n}", "import type {\n  Jwk,\n  Signer,\n  CryptoApi,\n  KeyIdentifier,\n  EnclosedSignParams,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  EnclosedVerifyParams,\n} from '@web5/crypto';\n\nimport { LocalKeyManager, utils as cryptoUtils } from '@web5/crypto';\n\nimport type { DidDocument } from './types/did-core.js';\nimport type { DidMetadata, PortableDid } from './types/portable-did.js';\n\nimport { DidError, DidErrorCode } from './did-error.js';\nimport { extractDidFragment, getVerificationMethods } from './utils.js';\n\n/**\n * A `BearerDidSigner` extends the {@link Signer} interface to include specific properties for\n * signing with a Decentralized Identifier (DID). It encapsulates the algorithm and key identifier,\n * which are often needed when signing JWTs, JWSs, JWEs, and other data structures.\n *\n * Typically, the algorithm and key identifier are used to populate the `alg` and `kid` fields of a\n * JWT or JWS header.\n */\nexport interface BearerDidSigner extends Signer {\n  /**\n   * The cryptographic algorithm identifier used for signing operations.\n   *\n   * Typically, this value is used to populate the `alg` field of a JWT or JWS header. The\n   * registered algorithm names are defined in the\n   * {@link https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms | IANA JSON Web Signature and Encryption Algorithms registry}.\n   *\n   * @example\n   * \"ES256\" // ECDSA using P-256 and SHA-256\n   */\n  algorithm: string;\n\n  /**\n   * The unique identifier of the key within the DID document that is used for signing and\n   * verification operations.\n   *\n   * This identifier must be a DID URI with a fragment (e.g., did:method:123#key-0) that references\n   * a specific verification method in the DID document. It allows users of a `BearerDidSigner` to\n   * determine the DID and key that will be used for signing and verification operations.\n   *\n   * @example\n   * \"did:dht:123#key-1\" // A fragment identifier referring to a key in the DID document\n   */\n  keyId: string;\n}\n\n/**\n * Represents a Decentralized Identifier (DID) along with its DID document, key manager, metadata,\n * and convenience functions.\n */\nexport class BearerDid {\n  /** {@inheritDoc Did#uri} */\n  uri: string;\n\n  /**\n   * The DID document associated with this DID.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  document: DidDocument;\n\n  /** {@inheritDoc DidMetadata} */\n  metadata: DidMetadata;\n\n  /**\n   * Key Management System (KMS) used to manage the DIDs keys and sign data.\n   *\n   * Each DID method requires at least one key be present in the provided `keyManager`.\n   */\n  keyManager: CryptoApi;\n\n  constructor({ uri, document, metadata, keyManager }: {\n    uri: string,\n    document: DidDocument,\n    metadata: DidMetadata,\n    keyManager: CryptoApi\n  }) {\n    this.uri = uri;\n    this.document = document;\n    this.metadata = metadata;\n    this.keyManager = keyManager;\n  }\n\n  /**\n   * Converts a `BearerDid` object to a portable format containing the URI and verification methods\n   * associated with the DID.\n   *\n   * This method is useful when you need to represent the key material and metadata associated with\n   * a DID in format that can be used independently of the specific DID method implementation. It\n   * extracts both public and private keys from the DID's key manager and organizes them into a\n   * `PortableDid` structure.\n   *\n   * @remarks\n   * If the DID's key manager does not allow private keys to be exported, the `PortableDid` returned\n   * will not contain a `privateKeys` property. This enables the importing and exporting DIDs that\n   * use the same underlying KMS even if the KMS does not support exporting private keys. Examples\n   * include hardware security modules (HSMs) and cloud-based KMS services like AWS KMS.\n   *\n   * If the DID's key manager does support exporting private keys, the resulting `PortableDid` will\n   * include a `privateKeys` property which contains the same number of entries as there are\n   * verification methods as the DID document, each with its associated private key and the\n   * purpose(s) for which the key can be used (e.g., `authentication`, `assertionMethod`, etc.).\n   *\n   * @example\n   * ```ts\n   * // Assuming `did` is an instance of BearerDid\n   * const portableDid = await did.export();\n   * // portableDid now contains the DID URI, document, metadata, and optionally, private keys.\n   * ```\n   *\n   * @returns A `PortableDid` containing the URI, DID document, metadata, and optionally private\n   *          keys associated with the `BearerDid`.\n   * @throws An error if the DID document does not contain any verification methods or the keys for\n   *         any verification method are missing in the key manager.\n   */\n  public async export(): Promise<PortableDid> {\n    // Verify the DID document contains at least one verification method.\n    if (!(Array.isArray(this.document.verificationMethod) && this.document.verificationMethod.length > 0)) {\n      throw new Error(`DID document for '${this.uri}' is missing verification methods`);\n    }\n\n    // Create a new `PortableDid` object to store the exported data.\n    let portableDid: PortableDid = {\n      uri      : this.uri,\n      document : this.document,\n      metadata : this.metadata\n    };\n\n    // If the BearerDid's key manager supports exporting private keys, add them to the portable DID.\n    if ('exportKey' in this.keyManager && typeof this.keyManager.exportKey === 'function') {\n      const privateKeys: Jwk[] = [];\n      for (let vm of this.document.verificationMethod) {\n        if (!vm.publicKeyJwk) {\n          throw new Error(`Verification method '${vm.id}' does not contain a public key in JWK format`);\n        }\n\n        // Compute the key URI of the verification method's public key.\n        const keyUri = await this.keyManager.getKeyUri({ key: vm.publicKeyJwk });\n\n        // Retrieve the private key from the key manager.\n        const privateKey = await this.keyManager.exportKey({ keyUri }) as Jwk;\n\n        // Add the verification method to the key set.\n        privateKeys.push({ ...privateKey });\n      }\n      portableDid.privateKeys = privateKeys;\n    }\n\n    return portableDid;\n  }\n\n  /**\n   * Return a {@link Signer} that can be used to sign messages, credentials, or arbitrary data.\n   *\n   * If given, the `methodId` parameter is used to select a key from the verification methods\n   * present in the DID Document.\n   *\n   * If `methodID` is not given, the first verification method intended for signing claims is used.\n   *\n   * @param params - The parameters for the `getSigner` operation.\n   * @param params.methodId - ID of the verification method key that will be used for sign and\n   *                          verify operations. Optional.\n   * @returns An instantiated {@link Signer} that can be used to sign and verify data.\n   */\n  public async getSigner(params?: { methodId: string }): Promise<BearerDidSigner> {\n    // Attempt to find a verification method that matches the given method ID, or if not given,\n    // find the first verification method intended for signing claims.\n    const verificationMethod = this.document.verificationMethod?.find(\n      vm => extractDidFragment(vm.id) === (extractDidFragment(params?.methodId) ?? extractDidFragment(this.document.assertionMethod?.[0]))\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    // Compute the expected key URI of the signing key.\n    const keyUri = await this.keyManager.getKeyUri({ key: verificationMethod.publicKeyJwk });\n\n    // Get the public key to be used for verify operations, which also verifies that the key is\n    // present in the key manager's store.\n    const publicKey = await this.keyManager.getPublicKey({ keyUri });\n\n    // Bind the DID's key manager to the signer.\n    const keyManager = this.keyManager;\n\n    // Determine the signing algorithm.\n    const algorithm = cryptoUtils.getJoseSignatureAlgorithmFromPublicKey(publicKey);\n\n    return {\n      algorithm : algorithm,\n      keyId     : verificationMethod.id,\n\n      async sign({ data }: EnclosedSignParams): Promise<Uint8Array> {\n        const signature = await keyManager.sign({ data, keyUri: keyUri! }); // `keyUri` is guaranteed to be defined at this point.\n        return signature;\n      },\n\n      async verify({ data, signature }: EnclosedVerifyParams): Promise<boolean> {\n        const isValid = await keyManager.verify({ data, key: publicKey!, signature }); // `publicKey` is guaranteed to be defined at this point.\n        return isValid;\n      }\n    };\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await BearerDid.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the PortableDid document does not contain any verification methods or the\n   *         keys for any verification method are missing in the key manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Get all verification methods from the given DID document, including embedded methods.\n    const verificationMethods = getVerificationMethods({ didDocument: portableDid.document });\n\n    // Validate that the DID document contains at least one verification method.\n    if (verificationMethods.length === 0) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `At least one verification method is required but 0 were given`);\n    }\n\n    // If given, import the private key material into the key manager.\n    for (let key of portableDid.privateKeys ?? []) {\n      await keyManager.importKey({ key });\n    }\n\n    // Validate that the key material for every verification method in the DID document is present\n    // in the key manager.\n    for (let vm of verificationMethods) {\n      if (!vm.publicKeyJwk) {\n        throw new Error(`Verification method '${vm.id}' does not contain a public key in JWK format`);\n      }\n\n      // Compute the key URI of the verification method's public key.\n      const keyUri = await keyManager.getKeyUri({ key: vm.publicKeyJwk });\n\n      // Verify that the key is present in the key manager. If not, an error is thrown.\n      await keyManager.getPublicKey({ keyUri });\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = new BearerDid({\n      uri      : portableDid.uri,\n      document : portableDid.document,\n      metadata : portableDid.metadata,\n      keyManager\n    });\n\n    return did;\n  }\n}", "import type {\n  CryptoApi,\n  LocalKeyManager,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport type { BearerDid } from '../bearer-did.js';\nimport type { DidMetadata } from '../types/portable-did.js';\nimport type {\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { DidVerificationRelationship } from '../types/did-core.js';\n\n/**\n * Represents options during the creation of a Decentralized Identifier (DID).\n *\n * Implementations of this interface may contain properties and methods that provide specific\n * options or metadata during the DID creation processes following specific DID method\n * specifications.\n */\nexport interface DidCreateOptions<TKms> {\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Options for additional verification methods added to the DID Document during the creation of a\n * new Decentralized Identifier (DID).\n */\nexport interface DidCreateVerificationMethod<TKms> extends Pick<Partial<DidVerificationMethod>, 'controller' | 'id' | 'type'> {\n  /**\n   * The name of the cryptographic algorithm to be used for key generation.\n   *\n   * Examples might include `Ed25519` and `ES256K` but will vary depending on the DID method\n   * specification and the key management system in use.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidCreateVerificationMethod = {\n   *   algorithm: 'Ed25519'\n   * };\n   * ```\n   */\n  algorithm: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Optionally specify the purposes for which a verification method is intended to be used in a DID\n   * document.\n   *\n   * The `purposes` property defines the specific\n   * {@link DidVerificationRelationship | verification relationships} between the DID subject and\n   * the verification method. This enables the verification method to be utilized for distinct\n   * actions such as authentication, assertion, key agreement, capability delegation, and others. It\n   * is important for verifiers to recognize that a verification method must be associated with the\n   * relevant purpose in the DID document to be valid for that specific use case.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidCreateVerificationMethod = {\n   *   algorithm: 'Ed25519',\n   *   controller: 'did:example:1234',\n   *   purposes: ['authentication', 'assertionMethod']\n   * };\n   * ```\n   */\n  purposes?: (DidVerificationRelationship | keyof typeof DidVerificationRelationship)[];\n}\n\n/**\n * Defines the API for a specific DID method. It includes functionalities for creating and resolving\n * DIDs.\n *\n * @typeparam T - The type of the DID instance associated with this method.\n * @typeparam O - The type of the options used for creating the DID.\n */\nexport interface DidMethodApi<\n    TKms extends CryptoApi | undefined = CryptoApi,\n    TDid extends BearerDid = BearerDid,\n    TOptions extends DidCreateOptions<TKms> = DidCreateOptions<TKms>\n  > extends DidMethodResolver {\n  /**\n   * The name of the DID method.\n   *\n   * For example, in the DID `did:example:123456`, \"example\" would be the method name.\n   */\n  methodName: string;\n\n  new (): DidMethod;\n\n  /**\n   * Creates a new DID.\n   *\n   * This function should generate a new DID in accordance with the DID method specification being\n   * implemented, using the provided `keyManager`, and optionally, any provided `options`.\n   *\n   * @param params - The parameters used to create the DID.\n   * @param params.keyManager - Optional. The cryptographic API used for key management.\n   * @param params.options - Optional. The options used for creating the DID.\n   * @returns A promise that resolves to the newly created DID instance.\n   */\n  create(params: {\n    keyManager?: TKms;\n    options?: TOptions;\n  }): Promise<TDid>;\n\n  /**\n   * Given a DID Document, return the verification method that will be used for signing messages and\n   * credentials.\n   *\n   * If given, the `methodId` parameter is used to select the verification method. If not given, a\n   * DID method specific approach is taken to selecting the verification method to return.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns A promise that resolves to the erification method to use for signing.\n   */\n  getSigningMethod(params: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod>;\n}\n\n/**\n * Defines the interface for resolving a DID using a specific DID method.\n *\n * A DID resolver takes a DID URI as input and returns a {@link DidResolutionResult} object.\n *\n * @property {string} methodName - The name of the DID method.\n * @method resolve - Asynchronous method to resolve a DID URI. Takes the DID URI and optional resolution options.\n */\nexport interface DidMethodResolver {\n  /**\n   * The name of the DID method.\n   *\n   * For example, in the DID `did:example:123456`, \"example\" would be the method name.\n   */\n  methodName: string;\n\n  new (): DidMethod;\n\n  /**\n   * Resolves a DID URI.\n   *\n   * This function should resolve the DID URI in accordance with the DID method specification being\n   * implemented, using the provided `options`.\n   *\n   * @param didUri - The DID URI to be resolved.\n   * @param options - Optional. The options used for resolving the DID.\n   * @returns A {@link DidResolutionResult} object containing the DID document and metadata or an error.\n   */\n  resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult>;\n}\n\n/**\n * Represents the result of a Decentralized Identifier (DID) registration operation.\n *\n * This type encapsulates the complete outcome of registering a DID, including the registration\n * metadata, the DID document (if registration is successful), and metadata about the DID document.\n */\nexport interface DidRegistrationResult {\n  /**\n   * The DID document resulting from the registration process, if successful.\n   *\n   * If the registration operation was successful, this MUST contain a DID document\n   * corresponding to the DID. If the registration is unsuccessful, this value MUST be empty.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  didDocument: DidDocument | null;\n\n  /**\n   * Metadata about the DID Document.\n   *\n   * This structure contains information about the DID Document like creation and update timestamps,\n   * deactivation status, versioning information, and other details relevant to the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocumentmetadata | DID Core Specification, § DID Document Metadata}\n   */\n  didDocumentMetadata: DidMetadata;\n\n  /**\n   * A metadata structure consisting of values relating to the results of the DID registration\n   * process.\n   *\n   * This structure is REQUIRED, and in the case of an error in the registration process,\n   * this MUST NOT be empty. If the registration is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   */\n  didRegistrationMetadata: DidRegistrationMetadata;\n}\n\n/**\n * Represents metadata related to the result of a DID registration operation.\n *\n * This type includes fields that provide information about the outcome of a DID registration\n * process (e.g., create, update, deactivate), including any errors that occurred.\n *\n * This metadata typically changes between invocations of the `create`, `update`, and `deactivate`\n * functions, as it represents data about the registration process itself.\n */\nexport type DidRegistrationMetadata = {\n  /**\n   * An error code indicating issues encountered during the DID registration process.\n   *\n   * While the DID Core specification does not define a specific set of error codes for the result\n   * returned by the `create`, `update`, or `deactivate` functions, it is recommended to use the\n   * error codes defined in the DID Specification Registries for\n   * {@link https://www.w3.org/TR/did-spec-registries/#error | DID Resolution Metadata }.\n   *\n   * Recommended error codes include:\n   *   - `internalError`: An unexpected error occurred during DID registration process.\n   *   - `invalidDid`: The provided DID is invalid.\n   *   - `invalidDidDocument`: The provided DID document does not conform to valid syntax.\n   *   - `invalidDidDocumentLength`: The byte length of the provided DID document does not match the expected value.\n   *   - `invalidSignature`: Verification of a signature failed.\n   *   - `methodNotSupported`: The DID method specified is not supported.\n   *   - Custom error codes can also be provided as strings.\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID registration.\n  [key: string]: any;\n};\n\n/**\n * Base abstraction for all Decentralized Identifier (DID) method implementations.\n *\n * This base class serves as a foundational structure upon which specific DID methods\n * can be implemented. Subclasses should furnish particular method and data models adherent\n * to various DID methods, taking care to adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core specification} and the\n * respective DID method specifications.\n */\nexport class DidMethod {\n  /**\n   * MUST be implemented by all DID method implementations that extend {@link DidMethod}.\n   *\n   * Given the W3C DID Document of a DID, return the verification method that will be used for\n   * signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, each DID method implementation will select a default\n   * verification method from the DID Document.\n   *\n   * @param _params - The parameters for the `getSigningMethod` operation.\n   * @param _params.didDocument - DID Document to get the verification method from.\n   * @param _params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod(_params: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod | undefined> {\n    throw new Error(`Not implemented: Classes extending DidMethod must implement getSigningMethod()`);\n  }\n\n  /**\n   * MUST be implemented by all DID method implementations that extend {@link DidMethod}.\n   *\n   * Resolves a DID URI to a DID Document.\n   *\n   * @param _didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(_didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    throw new Error(`Not implemented: Classes extending DidMethod must implement resolve()`);\n  }\n}", "import type { Packet, TxtAnswer, TxtData } from '@dnsquery/dns-packet';\nimport type {\n  Jwk,\n  Signer,\n  CryptoApi,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  AsymmetricKeyConverter,\n} from '@web5/crypto';\n\nimport bencode from 'bencode';\nimport { Convert } from '@web5/common';\nimport { computeJwkThumbprint, Ed25519, LocalKeyManager, Secp256k1, Secp256r1 } from '@web5/crypto';\nimport { AUTHORITATIVE_ANSWER, decode as dnsPacketDecode, encode as dnsPacketEncode } from '@dnsquery/dns-packet';\n\nimport type { DidMetadata, PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod, DidRegistrationResult } from './did-method.js';\nimport type {\n  DidService,\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { extractDidFragment } from '../utils.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { DidVerificationRelationship } from '../types/did-core.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Represents a BEP44 message, which is used for storing and retrieving data in the Mainline DHT\n * network.\n *\n * A BEP44 message is used primarily in the context of the DID DHT method for publishing and\n * resolving DID documents in the DHT network. This type encapsulates the data structure required\n * for such operations in accordance with BEP44.\n *\n * @see {@link https://www.bittorrent.org/beps/bep_0044.html | BEP44}\n */\nexport interface Bep44Message {\n  /**\n   * The public key bytes of the Identity Key, which serves as the identifier in the DHT network for\n   * the corresponding BEP44 message.\n   */\n  k: Uint8Array;\n\n  /**\n   * The sequence number of the message, used to ensure the latest version of the data is retrieved\n   * and updated. It's a monotonically increasing number.\n   */\n  seq: number;\n\n  /**\n   * The signature of the message, ensuring the authenticity and integrity of the data. It's\n   * computed over the bencoded sequence number and value.\n   */\n  sig: Uint8Array;\n\n  /**\n   * The actual data being stored or retrieved from the DHT network, typically encoded in a format\n   * suitable for DNS packet representation of a DID Document.\n   */\n  v: Uint8Array;\n}\n\n/**\n * Options for creating a Decentralized Identifier (DID) using the DID DHT method.\n */\nexport interface DidDhtCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify that the DID Subject is also identified by one or more other DIDs or URIs.\n   *\n   * A DID subject can have multiple identifiers for different purposes, or at different times.\n   * The assertion that two or more DIDs (or other types of URI) refer to the same DID subject can\n   * be made using the `alsoKnownAs` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#also-known-as | DID Core Specification, § Also Known As}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   alsoKnownAs: 'did:example:123'\n   * };\n   * ```\n   */\n  alsoKnownAs?: string[];\n\n  /**\n   * Optionally specify which DID (or DIDs) is authorized to make changes to the DID document.\n   *\n   * A DID controller is an entity that is authorized to make changes to a DID document. Typically,\n   * only the DID Subject (i.e., the value of `id` property in the DID document) is authoritative.\n   * However, another DID (or DIDs) can be specified as the DID controller, and when doing so, any\n   * verification methods contained in the DID document for the other DID should be accepted as\n   * authoritative. In other words, proofs created by the controller DID should be considered\n   * equivalent to proofs created by the DID Subject.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-controller | DID Core Specification, § DID Controller}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   controller: 'did:example:123'\n   * };\n   * ```\n   */\n  controllers?: string | string[];\n\n  /**\n   * Optional. The URI of a server involved in executing DID method operations. In the context of\n   * DID creation, the endpoint is expected to be a DID DHT Gateway or Pkarr relay. If not\n   * specified, a default gateway node is used.\n   */\n  gatewayUri?: string;\n\n  /**\n   * Optional. Determines whether the created DID should be published to the DHT network.\n   *\n   * If set to `true` or omitted, the DID is publicly discoverable. If `false`, the DID is not\n   * published and cannot be resolved by others. By default, newly created DIDs are published.\n   *\n   * @see {@link https://did-dht.com | DID DHT Method Specification}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   publish: false\n   * };\n   * ```\n   */\n  publish?: boolean;\n\n  /**\n   * Optional. An array of service endpoints associated with the DID.\n   *\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   services: [\n   *     {\n   *       id: 'did:dht:i9xkp8ddcbcg8jwq54ox699wuzxyifsqx4jru45zodqu453ksz6y#dwn',\n   *       type: 'DecentralizedWebNode',\n   *       serviceEndpoint: ['https://example.com/dwn1', 'https://example/dwn2']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  services?: DidService[];\n\n  /**\n   * Optionally specify one or more registered DID DHT types to make the DID discovereable.\n   *\n   * Type indexing is an OPTIONAL feature that enables DIDs to become discoverable. DIDs that wish\n   * to be discoverable and resolveable by type can include one or more types when publishing their\n   * DID document to a DID DHT Gateway.\n   *\n   * The registered DID types are published in the {@link https://did-dht.com/registry/index.html#indexed-types | DID DHT Registry}.\n   */\n  types?: (DidDhtRegisteredDidType | keyof typeof DidDhtRegisteredDidType)[];\n\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   *\n   * By default, a newly created DID DHT document will contain a single Ed25519 verification method,\n   * also known as the {@link https://did-dht.com/#term:identity-key | Identity Key}. Additional\n   * verification methods can be added to the DID document using the `verificationMethods` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   verificationMethods: [\n   *     {\n   *       algorithm: 'Ed25519',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     },\n   *     {\n   *       algorithm: 'Ed25519',\n   *       id: 'dwn-sig',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * The default DID DHT Gateway or Pkarr Relay server to use when publishing and resolving DID\n * documents.\n */\nconst DEFAULT_GATEWAY_URI = 'https://diddht.tbddev.org';\n\n/**\n * The version of the DID DHT specification that is implemented by this library.\n *\n * When a DID DHT document is published to the DHT network, the version of the specification that\n * was used to create the document is included in the DNS TXT record for the root record. This\n * allows clients to determine whether the DID DHT document is compatible with the client's\n * implementation of the DID DHT specification. The version number is not present in the\n * corresponding DID document.\n *\n * @see {@link https://did-dht.com | DID DHT Method Specification}\n */\nconst DID_DHT_SPECIFICATION_VERSION = 0;\n\n/**\n * The default TTL for DNS records published to the DHT network.\n *\n * The recommended TTL value is 7200 seconds (2 hours) since it matches the default TTL for\n * Mainline DHT records.\n */\nconst DNS_RECORD_TTL = 7200;\n\n/**\n * Character used to separate distinct elements or entries in the DNS packet representation\n * of a DID Document.\n *\n * For example, verification methods, verification relationships, and services are separated by\n * semicolons (`;`) in the root record:\n * ```\n * vm=k1;auth=k1;asm=k2;inv=k3;del=k3;srv=s1\n * ```\n */\nconst PROPERTY_SEPARATOR = ';';\n\n/**\n * Character used to separate distinct values within a single element or entry in the DNS packet\n * representation of a DID Document.\n *\n * For example, multiple key references for the `authentication` verification relationships are\n * separated by commas (`,`):\n * ```\n * auth=0,1,2\n * ```\n */\nconst VALUE_SEPARATOR = ',';\n\n/**\n * Represents an optional extension to a DID Document’s DNS packet representation exposed as a\n * type index.\n *\n * Type indexing is an OPTIONAL feature that enables DIDs to become discoverable. DIDs that wish to\n * be discoverable and resolveable by type can include one or more types when publishing their DID\n * document to a DID DHT Gateway.\n *\n * The registered DID types are published in the {@link https://did-dht.com/registry/index.html#indexed-types | DID DHT Registry}.\n */\nexport enum DidDhtRegisteredDidType {\n  /**\n   * Type 0 is reserved for DIDs that do not wish to associate themselves with a specific type but\n   * wish to make themselves discoverable.\n   */\n  Discoverable = 0,\n\n  /**\n   * Organization\n   * @see {@link https://schema.org/Organization | schema definition}\n   */\n  Organization = 1,\n\n  /**\n   * Government Organization\n   * @see {@link https://schema.org/GovernmentOrganization | schema definition}\n   */\n  Government = 2,\n\n  /**\n   * Corporation\n   * @see {@link https://schema.org/Corporation | schema definition}\n   */\n  Corporation = 3,\n\n  /**\n   * Corporation\n   * @see {@link https://schema.org/Corporation | schema definition}\n   */\n  LocalBusiness = 4,\n\n  /**\n   * Software Package\n   * @see {@link https://schema.org/SoftwareSourceCode | schema definition}\n   */\n  SoftwarePackage = 5,\n\n  /**\n   * Web App\n   * @see {@link https://schema.org/WebApplication | schema definition}\n   */\n  WebApp = 6,\n\n  /**\n   * Financial Institution\n   * @see {@link https://schema.org/FinancialService | schema definition}\n   */\n  FinancialInstitution = 7\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID DHT document.\n *\n * The DID DHT method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption. The registered key types are published in the DID DHT Registry and each is\n * assigned a unique numerical value for use by client and gateway implementations.\n *\n * The registered key types are published in the {@link https://did-dht.com/registry/index.html#key-type-index | DID DHT Registry}.\n */\nexport enum DidDhtRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519   = 0,\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 1,\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 2\n}\n\n/**\n * Maps {@link https://www.w3.org/TR/did-core/#verification-relationships | DID Core Verification Relationship}\n * values to the corresponding record name in the DNS packet representation of a DHT DID document.\n */\nexport enum DidDhtVerificationRelationship {\n  /**\n   * Specifies how the DID subject is expected to be authenticated.\n   */\n  authentication = 'auth',\n\n  /**\n   * Specifies how the DID subject is expected to express claims, such as for issuing Verifiable\n   * Credentials.\n   */\n  assertionMethod = 'asm',\n\n  /**\n   * Specifies a mechanism used by the DID subject to delegate a cryptographic capability to another\n   * party\n   */\n  capabilityDelegation = 'del',\n\n  /**\n   * Specifies a verification method used by the DID subject to invoke a cryptographic capability.\n   */\n  capabilityInvocation = 'inv',\n\n  /**\n   * Specifies how an entity can generate encryption material to communicate confidentially with the\n   * DID subject.\n   */\n  keyAgreement = 'agm'\n}\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID DHT\n * {@link DidDhtRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidDhtRegisteredKeyType.Ed25519,\n  ES256K    : DidDhtRegisteredKeyType.secp256k1,\n  ES256     : DidDhtRegisteredKeyType.secp256r1,\n  'P-256'   : DidDhtRegisteredKeyType.secp256r1,\n  secp256k1 : DidDhtRegisteredKeyType.secp256k1,\n  secp256r1 : DidDhtRegisteredKeyType.secp256r1\n} as const;\n\n/**\n * The `DidDht` class provides an implementation of the `did:dht` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:dht` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method keys or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:dht` to its corresponding DID Document stored in the DHT network.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:dht` method leverages the distributed nature of the Mainline DHT network for\n * decentralized identity management. This method allows DIDs to be resolved without relying on\n * centralized registries or ledgers, enhancing privacy and control for users. The DID Document is\n * stored and retrieved from the DHT network, and the method includes optional mechanisms for\n * discovering DIDs by type.\n *\n * The DID URI in the `did:dht` method includes a method-specific identifier called the Identity Key\n * which corresponds to the DID's entry in the DHT network. The Identity Key required to make\n * changes to the DID Document since Mainline DHT nodes validate the signature of each message\n * before storing the value in the DHT.\n *\n * @see {@link https://did-dht.com | DID DHT Method Specification}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidDht.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidDht.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidDht.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidDht.import(portableDid);\n * ```\n */\nexport class DidDht extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID DHT specification.\n   */\n  public static methodName = 'dht';\n\n  /**\n   * Creates a new DID using the `did:dht` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by z-base-32 encoding the Identity Key public key and prefixing with\n   * `did:dht:`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated which serves as the\n   *   Identity Key.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidDht.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidDht.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidDhtCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that the algorithm for any given verification method is supported by the\n    // DID DHT specification.\n    if (options.verificationMethods?.some(vm => !(vm.algorithm in AlgorithmToKeyTypeMap))) {\n      throw new Error('One or more verification method algorithms are not supported');\n    }\n\n    // Check 2: Validate that the ID for any given verification method is unique.\n    const methodIds = options.verificationMethods?.filter(vm => 'id' in vm).map(vm => vm.id);\n    if (methodIds && methodIds.length !== new Set(methodIds).size) {\n      throw new Error('One or more verification method IDs are not unique');\n    }\n\n    // Check 3: Validate that the required properties for any given services are present.\n    if (options.services?.some(s => !s.id || !s.type || !s.serviceEndpoint)) {\n      throw new Error('One or more services are missing required properties');\n    }\n\n    // Generate random key material for the Identity Key.\n    const identityKeyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n    const identityKey = await keyManager.getPublicKey({ keyUri: identityKeyUri });\n\n    // Compute the DID URI from the Identity Key.\n    const didUri = await DidDhtUtils.identityKeyToIdentifier({ identityKey });\n\n    // Begin constructing the DID Document.\n    const document: DidDocument = {\n      id: didUri,\n      ...options.alsoKnownAs && { alsoKnownAs: options.alsoKnownAs },\n      ...options.controllers && { controller: options.controllers }\n    };\n\n    // If the given verification methods do not contain an Identity Key, add one.\n    const verificationMethodsToAdd = [...options.verificationMethods ?? []];\n    if (!verificationMethodsToAdd?.some(vm => vm.id?.split('#').pop() === '0')) {\n      // Add the Identity Key to the beginning of the key set.\n      verificationMethodsToAdd.unshift({\n        algorithm : 'Ed25519' as any,\n        id        : '0',\n        purposes  : ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n      });\n    }\n\n    // Generate random key material for the Identity Key and any additional verification methods.\n    // Add verification methods to the DID document.\n    for (const vm of verificationMethodsToAdd) {\n      // Generate a random key for the verification method, or if its the Identity Key's\n      // verification method (`id` is 0) use the key previously generated.\n      const keyUri = (vm.id && vm.id.split('#').pop() === '0')\n        ? identityKeyUri\n        : await keyManager.generateKey({ algorithm: vm.algorithm });\n\n      const publicKey = await keyManager.getPublicKey({ keyUri });\n\n      // Use the given ID, the key's ID, or the key's thumbprint as the verification method ID.\n      let methodId = vm.id ?? publicKey.kid ?? await computeJwkThumbprint({ jwk: publicKey });\n      methodId = `${didUri}#${extractDidFragment(methodId)}`; // Remove fragment prefix, if any.\n\n      // Initialize the `verificationMethod` array if it does not already exist.\n      document.verificationMethod ??= [];\n\n      // Add the verification method to the DID document.\n      document.verificationMethod.push({\n        id           : methodId,\n        type         : 'JsonWebKey',\n        controller   : vm.controller ?? didUri,\n        publicKeyJwk : publicKey,\n      });\n\n      // Add the verification method to the specified purpose properties of the DID document.\n      for (const purpose of vm.purposes ?? []) {\n        // Initialize the purpose property if it does not already exist.\n        if (!document[purpose]) document[purpose] = [];\n        // Add the verification method to the purpose property.\n        document[purpose]!.push(methodId);\n      }\n    }\n\n    // Add services, if any, to the DID document.\n    options.services?.forEach(service => {\n      document.service ??= [];\n      service.id = `${didUri}#${service.id.split('#').pop()}`; // Remove fragment prefix, if any.\n      document.service.push(service);\n    });\n\n    // Create the BearerDid object, including the registered DID types (if any), and specify that\n    // the DID has not yet been published.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {\n        published: false,\n        ...options.types && { types: options.types }\n      },\n      keyManager\n    });\n\n    // By default, publish the DID document to a DHT Gateway unless explicitly disabled.\n    if (options.publish ?? true) {\n      const registrationResult = await DidDht.publish({ did, gatewayUri: options.gatewayUri });\n      did.metadata = registrationResult.didDocumentMetadata;\n    }\n\n    return did;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID DHT method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidDht.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the PortableDid document does not contain any verification methods, lacks\n   *         an Identity Key, or the keys for any verification method are missing in the key\n   *         manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidDht.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given verification methods contain an Identity Key.\n    if (!did.document.verificationMethod?.some(vm => vm.id?.split('#').pop() === '0')) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain an Identity Key`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:dht` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the Identity Key's verification method with an ID fragment\n   * of '#0' is used.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument, methodId = '#0' }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to find a verification method that matches the given method ID, or if not given,\n    // find the first verification method intended for signing claims.\n    const verificationMethod = didDocument.verificationMethod?.find(\n      vm => extractDidFragment(vm.id) === (extractDidFragment(methodId) ?? extractDidFragment(didDocument.assertionMethod?.[0]))\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Publishes a DID to the DHT, making it publicly discoverable and resolvable.\n   *\n   * This method handles the publication of a DID Document associated with a `did:dht` DID to the\n   * Mainline DHT network. The publication process involves storing the DID Document in Mainline DHT\n   * via a Pkarr relay server.\n   *\n   * @remarks\n   * - This method is typically invoked automatically during the creation of a new DID unless the\n   *   `publish` option is set to `false`.\n   * - For existing, unpublished DIDs, it can be used to publish the DID Document to Mainline DHT.\n   * - The method relies on the specified Pkarr relay server to interface with the DHT network.\n   *\n   * @example\n   * ```ts\n   * // Generate a new DID and keys but explicitly disable publishing.\n   * const did = await DidDht.create({ options: { publish: false } });\n   * // Publish the DID to the DHT.\n   * const registrationResult = await DidDht.publish({ did });\n   * // `registrationResult.didDocumentMetadata.published` is true if the DID was successfully published.\n   * ```\n   *\n   * @param params - The parameters for the `publish` operation.\n   * @param params.did - The `BearerDid` object representing the DID to be published.\n   * @param params.gatewayUri - Optional. The URI of a server involved in executing DID method\n   *                            operations. In the context of publishing, the endpoint is expected\n   *                            to be a DID DHT Gateway or Pkarr Relay. If not specified, a default\n   *                            gateway node is used.\n   * @returns A promise that resolves to a {@link DidRegistrationResult} object that contains\n   *          the result of registering the DID with a DID DHT Gateway or Pkarr relay.\n   */\n  public static async publish({ did, gatewayUri = DEFAULT_GATEWAY_URI }: {\n    did: BearerDid;\n    gatewayUri?: string;\n  }): Promise<DidRegistrationResult> {\n    const registrationResult = await DidDhtDocument.put({ did, gatewayUri });\n\n    return registrationResult;\n  }\n\n  /**\n   * Resolves a `did:dht` identifier to its corresponding DID document.\n   *\n   * This method performs the resolution of a `did:dht` DID, retrieving its DID Document from the\n   * Mainline DHT network. The process involves querying the DHT network via a Pkarr relay server to\n   * retrieve the DID Document that corresponds to the given DID identifier.\n   *\n   * @remarks\n   * - If a `gatewayUri` option is not specified, a default Pkarr relay is used to access the DHT\n   *   network.\n   * - It decodes the DID identifier and retrieves the associated DID Document and metadata.\n   * - In case of resolution failure, appropriate error information is returned.\n   *\n   * @example\n   * ```ts\n   * const resolutionResult = await DidDht.resolve('did:dht:example');\n   * ```\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of\n   *          the resolution.\n   */\n  public static async resolve(didUri: string, options: DidResolutionOptions = {}): Promise<DidResolutionResult> {\n    // To execute the read method operation, use the given gateway URI or a default.\n    const gatewayUri = options?.gatewayUri ?? DEFAULT_GATEWAY_URI;\n\n    try {\n      // Attempt to decode the z-base-32-encoded identifier.\n      await DidDhtUtils.identifierToIdentityKey({ didUri });\n\n      // Attempt to retrieve the DID document and metadata from the DHT network.\n      const { didDocument, didDocumentMetadata } = await DidDhtDocument.get({ didUri, gatewayUri });\n\n      // If the DID document was retrieved successfully, return it.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n        didDocumentMetadata\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n}\n\n/**\n * The `DidDhtDocument` class provides functionality for interacting with the DID document stored in\n * Mainline DHT in support of DID DHT method create, resolve, update, and deactivate operations.\n *\n * This class includes methods for retrieving and publishing DID documents to and from the DHT,\n * using DNS packet encoding and DID DHT Gateway or Pkarr Relay servers.\n */\nexport class DidDhtDocument {\n  /**\n   * Retrieves a DID document and its metadata from the DHT network.\n   *\n   * @param params - The parameters for the get operation.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object containing the DID\n   *          document and its metadata.\n   */\n  public static async get({ didUri, gatewayUri }: {\n    didUri: string;\n    gatewayUri: string;\n  }): Promise<DidResolutionResult> {\n    // Decode the z-base-32 DID identifier to public key as a byte array.\n    const publicKeyBytes = DidDhtUtils.identifierToIdentityKeyBytes({ didUri });\n\n    // Retrieve the signed BEP44 message from a DID DHT Gateway or Pkarr relay.\n    const bep44Message = await DidDhtDocument.pkarrGet({ gatewayUri, publicKeyBytes });\n\n    // Verify the signature of the BEP44 message and parse the value to a DNS packet.\n    const dnsPacket = await DidDhtUtils.parseBep44GetMessage({ bep44Message });\n\n    // Convert the DNS packet to a DID document and metadata.\n    const resolutionResult = await DidDhtDocument.fromDnsPacket({ didUri, dnsPacket });\n\n    // Set the version ID of the DID document metadata to the sequence number of the BEP44 message.\n    resolutionResult.didDocumentMetadata.versionId = bep44Message.seq.toString();\n\n    return resolutionResult;\n  }\n\n  /**\n   * Publishes a DID document to the DHT network.\n   *\n   * @param params - The parameters to use when publishing the DID document to the DHT network.\n   * @param params.did - The DID object whose DID document will be published.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @returns A promise that resolves to a {@link DidRegistrationResult} object that contains\n   *          the result of registering the DID with a DID DHT Gateway or Pkarr relay.\n   */\n  public static async put({ did, gatewayUri }: {\n    did: BearerDid;\n    gatewayUri: string;\n  }): Promise<DidRegistrationResult> {\n    // Convert the DID document and DID metadata (such as DID types) to a DNS packet.\n    const dnsPacket = await DidDhtDocument.toDnsPacket({\n      didDocument : did.document,\n      didMetadata : did.metadata\n    });\n\n    // Create a signed BEP44 put message from the DNS packet.\n    const bep44Message = await DidDhtUtils.createBep44PutMessage({\n      dnsPacket,\n      publicKeyBytes : DidDhtUtils.identifierToIdentityKeyBytes({ didUri: did.uri }),\n      signer         : await did.getSigner({ methodId: '0' })\n    });\n\n    // Publish the DNS packet to the DHT network.\n    const putResult = await DidDhtDocument.pkarrPut({ gatewayUri, bep44Message });\n\n    // Return the result of processing the PUT operation, including the updated DID metadata with\n    // the version ID and the publishing result.\n    return {\n      didDocument         : did.document,\n      didDocumentMetadata : {\n        ...did.metadata,\n        published : putResult,\n        versionId : bep44Message.seq.toString()\n      },\n      didRegistrationMetadata: {}\n    };\n  }\n\n  /**\n   * Retrieves a signed BEP44 message from a DID DHT Gateway or Pkarr Relay server.\n   *\n   * @see {@link https://github.com/Nuhvi/pkarr/blob/main/design/relays.md | Pkarr Relay design}\n   *\n   * @param params\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @param params.publicKeyBytes - The public key bytes of the Identity Key, z-base-32 encoded.\n   * @returns A promise resolving to a BEP44 message containing the signed DNS packet.\n  */\n  private static async pkarrGet({ gatewayUri, publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n    gatewayUri: string;\n  }): Promise<Bep44Message> {\n    // The identifier (key in the DHT) is the z-base-32 encoding of the Identity Key.\n    const identifier = Convert.uint8Array(publicKeyBytes).toBase32Z();\n\n    // Concatenate the gateway URI with the identifier to form the full URL.\n    const url = new URL(identifier, gatewayUri).href;\n\n    // Transmit the Get request to the DID DHT Gateway or Pkarr Relay and get the response.\n    let response: Response;\n    try {\n      response = await fetch(url, { method: 'GET' });\n\n      if (!response.ok) {\n        throw new DidError(DidErrorCode.NotFound, `Pkarr record not found for: ${identifier}`);\n      }\n\n    } catch (error: any) {\n      if (error instanceof DidError) throw error;\n      throw new DidError(DidErrorCode.InternalError, `Failed to fetch Pkarr record: ${error.message}`);\n    }\n\n    // Read the Fetch Response stream into a byte array.\n    const messageBytes = await response.arrayBuffer();\n\n    if(!messageBytes) {\n      throw new DidError(DidErrorCode.NotFound, `Pkarr record not found for: ${identifier}`);\n    }\n\n    if (messageBytes.byteLength < 72) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `Pkarr response must be at least 72 bytes but got: ${messageBytes.byteLength}`);\n    }\n\n    if (messageBytes.byteLength > 1072) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `Pkarr response exceeds 1000 byte limit: ${messageBytes.byteLength}`);\n    }\n\n    // Decode the BEP44 message from the byte array.\n    const bep44Message: Bep44Message = {\n      k   : publicKeyBytes,\n      seq : Number(new DataView(messageBytes).getBigUint64(64)),\n      sig : new Uint8Array(messageBytes, 0, 64),\n      v   : new Uint8Array(messageBytes, 72)\n    };\n\n    return bep44Message;\n  }\n\n  /**\n   * Publishes a signed BEP44 message to a DID DHT Gateway or Pkarr Relay server.\n   *\n   * @see {@link https://github.com/Nuhvi/pkarr/blob/main/design/relays.md | Pkarr Relay design}\n   *\n   * @param params - The parameters to use when publishing a signed BEP44 message to a Pkarr relay server.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @param params.bep44Message - The BEP44 message to be published, containing the signed DNS packet.\n   * @returns A promise resolving to `true` if the message was successfully published, otherwise `false`.\n   */\n  private static async pkarrPut({ gatewayUri, bep44Message }: {\n    bep44Message: Bep44Message;\n    gatewayUri: string;\n  }): Promise<boolean> {\n    // The identifier (key in the DHT) is the z-base-32 encoding of the Identity Key.\n    const identifier = Convert.uint8Array(bep44Message.k).toBase32Z();\n\n    // Concatenate the gateway URI with the identifier to form the full URL.\n    const url = new URL(identifier, gatewayUri).href;\n\n    // Construct the body of the request according to the Pkarr relay specification.\n    const body = new Uint8Array(bep44Message.v.length + 72);\n    body.set(bep44Message.sig, 0);\n    new DataView(body.buffer).setBigUint64(bep44Message.sig.length, BigInt(bep44Message.seq));\n    body.set(bep44Message.v, bep44Message.sig.length + 8);\n\n    // Transmit the Put request to the Pkarr relay and get the response.\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        method  : 'PUT',\n        headers : { 'Content-Type': 'application/octet-stream' },\n        body\n      });\n\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InternalError, `Failed to put Pkarr record: ${error.message}`);\n    }\n\n    // Return `true` if the DHT request was successful, otherwise return `false`.\n    return response.ok;\n  }\n\n  /**\n   * Converts a DNS packet to a DID document according to the DID DHT specification.\n   *\n   * @see {@link https://did-dht.com/#dids-as-dns-records | DID DHT Specification, § DIDs as DNS Records}\n   *\n   * @param params - The parameters to use when converting a DNS packet to a DID document.\n   * @param params.didUri - The DID URI of the DID document.\n   * @param params.dnsPacket - The DNS packet to convert to a DID document.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object containing the DID\n   *          document and its metadata.\n   */\n  public static async fromDnsPacket({ didUri, dnsPacket }: {\n    didUri: string;\n    dnsPacket: Packet;\n  }): Promise<DidResolutionResult> {\n    // Begin constructing the DID Document.\n    const didDocument: DidDocument = { id: didUri };\n\n    // Since the DID document is being retrieved from the DHT, it is considered published.\n    const didDocumentMetadata: DidMetadata = {\n      published: true\n    };\n\n    const idLookup = new Map<string, string>();\n\n    for (const answer of dnsPacket?.answers ?? []) {\n      // DID DHT properties are ONLY present in DNS TXT records.\n      if (answer.type !== 'TXT') continue;\n\n      // Get the DID DHT record identifier (e.g., k0, aka, did, etc.) from the DNS resource name.\n      const dnsRecordId = answer.name.split('.')[0].substring(1);\n\n      switch (true) {\n        // Process an also known as record.\n        case dnsRecordId.startsWith('aka'): {\n          // Decode the DNS TXT record data value to a string.\n          const data = DidDhtUtils.parseTxtDataToString(answer.data);\n\n          // Add the 'alsoKnownAs' property to the DID document.\n          didDocument.alsoKnownAs = data.split(VALUE_SEPARATOR);\n\n          break;\n        }\n\n        // Process a controller record.\n        case dnsRecordId.startsWith('cnt'): {\n          // Decode the DNS TXT record data value to a string.\n          const data = DidDhtUtils.parseTxtDataToString(answer.data);\n\n          // Add the 'controller' property to the DID document.\n          didDocument.controller = data.includes(VALUE_SEPARATOR) ? data.split(VALUE_SEPARATOR) : data;\n\n          break;\n        }\n\n        // Process verification methods.\n        case dnsRecordId.startsWith('k'): {\n          // Get the method ID fragment (id), key type (t), Base64URL-encoded public key (k), and\n          // optionally, controller (c) from the decoded TXT record data.\n          const { id, t, k, c } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Convert the public key from Base64URL format to a byte array.\n          const publicKeyBytes = Convert.base64Url(k).toUint8Array();\n\n          // Use the key type integer to look up the cryptographic curve name.\n          const namedCurve = DidDhtRegisteredKeyType[Number(t)];\n\n          // Convert the public key from a byte array to JWK format.\n          let publicKey = await DidDhtUtils.keyConverter(namedCurve).bytesToPublicKey({ publicKeyBytes });\n\n          // Initialize the `verificationMethod` array if it does not already exist.\n          didDocument.verificationMethod ??= [];\n\n          // Prepend the DID URI to the ID fragment to form the full verification method ID.\n          const methodId = `${didUri}#${id}`;\n\n          // Add the verification method to the DID document.\n          didDocument.verificationMethod.push({\n            id           : methodId,\n            type         : 'JsonWebKey',\n            controller   : c ?? didUri,\n            publicKeyJwk : publicKey,\n          });\n\n          // Add a mapping from the DNS record ID (e.g., 'k0', 'k1', etc.) to the verification\n          // method ID (e.g., 'did:dht:...#0', etc.).\n          idLookup.set(dnsRecordId, methodId);\n\n          break;\n        }\n\n        // Process services.\n        case dnsRecordId.startsWith('s'): {\n          // Get the service ID fragment (id), type (t), service endpoint (se), and optionally,\n          // other properties from the decoded TXT record data.\n          const { id, t, se, ...customProperties } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // The service endpoint can either be a string or an array of strings.\n          const serviceEndpoint = se.includes(VALUE_SEPARATOR) ? se.split(VALUE_SEPARATOR) : se;\n\n          // Convert custom property values to either a string or an array of strings.\n          const serviceProperties = Object.fromEntries(Object.entries(customProperties).map(\n            ([k, v]) => [k, v.includes(VALUE_SEPARATOR) ? v.split(VALUE_SEPARATOR) : v]\n          ));\n\n          // Initialize the `service` array if it does not already exist.\n          didDocument.service ??= [];\n\n          didDocument.service.push({\n            ...serviceProperties,\n            id   : `${didUri}#${id}`,\n            type : t,\n            serviceEndpoint\n          });\n\n          break;\n        }\n\n        // Process DID DHT types.\n        case dnsRecordId.startsWith('typ'): {\n          // Decode the DNS TXT record data value to an object.\n          const { id: types } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Add the DID DHT Registered DID Types represented as numbers to DID metadata.\n          didDocumentMetadata.types = types.split(VALUE_SEPARATOR).map(typeInteger => Number(typeInteger));\n\n          break;\n        }\n\n        // Process root record.\n        case dnsRecordId.startsWith('did'): {\n          // Helper function that maps verification relationship values to verification method IDs.\n          const recordIdsToMethodIds = (data: string): string[] => data\n            .split(VALUE_SEPARATOR)\n            .map(dnsRecordId => idLookup.get(dnsRecordId))\n            .filter((id): id is string => typeof id === 'string');\n\n          // Decode the DNS TXT record data and destructure verification relationship properties.\n          const { auth, asm, del, inv, agm } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Add the verification relationships, if any, to the DID document.\n          if (auth) didDocument.authentication = recordIdsToMethodIds(auth);\n          if (asm) didDocument.assertionMethod = recordIdsToMethodIds(asm);\n          if (del) didDocument.capabilityDelegation = recordIdsToMethodIds(del);\n          if (inv) didDocument.capabilityInvocation = recordIdsToMethodIds(inv);\n          if (agm) didDocument.keyAgreement = recordIdsToMethodIds(agm);\n\n          break;\n        }\n      }\n    }\n\n    return { didDocument, didDocumentMetadata, didResolutionMetadata: {} };\n  }\n\n  /**\n   * Converts a DID document to a DNS packet according to the DID DHT specification.\n   *\n   * @see {@link https://did-dht.com/#dids-as-dns-records | DID DHT Specification, § DIDs as DNS Records}\n   *\n   * @param params - The parameters to use when converting a DID document to a DNS packet.\n   * @param params.didDocument - The DID document to convert to a DNS packet.\n   * @param params.didMetadata - The DID metadata to include in the DNS packet.\n   * @returns A promise that resolves to a DNS packet.\n   */\n  public static async toDnsPacket({ didDocument, didMetadata }: {\n    didDocument: DidDocument;\n    didMetadata: DidMetadata;\n  }): Promise<Packet> {\n    const dnsAnswerRecords: TxtAnswer[] = [];\n    const idLookup = new Map<string, string>();\n    const serviceIds: string[] = [];\n    const verificationMethodIds: string[] = [];\n\n    // Add DNS TXT records if the DID document contains an `alsoKnownAs` property.\n    if (didDocument.alsoKnownAs) {\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_aka.did.',\n        ttl  : DNS_RECORD_TTL,\n        data : didDocument.alsoKnownAs.join(VALUE_SEPARATOR)\n      });\n    }\n\n    // Add DNS TXT records if the DID document contains a `controller` property.\n    if (didDocument.controller) {\n      const controller = Array.isArray(didDocument.controller)\n        ? didDocument.controller.join(VALUE_SEPARATOR)\n        : didDocument.controller;\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_cnt.did.',\n        ttl  : DNS_RECORD_TTL,\n        data : controller\n      });\n    }\n\n    // Add DNS TXT records for each verification method.\n    for (const [index, vm] of didDocument.verificationMethod?.entries() ?? []) {\n      const dnsRecordId = `k${index}`;\n      verificationMethodIds.push(dnsRecordId);\n      let methodId = vm.id.split('#').pop()!; // Remove fragment prefix, if any.\n      idLookup.set(methodId, dnsRecordId);\n\n      const publicKey = vm.publicKeyJwk;\n\n      if (!(publicKey?.crv && publicKey.crv in AlgorithmToKeyTypeMap)) {\n        throw new DidError(DidErrorCode.InvalidPublicKeyType, `Verification method '${vm.id}' contains an unsupported key type: ${publicKey?.crv ?? 'undefined'}`);\n      }\n\n      // Use the public key's `crv` property to get the DID DHT key type.\n      const keyType = DidDhtRegisteredKeyType[publicKey.crv as keyof typeof DidDhtRegisteredKeyType];\n\n      // Convert the public key from JWK format to a byte array.\n      const publicKeyBytes = await DidDhtUtils.keyConverter(publicKey.crv).publicKeyToBytes({ publicKey });\n\n      // Convert the public key from a byte array to Base64URL format.\n      const publicKeyBase64Url = Convert.uint8Array(publicKeyBytes).toBase64Url();\n\n      // Define the data for the DNS TXT record.\n      const txtData = [`id=${methodId}`, `t=${keyType}`, `k=${publicKeyBase64Url}`];\n\n      // Add the controller property, if set to a value other than the Identity Key (DID Subject).\n      if (vm.controller !== didDocument.id) txtData.push(`c=${vm.controller}`);\n\n      // Add a TXT record for the verification method.\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : `_${dnsRecordId}._did.`,\n        ttl  : DNS_RECORD_TTL,\n        data : txtData.join(PROPERTY_SEPARATOR)\n      });\n    }\n\n    // Add DNS TXT records for each service.\n    didDocument.service?.forEach((service, index) => {\n      const dnsRecordId = `s${index}`;\n      serviceIds.push(dnsRecordId);\n      let { id, type: t, serviceEndpoint: se, ...customProperties } = service;\n      id = extractDidFragment(id)!;\n      se = Array.isArray(se) ? se.join(',') : se;\n\n      // Define the data for the DNS TXT record.\n      const txtData = Object.entries({ id, t, se, ...customProperties }).map(\n        ([key, value]) => `${key}=${value}`\n      );\n\n      // Add a TXT record for the verification method.\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : `_${dnsRecordId}._did.`,\n        ttl  : DNS_RECORD_TTL,\n        data : txtData.join(PROPERTY_SEPARATOR)\n      });\n    });\n\n    // Initialize the root DNS TXT record with the DID DHT specification version.\n    const rootRecord: string[] = [`v=${DID_DHT_SPECIFICATION_VERSION}`];\n\n    // Add verification methods to the root record.\n    if (verificationMethodIds.length) {\n      rootRecord.push(`vm=${verificationMethodIds.join(VALUE_SEPARATOR)}`);\n    }\n\n    // Add verification relationships to the root record.\n    Object.keys(DidVerificationRelationship).forEach(relationship => {\n      // Collect the verification method IDs for the given relationship.\n      const dnsRecordIds = (didDocument[relationship as keyof DidDocument] as any[])\n        ?.map(id => idLookup.get(id.split('#').pop()));\n\n      // If the relationship includes verification methods, add them to the root record.\n      if (dnsRecordIds) {\n        const recordName = DidDhtVerificationRelationship[relationship as keyof typeof DidDhtVerificationRelationship];\n        rootRecord.push(`${recordName}=${dnsRecordIds.join(VALUE_SEPARATOR)}`);\n      }\n    });\n\n    // Add services to the root record.\n    if (serviceIds.length) {\n      rootRecord.push(`svc=${serviceIds.join(VALUE_SEPARATOR)}`);\n    }\n\n    // If defined, add a DNS TXT record for each registered DID type.\n    if (didMetadata.types?.length) {\n      // DID types can be specified as either a string or a number, so we need to normalize the\n      // values to integers.\n      const types = didMetadata.types as (DidDhtRegisteredDidType | keyof typeof DidDhtRegisteredDidType)[];\n      const typeIntegers = types.map(type => typeof type === 'string' ? DidDhtRegisteredDidType[type] : type);\n\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_typ._did.',\n        ttl  : DNS_RECORD_TTL,\n        data : `id=${typeIntegers.join(VALUE_SEPARATOR)}`\n      });\n    }\n\n    // Add a DNS TXT record for the root record.\n    dnsAnswerRecords.push({\n      type : 'TXT',\n      name : '_did.',\n      ttl  : DNS_RECORD_TTL,\n      data : rootRecord.join(PROPERTY_SEPARATOR)\n    });\n\n    // Per the DID DHT specification, the method-specific identifier must be appended as the\n    // Origin of all records.\n    const [, , identifier] = didDocument.id.split(':');\n    dnsAnswerRecords.forEach(record => record.name += identifier);\n\n    // Create a DNS response packet with the authoritative answer flag set.\n    const dnsPacket: Packet = {\n      id      : 0,\n      type    : 'response',\n      flags   : AUTHORITATIVE_ANSWER,\n      answers : dnsAnswerRecords\n    };\n\n    return dnsPacket;\n  }\n}\n\n/**\n * The `DidDhtUtils` class provides utility functions to support operations in the DID DHT method.\n * This includes functions for creating and parsing BEP44 messages, handling identity keys, and\n * converting between different formats and representations.\n */\nexport class DidDhtUtils {\n  /**\n   * Creates a BEP44 put message, which is used to publish a DID document to the DHT network.\n   *\n   * @param params - The parameters to use when creating the BEP44 put message\n   * @param params.dnsPacket - The DNS packet to encode in the BEP44 message.\n   * @param params.publicKeyBytes - The public key bytes of the Identity Key.\n   * @param params.signer - Signer that can sign and verify data using the Identity Key.\n   * @returns A promise that resolves to a BEP44 put message.\n   */\n  public static async createBep44PutMessage({ dnsPacket, publicKeyBytes, signer }: {\n      dnsPacket: Packet;\n      publicKeyBytes: Uint8Array;\n      signer: Signer;\n    }): Promise<Bep44Message> {\n    // BEP44 requires that the sequence number be a monotoically increasing integer, so we use the\n    // current time in seconds since Unix epoch as a simple solution. Higher precision is not\n    // recommended since DID DHT documents are not expected to change frequently and there are\n    // small differences in system clocks that can cause issues if multiple clients are publishing\n    // updates to the same DID document.\n    const sequenceNumber = Math.ceil(Date.now() / 1000);\n\n    // Encode the DNS packet into a byte array containing a UDP payload.\n    const encodedDnsPacket = dnsPacketEncode(dnsPacket);\n\n    // Encode the sequence and DNS byte array to bencode format.\n    const bencodedData = bencode.encode({ seq: sequenceNumber, v: encodedDnsPacket }).subarray(1, -1);\n\n    if (bencodedData.length > 1000) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `DNS packet exceeds the 1000 byte maximum size: ${bencodedData.length} bytes`);\n    }\n\n    // Sign the BEP44 message.\n    const signature = await signer.sign({ data: bencodedData });\n\n    return { k: publicKeyBytes, seq: sequenceNumber, sig: signature, v: encodedDnsPacket };\n  }\n\n  /**\n   * Converts a DID URI to a JSON Web Key (JWK) representing the Identity Key.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @returns A promise that resolves to a JWK representing the Identity Key.\n   */\n  public static async identifierToIdentityKey({ didUri }: {\n    didUri: string\n  }): Promise<Jwk> {\n    // Decode the method-specific identifier from z-base-32 to a byte array.\n    let identityKeyBytes = DidDhtUtils.identifierToIdentityKeyBytes({ didUri });\n\n    // Convert the byte array to a JWK.\n    const identityKey = await Ed25519.bytesToPublicKey({ publicKeyBytes: identityKeyBytes });\n\n    return identityKey;\n  }\n\n  /**\n   * Converts a DID URI to the byte array representation of the Identity Key.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @returns A byte array representation of the Identity Key.\n   */\n  public static identifierToIdentityKeyBytes({ didUri }: {\n    didUri: string\n  }): Uint8Array {\n    // Parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // Verify that the DID URI is valid.\n    if (!parsedDid) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n\n    // Verify the DID method is supported.\n    if (parsedDid.method !== DidDht.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Decode the method-specific identifier from z-base-32 to a byte array.\n    let identityKeyBytes: Uint8Array | undefined;\n    try {\n      identityKeyBytes = Convert.base32Z(parsedDid.id).toUint8Array();\n    } catch {\n      throw new DidError(DidErrorCode.InvalidPublicKey, `Failed to decode method-specific identifier`);\n    }\n\n    if (identityKeyBytes.length !== 32) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Invalid public key length: ${identityKeyBytes.length}`);\n    }\n\n    return identityKeyBytes;\n  }\n\n  /**\n   * Encodes a DID DHT Identity Key into a DID identifier.\n   *\n   * This method first z-base-32 encodes the Identity Key. The resulting string is prefixed with\n   * `did:dht:` to form the DID identifier.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.identityKey The Identity Key from which the DID identifier is computed.\n   * @returns A promise that resolves to a string containing the DID identifier.\n   */\n  public static async identityKeyToIdentifier({ identityKey }: {\n    identityKey: Jwk\n  }): Promise<string> {\n    // Convert the key from JWK format to a byte array.\n    const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey: identityKey });\n\n    // Encode the byte array as a z-base-32 string.\n    const identifier = Convert.uint8Array(publicKeyBytes).toBase32Z();\n\n    return `did:${DidDht.methodName}:${identifier}`;\n  }\n\n  /**\n   * Returns the appropriate key converter for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns An `AsymmetricKeyConverter` for the specified curve.\n   */\n  public static keyConverter(curve: string): AsymmetricKeyConverter {\n    const converters: Record<string, AsymmetricKeyConverter> = {\n      'Ed25519'   : Ed25519,\n      'P-256'     : Secp256r1,\n      'secp256k1' : Secp256k1\n    };\n\n    const converter = converters[curve];\n\n    if (!converter) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return converter;\n  }\n\n  /**\n   * Parses and verifies a BEP44 Get message, converting it to a DNS packet.\n   *\n   * @param params - The parameters to use when verifying and parsing the BEP44 Get response message.\n   * @param params.bep44Message - The BEP44 message to verify and parse.\n   * @returns A promise that resolves to a DNS packet.\n   */\n  public static async parseBep44GetMessage({ bep44Message }: {\n    bep44Message: Bep44Message;\n  }): Promise<Packet> {\n    // Convert the public key byte array to JWK format.\n    const publicKey = await Ed25519.bytesToPublicKey({ publicKeyBytes: bep44Message.k });\n\n    // Encode the sequence and DNS byte array to bencode format.\n    const bencodedData = bencode.encode({ seq: bep44Message.seq, v: bep44Message.v }).subarray(1, -1);\n\n    // Verify the signature of the BEP44 message.\n    const isValid = await Ed25519.verify({\n      key       : publicKey,\n      signature : bep44Message.sig,\n      data      : bencodedData\n    });\n\n    if (!isValid) {\n      throw new DidError(DidErrorCode.InvalidSignature, `Invalid signature for DHT BEP44 message`);\n    }\n\n    return dnsPacketDecode(bep44Message.v);\n  }\n\n  /**\n   * Decodes and parses the data value of a DNS TXT record into a key-value object.\n   *\n   * @param txtData - The data value of a DNS TXT record.\n   * @returns An object containing the key/value pairs of the TXT record data.\n   */\n  public static parseTxtDataToObject(txtData: TxtData): Record<string, string> {\n    return this.parseTxtDataToString(txtData).split(PROPERTY_SEPARATOR).reduce((acc, pair) => {\n      const [key, value] = pair.split('=');\n      acc[key] = value;\n      return acc;\n    }, {} as Record<string, string>);\n  }\n\n  /**\n   * Decodes and parses the data value of a DNS TXT record into a string.\n   *\n   * @param txtData - The data value of a DNS TXT record.\n   * @returns A string representation of the TXT record data.\n   */\n  public static parseTxtDataToString(txtData: TxtData): string {\n    if (typeof txtData === 'string') {\n      return txtData;\n    } else if (txtData instanceof Uint8Array) {\n      return Convert.uint8Array(txtData).toString();\n    } else if (Array.isArray(txtData)) {\n      return txtData.map(item => this.parseTxtDataToString(item)).join('');\n    } else {\n      throw new DidError(DidErrorCode.InternalError, 'Pkarr returned DNS TXT record with invalid data type');\n    }\n  }\n}", "import type { CryptoApi, Jwk, KeyIdentifier, KeyImporterExporter, KmsExportKeyParams, KmsImportKeyParams } from '@web5/crypto';\nimport type {\n  JwkEs256k,\n  IonDocumentModel,\n  IonPublicKeyModel,\n  IonPublicKeyPurpose,\n} from '@decentralized-identity/ion-sdk';\n\nimport { IonDid, IonRequest } from '@decentralized-identity/ion-sdk';\nimport { LocalKeyManager, computeJwkThumbprint } from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod, DidRegistrationResult } from '../methods/did-method.js';\nimport type {\n  DidService,\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n  DidVerificationRelationship,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidMethod } from '../methods/did-method.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { getVerificationRelationshipsById } from '../utils.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Options for creating a Decentralized Identifier (DID) using the DID ION method.\n */\nexport interface DidIonCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optional. The URI of a server involved in executing DID method operations. In the context of\n   * DID creation, the endpoint is expected to be a Sidetree node. If not specified, a default\n   * gateway node is used.\n   */\n  gatewayUri?: string;\n\n  /**\n   * Optional. Determines whether the created DID should be published to a Sidetree node.\n   *\n   * If set to `true` or omitted, the DID is publicly discoverable. If `false`, the DID is not\n   * published and cannot be resolved by others. By default, newly created DIDs are published.\n   *\n   * @see {@link https://identity.foundation/sidetree/spec/#create | Sidetree Protocol Specification, § Create}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   publish: false\n   * };\n   * ```\n   */\n  publish?: boolean;\n\n  /**\n   * Optional. An array of service endpoints associated with the DID.\n   *\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   services: [\n   *     {\n   *       id: 'dwn',\n   *       type: 'DecentralizedWebNode',\n   *       serviceEndpoint: ['https://example.com/dwn1', 'https://example/dwn2']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  services?: DidService[];\n\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   *\n   * By default, a newly created DID ION document will contain a single Ed25519 verification method.\n   * Additional verification methods can be added to the DID document using the\n   * `verificationMethods` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   verificationMethods: [\n   *     {\n   *       algorithm: 'Ed25519',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     },\n   *     {\n   *       algorithm: 'Ed25519',\n   *       id: 'dwn-sig',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Represents the request model for managing DID documents within the ION network, according to the\n * Sidetree protocol specification.\n */\nexport interface DidIonCreateRequest {\n  /** The type of operation to perform, which is always 'create' for a Create Operation. */\n  type: 'create';\n\n  /** Contains properties related to the initial state of the DID document. */\n  suffixData: {\n    /** A hash of the `delta` object, representing the initial changes to the DID document. */\n    deltaHash: string;\n    /** A commitment value used for future recovery operations, hashed for security. */\n    recoveryCommitment: string;\n  };\n\n  /** Details the changes to be applied to the DID document in this operation. */\n  delta: {\n    /** A commitment value used for the next update operation, hashed for security. */\n    updateCommitment: string;\n    /** An array of patch objects specifying the modifications to apply to the DID document. */\n    patches: {\n      /** The type of modification to perform (e.g., adding or removing public keys or service\n       * endpoints). */\n      action: string;\n      /** The document state or partial state to apply with this patch. */\n      document: IonDocumentModel;\n    }[];\n  }\n}\n\n/**\n * Represents a {@link DidVerificationMethod | DID verification method} in the context of DID ION\n * create, update, deactivate, and resolve operations.\n *\n * Unlike the DID Core standard {@link DidVerificationMethod} interface, this type is specific to\n * the ION method operations and only includes the `id`, `publicKeyJwk`, and `purposes` properties:\n * - The `id` property is optional and specifies the identifier fragment of the verification method.\n * - The `publicKeyJwk` property is required and represents the public key in JWK format.\n * - The `purposes` property is required and specifies the purposes for which the verification\n *  method can be used.\n *\n * @example\n * ```ts\n * const verificationMethod: DidIonVerificationMethod = {\n *   id           : 'sig',\n *   publicKeyJwk : {\n *     kty : 'OKP',\n *     crv : 'Ed25519',\n *     x   : 'o40shZrsco-CfEqk6mFsXfcP94ly3Az3gm84PzAUsXo',\n *     kid : 'BDp0xim82GswlxnPV8TPtBdUw80wkGIF8gjFbw1x5iQ',\n *   },\n *   purposes: ['authentication', 'assertionMethod']\n * };\n * ```\n */\nexport interface DidIonVerificationMethod {\n  /**\n   * Optionally specify the identifier fragment of the verification method.\n   *\n   * If not specified, the method's ID will be generated from the key's ID or thumbprint.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   id: 'sig',\n   *   ...\n   * };\n   * ```\n   */\n  id?: string;\n\n  /**\n   * A public key in JWK format.\n   *\n   * A JSON Web Key (JWK) that conforms to {@link https://datatracker.ietf.org/doc/html/rfc7517 | RFC 7517}.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   publicKeyJwk: {\n   *     kty : \"OKP\",\n   *     crv : \"X25519\",\n   *     x   : \"7XdJtNmJ9pV_O_3mxWdn6YjiHJ-HhNkdYQARzVU_mwY\",\n   *     kid : \"xtsuKULPh6VN9fuJMRwj66cDfQyLaxuXHkMlmAe_v6I\"\n   *   },\n   *   ...\n   * };\n   * ```\n   */\n  publicKeyJwk: Jwk;\n\n  /**\n   * Specify the purposes for which a verification method is intended to be used in a DID document.\n   *\n   * The `purposes` property defines the specific\n   * {@link DidVerificationRelationship | verification relationships} between the DID subject and\n   * the verification method. This enables the verification method to be utilized for distinct\n   * actions such as authentication, assertion, key agreement, capability delegation, and others. It\n   * is important for verifiers to recognize that a verification method must be associated with the\n   * relevant purpose in the DID document to be valid for that specific use case.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   purposes: ['authentication', 'assertionMethod'],\n   *   ...\n   * };\n   * ```\n   */\n  purposes: (DidVerificationRelationship | keyof typeof DidVerificationRelationship)[];\n}\n\n/**\n * `IonPortableDid` interface extends the {@link PortableDid} interface.\n *\n * It represents a Decentralized Identifier (DID) that is portable and can be used across different\n * domains, including the ION specific recovery and update keys.\n */\nexport interface IonPortableDid extends PortableDid {\n  /** The JSON Web Key (JWK) used for recovery purposes. */\n  recoveryKey: Jwk;\n\n  /** The JSON Web Key (JWK) used for updating the DID. */\n  updateKey: Jwk;\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID ION document.\n *\n * The DID ION method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption.\n */\nexport enum DidIonRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519 = 'Ed25519',\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 'secp256k1',\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 'secp256r1',\n\n  /**\n   * X25519: A Diffie-Hellman key exchange algorithm using Curve25519.\n   */\n  X25519 = 'X25519'\n}\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID ION\n * {@link DidIonRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidIonRegisteredKeyType.Ed25519,\n  ES256K    : DidIonRegisteredKeyType.secp256k1,\n  ES256     : DidIonRegisteredKeyType.secp256r1,\n  'P-256'   : DidIonRegisteredKeyType.secp256r1,\n  secp256k1 : DidIonRegisteredKeyType.secp256k1,\n  secp256r1 : DidIonRegisteredKeyType.secp256r1\n} as const;\n\n/**\n * The default node to use as a gateway to the Sidetree newtork when anchoring, updating, and\n * resolving DID documents.\n */\nconst DEFAULT_GATEWAY_URI = 'https://ion.tbd.engineering';\n\n/**\n * The `DidIon` class provides an implementation of the `did:ion` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:ion` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing key in a Key Management System\n *                       (KMS). If supported by the KMS, a DID's key can be exported to a portable\n *                       DID format.\n * - DID Resolution: Resolve a `did:ion` to its corresponding DID Document stored in the Sidetree\n *                   network.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @see {@link https://identity.foundation/sidetree/spec/ | Sidetree Protocol Specification}\n * @see {@link https://github.com/decentralized-identity/ion/blob/master/docs/design.md | ION Design Document}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidIon.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidIon.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidIon.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object for a published DID with existing keys in a KMS\n * const did = await DidIon.fromKeyManager({\n *  didUri: 'did:ion:EiAzB7K-xDIKc1csXo5HX2eNBoemK9feNhL3cKwfukYOug',\n *  keyManager\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidIon.toKeys({ did });\n * ```\n */\n\nexport class DidIon extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID ION specification.\n   */\n  public static methodName = 'ion';\n\n  /**\n   * Creates a new DID using the `did:ion` method formed from a newly generated key.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidIon.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidIon.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidIonCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that the algorithm for any given verification method is supported by the\n    // DID ION specification.\n    if (options.verificationMethods?.some(vm => !(vm.algorithm in AlgorithmToKeyTypeMap))) {\n      throw new Error('One or more verification method algorithms are not supported');\n    }\n\n    // Check 2: Validate that the ID for any given verification method is unique.\n    const methodIds = options.verificationMethods?.filter(vm => 'id' in vm).map(vm => vm.id);\n    if (methodIds && methodIds.length !== new Set(methodIds).size) {\n      throw new Error('One or more verification method IDs are not unique');\n    }\n\n    // Check 3: Validate that the required properties for any given services are present.\n    if (options.services?.some(s => !s.id || !s.type || !s.serviceEndpoint)) {\n      throw new Error('One or more services are missing required properties');\n    }\n\n    // If no verification methods were specified, generate a default Ed25519 verification method.\n    const defaultVerificationMethod: DidCreateVerificationMethod<TKms> = {\n      algorithm : 'Ed25519' as any,\n      purposes  : ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n    };\n\n    const verificationMethodsToAdd: DidIonVerificationMethod[] = [];\n\n    // Generate random key material for additional verification methods, if any.\n    for (const vm of options.verificationMethods ?? [defaultVerificationMethod]) {\n      // Generate a random key for the verification method.\n      const keyUri = await keyManager.generateKey({ algorithm: vm.algorithm });\n      const publicKey = await keyManager.getPublicKey({ keyUri });\n\n      // Add the verification method to the DID document.\n      verificationMethodsToAdd.push({\n        id           : vm.id,\n        publicKeyJwk : publicKey,\n        purposes     : vm.purposes ?? ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n      });\n    }\n\n    // Generate a random key for the ION Recovery Key. Sidetree requires secp256k1 recovery keys.\n    const recoveryKeyUri = await keyManager.generateKey({ algorithm: DidIonRegisteredKeyType.secp256k1 });\n    const recoveryKey = await keyManager.getPublicKey({ keyUri: recoveryKeyUri });\n\n    // Generate a random key for the ION Update Key. Sidetree requires secp256k1 update keys.\n    const updateKeyUri = await keyManager.generateKey({ algorithm: DidIonRegisteredKeyType.secp256k1 });\n    const updateKey = await keyManager.getPublicKey({ keyUri: updateKeyUri });\n\n    // Compute the Long Form DID URI from the keys and services, if any.\n    const longFormDidUri = await DidIonUtils.computeLongFormDidUri({\n      recoveryKey,\n      updateKey,\n      services            : options.services ?? [],\n      verificationMethods : verificationMethodsToAdd\n    });\n\n    // Expand the DID URI string to a DID document.\n    const { didDocument, didResolutionMetadata } = await DidIon.resolve(longFormDidUri, { gatewayUri: options.gatewayUri });\n    if (didDocument === null) {\n      throw new Error(`Unable to resolve DID during creation: ${didResolutionMetadata?.error}`);\n    }\n\n    // Create the BearerDid object, including the \"Short Form\" of the DID URI, the ION update and\n    // recovery keys, and specifying that the DID has not yet been published.\n    const did = new BearerDid({\n      uri      : longFormDidUri,\n      document : didDocument,\n      metadata : {\n        published   : false,\n        canonicalId : longFormDidUri.split(':', 3).join(':'),\n        recoveryKey,\n        updateKey\n      },\n      keyManager\n    });\n\n    // By default, publish the DID document to a Sidetree node unless explicitly disabled.\n    if (options.publish ?? true) {\n      const registrationResult = await DidIon.publish({ did, gatewayUri: options.gatewayUri });\n      did.metadata = registrationResult.didDocumentMetadata;\n    }\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:ion` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the first verification method in the authentication property\n   * in the DID Document is used.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument, methodId }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Get the verification method with either the specified ID or the first assertion method.\n    const verificationMethod = didDocument.verificationMethod?.find(\n      vm => vm.id === (methodId ?? didDocument.assertionMethod?.[0])\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID ION method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidIon.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the DID document does not contain any verification methods or the keys for\n   *         any verification method are missing in the key manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidIon.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    return did;\n  }\n\n  /**\n   * Publishes a DID to a Sidetree node, making it publicly discoverable and resolvable.\n   *\n   * This method handles the publication of a DID Document associated with a `did:ion` DID to a\n   * Sidetree node.\n   *\n   * @remarks\n   * - This method is typically invoked automatically during the creation of a new DID unless the\n   *   `publish` option is set to `false`.\n   * - For existing, unpublished DIDs, it can be used to publish the DID Document to a Sidetree node.\n   * - The method relies on the specified Sidetree node to interface with the network.\n   *\n   * @param params - The parameters for the `publish` operation.\n   * @param params.did - The `BearerDid` object representing the DID to be published.\n   * @param params.gatewayUri - Optional. The URI of a server involved in executing DID\n   *                                    method operations. In the context of publishing, the\n   *                                    endpoint is expected to be a Sidetree node. If not\n   *                                    specified, a default node is used.\n   * @returns A Promise resolving to a boolean indicating whether the publication was successful.\n   *\n   * @example\n   * ```ts\n   * // Generate a new DID and keys but explicitly disable publishing.\n   * const did = await DidIon.create({ options: { publish: false } });\n   * // Publish the DID to the Sidetree network.\n   * const isPublished = await DidIon.publish({ did });\n   * // `isPublished` is true if the DID was successfully published.\n   * ```\n   */\n  public static async publish({ did, gatewayUri = DEFAULT_GATEWAY_URI }: {\n    did: BearerDid;\n    gatewayUri?: string;\n  }): Promise<DidRegistrationResult> {\n    // Construct an ION verification method made up of the id, public key, and purposes from each\n    // verification method in the DID document.\n    const verificationMethods: DidIonVerificationMethod[] = did.document.verificationMethod?.map(\n      vm => ({\n        id           : vm.id,\n        publicKeyJwk : vm.publicKeyJwk!,\n        purposes     : getVerificationRelationshipsById({ didDocument: did.document, methodId: vm.id })\n      })\n    ) ?? [];\n\n    // Create the ION document.\n    const ionDocument = await DidIonUtils.createIonDocument({\n      services: did.document.service ?? [],\n      verificationMethods\n    });\n\n    // Construct the ION Create Operation request.\n    const createOperation = await DidIonUtils.constructCreateRequest({\n      ionDocument,\n      recoveryKey : did.metadata.recoveryKey,\n      updateKey   : did.metadata.updateKey\n    });\n\n    try {\n      // Construct the URL of the SideTree node's operations endpoint.\n      const operationsUrl = DidIonUtils.appendPathToUrl({\n        baseUrl : gatewayUri,\n        path    : `/operations`\n      });\n\n      // Submit the Create Operation to the operations endpoint.\n      const response = await fetch(operationsUrl, {\n        method  : 'POST',\n        mode    : 'cors',\n        headers : { 'Content-Type': 'application/json' },\n        body    : JSON.stringify(createOperation)\n      });\n\n      // Return the result of processing the Create operation, including the updated DID metadata\n      // with the publishing result.\n      return {\n        didDocument         : did.document,\n        didDocumentMetadata : {\n          ...did.metadata,\n          published: response.ok,\n        },\n        didRegistrationMetadata: {}\n      };\n\n    } catch (error: any) {\n      return {\n        didDocument         : null,\n        didDocumentMetadata : {\n          published: false,\n        },\n        didRegistrationMetadata: {\n          error        : DidErrorCode.InternalError,\n          errorMessage : `Failed to publish DID document for: ${did.uri}`\n        }\n      };\n    }\n  }\n\n  /**\n   * Resolves a `did:ion` identifier to its corresponding DID document.\n   *\n   * This method performs the resolution of a `did:ion` DID, retrieving its DID Document from the\n   * Sidetree-based DID overlay network. The process involves querying a Sidetree node to retrieve\n   * the DID Document that corresponds to the given DID identifier.\n   *\n   * @remarks\n   * - If a `gatewayUri` option is not specified, a default node is used to access the Sidetree\n   *   network.\n   * - It decodes the DID identifier and retrieves the associated DID Document and metadata.\n   * - In case of resolution failure, appropriate error information is returned.\n   *\n   * @example\n   * ```ts\n   * const resolutionResult = await DidIon.resolve('did:ion:example');\n   * ```\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, options: DidResolutionOptions = {}): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // If parsing failed, the DID is invalid.\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"ion\", return an error.\n    if (parsedDid.method !== DidIon.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    // To execute the read method operation, use the given gateway URI or a default Sidetree node.\n    const gatewayUri = options?.gatewayUri ?? DEFAULT_GATEWAY_URI;\n\n    try {\n      // Construct the URL to be used in the resolution request.\n      const resolutionUrl = DidIonUtils.appendPathToUrl({\n        baseUrl : gatewayUri,\n        path    : `/identifiers/${didUri}`\n      });\n\n      // Attempt to retrieve the DID document and metadata from the Sidetree node.\n      const response = await fetch(resolutionUrl);\n\n      // If the DID document was not found, return an error.\n      if (!response.ok) {\n        throw new DidError(DidErrorCode.NotFound, `Unable to find DID document for: ${didUri}`);\n      }\n\n      // If the DID document was retrieved successfully, return it.\n      const { didDocument, didDocumentMetadata } = await response.json() as DidResolutionResult;\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        ...didDocument && { didDocument },\n        didDocumentMetadata: {\n          published: didDocumentMetadata?.method?.published,\n          ...didDocumentMetadata\n        }\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n}\n\n/**\n * The `DidIonUtils` class provides utility functions to support operations in the DID ION method.\n */\nexport class DidIonUtils {\n  /**\n   * Appends a specified path to a base URL, ensuring proper formatting of the resulting URL.\n   *\n   * This method is useful for constructing URLs for accessing various endpoints, such as Sidetree\n   * nodes in the ION network. It handles the nuances of URL path concatenation, including the\n   * addition or removal of leading/trailing slashes, to create a well-formed URL.\n   *\n   * @param params - The parameters for URL construction.\n   * @param params.baseUrl - The base URL to which the path will be appended.\n   * @param params.path - The path to append to the base URL.\n   * @returns The fully constructed URL string with the path appended to the base URL.\n   */\n  public static appendPathToUrl({ baseUrl, path }: {\n    baseUrl: string;\n    path: string;\n  }): string {\n    const url = new URL(baseUrl);\n    url.pathname = url.pathname.endsWith('/') ? url.pathname : url.pathname + '/';\n    url.pathname += path.startsWith('/') ? path.substring(1) : path;\n\n    return url.toString();\n  }\n\n  /**\n   * Computes the Long Form DID URI given an ION DID's recovery key, update key, services, and\n   * verification methods.\n   *\n   * @param params - The parameters for computing the Long Form DID URI.\n   * @param params.recoveryKey - The ION Recovery Key.\n   * @param params.updateKey - The ION Update Key.\n   * @param params.services - An array of services associated with the DID.\n   * @param params.verificationMethods - An array of verification methods associated with the DID.\n   * @returns A Promise resolving to the Long Form DID URI.\n   */\n  public static async computeLongFormDidUri({ recoveryKey, updateKey, services, verificationMethods }: {\n    recoveryKey: Jwk;\n    updateKey: Jwk;\n    services: DidService[];\n    verificationMethods: DidIonVerificationMethod[];\n  }): Promise<string> {\n    // Create the ION document.\n    const ionDocument = await DidIonUtils.createIonDocument({ services, verificationMethods });\n\n    // Normalize JWK to onnly include specific members and in lexicographic order.\n    const normalizedRecoveryKey = DidIonUtils.normalizeJwk(recoveryKey);\n    const normalizedUpdateKey = DidIonUtils.normalizeJwk(updateKey);\n\n    // Compute the Long Form DID URI.\n    const longFormDidUri = await IonDid.createLongFormDid({\n      document    : ionDocument,\n      recoveryKey : normalizedRecoveryKey as JwkEs256k,\n      updateKey   : normalizedUpdateKey as JwkEs256k\n    });\n\n    return longFormDidUri;\n  }\n\n  /**\n   * Constructs a Sidetree Create Operation request for a DID document within the ION network.\n   *\n   * This method prepares the necessary payload for submitting a Create Operation to a Sidetree\n   * node, encapsulating the details of the DID document, recovery key, and update key.\n   *\n   * @param params - Parameters required to construct the Create Operation request.\n   * @param params.ionDocument - The DID document model containing public keys and service endpoints.\n   * @param params.recoveryKey - The recovery public key in JWK format.\n   * @param params.updateKey - The update public key in JWK format.\n   * @returns A promise resolving to the ION Create Operation request model, ready for submission to a Sidetree node.\n   */\n  public static async constructCreateRequest({ ionDocument, recoveryKey, updateKey }: {\n    ionDocument: IonDocumentModel,\n    recoveryKey: Jwk,\n    updateKey: Jwk\n  }): Promise<DidIonCreateRequest> {\n    // Create an ION DID create request operation.\n    const createRequest = await IonRequest.createCreateRequest({\n      document    : ionDocument,\n      recoveryKey : DidIonUtils.normalizeJwk(recoveryKey) as JwkEs256k,\n      updateKey   : DidIonUtils.normalizeJwk(updateKey) as JwkEs256k\n    }) as DidIonCreateRequest;\n\n    return createRequest;\n  }\n\n  /**\n   * Assembles an ION document model from provided services and verification methods\n   *\n   * This model serves as the foundation for a DID document in the ION network, facilitating the\n   * creation and management of decentralized identities. It translates service endpoints and\n   * public keys into a format compatible with the Sidetree protocol, ensuring the resulting DID\n   * document adheres to the required specifications for ION DIDs. This method is essential for\n   * constructing the payload needed to register or update DIDs within the ION network.\n   *\n   * @param params - The parameters containing the services and verification methods to include in the ION document.\n   * @param params.services - A list of service endpoints to be included in the DID document, specifying ways to interact with the DID subject.\n   * @param params.verificationMethods - A list of verification methods to be included, detailing the cryptographic keys and their intended uses within the DID document.\n   * @returns A Promise resolving to an `IonDocumentModel`, ready for use in Sidetree operations like DID creation and updates.\n   */\n  public static async createIonDocument({ services, verificationMethods }: {\n    services: DidService[];\n    verificationMethods: DidIonVerificationMethod[]\n  }): Promise<IonDocumentModel> {\n    /**\n     * STEP 1: Convert verification methods to ION SDK format.\n     */\n    const ionPublicKeys: IonPublicKeyModel[] = [];\n\n    for (const vm of verificationMethods) {\n      // Use the given ID, the key's ID, or the key's thumbprint as the verification method ID.\n      let methodId = vm.id ?? vm.publicKeyJwk.kid ?? await computeJwkThumbprint({ jwk: vm.publicKeyJwk });\n      methodId = `${methodId.split('#').pop()}`; // Remove fragment prefix, if any.\n\n      // Convert public key JWK to ION format.\n      const publicKey: IonPublicKeyModel = {\n        id           : methodId,\n        publicKeyJwk : DidIonUtils.normalizeJwk(vm.publicKeyJwk),\n        purposes     : vm.purposes as IonPublicKeyPurpose[],\n        type         : 'JsonWebKey2020'\n      };\n\n      ionPublicKeys.push(publicKey);\n    }\n\n    /**\n     * STEP 2: Convert service entries, if any, to ION SDK format.\n     */\n    const ionServices = services.map(service => ({\n      ...service,\n      id: `${service.id.split('#').pop()}` // Remove fragment prefix, if any.\n    }));\n\n    /**\n     * STEP 3: Format as ION document.\n     */\n    const ionDocumentModel: IonDocumentModel = {\n      publicKeys : ionPublicKeys,\n      services   : ionServices\n    };\n\n    return ionDocumentModel;\n  }\n\n  /**\n   * Normalize the given JWK to include only specific members and in lexicographic order.\n   *\n   * @param jwk - The JWK to normalize.\n   * @returns The normalized JWK.\n   */\n  private static normalizeJwk(jwk: Jwk): Jwk {\n    const keyType = jwk.kty;\n    let normalizedJwk: Jwk;\n\n    if (keyType === 'EC') {\n      normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };\n    } else if (keyType === 'oct') {\n      normalizedJwk = { k: jwk.k, kty: jwk.kty };\n    } else if (keyType === 'OKP') {\n      normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };\n    } else if (keyType === 'RSA') {\n      normalizedJwk = { e: jwk.e, kty: jwk.kty, n: jwk.n };\n    } else {\n      throw new Error(`Unsupported key type: ${keyType}`);\n    }\n\n    return normalizedJwk;\n  }\n}", "import type {\n  Jwk,\n  CryptoApi,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport { Convert } from '@web5/common';\nimport { LocalKeyManager } from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod } from './did-method.js';\nimport type { DidDocument, DidResolutionOptions, DidResolutionResult, DidVerificationMethod } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Defines the set of options available when creating a new Decentralized Identifier (DID) with the\n * 'did:jwk' method.\n *\n * Either the `algorithm` or `verificationMethods` option can be specified, but not both.\n * - A new key will be generated using the algorithm identifier specified in either the `algorithm`\n *   property or the `verificationMethods` object's `algorithm` property.\n * - If `verificationMethods` is given, it must contain exactly one entry since DID JWK only\n *   supports a single verification method.\n * - If neither is given, the default is to generate a new Ed25519 key.\n *\n * @example\n * ```ts\n * // DID Creation\n *\n * // By default, when no options are given, a new Ed25519 key will be generated.\n * const did = await DidJwk.create();\n *\n * // The algorithm to use for key generation can be specified as a top-level option.\n * const did = await DidJwk.create({\n *   options: { algorithm = 'ES256K' }\n * });\n *\n * // Or, alternatively as a property of the verification method.\n * const did = await DidJwk.create({\n *   options: {\n *     verificationMethods: [{ algorithm = 'ES256K' }]\n *   }\n * });\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidJwk.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidJwk.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidJwk.import(portableDid);\n * ```\n */\nexport interface DidJwkCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify the algorithm to be used for key generation.\n   */\n  algorithm?: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Alternatively, specify the algorithm to be used for key generation of the single verification\n   * method in the DID Document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * The `DidJwk` class provides an implementation of the `did:jwk` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:jwk` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method key set or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:jwk` to its corresponding DID Document.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:jwk` DID method uses a single JSON Web Key (JWK) to generate a DID and does not rely\n * on any external system such as a blockchain or centralized database. This characteristic makes\n * it suitable for use cases where a assertions about a DID Subject can be self-verifiable by\n * third parties.\n *\n * The DID URI is formed by Base64URL-encoding the JWK and prefixing with `did:jwk:`. The DID\n * Document of a `did:jwk` DID contains a single verification method, which is the JWK used\n * to generate the DID. The verification method is identified by the key ID `#0`.\n *\n * @see {@link https://github.com/quartzjer/did-jwk/blob/main/spec.md | DID JWK Specification}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidJwk.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidJwk.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidJwk.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object from an existing key in a KMS\n * const did = await DidJwk.fromKeyManager({\n *  didUri: 'did:jwk:eyJrIjoiT0tQIiwidCI6IkV1c2UyNTYifQ',\n *  keyManager\n * });\n *\n * // Instantiate a DID object from an existing verification method key\n * const did = await DidJwk.fromKeys({\n *   verificationMethods: [{\n *     publicKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4'\n *     },\n *     privateKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4',\n *       d: 'bdcGE4KzEaekOwoa-ee3gAm1a991WvNj_Eq3WKyqTnE'\n *     }\n *   }]\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidJwk.toKeys({ did });\n *\n * // Reconstruct a DID object from a portable format\n * const did = await DidJwk.fromKeys(portableDid);\n * ```\n */\nexport class DidJwk extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID JWK specification.\n   */\n  public static methodName = 'jwk';\n\n  /**\n   * Creates a new DID using the `did:jwk` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by Base64URL-encoding the JWK and prefixing with `did:jwk:`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   * - The `algorithm` and `verificationMethods` options are mutually exclusive. If both are given,\n   *   an error will be thrown.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidJwk.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidJwk.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidJwkCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that `algorithm` or `verificationMethods` options are not both given.\n    if (options.algorithm && options.verificationMethods) {\n      throw new Error(`The 'algorithm' and 'verificationMethods' options are mutually exclusive`);\n    }\n\n    // Check 2: If `verificationMethods` is given, it must contain exactly one entry since DID JWK\n    // only supports a single verification method.\n    if (options.verificationMethods && options.verificationMethods.length !== 1) {\n      throw new Error(`The 'verificationMethods' option must contain exactly one entry`);\n    }\n\n    // Default to Ed25519 key generation if an algorithm is not given.\n    const algorithm = options.algorithm ?? options.verificationMethods?.[0]?.algorithm ?? 'Ed25519';\n\n    // Generate a new key using the specified `algorithm`.\n    const keyUri = await keyManager.generateKey({ algorithm });\n    const publicKey = await keyManager.getPublicKey({ keyUri });\n\n    // Compute the DID identifier from the public key by serializing the JWK to a UTF-8 string and\n    // encoding in Base64URL format.\n    const identifier = Convert.object(publicKey).toBase64Url();\n\n    // Attach the prefix `did:jwk` to form the complete DID URI.\n    const didUri = `did:${DidJwk.methodName}:${identifier}`;\n\n    // Expand the DID URI string to a DID document.\n    const didResolutionResult = await DidJwk.resolve(didUri);\n    const document = didResolutionResult.didDocument as DidDocument;\n\n    // Create the BearerDid object from the generated key material.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {},\n      keyManager\n    });\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:jwk` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the first verification method in the DID Document is used.\n   *\n   * Note that for DID JWK, only one verification method can exist so specifying `methodId` could be\n   * considered redundant or unnecessary. The option is provided for consistency with other DID\n   * method implementations.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to find the verification method in the DID Document.\n    const [ verificationMethod ] = didDocument.verificationMethod ?? [];\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID JWK method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @remarks\n   * The `verificationMethod` array of the DID document must contain exactly one key since the\n   * `did:jwk` method only supports a single verification method.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidJwk.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the provided keys.\n   * @throws An error if the DID document does not contain exactly one verification method.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidJwk.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given DID document contains exactly one verification method.\n    // Note: The non-undefined assertion is necessary because the type system cannot infer that\n    // the `verificationMethod` property is defined -- which is checked by `BearerDid.import()`.\n    if (did.document.verificationMethod!.length !== 1) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain exactly one verification method`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Resolves a `did:jwk` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // Attempt to decode the Base64URL-encoded JWK.\n    let publicKey: Jwk | undefined;\n    try {\n      publicKey = Convert.base64Url(parsedDid!.id).toObject() as Jwk;\n    } catch { /* Consume the error so that a DID resolution error can be returned later. */ }\n\n    // If parsing or decoding failed, the DID is invalid.\n    if (!parsedDid || !publicKey) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"jwk\", return an error.\n    if (parsedDid.method !== DidJwk.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    const didDocument: DidDocument = {\n      '@context': [\n        'https://www.w3.org/ns/did/v1'\n      ],\n      id: parsedDid.uri\n    };\n\n    const keyUri = `${didDocument.id}#0`;\n\n    // Set the Verification Method property.\n    didDocument.verificationMethod = [{\n      id           : keyUri,\n      type         : 'JsonWebKey',\n      controller   : didDocument.id,\n      publicKeyJwk : publicKey\n    }];\n\n    // Set the Verification Relationship properties.\n    didDocument.authentication = [keyUri];\n    didDocument.assertionMethod = [keyUri];\n    didDocument.capabilityInvocation = [keyUri];\n    didDocument.capabilityDelegation = [keyUri];\n    didDocument.keyAgreement = [keyUri];\n\n    // If the JWK contains a `use` property with the value \"sig\" then the `keyAgreement` property\n    // is not included in the DID Document. If the `use` value is \"enc\" then only the `keyAgreement`\n    // property is included in the DID Document.\n    switch (publicKey.use) {\n      case 'sig': {\n        delete didDocument.keyAgreement;\n        break;\n      }\n\n      case 'enc': {\n        delete didDocument.authentication;\n        delete didDocument.assertionMethod;\n        delete didDocument.capabilityInvocation;\n        delete didDocument.capabilityDelegation;\n        break;\n      }\n    }\n\n    return {\n      ...EMPTY_DID_RESOLUTION_RESULT,\n      didDocument,\n    };\n  }\n}", "import type { MulticodecCode, MulticodecDefinition, RequireOnly } from '@web5/common';\nimport type {\n  Jwk,\n  CryptoApi,\n  KeyCompressor,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  AsymmetricKeyConverter,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport { Multicodec, universalTypeOf } from '@web5/common';\nimport {\n  X25519,\n  Ed25519,\n  Secp256k1,\n  Secp256r1,\n  LocalKeyManager,\n} from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod } from './did-method.js';\nimport type {\n  DidDocument,\n  DidResolutionOptions,\n  DidResolutionResult,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { KeyWithMulticodec } from '../types/multibase.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\nimport { getVerificationMethodTypes, keyBytesToMultibaseId, multibaseIdToKeyBytes } from '../utils.js';\n\n/**\n * Defines the set of options available when creating a new Decentralized Identifier (DID) with the\n * 'did:key' method.\n *\n * Either the `algorithm` or `verificationMethods` option can be specified, but not both.\n * - A new key will be generated using the algorithm identifier specified in either the `algorithm`\n *   property or the `verificationMethods` object's `algorithm` property.\n * - If `verificationMethods` is given, it must contain exactly one entry since DID Key only\n *   supports a single verification method.\n * - If neither is given, the default is to generate a new Ed25519 key.\n *\n * @example\n * ```ts\n  * // By default, when no options are given, a new Ed25519 key will be generated.\n * const did = await DidKey.create();\n *\n * // The algorithm to use for key generation can be specified as a top-level option.\n * const did = await DidKey.create({\n *   options: { algorithm = 'secp256k1' }\n * });\n *\n * // Or, alternatively as a property of the verification method.\n * const did = await DidKey.create({\n *   options: {\n *     verificationMethods: [{ algorithm = 'secp256k1' }]\n *   }\n * });\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidKey.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidKey.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidKey.import(portableDid);\n * ```\n */\nexport interface DidKeyCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify the algorithm to be used for key generation.\n   */\n  algorithm?: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Optionally specify an array of JSON-LD context links for the @context property of the DID\n   * document.\n   *\n   * The @context property provides a JSON-LD processor with the information necessary to interpret\n   * the DID document JSON. The default context URL is 'https://www.w3.org/ns/did/v1'.\n   */\n  defaultContext?: string;\n\n  /**\n   * Optionally enable encryption key derivation during DID creation.\n   *\n   * By default, this option is set to `false`, which means encryption key derivation is not\n   * performed unless explicitly enabled.\n   *\n   * When set to `true`, an `X25519` key will be derived from the `Ed25519` public key used to\n   * create the DID. This feature enables the same DID to be used for encrypted communication, in\n   * addition to signature verification.\n   *\n   * Notes:\n   * - This option is ONLY applicable when the `algorithm` of the DID's public key is `Ed25519`.\n   * - Enabling this introduces specific cryptographic considerations that should be understood\n   *   before using the same key pair for digital signatures and encrypted communication. See the following for more information:\n   */\n  enableEncryptionKeyDerivation?: boolean;\n\n  /**\n   * Optionally enable experimental public key types during DID creation.\n   * By default, this option is set to `false`, which means experimental public key types are not\n   * supported.\n   *\n   * Note: This implementation of the DID Key method does not support any experimental public key\n   * types.\n   */\n  enableExperimentalPublicKeyTypes?: boolean;\n\n  /**\n   * Optionally specify the format of the public key to be used for DID creation.\n   */\n  publicKeyFormat?: keyof typeof DidKeyVerificationMethodType;\n\n  /**\n   * Alternatively, specify the algorithm to be used for key generation of the single verification\n   * method in the DID Document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID Key document.\n *\n * The DID Key method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption.\n */\nexport enum DidKeyRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519 = 'Ed25519',\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 'secp256k1',\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 'secp256r1',\n\n  /**\n   * X25519: A Diffie-Hellman key exchange algorithm using Curve25519.\n   */\n  X25519 = 'X25519'\n}\n\n/**\n * Enumerates the verification method types supported by the DID Key method.\n *\n * This enum defines the URIs associated with common verification methods used in DID Documents.\n * These URIs represent cryptographic suites or key types standardized for use across decentralized\n * identifiers (DIDs).\n */\nexport const DidKeyVerificationMethodType = {\n  /** Represents an Ed25519 public key used for digital signatures. */\n  Ed25519VerificationKey2020: 'https://w3id.org/security/suites/ed25519-2020/v1',\n\n  /** Represents a JSON Web Key (JWK) used for digital signatures and key agreement protocols. */\n  JsonWebKey2020: 'https://w3id.org/security/suites/jws-2020/v1',\n\n  /** Represents an X25519 public key used for key agreement protocols. */\n  X25519KeyAgreementKey2020: 'https://w3id.org/security/suites/x25519-2020/v1',\n} as const;\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID Key\n * {@link DidKeyRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidKeyRegisteredKeyType.Ed25519,\n  ES256K    : DidKeyRegisteredKeyType.secp256k1,\n  ES256     : DidKeyRegisteredKeyType.secp256r1,\n  'P-256'   : DidKeyRegisteredKeyType.secp256r1,\n  secp256k1 : DidKeyRegisteredKeyType.secp256k1,\n  secp256r1 : DidKeyRegisteredKeyType.secp256r1,\n  X25519    : DidKeyRegisteredKeyType.X25519\n} as const;\n\n/**\n * The `DidKey` class provides an implementation of the 'did:key' DID method.\n *\n * Features:\n * - DID Creation: Create new `did:key` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method key set or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:key` to its corresponding DID Document.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:key` DID method uses a single public key to generate a DID and does not rely\n * on any external system such as a blockchain or centralized database. This characteristic makes\n * it suitable for use cases where a assertions about a DID Subject can be self-verifiable by\n * third parties.\n *\n * The method-specific identifier is formed by\n * {@link https://datatracker.ietf.org/doc/html/draft-multiformats-multibase#name-base-58-bitcoin-encoding | Multibase base58-btc}\n * encoding the concatenation of the\n * {@link https://github.com/multiformats/multicodec/blob/master/README.md | Multicodec} identifier\n * for the public key type and the raw public key bytes. To form the DID URI, the method-specific\n * identifier is prefixed with the string 'did:key:'.\n *\n * This method can optionally derive an encryption key from the public key used to create the DID\n * if and only if the public key algorithm is `Ed25519`. This feature enables the same DID to be\n * used for encrypted communication, in addition to signature verification. To enable this\n * feature when calling {@link DidKey.create | `DidKey.create()`}, first specify an `algorithm` of\n * `Ed25519` or provide a `keySet` referencing an `Ed25519` key and then set the\n * `enableEncryptionKeyDerivation` option to `true`.\n *\n * Note:\n * - The authors of the DID Key specification have indicated that use of this method for long-lived\n *   use cases is only recommended when accompanied with high confidence that private keys are\n *   securely protected by software or hardware isolation.\n *\n * @see {@link https://w3c-ccg.github.io/did-method-key/ | DID Key Specification}\n *\n* @example\n * ```ts\n * // DID Creation\n * const did = await DidKey.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidKey.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidKey.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object from an existing key in a KMS\n * const did = await DidKey.fromKeyManager({\n *  didUri: 'did:key:z6MkpUzNmYVTGpqhStxK8yRKXWCRNm1bGYz8geAg2zmjYHKX',\n *  keyManager\n * });\n *\n * // Instantiate a DID object from an existing verification method key\n * const did = await DidKey.fromKeys({\n *   verificationMethods: [{\n *     publicKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4'\n *     },\n *     privateKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4',\n *       d: 'bdcGE4KzEaekOwoa-ee3gAm1a991WvNj_Eq3WKyqTnE'\n *     }\n *   }]\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidKey.toKeys({ did });\n *\n * // Reconstruct a DID object from a portable format\n * const did = await DidKey.fromKeys(portableDid);\n * ```\n */\nexport class DidKey extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID Key specification.\n   */\n  public static methodName = 'key';\n\n  /**\n   * Creates a new DID using the `did:key` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by\n   * {@link https://datatracker.ietf.org/doc/html/draft-multiformats-multibase#name-base-58-bitcoin-encoding | Multibase base58-btc}\n   * encoding the\n   * {@link https://github.com/multiformats/multicodec/blob/master/README.md | Multicodec}-encoded\n   * public key and prefixing with `did:key:`.\n   *\n   * This method can optionally derive an encryption key from the public key used to create the DID\n   * if and only if the public key algorithm is `Ed25519`. This feature enables the same DID to be\n   * used for encrypted communication, in addition to signature verification. To enable this\n   * feature, specify an `algorithm` of `Ed25519` as either a top-level option or in a\n   * `verificationMethod` and set the `enableEncryptionKeyDerivation` option to `true`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   * - The `algorithm` and `verificationMethods` options are mutually exclusive. If both are given,\n   *   an error will be thrown.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidKey.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidKey.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Key Management System (KMS) used to generate keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidKeyCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that `algorithm` or `verificationMethods` options are not both given.\n    if (options.algorithm && options.verificationMethods) {\n      throw new Error(`The 'algorithm' and 'verificationMethods' options are mutually exclusive`);\n    }\n\n    // Check 2: If `verificationMethods` is given, it must contain exactly one entry since DID Key\n    // only supports a single verification method.\n    if (options.verificationMethods && options.verificationMethods.length !== 1) {\n      throw new Error(`The 'verificationMethods' option must contain exactly one entry`);\n    }\n\n    // Default to Ed25519 key generation if an algorithm is not given.\n    const algorithm = options.algorithm ?? options.verificationMethods?.[0]?.algorithm ?? 'Ed25519';\n\n    // Generate a new key using the specified `algorithm`.\n    const keyUri = await keyManager.generateKey({ algorithm });\n    const publicKey = await keyManager.getPublicKey({ keyUri });\n\n    // Compute the DID identifier from the public key by converting the JWK to a multibase-encoded\n    // multicodec value.\n    const identifier = await DidKeyUtils.publicKeyToMultibaseId({ publicKey });\n\n    // Attach the prefix `did:key` to form the complete DID URI.\n    const didUri = `did:${DidKey.methodName}:${identifier}`;\n\n    // Expand the DID URI string to a DID document.\n    const didResolutionResult = await DidKey.resolve(didUri, options);\n    const document = didResolutionResult.didDocument as DidDocument;\n\n    // Create the BearerDid object from the generated key material.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {},\n      keyManager\n    });\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:key` DID, return the verification method that will be used\n   * for signing messages and credentials. With DID Key, the first verification method in the\n   * authentication property in the DID Document is used.\n   *\n   * Note that for DID Key, only one verification method intended for signing can exist so\n   * specifying `methodId` could be considered redundant or unnecessary. The option is provided for\n   * consistency with other DID method implementations.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to ge the first verification method intended for signing claims.\n    const [ methodId ] = didDocument.assertionMethod || [];\n    const verificationMethod = didDocument.verificationMethod?.find(vm => vm.id === methodId);\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID Key method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @remarks\n   * The `verificationMethod` array of the DID document must contain exactly one key since the\n   * `did:key` method only supports a single verification method.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidKey.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the provided keys.\n   * @throws An error if the DID document does not contain exactly one verification method.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidKey.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given DID document contains exactly one verification method.\n    // Note: The non-undefined assertion is necessary because the type system cannot infer that\n    // the `verificationMethod` property is defined -- which is checked by `BearerDid.import()`.\n    if (did.document.verificationMethod!.length !== 1) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain exactly one verification method`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Resolves a `did:key` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    try {\n      // Attempt to expand the DID URI string to a DID document.\n      const didDocument = await DidKey.createDocument({ didUri, options });\n\n      // If the DID document was created successfully, return it.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n\n  /**\n   * Expands a did:key identifier to a DID Document.\n   *\n   * Reference: https://w3c-ccg.github.io/did-method-key/#document-creation-algorithm\n   *\n   * @param options\n   * @returns - A DID dodcument.\n   */\n  private static async createDocument({ didUri, options = {}}: {\n    didUri: string;\n    options?: Exclude<DidKeyCreateOptions<CryptoApi>, 'algorithm' | 'verificationMethods'> | DidResolutionOptions;\n  }): Promise<DidDocument> {\n    const {\n      defaultContext = 'https://www.w3.org/ns/did/v1',\n      enableEncryptionKeyDerivation = false,\n      enableExperimentalPublicKeyTypes = false,\n      publicKeyFormat = 'JsonWebKey2020'\n    } = options;\n\n    /**\n     * 1. Initialize document to an empty object.\n     */\n    const didDocument: DidDocument = { id: '' };\n\n    /**\n     * 2. Using a colon (:) as the delimiter, split the identifier into its\n     * components: a scheme, a method, a version, and a multibaseValue.\n     * If there are only three components set the version to the string\n     * value 1 and use the last value as the multibaseValue.\n     */\n    const parsedDid = Did.parse(didUri);\n    if (!parsedDid) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n    const multibaseValue = parsedDid.id;\n\n    /**\n     * 3. Check the validity of the input identifier.\n     * The scheme MUST be the value did. The method MUST be the value key.\n     * The version MUST be convertible to a positive integer value. The\n     * multibaseValue MUST be a string and begin with the letter z. If any\n     * of these requirements fail, an invalidDid error MUST be raised.\n     */\n    if (parsedDid.method !== DidKey.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n    if (!DidKey.validateIdentifier(parsedDid)) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n\n    /**\n     * 4. Initialize the signatureVerificationMethod to the result of passing\n     * identifier, multibaseValue, and options to a\n     *  {@link https://w3c-ccg.github.io/did-method-key/#signature-method-creation-algorithm | Signature Method Creation Algorithm}.\n     */\n    const signatureVerificationMethod = await DidKey.createSignatureMethod({\n      didUri,\n      multibaseValue,\n      options: { enableExperimentalPublicKeyTypes, publicKeyFormat }\n    });\n\n    /**\n     * 5. Set document.id to identifier. If document.id is not a valid DID,\n     * an invalidDid error MUST be raised.\n     *\n     * Note: Identifier was already confirmed to be valid in Step 3, so\n     *       skipping the redundant validation.\n     */\n    didDocument.id = parsedDid.uri;\n\n    /**\n     * 6. Initialize the verificationMethod property in document to an array\n     * where the first value is the signatureVerificationMethod.\n     */\n    didDocument.verificationMethod = [signatureVerificationMethod];\n\n    /**\n     * 7. Initialize the authentication, assertionMethod, capabilityInvocation,\n     * and the capabilityDelegation properties in document to an array where\n     * the first item is the value of the id property in\n     * signatureVerificationMethod.\n     */\n    didDocument.authentication = [signatureVerificationMethod.id];\n    didDocument.assertionMethod = [signatureVerificationMethod.id];\n    didDocument.capabilityInvocation = [signatureVerificationMethod.id];\n    didDocument.capabilityDelegation = [signatureVerificationMethod.id];\n\n    /**\n     * 8. If options.enableEncryptionKeyDerivation is set to true:\n     * Add the encryptionVerificationMethod value to the verificationMethod\n     * array. Initialize the keyAgreement property in document to an array\n     * where the first item is the value of the id property in\n     * encryptionVerificationMethod.\n     */\n    if (enableEncryptionKeyDerivation === true) {\n      /**\n       * Although not covered by the did:key method specification, a sensible\n       * default will be taken to use the 'X25519KeyAgreementKey2020'\n       * verification method type if the given publicKeyFormat is\n       * 'Ed25519VerificationKey2020' and 'JsonWebKey2020' otherwise.\n       */\n      const encryptionPublicKeyFormat =\n        (publicKeyFormat === 'Ed25519VerificationKey2020')\n          ? 'X25519KeyAgreementKey2020'\n          : 'JsonWebKey2020';\n\n      /**\n       * 8.1 Initialize the encryptionVerificationMethod to the result of\n       * passing identifier, multibaseValue, and options to an\n     * {@link https://w3c-ccg.github.io/did-method-key/#encryption-method-creation-algorithm | Encryption Method Creation Algorithm}.\n       */\n      const encryptionVerificationMethod = await this.createEncryptionMethod({\n        didUri,\n        multibaseValue,\n        options: { enableExperimentalPublicKeyTypes, publicKeyFormat: encryptionPublicKeyFormat }\n      });\n\n      /**\n       * 8.2 Add the encryptionVerificationMethod value to the\n       * verificationMethod array.\n       */\n      didDocument.verificationMethod.push(encryptionVerificationMethod);\n\n      /**\n       * 8.3. Initialize the keyAgreement property in document to an array\n       * where the first item is the value of the id property in\n       * encryptionVerificationMethod.\n       */\n      didDocument.keyAgreement = [encryptionVerificationMethod.id];\n    }\n\n    /**\n     * 9. Initialize the @context property in document to the result of passing document and options to the Context\n     * Creation algorithm.\n     */\n    // Set contextArray to an array that is initialized to options.defaultContext.\n    const contextArray = [ defaultContext ];\n\n    // For every object in every verification relationship listed in document,\n    // add a string value to the contextArray based on the object type value,\n    // if it doesn't already exist, according to the following table:\n    // {@link https://w3c-ccg.github.io/did-method-key/#context-creation-algorithm | Context Type URL}\n    const verificationMethodTypes = getVerificationMethodTypes({ didDocument });\n    verificationMethodTypes.forEach((typeName: string) => {\n      const typeUrl = DidKeyVerificationMethodType[typeName as keyof typeof DidKeyVerificationMethodType];\n      contextArray.push(typeUrl);\n    });\n    didDocument['@context'] = contextArray;\n\n    /**\n     * 10. Return document.\n     */\n    return didDocument;\n  }\n\n  /**\n   * Decoding a multibase-encoded multicodec value into a verification method\n   * that is suitable for verifying that encrypted information will be\n   * received by the intended recipient.\n   */\n  private static async createEncryptionMethod({ didUri, multibaseValue, options }: {\n    didUri: string;\n    multibaseValue: string;\n    options: Required<Pick<DidKeyCreateOptions<CryptoApi>, 'enableExperimentalPublicKeyTypes' | 'publicKeyFormat'>>;\n  }): Promise<DidVerificationMethod> {\n    const { enableExperimentalPublicKeyTypes, publicKeyFormat } = options;\n\n    /**\n     * 1. Initialize verificationMethod to an empty object.\n     */\n    const verificationMethod: DidVerificationMethod = { id: '', type: '', controller: '' };\n\n    /**\n     * 2. Set multicodecValue and raw publicKeyBytes to the result of passing multibaseValue and\n     * options to a Derive Encryption Key algorithm.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue,\n    } = await DidKey.deriveEncryptionKey({ multibaseValue });\n\n    /**\n     * 3. Ensure the proper key length of raw publicKeyBytes based on the multicodecValue table\n     * provided below:\n     *\n     * Multicodec hexadecimal value: 0xec\n     *\n     * If the byte length of raw publicKeyBytes does not match the expected public key length for\n     * the associated multicodecValue, an invalidPublicKeyLength error MUST be raised.\n     */\n    const actualLength = publicKeyBytes.byteLength;\n    const expectedLength = DidKeyUtils.MULTICODEC_PUBLIC_KEY_LENGTH[multicodecValue];\n    if (actualLength !== expectedLength) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Expected ${actualLength} bytes. Actual: ${expectedLength}`);\n    }\n\n    /**\n     * 4. Create the multibaseValue by concatenating the letter 'z' and the\n     * base58-btc encoding of the concatenation of the multicodecValue and\n     * the raw publicKeyBytes.\n     */\n    const kemMultibaseValue = keyBytesToMultibaseId({\n      keyBytes       : publicKeyBytes,\n      multicodecCode : multicodecValue\n    });\n\n    /**\n     * 5. Set the verificationMethod.id value by concatenating identifier,\n     * a hash character (#), and the multibaseValue. If verificationMethod.id\n     * is not a valid DID URL, an invalidDidUrl error MUST be raised.\n     */\n    verificationMethod.id = `${didUri}#${kemMultibaseValue}`;\n    try {\n      new URL(verificationMethod.id);\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InvalidDidUrl, 'Verification Method ID is not a valid DID URL.');\n    }\n\n    /**\n     * 6. Set the publicKeyFormat value to the options.publicKeyFormat value.\n     * 7. If publicKeyFormat is not known to the implementation, an\n     * unsupportedPublicKeyType error MUST be raised.\n     */\n    if (!(publicKeyFormat in DidKeyVerificationMethodType)) {\n      throw new DidError(DidErrorCode.UnsupportedPublicKeyType, `Unsupported format: ${publicKeyFormat}`);\n    }\n\n    /**\n     * 8. If options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not\n     * Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an invalidPublicKeyType error MUST be\n     * raised.\n     */\n    const StandardPublicKeyTypes = ['Multikey', 'JsonWebKey2020', 'X25519KeyAgreementKey2020'];\n    if (enableExperimentalPublicKeyTypes === false\n      && !(StandardPublicKeyTypes.includes(publicKeyFormat))) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Specified '${publicKeyFormat}' without setting enableExperimentalPublicKeyTypes to true.`);\n    }\n\n    /**\n     * 9. Set verificationMethod.type to the publicKeyFormat value.\n     */\n    verificationMethod.type = publicKeyFormat;\n\n    /**\n     * 10. Set verificationMethod.controller to the identifier value.\n     */\n    verificationMethod.controller = didUri;\n\n    /**\n     * 11. If publicKeyFormat is Multikey or X25519KeyAgreementKey2020, set the verificationMethod.publicKeyMultibase\n     * value to multibaseValue.\n     *\n     * Note: This implementation does not currently support the Multikey\n     *       format.\n     */\n    if (publicKeyFormat === 'X25519KeyAgreementKey2020') {\n      verificationMethod.publicKeyMultibase = kemMultibaseValue;\n    }\n\n    /**\n     * 12. If publicKeyFormat is JsonWebKey2020, set the verificationMethod.publicKeyJwk value to\n     * the result of passing multicodecValue and rawPublicKeyBytes to a JWK encoding algorithm.\n     */\n    if (publicKeyFormat === 'JsonWebKey2020') {\n      const { crv } = await DidKeyUtils.multicodecToJwk({ code: multicodecValue });\n      verificationMethod.publicKeyJwk = await DidKeyUtils.keyConverter(crv!).bytesToPublicKey({ publicKeyBytes });\n    }\n\n    /**\n     * 13. Return verificationMethod.\n     */\n    return verificationMethod;\n  }\n\n  /**\n   * Decodes a multibase-encoded multicodec value into a verification method\n   * that is suitable for verifying digital signatures.\n   * @param options - Signature method creation algorithm inputs.\n   * @returns - A verification method.\n   */\n  private static async createSignatureMethod({ didUri, multibaseValue, options }: {\n    didUri: string;\n    multibaseValue: string;\n    options: Required<Pick<DidKeyCreateOptions<CryptoApi>, 'enableExperimentalPublicKeyTypes' | 'publicKeyFormat'>>\n  }): Promise<DidVerificationMethod> {\n    const { enableExperimentalPublicKeyTypes, publicKeyFormat } = options;\n\n    /**\n     * 1. Initialize verificationMethod to an empty object.\n     */\n    const verificationMethod: DidVerificationMethod = { id: '', type: '', controller: '' };\n\n    /**\n     * 2. Set multicodecValue and publicKeyBytes to the result of passing\n     * multibaseValue and options to a Decode Public Key algorithm.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue,\n      multicodecName\n    } = multibaseIdToKeyBytes({ multibaseKeyId: multibaseValue });\n\n    /**\n     * 3. Ensure the proper key length of publicKeyBytes based on the multicodecValue\n     * {@link https://w3c-ccg.github.io/did-method-key/#signature-method-creation-algorithm | table provided}.\n     * If the byte length of rawPublicKeyBytes does not match the expected public key length for the\n     * associated multicodecValue, an invalidPublicKeyLength error MUST be raised.\n     */\n    const actualLength = publicKeyBytes.byteLength;\n    const expectedLength = DidKeyUtils.MULTICODEC_PUBLIC_KEY_LENGTH[multicodecValue];\n    if (actualLength !== expectedLength) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Expected ${actualLength} bytes. Actual: ${expectedLength}`);\n    }\n\n    /**\n     * 4. Ensure the publicKeyBytes are a proper encoding of the public key type as specified by\n     * the multicodecValue. If an invalid public key value is detected, an invalidPublicKey error\n     * MUST be raised.\n     */\n    let isValid = false;\n    switch (multicodecName) {\n      case 'secp256k1-pub':\n        isValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n        break;\n      case 'ed25519-pub':\n        isValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n        break;\n      case 'x25519-pub':\n        // TODO: Validate key once/if X25519.validatePublicKey() is implemented.\n        // isValid = X25519.validatePublicKey({ key: rawPublicKeyBytes})\n        isValid = true;\n        break;\n    }\n    if (!isValid) {\n      throw new DidError(DidErrorCode.InvalidPublicKey, 'Invalid public key detected.');\n    }\n\n    /**\n     * 5. Set the verificationMethod.id value by concatenating identifier, a hash character (#), and\n     * the multibaseValue. If verificationMethod.id is not a valid DID URL, an invalidDidUrl error\n     * MUST be raised.\n     */\n    verificationMethod.id = `${didUri}#${multibaseValue}`;\n    try {\n      new URL(verificationMethod.id);\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InvalidDidUrl, 'Verification Method ID is not a valid DID URL.');\n    }\n\n    /**\n     * 6. Set the publicKeyFormat value to the options.publicKeyFormat value.\n     * 7. If publicKeyFormat is not known to the implementation, an unsupportedPublicKeyType error\n     * MUST be raised.\n     */\n    if (!(publicKeyFormat in DidKeyVerificationMethodType)) {\n      throw new DidError(DidErrorCode.UnsupportedPublicKeyType, `Unsupported format: ${publicKeyFormat}`);\n    }\n\n    /**\n     * 8. If options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not\n     * Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an invalidPublicKeyType error MUST\n     * be raised.\n     */\n    const StandardPublicKeyTypes = ['Multikey', 'JsonWebKey2020', 'Ed25519VerificationKey2020'];\n    if (enableExperimentalPublicKeyTypes === false\n      && !(StandardPublicKeyTypes.includes(publicKeyFormat))) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Specified '${publicKeyFormat}' without setting enableExperimentalPublicKeyTypes to true.`);\n    }\n\n    /**\n     * 9. Set verificationMethod.type to the publicKeyFormat value.\n     */\n    verificationMethod.type = publicKeyFormat;\n\n    /**\n     * 10. Set verificationMethod.controller to the identifier value.\n     */\n    verificationMethod.controller = didUri;\n\n    /**\n     * 11. If publicKeyFormat is Multikey or Ed25519VerificationKey2020,\n     * set the verificationMethod.publicKeyMultibase value to multibaseValue.\n     *\n     * Note: This implementation does not currently support the Multikey\n     *       format.\n     */\n    if (publicKeyFormat === 'Ed25519VerificationKey2020') {\n      verificationMethod.publicKeyMultibase = multibaseValue;\n    }\n\n    /**\n     * 12. If publicKeyFormat is JsonWebKey2020, set the verificationMethod.publicKeyJwk value to\n     * the result of passing multicodecValue and rawPublicKeyBytes to a JWK encoding algorithm.\n     */\n    if (publicKeyFormat === 'JsonWebKey2020') {\n      const { crv } = await DidKeyUtils.multicodecToJwk({ code: multicodecValue });\n      verificationMethod.publicKeyJwk = await DidKeyUtils.keyConverter(crv!).bytesToPublicKey({ publicKeyBytes});\n    }\n\n    /**\n     * 13. Return verificationMethod.\n     */\n    return verificationMethod;\n  }\n\n\n  /**\n   * Transform a multibase-encoded multicodec value to public encryption key\n   * components that are suitable for encrypting messages to a receiver. A\n   * mathematical proof elaborating on the safety of performing this operation\n   * is available in:\n   * {@link https://eprint.iacr.org/2021/509.pdf | On using the same key pair for Ed25519 and an X25519 based KEM}\n   */\n  private static async deriveEncryptionKey({ multibaseValue }: {\n    multibaseValue: string\n  }): Promise<RequireOnly<KeyWithMulticodec, 'keyBytes' | 'multicodecCode'>> {\n    /**\n     * 1. Set publicEncryptionKey to an empty object.\n     */\n    let publicEncryptionKey: RequireOnly<KeyWithMulticodec, 'keyBytes' | 'multicodecCode'> = {\n      keyBytes       : new Uint8Array(),\n      multicodecCode : 0\n    };\n\n    /**\n     * 2. Decode multibaseValue using the base58-btc multibase alphabet and\n     * set multicodecValue to the multicodec header for the decoded value.\n     * Implementers are cautioned to ensure that the multicodecValue is set\n     * to the result after performing varint decoding.\n     *\n     * 3. Set the rawPublicKeyBytes to the bytes remaining after the multicodec\n     * header.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue\n    } = multibaseIdToKeyBytes({ multibaseKeyId: multibaseValue });\n\n    /**\n     * 4. If the multicodecValue is 0xed (Ed25519 public key), derive a public X25519 encryption key\n     * by using the raw publicKeyBytes and the algorithm defined in\n     * {@link https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-groupcomm | Group OSCORE - Secure Group Communication for CoAP}\n     * for Curve25519 in Section 2.4.2: ECDH with Montgomery Coordinates and set\n     * generatedPublicEncryptionKeyBytes to the result.\n     */\n    if (multicodecValue === 0xed) {\n      const ed25519PublicKey = await DidKeyUtils.keyConverter('Ed25519').bytesToPublicKey({\n        publicKeyBytes\n      });\n      const generatedPublicEncryptionKey = await Ed25519.convertPublicKeyToX25519({\n        publicKey: ed25519PublicKey\n      });\n      const generatedPublicEncryptionKeyBytes = await DidKeyUtils.keyConverter('Ed25519').publicKeyToBytes({\n        publicKey: generatedPublicEncryptionKey\n      });\n\n      /**\n       * 5. Set multicodecValue to 0xec.\n       * 6. Set raw public keyBytes to generatedPublicEncryptionKeyBytes.\n       */\n      publicEncryptionKey = {\n        keyBytes       : generatedPublicEncryptionKeyBytes,\n        multicodecCode : 0xec\n      };\n    }\n\n    /**\n     * 7. Return publicEncryptionKey.\n     */\n    return publicEncryptionKey;\n  }\n\n  /**\n   * Validates the structure and components of a DID URI against the `did:key` method specification.\n   *\n   * @param parsedDid - An object representing the parsed components of a DID URI, including the\n   *                    scheme, method, and method-specific identifier.\n   * @returns `true` if the DID URI meets the `did:key` method's structural requirements, `false` otherwise.\n   *\n   */\n  private static validateIdentifier(parsedDid: Did): boolean {\n    const { method, id: multibaseValue } = parsedDid;\n    const [ scheme ] = parsedDid.uri.split(':', 1);\n\n    /**\n     * Note: The W3C DID specification makes no mention of a version value being part of the DID\n     *       syntax.  Additionally, there does not appear to be any real-world usage of the version\n     *       number. Consequently, this implementation will ignore the version related guidance in\n     *       the did:key specification.\n     */\n    const version = '1';\n\n    return (\n      scheme === 'did' &&\n      method === 'key' &&\n      Number(version) > 0 &&\n      universalTypeOf(multibaseValue) === 'String' &&\n      multibaseValue.startsWith('z')\n    );\n  }\n}\n\n/**\n * The `DidKeyUtils` class provides utility functions to support operations in the DID Key method.\n */\nexport class DidKeyUtils {\n  /**\n   * A mapping from JSON Web Key (JWK) property descriptors to multicodec names.\n   *\n   * This mapping is used to convert keys in JWK (JSON Web Key) format to multicodec format.\n   *\n   * @remarks\n   * The keys of this object are strings that describe the JOSE key type and usage,\n   * such as 'Ed25519:public', 'Ed25519:private', etc. The values are the corresponding multicodec\n   * names used to represent these key types.\n   *\n   * @example\n   * ```ts\n   * const multicodecName = JWK_TO_MULTICODEC['Ed25519:public'];\n   * // Returns 'ed25519-pub', the multicodec name for an Ed25519 public key\n   * ```\n   */\n  private static JWK_TO_MULTICODEC: { [key: string]: string } = {\n    'Ed25519:public'    : 'ed25519-pub',\n    'Ed25519:private'   : 'ed25519-priv',\n    'secp256k1:public'  : 'secp256k1-pub',\n    'secp256k1:private' : 'secp256k1-priv',\n    'X25519:public'     : 'x25519-pub',\n    'X25519:private'    : 'x25519-priv',\n  };\n\n  /**\n   * Defines the expected byte lengths for public keys associated with different cryptographic\n   * algorithms, indexed by their multicodec code values.\n   */\n  public static MULTICODEC_PUBLIC_KEY_LENGTH: Record<number, number> = {\n    // secp256k1-pub - Secp256k1 public key (compressed) - 33 bytes\n    0xe7: 33,\n\n    // x25519-pub - Curve25519 public key - 32 bytes\n    0xec: 32,\n\n    // ed25519-pub - Ed25519 public key - 32 bytes\n    0xed: 32\n  };\n\n  /**\n   * A mapping from multicodec names to their corresponding JOSE (JSON Object Signing and Encryption)\n   * representations. This mapping facilitates the conversion of multicodec key formats to\n   * JWK (JSON Web Key) formats.\n   *\n   * @remarks\n   * The keys of this object are multicodec names, such as 'ed25519-pub', 'ed25519-priv', etc.\n   * The values are objects representing the corresponding JWK properties for that key type.\n   *\n   * @example\n   * ```ts\n   * const joseKey = MULTICODEC_TO_JWK['ed25519-pub'];\n   * // Returns a partial JWK for an Ed25519 public key\n   * ```\n   */\n  private static MULTICODEC_TO_JWK: { [key: string]: Jwk } = {\n    'ed25519-pub'    : { crv: 'Ed25519',   kty: 'OKP', x: '' },\n    'ed25519-priv'   : { crv: 'Ed25519',   kty: 'OKP', x: '',        d: '' },\n    'secp256k1-pub'  : { crv: 'secp256k1', kty: 'EC',  x: '', y: ''},\n    'secp256k1-priv' : { crv: 'secp256k1', kty: 'EC',  x: '', y: '', d: '' },\n    'x25519-pub'     : { crv: 'X25519',    kty: 'OKP', x: '' },\n    'x25519-priv'    : { crv: 'X25519',    kty: 'OKP', x: '',        d: '' },\n  };\n\n  /**\n   * Converts a JWK (JSON Web Key) to a Multicodec code and name.\n   *\n   * @example\n   * ```ts\n   * const jwk: Jwk = { crv: 'Ed25519', kty: 'OKP', x: '...' };\n   * const { code, name } = await DidKeyUtils.jwkToMulticodec({ jwk });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.jwk - The JSON Web Key to be converted.\n   * @returns A promise that resolves to a Multicodec definition.\n   */\n  public static async jwkToMulticodec({ jwk }: {\n    jwk: Jwk\n  }): Promise<MulticodecDefinition<MulticodecCode>> {\n    const params: string[] = [];\n\n    if (jwk.crv) {\n      params.push(jwk.crv);\n      if (jwk.d) {\n        params.push('private');\n      } else {\n        params.push('public');\n      }\n    }\n\n    const lookupKey = params.join(':');\n    const name = DidKeyUtils.JWK_TO_MULTICODEC[lookupKey];\n\n    if (name === undefined) {\n      throw new Error(`Unsupported JWK to Multicodec conversion: '${lookupKey}'`);\n    }\n\n    const code = Multicodec.getCodeFromName({ name });\n\n    return { code, name };\n  }\n\n  /**\n   * Returns the appropriate public key compressor for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns A public key compressor for the specified curve.\n   */\n  public static keyCompressor(\n    curve: string\n  ): KeyCompressor['compressPublicKey'] {\n  // ): ({ publicKeyBytes }: { publicKeyBytes: Uint8Array }) => Promise<Uint8Array> {\n    const compressors = {\n      'P-256'     : Secp256r1.compressPublicKey,\n      'secp256k1' : Secp256k1.compressPublicKey\n    } as Record<string, KeyCompressor['compressPublicKey']>;\n\n    const compressor = compressors[curve];\n\n    if (!compressor) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return compressor;\n  }\n\n  /**\n   * Returns the appropriate key converter for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns An `AsymmetricKeyConverter` for the specified curve.\n   */\n  public static keyConverter(curve: string): AsymmetricKeyConverter {\n    const converters: Record<string, AsymmetricKeyConverter> = {\n      'Ed25519'   : Ed25519,\n      'P-256'     : Secp256r1,\n      'secp256k1' : Secp256k1,\n      'X25519'    : X25519\n    };\n\n    const converter = converters[curve];\n\n    if (!converter) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return converter;\n  }\n\n  /**\n   * Converts a Multicodec code or name to parial JWK (JSON Web Key).\n   *\n   * @example\n   * ```ts\n   * const partialJwk = await DidKeyUtils.multicodecToJwk({ name: 'ed25519-pub' });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.code - Optional Multicodec code to convert.\n   * @param params.name - Optional Multicodec name to convert.\n   * @returns A promise that resolves to a JOSE format key.\n   */\n  public static async multicodecToJwk({ code, name }: {\n    code?: MulticodecCode,\n    name?: string\n  }): Promise<Jwk> {\n    // Either code or name must be specified, but not both.\n    if (!(name ? !code : code)) {\n      throw new Error(`Either 'name' or 'code' must be defined, but not both.`);\n    }\n\n    // If name is undefined, lookup by code.\n    name = (name === undefined ) ? Multicodec.getNameFromCode({ code: code! }) : name;\n\n    const lookupKey = name;\n    const jose = DidKeyUtils.MULTICODEC_TO_JWK[lookupKey];\n\n    if (jose === undefined) {\n      throw new Error(`Unsupported Multicodec to JWK conversion`);\n    }\n\n    return { ...jose };\n  }\n\n  /**\n   * Converts a public key in JWK (JSON Web Key) format to a multibase identifier.\n   *\n   * @remarks\n   * Note: All secp public keys are converted to compressed point encoding\n   *       before the multibase identifier is computed.\n   *\n   * Per {@link https://github.com/multiformats/multicodec/blob/master/table.csv | Multicodec table}:\n   *    Public keys for Elliptic Curve cryptography algorithms (e.g., secp256k1,\n   *    secp256k1r1, secp384r1, etc.) are always represented with compressed point\n   *    encoding (e.g., secp256k1-pub, p256-pub, p384-pub, etc.).\n   *\n   * Per {@link https://datatracker.ietf.org/doc/html/rfc8812#name-jose-and-cose-secp256k1-cur | RFC 8812}:\n   *    \"As a compressed point encoding representation is not defined for JWK\n   *    elliptic curve points, the uncompressed point encoding defined there\n   *    MUST be used. The x and y values represented MUST both be exactly\n   *    256 bits, with any leading zeros preserved.\"\n   *\n   * @example\n   * ```ts\n   * const publicKey = { crv: 'Ed25519', kty: 'OKP', x: '...' };\n   * const multibaseId = await DidKeyUtils.publicKeyToMultibaseId({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.publicKey - The public key in JWK format.\n   * @returns A promise that resolves to the multibase identifier.\n   */\n  public static async publicKeyToMultibaseId({ publicKey }: {\n    publicKey: Jwk\n  }): Promise<string> {\n    if (!(publicKey?.crv && publicKey.crv in AlgorithmToKeyTypeMap)) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Public key contains an unsupported key type: ${publicKey?.crv ?? 'undefined'}`);\n    }\n\n    // Convert the public key from JWK format to a byte array.\n    let publicKeyBytes = await DidKeyUtils.keyConverter(publicKey.crv).publicKeyToBytes({ publicKey });\n\n    // Compress the public key if it is an elliptic curve key.\n    if (/^(secp256k1|P-256|P-384|P-521)$/.test(publicKey.crv)) {\n      publicKeyBytes = await DidKeyUtils.keyCompressor(publicKey.crv)({ publicKeyBytes });\n    }\n\n    // Convert the JSON Web Key (JWK) parameters to a Multicodec name.\n    const { name: multicodecName } = await DidKeyUtils.jwkToMulticodec({ jwk: publicKey });\n\n    // Compute the multibase identifier based on the provided key.\n    const multibaseId = keyBytesToMultibaseId({\n      keyBytes: publicKeyBytes,\n      multicodecName\n    });\n\n    return multibaseId;\n  }\n}", "import type { DidDocument, DidResolutionOptions, DidResolutionResult } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * The `DidWeb` class provides an implementation of the `did:web` DID method.\n *\n * Features:\n * - DID Resolution: Resolve a `did:web` to its corresponding DID Document.\n *\n * @remarks\n * The `did:web` method uses a web domain's existing reputation and aims to integrate decentralized\n * identities with the existing web infrastructure to drive adoption. It leverages familiar web\n * security models and domain ownership to provide accessible, interoperable digital identity\n * management.\n *\n * @see {@link https://w3c-ccg.github.io/did-method-web/ | DID Web Specification}\n *\n * @example\n * ```ts\n * // DID Resolution\n * const resolutionResult = await DidWeb.resolve({ did: did.uri });\n * ```\n */\nexport class DidWeb extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID Web specification.\n   */\n  public static methodName = 'web';\n\n  /**\n   * Resolves a `did:web` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // If parsing failed, the DID is invalid.\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"web\", return an error.\n    if (parsedDid.method !== DidWeb.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    // Replace \":\" with \"/\" in the identifier and prepend \"https://\" to obtain the fully qualified\n    // domain name and optional path.\n    let baseUrl = `https://${parsedDid.id.replace(/:/g, '/')}`;\n\n    // If the domain contains a percent encoded port value, decode the colon.\n    baseUrl = decodeURIComponent(baseUrl);\n\n    // Append the expected location of the DID document depending on whether a path was specified.\n    const didDocumentUrl = parsedDid.id.includes(':') ?\n      `${baseUrl}/did.json` :\n      `${baseUrl}/.well-known/did.json`;\n\n    try {\n      // Perform an HTTP GET request to obtain the DID document.\n      const response = await fetch(didDocumentUrl);\n\n      // If the response status code is not 200, return an error.\n      if (!response.ok) throw new Error('HTTP error status code returned');\n\n      // Parse the DID document.\n      const didDocument = await response.json() as DidDocument;\n\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n      };\n\n    } catch (error: any) {\n      // If the DID document could not be retrieved, return an error.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'notFound' }\n      };\n    }\n  }\n}", "import type { AbstractLevel } from 'abstract-level';\n\nimport ms from 'ms';\nimport { Level } from 'level';\n\nimport type { DidResolutionResult } from '../types/did-core.js';\nimport type { DidResolverCache } from '../types/did-resolution.js';\n\n/**\n * Configuration parameters for creating a LevelDB-based cache for DID resolution results.\n *\n * Allows customization of the underlying database instance, storage location, and cache\n * time-to-live (TTL) settings.\n */\nexport type DidResolverCacheLevelParams = {\n  /**\n   * Optional. An instance of `AbstractLevel` to use as the database. If not provided, a new\n   * LevelDB instance will be created at the specified `location`.\n   */\n  db?: AbstractLevel<string | Buffer | Uint8Array, string, string>;\n\n  /**\n   * Optional. The file system path or IndexedDB name where the LevelDB store will be created.\n   * Defaults to 'DATA/DID_RESOLVERCACHE' if not specified.\n   */\n  location?: string;\n\n  /**\n   * Optional. The time-to-live for cache entries, expressed as a string (e.g., '1h', '15m').\n   * Determines how long a cache entry should remain valid before being considered expired. Defaults\n   * to '15m' if not specified.\n   */\n  ttl?: string;\n}\n\n/**\n * Encapsulates a DID resolution result along with its expiration information for caching purposes.\n *\n * This type is used internally by the `DidResolverCacheLevel` to store DID resolution results\n * with an associated time-to-live (TTL) value. The TTL is represented in milliseconds and\n * determines when the cached entry is considered expired and eligible for removal.\n */\ntype CacheWrapper = {\n  /**\n   * The expiration time of the cache entry in milliseconds since the Unix epoch.\n   *\n   * This value is used to calculate whether the cached entry is still valid or has expired.\n   */\n  ttlMillis: number;\n\n  /**\n   * The DID resolution result being cached.\n   *\n   * This object contains the resolved DID document and associated metadata.\n   */\n  value: DidResolutionResult;\n}\n\n/**\n * A Level-based cache implementation for storing and retrieving DID resolution results.\n *\n * This cache uses LevelDB for storage, allowing data persistence across process restarts or\n * browser refreshes. It's suitable for both Node.js and browser environments.\n *\n * @remarks\n * The LevelDB cache keeps data in memory for fast access and also writes to the filesystem in\n * Node.js or indexedDB in browsers. Time-to-live (TTL) for cache entries is configurable.\n *\n * @example\n * ```\n * const cache = new DidResolverCacheLevel({ ttl: '15m' });\n * ```\n */\nexport class DidResolverCacheLevel implements DidResolverCache {\n  /** The underlying LevelDB store used for caching. */\n  private cache: AbstractLevel<string | Buffer | Uint8Array, string, string>;\n\n  /** The time-to-live for cache entries in milliseconds. */\n  private ttl: number;\n\n  constructor({\n    db,\n    location = 'DATA/DID_RESOLVERCACHE',\n    ttl = '15m'\n  }: DidResolverCacheLevelParams = {}) {\n    this.cache = db ?? new Level<string, string>(location);\n    this.ttl = ms(ttl);\n  }\n\n  /**\n   * Retrieves a DID resolution result from the cache.\n   *\n   * If the cached item has exceeded its TTL, it's scheduled for deletion and undefined is returned.\n   *\n   * @param did - The DID string used as the key for retrieving the cached result.\n   * @returns The cached DID resolution result or undefined if not found or expired.\n   */\n  async get(did: string): Promise<DidResolutionResult | void> {\n    try {\n      const str = await this.cache.get(did);\n      const cacheWrapper: CacheWrapper = JSON.parse(str);\n\n      if (Date.now() >= cacheWrapper.ttlMillis) {\n        // defer deletion to be called in the next tick of the js event loop\n        this.cache.nextTick(() => this.cache.del(did));\n\n        return;\n      } else {\n        return cacheWrapper.value;\n      }\n\n    } catch(error: any) {\n      // Don't throw when a key wasn't found.\n      if (error.notFound) {\n        return;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Stores a DID resolution result in the cache with a TTL.\n   *\n   * @param did - The DID string used as the key for storing the result.\n   * @param value - The DID resolution result to be cached.\n   * @returns A promise that resolves when the operation is complete.\n   */\n  set(did: string, value: DidResolutionResult): Promise<void> {\n    const cacheWrapper: CacheWrapper = { ttlMillis: Date.now() + this.ttl, value };\n    const str = JSON.stringify(cacheWrapper);\n\n    return this.cache.put(did, str);\n  }\n\n  /**\n   * Deletes a DID resolution result from the cache.\n   *\n   * @param did - The DID string used as the key for deletion.\n   * @returns A promise that resolves when the operation is complete.\n   */\n  delete(did: string): Promise<void> {\n    return this.cache.del(did);\n  }\n\n  /**\n   * Clears all entries from the cache.\n   *\n   * @returns A promise that resolves when the operation is complete.\n   */\n  clear(): Promise<void> {\n    return this.cache.clear();\n  }\n\n  /**\n   * Closes the underlying LevelDB store.\n   *\n   * @returns A promise that resolves when the store is closed.\n   */\n  close(): Promise<void> {\n    return this.cache.close();\n  }\n}", "import type { DidResolutionResult } from '../types/did-core.js';\nimport type { DidResolverCache } from '../types/did-resolution.js';\n\n/**\n * No-op cache that is used as the default cache for did-resolver.\n *\n * The motivation behind using a no-op cache as the default stems from the desire to maximize the\n * potential for this library to be used in as many JS runtimes as possible.\n */\nexport const DidResolverCacheNoop: DidResolverCache = {\n  get: function (_key: string): Promise<DidResolutionResult> {\n    return null as any;\n  },\n  set: function (_key: string, _value: DidResolutionResult): Promise<void> {\n    return null as any;\n  },\n  delete: function (_key: string): Promise<void> {\n    return null as any;\n  },\n  clear: function (): Promise<void> {\n    return null as any;\n  },\n  close: function (): Promise<void> {\n    return null as any;\n  }\n};", "import type { DidMethodResolver } from '../methods/did-method.js';\nimport type { DidResolver, DidResolverCache, DidUrlDereferencer } from '../types/did-resolution.js';\nimport type { DidDereferencingOptions, DidDereferencingResult, DidResolutionOptions, DidResolutionResult, DidResource } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidErrorCode } from '../did-error.js';\nimport { DidResolverCacheNoop } from './resolver-cache-noop.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Parameters for configuring the `UniversalResolver` class, which is responsible for resolving\n * decentralized identifiers (DIDs) to their corresponding DID documents.\n *\n * This type specifies the essential components required by the `UniversalResolver` to perform\n * DID resolution and dereferencing. It includes an array of `DidMethodResolver` instances,\n * each capable of resolving DIDs for a specific method, and optionally, a cache for storing\n * resolved DID documents to improve resolution efficiency.\n */\nexport type UniversalResolverParams = {\n  /**\n   * An array of `DidMethodResolver` instances.\n   *\n   * Each resolver in this array is designed to handle a specific DID method, enabling the\n   * `DidResolver` to support multiple DID methods simultaneously.\n   */\n  didResolvers: DidMethodResolver[];\n\n  /**\n   * An optional `DidResolverCache` instance used for caching resolved DID documents.\n   *\n   * Providing a cache implementation can significantly enhance resolution performance by avoiding\n   * redundant resolutions for previously resolved DIDs. If omitted, a no-operation cache is used,\n   * which effectively disables caching.\n   */\n  cache?: DidResolverCache;\n}\n\n/**\n * The `DidResolver` class provides mechanisms for resolving Decentralized Identifiers (DIDs) to\n * their corresponding DID documents.\n *\n * The class is designed to handle various DID methods by utilizing an array of `DidMethodResolver`\n * instances, each responsible for a specific DID method.\n *\n * Providing a cache implementation can significantly enhance resolution performance by avoiding\n * redundant resolutions for previously resolved DIDs. If omitted, a no-operation cache is used,\n * which effectively disables caching.\n *\n * Usage:\n * - Construct the `DidResolver` with an array of `DidMethodResolver` instances and an optional cache.\n * - Use `resolve` to resolve a DID to its DID Resolution Result.\n * - Use `dereference` to extract specific resources from a DID URL, like service endpoints or verification methods.\n *\n * @example\n * ```ts\n * const resolver = new DidResolver({\n *   didResolvers: [<array of DidMethodResolver instances>],\n *   cache: new DidResolverCacheNoop()\n * });\n *\n * const resolutionResult = await resolver.resolve('did:example:123456');\n * const dereferenceResult = await resolver.dereference({ didUri: 'did:example:123456#key-1' });\n * ```\n */\nexport class UniversalResolver implements DidResolver, DidUrlDereferencer {\n  /**\n   * A cache for storing resolved DID documents.\n   */\n  private cache: DidResolverCache;\n\n  /**\n   * A map to store method resolvers against method names.\n   */\n  private didResolvers: Map<string, DidMethodResolver> = new Map();\n\n  /**\n   * Constructs a new `DidResolver`.\n   *\n   * @param params - The parameters for constructing the `DidResolver`.\n   */\n  constructor({ cache, didResolvers }: UniversalResolverParams) {\n    this.cache = cache || DidResolverCacheNoop;\n\n    for (const resolver of didResolvers) {\n      this.didResolvers.set(resolver.methodName, resolver);\n    }\n  }\n\n  /**\n   * Resolves a DID to a DID Resolution Result.\n   *\n   * If the DID Resolution Result is present in the cache, it returns the cached result. Otherwise,\n   * it uses the appropriate method resolver to resolve the DID, stores the resolution result in the\n   * cache, and returns the resolultion result.\n   *\n   * @param didUri - The DID or DID URL to resolve.\n   * @returns A promise that resolves to the DID Resolution Result.\n   */\n  public async resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult> {\n\n    const parsedDid = Did.parse(didUri);\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error        : DidErrorCode.InvalidDid,\n          errorMessage : `Invalid DID URI: ${didUri}`\n        }\n      };\n    }\n\n    const resolver = this.didResolvers.get(parsedDid.method);\n    if (!resolver) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error        : DidErrorCode.MethodNotSupported,\n          errorMessage : `Method not supported: ${parsedDid.method}`\n        }\n      };\n    }\n\n    const cachedResolutionResult = await this.cache.get(parsedDid.uri);\n\n    if (cachedResolutionResult) {\n      return cachedResolutionResult;\n    } else {\n      const resolutionResult = await resolver.resolve(parsedDid.uri, options);\n\n      await this.cache.set(parsedDid.uri, resolutionResult);\n\n      return resolutionResult;\n    }\n  }\n\n  /**\n   * Dereferences a DID (Decentralized Identifier) URL to a corresponding DID resource.\n   *\n   * This method interprets the DID URL's components, which include the DID method, method-specific\n   * identifier, path, query, and fragment, and retrieves the related resource as per the DID Core\n   * specifications.\n   *\n   * The dereferencing process involves resolving the DID contained in the DID URL to a DID document,\n   * and then extracting the specific part of the document identified by the fragment in the DID URL.\n   * If no fragment is specified, the entire DID document is returned.\n   *\n   * This method supports resolution of different components within a DID document such as service\n   * endpoints and verification methods, based on their IDs. It accommodates both full and\n   * DID URLs as specified in the DID Core specification.\n   *\n   * More information on DID URL dereferencing can be found in the\n   * {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core specification}.\n   *\n   * TODO: This is a partial implementation and does not fully implement DID URL dereferencing. (https://github.com/TBD54566975/web5-js/issues/387)\n   *\n   * @param didUrl - The DID URL string to dereference.\n   * @param [_options] - Input options to the dereference function. Optional.\n   * @returns a {@link DidDereferencingResult}\n   */\n  async dereference(\n    didUrl: string,\n    _options?: DidDereferencingOptions\n  ): Promise<DidDereferencingResult> {\n\n    // Validate the given `didUrl` confirms to the DID URL syntax.\n    const parsedDidUrl = Did.parse(didUrl);\n\n    if (!parsedDidUrl) {\n      return {\n        dereferencingMetadata : { error: DidErrorCode.InvalidDidUrl },\n        contentStream         : null,\n        contentMetadata       : {}\n      };\n    }\n\n    // Obtain the DID document for the input DID by executing DID resolution.\n    const { didDocument, didResolutionMetadata, didDocumentMetadata } = await this.resolve(parsedDidUrl.uri);\n\n    if (!didDocument) {\n      return {\n        dereferencingMetadata : { error: didResolutionMetadata.error },\n        contentStream         : null,\n        contentMetadata       : {}\n      };\n    }\n\n    // Return the entire DID Document if no query or fragment is present on the DID URL.\n    if (!parsedDidUrl.fragment || parsedDidUrl.query) {\n      return {\n        dereferencingMetadata : { contentType: 'application/did+json' },\n        contentStream         : didDocument,\n        contentMetadata       : didDocumentMetadata\n      };\n    }\n\n    const { service = [], verificationMethod = [] } = didDocument;\n\n    // Create a set of possible id matches. The DID spec allows for an id to be the entire\n    // did#fragment or just #fragment.\n    // @see {@link }https://www.w3.org/TR/did-core/#relative-did-urls | Section 3.2.2, Relative DID URLs}.\n    // Using a Set for fast string comparison since some DID methods have long identifiers.\n    const idSet = new Set([didUrl, parsedDidUrl.fragment, `#${parsedDidUrl.fragment}`]);\n\n    let didResource: DidResource | undefined;\n\n    // Find the first matching verification method in the DID document.\n    for (let vm of verificationMethod) {\n      if (idSet.has(vm.id)) {\n        didResource = vm;\n        break;\n      }\n    }\n\n    // Find the first matching service in the DID document.\n    for (let svc of service) {\n      if (idSet.has(svc.id)) {\n        didResource = svc;\n        break;\n      }\n    }\n\n    if (didResource) {\n      return {\n        dereferencingMetadata : { contentType: 'application/did+json' },\n        contentStream         : didResource,\n        contentMetadata       : didResolutionMetadata\n      };\n    } else {\n      return {\n        dereferencingMetadata : { error: DidErrorCode.NotFound },\n        contentStream         : null,\n        contentMetadata       : {},\n      };\n    }\n  }\n}", "// validator functions are compiled at build time. check ./build/compile-validators.js for more details\nimport * as compiledValidators from '../generated/compiled-validators.js';\n/**\n * validates the payload against a json schema identified by name\n * @param payload - the payload to validate\n */\nexport function validate(payload, schemaName) {\n    let validateFn = compiledValidators[schemaName];\n    if (!validateFn) {\n        throw new Error(`no validator found for ${schemaName}`);\n    }\n    validateFn(payload);\n    if (validateFn.errors) {\n        handleValidationError(validateFn.errors);\n    }\n}\nfunction handleValidationError(errors) {\n    // TODO modify default, return all errors\n    // AJV is configured by default to stop validating after the 1st error is encountered which means\n    // there will only ever be one error;\n    const [errorObj] = errors;\n    let { instancePath, message, params } = errorObj;\n    instancePath ||= 'message';\n    // if an error occurs for a property with an enum type, the default error is \"must have one of the allowed types.\"\n    // which is... unhelpful. `params.allowedValues` includes the allowed values. add this to the message if it exists\n    message = params.allowedValues ? `${message} - ${params.allowedValues.join(', ')}` : message;\n    throw new Error(`${instancePath}: ${message}`);\n}\n", "\"use strict\";\nexport const close = validate10;\nconst schema11 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/close.schema.json\", \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"reason\": { \"type\": \"string\" }, \"success\": { \"type\": \"boolean\" } } };\nfunction validate10(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/close.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        const _errs1 = errors;\n        for (const key0 in data) {\n            if (!((key0 === \"reason\") || (key0 === \"success\"))) {\n                validate10.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                return false;\n                break;\n            }\n        }\n        if (_errs1 === errors) {\n            if (data.reason !== undefined) {\n                const _errs2 = errors;\n                if (typeof data.reason !== \"string\") {\n                    validate10.errors = [{ instancePath: instancePath + \"/reason\", schemaPath: \"#/properties/reason/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                    return false;\n                }\n                var valid0 = _errs2 === errors;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.success !== undefined) {\n                    const _errs4 = errors;\n                    if (typeof data.success !== \"boolean\") {\n                        validate10.errors = [{ instancePath: instancePath + \"/success\", schemaPath: \"#/properties/success/type\", keyword: \"type\", params: { type: \"boolean\" }, message: \"must be boolean\" }];\n                        return false;\n                    }\n                    var valid0 = _errs4 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n            }\n        }\n    }\n    else {\n        validate10.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate10.errors = vErrors; return errors === 0; }\nexport const definitions = validate11;\nconst schema12 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/definitions.json\", \"type\": \"object\", \"definitions\": { \"did\": { \"type\": \"string\", \"pattern\": \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" }, \"decimalString\": { \"type\": \"string\", \"pattern\": \"^([0-9]+(?:[.][0-9]+)?)$\" } } };\nfunction validate11(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/definitions.json\" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == \"object\" && !Array.isArray(data))) {\n    validate11.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n    return false;\n} validate11.errors = vErrors; return errors === 0; }\nexport const offering = validate12;\nconst schema13 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/offering.schema.json\", \"type\": \"object\", \"properties\": { \"additionalProperties\": false, \"description\": { \"type\": \"string\", \"description\": \"Brief description of what is being offered.\" }, \"payin\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"currencyCode\": { \"type\": \"string\", \"description\": \"ISO 3166 currency code string\" }, \"min\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Minimum amount of currency that can be requested\" }, \"max\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Maximum amount of currency that can be requested\" }, \"methods\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"kind\": { \"type\": \"string\", \"description\": \"The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc.\" }, \"name\": { \"type\": \"string\", \"description\": \"Payment Method name. Expected to be rendered on screen.\" }, \"description\": { \"type\": \"string\", \"description\": \"Blurb containing helpful information about the payment method. Expected to be rendered on screen. e.g. \\\"segwit addresses only\\\"\" }, \"group\": { \"type\": \"string\", \"description\": \"Value that can be used to group specific payment methods together (e.g. Mobile Money vs. Direct Bank Deposit).\" }, \"requiredPaymentDetails\": { \"$ref\": \"http://json-schema.org/draft-07/schema\", \"description\": \"A JSON Schema containing the fields that need to be collected in order to use this payment method\" }, \"min\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Minimum amount required to use this payment method.\" }, \"max\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Maximum amount allowed when using this payment method.\" }, \"fee\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Fee charged to use this payment method. Absence of this field implies that there is no _additional_ fee associated to the respective payment method.\" } }, \"required\": [\"kind\"] } } }, \"required\": [\"currencyCode\", \"methods\"] }, \"payout\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"currencyCode\": { \"type\": \"string\", \"description\": \"ISO 3166 currency code string\" }, \"min\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Minimum amount of currency that can be requested\" }, \"max\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Maximum amount of currency that can be requested\" }, \"methods\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"kind\": { \"type\": \"string\", \"description\": \"The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc.\" }, \"name\": { \"type\": \"string\", \"description\": \"Payment Method name. Expected to be rendered on screen.\" }, \"description\": { \"type\": \"string\", \"description\": \"Blurb containing helpful information about the payment method. Expected to be rendered on screen. e.g. \\\"segwit addresses only\\\"\" }, \"group\": { \"type\": \"string\", \"description\": \"Value that can be used to group specific payment methods together (e.g. Mobile Money vs. Direct Bank Deposit).\" }, \"requiredPaymentDetails\": { \"$ref\": \"http://json-schema.org/draft-07/schema\", \"description\": \"A JSON Schema containing the fields that need to be collected in order to use this payment method\" }, \"min\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Minimum amount required to use this payment method.\" }, \"max\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Maximum amount allowed when using this payment method.\" }, \"fee\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"Fee charged to use this payment method. absence of this field implies that there is no _additional_ fee associated to the respective payment method\" }, \"estimatedSettlementTime\": { \"type\": \"number\", \"description\": \"Estimated time in seconds for the payout to be settled. e.g. 3600 for 1 hour. 0 for instant settlement.\", \"minimum\": 0 } }, \"required\": [\"kind\", \"estimatedSettlementTime\"] } } }, \"required\": [\"currencyCode\", \"methods\"] }, \"payoutUnitsPerPayinUnit\": { \"type\": \"string\", \"description\": \"Number of payout currency units for one payin currency unit (i.e 290000 USD for 1 BTC)\" }, \"requiredClaims\": { \"type\": \"object\", \"description\": \"PresentationDefinition that describes the credential(s) the PFI requires in order to provide a quote.\" } }, \"required\": [\"description\", \"payin\", \"payout\", \"payoutUnitsPerPayinUnit\"] };\nconst schema14 = { \"type\": \"string\", \"pattern\": \"^([0-9]+(?:[.][0-9]+)?)$\" };\nconst pattern0 = new RegExp(\"^([0-9]+(?:[.][0-9]+)?)$\", \"u\");\nconst schema0 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://json-schema.org/draft-07/schema#\", \"title\": \"Core schema meta-schema\", \"definitions\": { \"schemaArray\": { \"type\": \"array\", \"minItems\": 1, \"items\": { \"$ref\": \"#\" } }, \"nonNegativeInteger\": { \"type\": \"integer\", \"minimum\": 0 }, \"nonNegativeIntegerDefault0\": { \"allOf\": [{ \"$ref\": \"#/definitions/nonNegativeInteger\" }, { \"default\": 0 }] }, \"simpleTypes\": { \"enum\": [\"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\"] }, \"stringArray\": { \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"uniqueItems\": true, \"default\": [] } }, \"type\": [\"object\", \"boolean\"], \"properties\": { \"$id\": { \"type\": \"string\", \"format\": \"uri-reference\" }, \"$schema\": { \"type\": \"string\", \"format\": \"uri\" }, \"$ref\": { \"type\": \"string\", \"format\": \"uri-reference\" }, \"$comment\": { \"type\": \"string\" }, \"title\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" }, \"default\": true, \"readOnly\": { \"type\": \"boolean\", \"default\": false }, \"examples\": { \"type\": \"array\", \"items\": true }, \"multipleOf\": { \"type\": \"number\", \"exclusiveMinimum\": 0 }, \"maximum\": { \"type\": \"number\" }, \"exclusiveMaximum\": { \"type\": \"number\" }, \"minimum\": { \"type\": \"number\" }, \"exclusiveMinimum\": { \"type\": \"number\" }, \"maxLength\": { \"$ref\": \"#/definitions/nonNegativeInteger\" }, \"minLength\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" }, \"pattern\": { \"type\": \"string\", \"format\": \"regex\" }, \"additionalItems\": { \"$ref\": \"#\" }, \"items\": { \"anyOf\": [{ \"$ref\": \"#\" }, { \"$ref\": \"#/definitions/schemaArray\" }], \"default\": true }, \"maxItems\": { \"$ref\": \"#/definitions/nonNegativeInteger\" }, \"minItems\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" }, \"uniqueItems\": { \"type\": \"boolean\", \"default\": false }, \"contains\": { \"$ref\": \"#\" }, \"maxProperties\": { \"$ref\": \"#/definitions/nonNegativeInteger\" }, \"minProperties\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" }, \"required\": { \"$ref\": \"#/definitions/stringArray\" }, \"additionalProperties\": { \"$ref\": \"#\" }, \"definitions\": { \"type\": \"object\", \"additionalProperties\": { \"$ref\": \"#\" }, \"default\": {} }, \"properties\": { \"type\": \"object\", \"additionalProperties\": { \"$ref\": \"#\" }, \"default\": {} }, \"patternProperties\": { \"type\": \"object\", \"additionalProperties\": { \"$ref\": \"#\" }, \"propertyNames\": { \"format\": \"regex\" }, \"default\": {} }, \"dependencies\": { \"type\": \"object\", \"additionalProperties\": { \"anyOf\": [{ \"$ref\": \"#\" }, { \"$ref\": \"#/definitions/stringArray\" }] } }, \"propertyNames\": { \"$ref\": \"#\" }, \"const\": true, \"enum\": { \"type\": \"array\", \"items\": true, \"minItems\": 1, \"uniqueItems\": true }, \"type\": { \"anyOf\": [{ \"$ref\": \"#/definitions/simpleTypes\" }, { \"type\": \"array\", \"items\": { \"$ref\": \"#/definitions/simpleTypes\" }, \"minItems\": 1, \"uniqueItems\": true }] }, \"format\": { \"type\": \"string\" }, \"contentMediaType\": { \"type\": \"string\" }, \"contentEncoding\": { \"type\": \"string\" }, \"if\": { \"$ref\": \"#\" }, \"then\": { \"$ref\": \"#\" }, \"else\": { \"$ref\": \"#\" }, \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" }, \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" }, \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" }, \"not\": { \"$ref\": \"#\" } }, \"default\": true };\nconst schema1 = { \"type\": \"integer\", \"minimum\": 0 };\nconst schema7 = { \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"uniqueItems\": true, \"default\": [] };\nconst schema9 = { \"enum\": [\"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\"] };\nconst schema2 = { \"allOf\": [{ \"$ref\": \"#/definitions/nonNegativeInteger\" }, { \"default\": 0 }] };\nfunction validate1(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; const _errs1 = errors; if (!(((typeof data == \"number\") && (!(data % 1) && !isNaN(data))) && (isFinite(data)))) {\n    validate1.errors = [{ instancePath, schemaPath: \"#/definitions/nonNegativeInteger/type\", keyword: \"type\", params: { type: \"integer\" }, message: \"must be integer\" }];\n    return false;\n} if (errors === _errs1) {\n    if ((typeof data == \"number\") && (isFinite(data))) {\n        if (data < 0 || isNaN(data)) {\n            validate1.errors = [{ instancePath, schemaPath: \"#/definitions/nonNegativeInteger/minimum\", keyword: \"minimum\", params: { comparison: \">=\", limit: 0 }, message: \"must be >= 0\" }];\n            return false;\n        }\n    }\n} validate1.errors = vErrors; return errors === 0; }\nconst schema4 = { \"type\": \"array\", \"minItems\": 1, \"items\": { \"$ref\": \"#\" } };\nconst root0 = { validate: validate0 };\nfunction validate3(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {\n    if (Array.isArray(data)) {\n        if (data.length < 1) {\n            validate3.errors = [{ instancePath, schemaPath: \"#/minItems\", keyword: \"minItems\", params: { limit: 1 }, message: \"must NOT have fewer than 1 items\" }];\n            return false;\n        }\n        else {\n            var valid0 = true;\n            const len0 = data.length;\n            for (let i0 = 0; i0 < len0; i0++) {\n                const _errs1 = errors;\n                if (!(root0.validate(data[i0], { instancePath: instancePath + \"/\" + i0, parentData: data, parentDataProperty: i0, rootData }))) {\n                    vErrors = vErrors === null ? root0.validate.errors : vErrors.concat(root0.validate.errors);\n                    errors = vErrors.length;\n                }\n                var valid0 = _errs1 === errors;\n                if (!valid0) {\n                    break;\n                }\n            }\n        }\n    }\n    else {\n        validate3.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n        return false;\n    }\n} validate3.errors = vErrors; return errors === 0; }\nimport { default as func0 } from \"ajv/dist/runtime/equal.js\";\nfunction validate0(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"http://json-schema.org/draft-07/schema#\" */ ; let vErrors = null; let errors = 0; if ((!(data && typeof data == \"object\" && !Array.isArray(data))) && (typeof data !== \"boolean\")) {\n    validate0.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: schema0.type }, message: \"must be object,boolean\" }];\n    return false;\n} if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        if (data.$id !== undefined) {\n            const _errs1 = errors;\n            if (errors === _errs1) {\n                if (errors === _errs1) {\n                    if (!(typeof data.$id === \"string\")) {\n                        validate0.errors = [{ instancePath: instancePath + \"/$id\", schemaPath: \"#/properties/%24id/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                }\n            }\n            var valid0 = _errs1 === errors;\n        }\n        else {\n            var valid0 = true;\n        }\n        if (valid0) {\n            if (data.$schema !== undefined) {\n                const _errs3 = errors;\n                if (errors === _errs3) {\n                    if (errors === _errs3) {\n                        if (!(typeof data.$schema === \"string\")) {\n                            validate0.errors = [{ instancePath: instancePath + \"/$schema\", schemaPath: \"#/properties/%24schema/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                            return false;\n                        }\n                    }\n                }\n                var valid0 = _errs3 === errors;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.$ref !== undefined) {\n                    const _errs5 = errors;\n                    if (errors === _errs5) {\n                        if (errors === _errs5) {\n                            if (!(typeof data.$ref === \"string\")) {\n                                validate0.errors = [{ instancePath: instancePath + \"/$ref\", schemaPath: \"#/properties/%24ref/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                        }\n                    }\n                    var valid0 = _errs5 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.$comment !== undefined) {\n                        const _errs7 = errors;\n                        if (typeof data.$comment !== \"string\") {\n                            validate0.errors = [{ instancePath: instancePath + \"/$comment\", schemaPath: \"#/properties/%24comment/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                            return false;\n                        }\n                        var valid0 = _errs7 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.title !== undefined) {\n                            const _errs9 = errors;\n                            if (typeof data.title !== \"string\") {\n                                validate0.errors = [{ instancePath: instancePath + \"/title\", schemaPath: \"#/properties/title/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                            var valid0 = _errs9 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.description !== undefined) {\n                                const _errs11 = errors;\n                                if (typeof data.description !== \"string\") {\n                                    validate0.errors = [{ instancePath: instancePath + \"/description\", schemaPath: \"#/properties/description/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                    return false;\n                                }\n                                var valid0 = _errs11 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.readOnly !== undefined) {\n                                    const _errs13 = errors;\n                                    if (typeof data.readOnly !== \"boolean\") {\n                                        validate0.errors = [{ instancePath: instancePath + \"/readOnly\", schemaPath: \"#/properties/readOnly/type\", keyword: \"type\", params: { type: \"boolean\" }, message: \"must be boolean\" }];\n                                        return false;\n                                    }\n                                    var valid0 = _errs13 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                                if (valid0) {\n                                    if (data.examples !== undefined) {\n                                        const _errs15 = errors;\n                                        if (errors === _errs15) {\n                                            if (!(Array.isArray(data.examples))) {\n                                                validate0.errors = [{ instancePath: instancePath + \"/examples\", schemaPath: \"#/properties/examples/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                                return false;\n                                            }\n                                        }\n                                        var valid0 = _errs15 === errors;\n                                    }\n                                    else {\n                                        var valid0 = true;\n                                    }\n                                    if (valid0) {\n                                        if (data.multipleOf !== undefined) {\n                                            let data8 = data.multipleOf;\n                                            const _errs17 = errors;\n                                            if (errors === _errs17) {\n                                                if ((typeof data8 == \"number\") && (isFinite(data8))) {\n                                                    if (data8 <= 0 || isNaN(data8)) {\n                                                        validate0.errors = [{ instancePath: instancePath + \"/multipleOf\", schemaPath: \"#/properties/multipleOf/exclusiveMinimum\", keyword: \"exclusiveMinimum\", params: { comparison: \">\", limit: 0 }, message: \"must be > 0\" }];\n                                                        return false;\n                                                    }\n                                                }\n                                                else {\n                                                    validate0.errors = [{ instancePath: instancePath + \"/multipleOf\", schemaPath: \"#/properties/multipleOf/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                    return false;\n                                                }\n                                            }\n                                            var valid0 = _errs17 === errors;\n                                        }\n                                        else {\n                                            var valid0 = true;\n                                        }\n                                        if (valid0) {\n                                            if (data.maximum !== undefined) {\n                                                let data9 = data.maximum;\n                                                const _errs19 = errors;\n                                                if (!((typeof data9 == \"number\") && (isFinite(data9)))) {\n                                                    validate0.errors = [{ instancePath: instancePath + \"/maximum\", schemaPath: \"#/properties/maximum/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                    return false;\n                                                }\n                                                var valid0 = _errs19 === errors;\n                                            }\n                                            else {\n                                                var valid0 = true;\n                                            }\n                                            if (valid0) {\n                                                if (data.exclusiveMaximum !== undefined) {\n                                                    let data10 = data.exclusiveMaximum;\n                                                    const _errs21 = errors;\n                                                    if (!((typeof data10 == \"number\") && (isFinite(data10)))) {\n                                                        validate0.errors = [{ instancePath: instancePath + \"/exclusiveMaximum\", schemaPath: \"#/properties/exclusiveMaximum/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                        return false;\n                                                    }\n                                                    var valid0 = _errs21 === errors;\n                                                }\n                                                else {\n                                                    var valid0 = true;\n                                                }\n                                                if (valid0) {\n                                                    if (data.minimum !== undefined) {\n                                                        let data11 = data.minimum;\n                                                        const _errs23 = errors;\n                                                        if (!((typeof data11 == \"number\") && (isFinite(data11)))) {\n                                                            validate0.errors = [{ instancePath: instancePath + \"/minimum\", schemaPath: \"#/properties/minimum/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                            return false;\n                                                        }\n                                                        var valid0 = _errs23 === errors;\n                                                    }\n                                                    else {\n                                                        var valid0 = true;\n                                                    }\n                                                    if (valid0) {\n                                                        if (data.exclusiveMinimum !== undefined) {\n                                                            let data12 = data.exclusiveMinimum;\n                                                            const _errs25 = errors;\n                                                            if (!((typeof data12 == \"number\") && (isFinite(data12)))) {\n                                                                validate0.errors = [{ instancePath: instancePath + \"/exclusiveMinimum\", schemaPath: \"#/properties/exclusiveMinimum/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                                return false;\n                                                            }\n                                                            var valid0 = _errs25 === errors;\n                                                        }\n                                                        else {\n                                                            var valid0 = true;\n                                                        }\n                                                        if (valid0) {\n                                                            if (data.maxLength !== undefined) {\n                                                                let data13 = data.maxLength;\n                                                                const _errs27 = errors;\n                                                                const _errs28 = errors;\n                                                                if (!(((typeof data13 == \"number\") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))) {\n                                                                    validate0.errors = [{ instancePath: instancePath + \"/maxLength\", schemaPath: \"#/definitions/nonNegativeInteger/type\", keyword: \"type\", params: { type: \"integer\" }, message: \"must be integer\" }];\n                                                                    return false;\n                                                                }\n                                                                if (errors === _errs28) {\n                                                                    if ((typeof data13 == \"number\") && (isFinite(data13))) {\n                                                                        if (data13 < 0 || isNaN(data13)) {\n                                                                            validate0.errors = [{ instancePath: instancePath + \"/maxLength\", schemaPath: \"#/definitions/nonNegativeInteger/minimum\", keyword: \"minimum\", params: { comparison: \">=\", limit: 0 }, message: \"must be >= 0\" }];\n                                                                            return false;\n                                                                        }\n                                                                    }\n                                                                }\n                                                                var valid0 = _errs27 === errors;\n                                                            }\n                                                            else {\n                                                                var valid0 = true;\n                                                            }\n                                                            if (valid0) {\n                                                                if (data.minLength !== undefined) {\n                                                                    const _errs30 = errors;\n                                                                    if (!(validate1(data.minLength, { instancePath: instancePath + \"/minLength\", parentData: data, parentDataProperty: \"minLength\", rootData }))) {\n                                                                        vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);\n                                                                        errors = vErrors.length;\n                                                                    }\n                                                                    var valid0 = _errs30 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid0 = true;\n                                                                }\n                                                                if (valid0) {\n                                                                    if (data.pattern !== undefined) {\n                                                                        const _errs31 = errors;\n                                                                        if (errors === _errs31) {\n                                                                            if (errors === _errs31) {\n                                                                                if (!(typeof data.pattern === \"string\")) {\n                                                                                    validate0.errors = [{ instancePath: instancePath + \"/pattern\", schemaPath: \"#/properties/pattern/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                    return false;\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                        var valid0 = _errs31 === errors;\n                                                                    }\n                                                                    else {\n                                                                        var valid0 = true;\n                                                                    }\n                                                                    if (valid0) {\n                                                                        if (data.additionalItems !== undefined) {\n                                                                            const _errs33 = errors;\n                                                                            if (!(validate0(data.additionalItems, { instancePath: instancePath + \"/additionalItems\", parentData: data, parentDataProperty: \"additionalItems\", rootData }))) {\n                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                errors = vErrors.length;\n                                                                            }\n                                                                            var valid0 = _errs33 === errors;\n                                                                        }\n                                                                        else {\n                                                                            var valid0 = true;\n                                                                        }\n                                                                        if (valid0) {\n                                                                            if (data.items !== undefined) {\n                                                                                let data17 = data.items;\n                                                                                const _errs34 = errors;\n                                                                                const _errs35 = errors;\n                                                                                let valid2 = false;\n                                                                                const _errs36 = errors;\n                                                                                if (!(validate0(data17, { instancePath: instancePath + \"/items\", parentData: data, parentDataProperty: \"items\", rootData }))) {\n                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                    errors = vErrors.length;\n                                                                                }\n                                                                                var _valid0 = _errs36 === errors;\n                                                                                valid2 = valid2 || _valid0;\n                                                                                if (!valid2) {\n                                                                                    const _errs37 = errors;\n                                                                                    if (!(validate3(data17, { instancePath: instancePath + \"/items\", parentData: data, parentDataProperty: \"items\", rootData }))) {\n                                                                                        vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);\n                                                                                        errors = vErrors.length;\n                                                                                    }\n                                                                                    var _valid0 = _errs37 === errors;\n                                                                                    valid2 = valid2 || _valid0;\n                                                                                }\n                                                                                if (!valid2) {\n                                                                                    const err0 = { instancePath: instancePath + \"/items\", schemaPath: \"#/properties/items/anyOf\", keyword: \"anyOf\", params: {}, message: \"must match a schema in anyOf\" };\n                                                                                    if (vErrors === null) {\n                                                                                        vErrors = [err0];\n                                                                                    }\n                                                                                    else {\n                                                                                        vErrors.push(err0);\n                                                                                    }\n                                                                                    errors++;\n                                                                                    validate0.errors = vErrors;\n                                                                                    return false;\n                                                                                }\n                                                                                else {\n                                                                                    errors = _errs35;\n                                                                                    if (vErrors !== null) {\n                                                                                        if (_errs35) {\n                                                                                            vErrors.length = _errs35;\n                                                                                        }\n                                                                                        else {\n                                                                                            vErrors = null;\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                                var valid0 = _errs34 === errors;\n                                                                            }\n                                                                            else {\n                                                                                var valid0 = true;\n                                                                            }\n                                                                            if (valid0) {\n                                                                                if (data.maxItems !== undefined) {\n                                                                                    let data18 = data.maxItems;\n                                                                                    const _errs38 = errors;\n                                                                                    const _errs39 = errors;\n                                                                                    if (!(((typeof data18 == \"number\") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))) {\n                                                                                        validate0.errors = [{ instancePath: instancePath + \"/maxItems\", schemaPath: \"#/definitions/nonNegativeInteger/type\", keyword: \"type\", params: { type: \"integer\" }, message: \"must be integer\" }];\n                                                                                        return false;\n                                                                                    }\n                                                                                    if (errors === _errs39) {\n                                                                                        if ((typeof data18 == \"number\") && (isFinite(data18))) {\n                                                                                            if (data18 < 0 || isNaN(data18)) {\n                                                                                                validate0.errors = [{ instancePath: instancePath + \"/maxItems\", schemaPath: \"#/definitions/nonNegativeInteger/minimum\", keyword: \"minimum\", params: { comparison: \">=\", limit: 0 }, message: \"must be >= 0\" }];\n                                                                                                return false;\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                    var valid0 = _errs38 === errors;\n                                                                                }\n                                                                                else {\n                                                                                    var valid0 = true;\n                                                                                }\n                                                                                if (valid0) {\n                                                                                    if (data.minItems !== undefined) {\n                                                                                        const _errs41 = errors;\n                                                                                        if (!(validate1(data.minItems, { instancePath: instancePath + \"/minItems\", parentData: data, parentDataProperty: \"minItems\", rootData }))) {\n                                                                                            vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);\n                                                                                            errors = vErrors.length;\n                                                                                        }\n                                                                                        var valid0 = _errs41 === errors;\n                                                                                    }\n                                                                                    else {\n                                                                                        var valid0 = true;\n                                                                                    }\n                                                                                    if (valid0) {\n                                                                                        if (data.uniqueItems !== undefined) {\n                                                                                            const _errs42 = errors;\n                                                                                            if (typeof data.uniqueItems !== \"boolean\") {\n                                                                                                validate0.errors = [{ instancePath: instancePath + \"/uniqueItems\", schemaPath: \"#/properties/uniqueItems/type\", keyword: \"type\", params: { type: \"boolean\" }, message: \"must be boolean\" }];\n                                                                                                return false;\n                                                                                            }\n                                                                                            var valid0 = _errs42 === errors;\n                                                                                        }\n                                                                                        else {\n                                                                                            var valid0 = true;\n                                                                                        }\n                                                                                        if (valid0) {\n                                                                                            if (data.contains !== undefined) {\n                                                                                                const _errs44 = errors;\n                                                                                                if (!(validate0(data.contains, { instancePath: instancePath + \"/contains\", parentData: data, parentDataProperty: \"contains\", rootData }))) {\n                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                    errors = vErrors.length;\n                                                                                                }\n                                                                                                var valid0 = _errs44 === errors;\n                                                                                            }\n                                                                                            else {\n                                                                                                var valid0 = true;\n                                                                                            }\n                                                                                            if (valid0) {\n                                                                                                if (data.maxProperties !== undefined) {\n                                                                                                    let data22 = data.maxProperties;\n                                                                                                    const _errs45 = errors;\n                                                                                                    const _errs46 = errors;\n                                                                                                    if (!(((typeof data22 == \"number\") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))) {\n                                                                                                        validate0.errors = [{ instancePath: instancePath + \"/maxProperties\", schemaPath: \"#/definitions/nonNegativeInteger/type\", keyword: \"type\", params: { type: \"integer\" }, message: \"must be integer\" }];\n                                                                                                        return false;\n                                                                                                    }\n                                                                                                    if (errors === _errs46) {\n                                                                                                        if ((typeof data22 == \"number\") && (isFinite(data22))) {\n                                                                                                            if (data22 < 0 || isNaN(data22)) {\n                                                                                                                validate0.errors = [{ instancePath: instancePath + \"/maxProperties\", schemaPath: \"#/definitions/nonNegativeInteger/minimum\", keyword: \"minimum\", params: { comparison: \">=\", limit: 0 }, message: \"must be >= 0\" }];\n                                                                                                                return false;\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                    var valid0 = _errs45 === errors;\n                                                                                                }\n                                                                                                else {\n                                                                                                    var valid0 = true;\n                                                                                                }\n                                                                                                if (valid0) {\n                                                                                                    if (data.minProperties !== undefined) {\n                                                                                                        const _errs48 = errors;\n                                                                                                        if (!(validate1(data.minProperties, { instancePath: instancePath + \"/minProperties\", parentData: data, parentDataProperty: \"minProperties\", rootData }))) {\n                                                                                                            vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);\n                                                                                                            errors = vErrors.length;\n                                                                                                        }\n                                                                                                        var valid0 = _errs48 === errors;\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        var valid0 = true;\n                                                                                                    }\n                                                                                                    if (valid0) {\n                                                                                                        if (data.required !== undefined) {\n                                                                                                            let data24 = data.required;\n                                                                                                            const _errs49 = errors;\n                                                                                                            const _errs50 = errors;\n                                                                                                            if (errors === _errs50) {\n                                                                                                                if (Array.isArray(data24)) {\n                                                                                                                    var valid6 = true;\n                                                                                                                    const len0 = data24.length;\n                                                                                                                    for (let i0 = 0; i0 < len0; i0++) {\n                                                                                                                        const _errs52 = errors;\n                                                                                                                        if (typeof data24[i0] !== \"string\") {\n                                                                                                                            validate0.errors = [{ instancePath: instancePath + \"/required/\" + i0, schemaPath: \"#/definitions/stringArray/items/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                        var valid6 = _errs52 === errors;\n                                                                                                                        if (!valid6) {\n                                                                                                                            break;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    if (valid6) {\n                                                                                                                        let i1 = data24.length;\n                                                                                                                        let j0;\n                                                                                                                        if (i1 > 1) {\n                                                                                                                            const indices0 = {};\n                                                                                                                            for (; i1--;) {\n                                                                                                                                let item0 = data24[i1];\n                                                                                                                                if (typeof item0 !== \"string\") {\n                                                                                                                                    continue;\n                                                                                                                                }\n                                                                                                                                if (typeof indices0[item0] == \"number\") {\n                                                                                                                                    j0 = indices0[item0];\n                                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/required\", schemaPath: \"#/definitions/stringArray/uniqueItems\", keyword: \"uniqueItems\", params: { i: i1, j: j0 }, message: \"must NOT have duplicate items (items ## \" + j0 + \" and \" + i1 + \" are identical)\" }];\n                                                                                                                                    return false;\n                                                                                                                                    break;\n                                                                                                                                }\n                                                                                                                                indices0[item0] = i1;\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/required\", schemaPath: \"#/definitions/stringArray/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                                                                                                    return false;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            var valid0 = _errs49 === errors;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            var valid0 = true;\n                                                                                                        }\n                                                                                                        if (valid0) {\n                                                                                                            if (data.additionalProperties !== undefined) {\n                                                                                                                const _errs54 = errors;\n                                                                                                                if (!(validate0(data.additionalProperties, { instancePath: instancePath + \"/additionalProperties\", parentData: data, parentDataProperty: \"additionalProperties\", rootData }))) {\n                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                    errors = vErrors.length;\n                                                                                                                }\n                                                                                                                var valid0 = _errs54 === errors;\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                var valid0 = true;\n                                                                                                            }\n                                                                                                            if (valid0) {\n                                                                                                                if (data.definitions !== undefined) {\n                                                                                                                    let data27 = data.definitions;\n                                                                                                                    const _errs55 = errors;\n                                                                                                                    if (errors === _errs55) {\n                                                                                                                        if (data27 && typeof data27 == \"object\" && !Array.isArray(data27)) {\n                                                                                                                            for (const key0 in data27) {\n                                                                                                                                const _errs58 = errors;\n                                                                                                                                if (!(validate0(data27[key0], { instancePath: instancePath + \"/definitions/\" + key0.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), parentData: data27, parentDataProperty: key0, rootData }))) {\n                                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                    errors = vErrors.length;\n                                                                                                                                }\n                                                                                                                                var valid8 = _errs58 === errors;\n                                                                                                                                if (!valid8) {\n                                                                                                                                    break;\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            validate0.errors = [{ instancePath: instancePath + \"/definitions\", schemaPath: \"#/properties/definitions/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    var valid0 = _errs55 === errors;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    var valid0 = true;\n                                                                                                                }\n                                                                                                                if (valid0) {\n                                                                                                                    if (data.properties !== undefined) {\n                                                                                                                        let data29 = data.properties;\n                                                                                                                        const _errs59 = errors;\n                                                                                                                        if (errors === _errs59) {\n                                                                                                                            if (data29 && typeof data29 == \"object\" && !Array.isArray(data29)) {\n                                                                                                                                for (const key1 in data29) {\n                                                                                                                                    const _errs62 = errors;\n                                                                                                                                    if (!(validate0(data29[key1], { instancePath: instancePath + \"/properties/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), parentData: data29, parentDataProperty: key1, rootData }))) {\n                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                        errors = vErrors.length;\n                                                                                                                                    }\n                                                                                                                                    var valid9 = _errs62 === errors;\n                                                                                                                                    if (!valid9) {\n                                                                                                                                        break;\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            else {\n                                                                                                                                validate0.errors = [{ instancePath: instancePath + \"/properties\", schemaPath: \"#/properties/properties/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                                                                                return false;\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        var valid0 = _errs59 === errors;\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        var valid0 = true;\n                                                                                                                    }\n                                                                                                                    if (valid0) {\n                                                                                                                        if (data.patternProperties !== undefined) {\n                                                                                                                            let data31 = data.patternProperties;\n                                                                                                                            const _errs63 = errors;\n                                                                                                                            if (errors === _errs63) {\n                                                                                                                                if (data31 && typeof data31 == \"object\" && !Array.isArray(data31)) {\n                                                                                                                                    for (const key2 in data31) {\n                                                                                                                                        const _errs65 = errors;\n                                                                                                                                        var valid10 = _errs65 === errors;\n                                                                                                                                        if (!valid10) {\n                                                                                                                                            const err1 = { instancePath: instancePath + \"/patternProperties\", schemaPath: \"#/properties/patternProperties/propertyNames\", keyword: \"propertyNames\", params: { propertyName: key2 }, message: \"property name must be valid\" };\n                                                                                                                                            if (vErrors === null) {\n                                                                                                                                                vErrors = [err1];\n                                                                                                                                            }\n                                                                                                                                            else {\n                                                                                                                                                vErrors.push(err1);\n                                                                                                                                            }\n                                                                                                                                            errors++;\n                                                                                                                                            validate0.errors = vErrors;\n                                                                                                                                            return false;\n                                                                                                                                            break;\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                    if (valid10) {\n                                                                                                                                        for (const key3 in data31) {\n                                                                                                                                            const _errs67 = errors;\n                                                                                                                                            if (!(validate0(data31[key3], { instancePath: instancePath + \"/patternProperties/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), parentData: data31, parentDataProperty: key3, rootData }))) {\n                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                errors = vErrors.length;\n                                                                                                                                            }\n                                                                                                                                            var valid11 = _errs67 === errors;\n                                                                                                                                            if (!valid11) {\n                                                                                                                                                break;\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                                else {\n                                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/patternProperties\", schemaPath: \"#/properties/patternProperties/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                                                                                    return false;\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            var valid0 = _errs63 === errors;\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            var valid0 = true;\n                                                                                                                        }\n                                                                                                                        if (valid0) {\n                                                                                                                            if (data.dependencies !== undefined) {\n                                                                                                                                let data33 = data.dependencies;\n                                                                                                                                const _errs68 = errors;\n                                                                                                                                if (errors === _errs68) {\n                                                                                                                                    if (data33 && typeof data33 == \"object\" && !Array.isArray(data33)) {\n                                                                                                                                        for (const key4 in data33) {\n                                                                                                                                            let data34 = data33[key4];\n                                                                                                                                            const _errs71 = errors;\n                                                                                                                                            const _errs72 = errors;\n                                                                                                                                            let valid13 = false;\n                                                                                                                                            const _errs73 = errors;\n                                                                                                                                            if (!(validate0(data34, { instancePath: instancePath + \"/dependencies/\" + key4.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), parentData: data33, parentDataProperty: key4, rootData }))) {\n                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                errors = vErrors.length;\n                                                                                                                                            }\n                                                                                                                                            var _valid1 = _errs73 === errors;\n                                                                                                                                            valid13 = valid13 || _valid1;\n                                                                                                                                            if (!valid13) {\n                                                                                                                                                const _errs74 = errors;\n                                                                                                                                                const _errs75 = errors;\n                                                                                                                                                if (errors === _errs75) {\n                                                                                                                                                    if (Array.isArray(data34)) {\n                                                                                                                                                        var valid15 = true;\n                                                                                                                                                        const len1 = data34.length;\n                                                                                                                                                        for (let i2 = 0; i2 < len1; i2++) {\n                                                                                                                                                            const _errs77 = errors;\n                                                                                                                                                            if (typeof data34[i2] !== \"string\") {\n                                                                                                                                                                const err2 = { instancePath: instancePath + \"/dependencies/\" + key4.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/\" + i2, schemaPath: \"#/definitions/stringArray/items/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" };\n                                                                                                                                                                if (vErrors === null) {\n                                                                                                                                                                    vErrors = [err2];\n                                                                                                                                                                }\n                                                                                                                                                                else {\n                                                                                                                                                                    vErrors.push(err2);\n                                                                                                                                                                }\n                                                                                                                                                                errors++;\n                                                                                                                                                            }\n                                                                                                                                                            var valid15 = _errs77 === errors;\n                                                                                                                                                            if (!valid15) {\n                                                                                                                                                                break;\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                        if (valid15) {\n                                                                                                                                                            let i3 = data34.length;\n                                                                                                                                                            let j1;\n                                                                                                                                                            if (i3 > 1) {\n                                                                                                                                                                const indices1 = {};\n                                                                                                                                                                for (; i3--;) {\n                                                                                                                                                                    let item1 = data34[i3];\n                                                                                                                                                                    if (typeof item1 !== \"string\") {\n                                                                                                                                                                        continue;\n                                                                                                                                                                    }\n                                                                                                                                                                    if (typeof indices1[item1] == \"number\") {\n                                                                                                                                                                        j1 = indices1[item1];\n                                                                                                                                                                        const err3 = { instancePath: instancePath + \"/dependencies/\" + key4.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), schemaPath: \"#/definitions/stringArray/uniqueItems\", keyword: \"uniqueItems\", params: { i: i3, j: j1 }, message: \"must NOT have duplicate items (items ## \" + j1 + \" and \" + i3 + \" are identical)\" };\n                                                                                                                                                                        if (vErrors === null) {\n                                                                                                                                                                            vErrors = [err3];\n                                                                                                                                                                        }\n                                                                                                                                                                        else {\n                                                                                                                                                                            vErrors.push(err3);\n                                                                                                                                                                        }\n                                                                                                                                                                        errors++;\n                                                                                                                                                                        break;\n                                                                                                                                                                    }\n                                                                                                                                                                    indices1[item1] = i3;\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                    else {\n                                                                                                                                                        const err4 = { instancePath: instancePath + \"/dependencies/\" + key4.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), schemaPath: \"#/definitions/stringArray/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" };\n                                                                                                                                                        if (vErrors === null) {\n                                                                                                                                                            vErrors = [err4];\n                                                                                                                                                        }\n                                                                                                                                                        else {\n                                                                                                                                                            vErrors.push(err4);\n                                                                                                                                                        }\n                                                                                                                                                        errors++;\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                                var _valid1 = _errs74 === errors;\n                                                                                                                                                valid13 = valid13 || _valid1;\n                                                                                                                                            }\n                                                                                                                                            if (!valid13) {\n                                                                                                                                                const err5 = { instancePath: instancePath + \"/dependencies/\" + key4.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"), schemaPath: \"#/properties/dependencies/additionalProperties/anyOf\", keyword: \"anyOf\", params: {}, message: \"must match a schema in anyOf\" };\n                                                                                                                                                if (vErrors === null) {\n                                                                                                                                                    vErrors = [err5];\n                                                                                                                                                }\n                                                                                                                                                else {\n                                                                                                                                                    vErrors.push(err5);\n                                                                                                                                                }\n                                                                                                                                                errors++;\n                                                                                                                                                validate0.errors = vErrors;\n                                                                                                                                                return false;\n                                                                                                                                            }\n                                                                                                                                            else {\n                                                                                                                                                errors = _errs72;\n                                                                                                                                                if (vErrors !== null) {\n                                                                                                                                                    if (_errs72) {\n                                                                                                                                                        vErrors.length = _errs72;\n                                                                                                                                                    }\n                                                                                                                                                    else {\n                                                                                                                                                        vErrors = null;\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                            var valid12 = _errs71 === errors;\n                                                                                                                                            if (!valid12) {\n                                                                                                                                                break;\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                    else {\n                                                                                                                                        validate0.errors = [{ instancePath: instancePath + \"/dependencies\", schemaPath: \"#/properties/dependencies/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                                                                                        return false;\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                                var valid0 = _errs68 === errors;\n                                                                                                                            }\n                                                                                                                            else {\n                                                                                                                                var valid0 = true;\n                                                                                                                            }\n                                                                                                                            if (valid0) {\n                                                                                                                                if (data.propertyNames !== undefined) {\n                                                                                                                                    const _errs79 = errors;\n                                                                                                                                    if (!(validate0(data.propertyNames, { instancePath: instancePath + \"/propertyNames\", parentData: data, parentDataProperty: \"propertyNames\", rootData }))) {\n                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                        errors = vErrors.length;\n                                                                                                                                    }\n                                                                                                                                    var valid0 = _errs79 === errors;\n                                                                                                                                }\n                                                                                                                                else {\n                                                                                                                                    var valid0 = true;\n                                                                                                                                }\n                                                                                                                                if (valid0) {\n                                                                                                                                    if (data.enum !== undefined) {\n                                                                                                                                        let data37 = data.enum;\n                                                                                                                                        const _errs80 = errors;\n                                                                                                                                        if (errors === _errs80) {\n                                                                                                                                            if (Array.isArray(data37)) {\n                                                                                                                                                if (data37.length < 1) {\n                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/enum\", schemaPath: \"#/properties/enum/minItems\", keyword: \"minItems\", params: { limit: 1 }, message: \"must NOT have fewer than 1 items\" }];\n                                                                                                                                                    return false;\n                                                                                                                                                }\n                                                                                                                                                else {\n                                                                                                                                                    let i4 = data37.length;\n                                                                                                                                                    let j2;\n                                                                                                                                                    if (i4 > 1) {\n                                                                                                                                                        outer0: for (; i4--;) {\n                                                                                                                                                            for (j2 = i4; j2--;) {\n                                                                                                                                                                if (func0(data37[i4], data37[j2])) {\n                                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/enum\", schemaPath: \"#/properties/enum/uniqueItems\", keyword: \"uniqueItems\", params: { i: i4, j: j2 }, message: \"must NOT have duplicate items (items ## \" + j2 + \" and \" + i4 + \" are identical)\" }];\n                                                                                                                                                                    return false;\n                                                                                                                                                                    break outer0;\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                            else {\n                                                                                                                                                validate0.errors = [{ instancePath: instancePath + \"/enum\", schemaPath: \"#/properties/enum/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                                                                                                                                return false;\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                        var valid0 = _errs80 === errors;\n                                                                                                                                    }\n                                                                                                                                    else {\n                                                                                                                                        var valid0 = true;\n                                                                                                                                    }\n                                                                                                                                    if (valid0) {\n                                                                                                                                        if (data.type !== undefined) {\n                                                                                                                                            let data38 = data.type;\n                                                                                                                                            const _errs82 = errors;\n                                                                                                                                            const _errs83 = errors;\n                                                                                                                                            let valid18 = false;\n                                                                                                                                            const _errs84 = errors;\n                                                                                                                                            if (!(((((((data38 === \"array\") || (data38 === \"boolean\")) || (data38 === \"integer\")) || (data38 === \"null\")) || (data38 === \"number\")) || (data38 === \"object\")) || (data38 === \"string\"))) {\n                                                                                                                                                const err6 = { instancePath: instancePath + \"/type\", schemaPath: \"#/definitions/simpleTypes/enum\", keyword: \"enum\", params: { allowedValues: schema9.enum }, message: \"must be equal to one of the allowed values\" };\n                                                                                                                                                if (vErrors === null) {\n                                                                                                                                                    vErrors = [err6];\n                                                                                                                                                }\n                                                                                                                                                else {\n                                                                                                                                                    vErrors.push(err6);\n                                                                                                                                                }\n                                                                                                                                                errors++;\n                                                                                                                                            }\n                                                                                                                                            var _valid2 = _errs84 === errors;\n                                                                                                                                            valid18 = valid18 || _valid2;\n                                                                                                                                            if (!valid18) {\n                                                                                                                                                const _errs86 = errors;\n                                                                                                                                                if (errors === _errs86) {\n                                                                                                                                                    if (Array.isArray(data38)) {\n                                                                                                                                                        if (data38.length < 1) {\n                                                                                                                                                            const err7 = { instancePath: instancePath + \"/type\", schemaPath: \"#/properties/type/anyOf/1/minItems\", keyword: \"minItems\", params: { limit: 1 }, message: \"must NOT have fewer than 1 items\" };\n                                                                                                                                                            if (vErrors === null) {\n                                                                                                                                                                vErrors = [err7];\n                                                                                                                                                            }\n                                                                                                                                                            else {\n                                                                                                                                                                vErrors.push(err7);\n                                                                                                                                                            }\n                                                                                                                                                            errors++;\n                                                                                                                                                        }\n                                                                                                                                                        else {\n                                                                                                                                                            var valid20 = true;\n                                                                                                                                                            const len2 = data38.length;\n                                                                                                                                                            for (let i5 = 0; i5 < len2; i5++) {\n                                                                                                                                                                let data39 = data38[i5];\n                                                                                                                                                                const _errs88 = errors;\n                                                                                                                                                                if (!(((((((data39 === \"array\") || (data39 === \"boolean\")) || (data39 === \"integer\")) || (data39 === \"null\")) || (data39 === \"number\")) || (data39 === \"object\")) || (data39 === \"string\"))) {\n                                                                                                                                                                    const err8 = { instancePath: instancePath + \"/type/\" + i5, schemaPath: \"#/definitions/simpleTypes/enum\", keyword: \"enum\", params: { allowedValues: schema9.enum }, message: \"must be equal to one of the allowed values\" };\n                                                                                                                                                                    if (vErrors === null) {\n                                                                                                                                                                        vErrors = [err8];\n                                                                                                                                                                    }\n                                                                                                                                                                    else {\n                                                                                                                                                                        vErrors.push(err8);\n                                                                                                                                                                    }\n                                                                                                                                                                    errors++;\n                                                                                                                                                                }\n                                                                                                                                                                var valid20 = _errs88 === errors;\n                                                                                                                                                                if (!valid20) {\n                                                                                                                                                                    break;\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                            if (valid20) {\n                                                                                                                                                                let i6 = data38.length;\n                                                                                                                                                                let j3;\n                                                                                                                                                                if (i6 > 1) {\n                                                                                                                                                                    outer1: for (; i6--;) {\n                                                                                                                                                                        for (j3 = i6; j3--;) {\n                                                                                                                                                                            if (func0(data38[i6], data38[j3])) {\n                                                                                                                                                                                const err9 = { instancePath: instancePath + \"/type\", schemaPath: \"#/properties/type/anyOf/1/uniqueItems\", keyword: \"uniqueItems\", params: { i: i6, j: j3 }, message: \"must NOT have duplicate items (items ## \" + j3 + \" and \" + i6 + \" are identical)\" };\n                                                                                                                                                                                if (vErrors === null) {\n                                                                                                                                                                                    vErrors = [err9];\n                                                                                                                                                                                }\n                                                                                                                                                                                else {\n                                                                                                                                                                                    vErrors.push(err9);\n                                                                                                                                                                                }\n                                                                                                                                                                                errors++;\n                                                                                                                                                                                break outer1;\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                    else {\n                                                                                                                                                        const err10 = { instancePath: instancePath + \"/type\", schemaPath: \"#/properties/type/anyOf/1/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" };\n                                                                                                                                                        if (vErrors === null) {\n                                                                                                                                                            vErrors = [err10];\n                                                                                                                                                        }\n                                                                                                                                                        else {\n                                                                                                                                                            vErrors.push(err10);\n                                                                                                                                                        }\n                                                                                                                                                        errors++;\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                                var _valid2 = _errs86 === errors;\n                                                                                                                                                valid18 = valid18 || _valid2;\n                                                                                                                                            }\n                                                                                                                                            if (!valid18) {\n                                                                                                                                                const err11 = { instancePath: instancePath + \"/type\", schemaPath: \"#/properties/type/anyOf\", keyword: \"anyOf\", params: {}, message: \"must match a schema in anyOf\" };\n                                                                                                                                                if (vErrors === null) {\n                                                                                                                                                    vErrors = [err11];\n                                                                                                                                                }\n                                                                                                                                                else {\n                                                                                                                                                    vErrors.push(err11);\n                                                                                                                                                }\n                                                                                                                                                errors++;\n                                                                                                                                                validate0.errors = vErrors;\n                                                                                                                                                return false;\n                                                                                                                                            }\n                                                                                                                                            else {\n                                                                                                                                                errors = _errs83;\n                                                                                                                                                if (vErrors !== null) {\n                                                                                                                                                    if (_errs83) {\n                                                                                                                                                        vErrors.length = _errs83;\n                                                                                                                                                    }\n                                                                                                                                                    else {\n                                                                                                                                                        vErrors = null;\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                            var valid0 = _errs82 === errors;\n                                                                                                                                        }\n                                                                                                                                        else {\n                                                                                                                                            var valid0 = true;\n                                                                                                                                        }\n                                                                                                                                        if (valid0) {\n                                                                                                                                            if (data.format !== undefined) {\n                                                                                                                                                const _errs90 = errors;\n                                                                                                                                                if (typeof data.format !== \"string\") {\n                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + \"/format\", schemaPath: \"#/properties/format/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                                                    return false;\n                                                                                                                                                }\n                                                                                                                                                var valid0 = _errs90 === errors;\n                                                                                                                                            }\n                                                                                                                                            else {\n                                                                                                                                                var valid0 = true;\n                                                                                                                                            }\n                                                                                                                                            if (valid0) {\n                                                                                                                                                if (data.contentMediaType !== undefined) {\n                                                                                                                                                    const _errs92 = errors;\n                                                                                                                                                    if (typeof data.contentMediaType !== \"string\") {\n                                                                                                                                                        validate0.errors = [{ instancePath: instancePath + \"/contentMediaType\", schemaPath: \"#/properties/contentMediaType/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                                                        return false;\n                                                                                                                                                    }\n                                                                                                                                                    var valid0 = _errs92 === errors;\n                                                                                                                                                }\n                                                                                                                                                else {\n                                                                                                                                                    var valid0 = true;\n                                                                                                                                                }\n                                                                                                                                                if (valid0) {\n                                                                                                                                                    if (data.contentEncoding !== undefined) {\n                                                                                                                                                        const _errs94 = errors;\n                                                                                                                                                        if (typeof data.contentEncoding !== \"string\") {\n                                                                                                                                                            validate0.errors = [{ instancePath: instancePath + \"/contentEncoding\", schemaPath: \"#/properties/contentEncoding/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                                                            return false;\n                                                                                                                                                        }\n                                                                                                                                                        var valid0 = _errs94 === errors;\n                                                                                                                                                    }\n                                                                                                                                                    else {\n                                                                                                                                                        var valid0 = true;\n                                                                                                                                                    }\n                                                                                                                                                    if (valid0) {\n                                                                                                                                                        if (data.if !== undefined) {\n                                                                                                                                                            const _errs96 = errors;\n                                                                                                                                                            if (!(validate0(data.if, { instancePath: instancePath + \"/if\", parentData: data, parentDataProperty: \"if\", rootData }))) {\n                                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                                errors = vErrors.length;\n                                                                                                                                                            }\n                                                                                                                                                            var valid0 = _errs96 === errors;\n                                                                                                                                                        }\n                                                                                                                                                        else {\n                                                                                                                                                            var valid0 = true;\n                                                                                                                                                        }\n                                                                                                                                                        if (valid0) {\n                                                                                                                                                            if (data.then !== undefined) {\n                                                                                                                                                                const _errs97 = errors;\n                                                                                                                                                                if (!(validate0(data.then, { instancePath: instancePath + \"/then\", parentData: data, parentDataProperty: \"then\", rootData }))) {\n                                                                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                                    errors = vErrors.length;\n                                                                                                                                                                }\n                                                                                                                                                                var valid0 = _errs97 === errors;\n                                                                                                                                                            }\n                                                                                                                                                            else {\n                                                                                                                                                                var valid0 = true;\n                                                                                                                                                            }\n                                                                                                                                                            if (valid0) {\n                                                                                                                                                                if (data.else !== undefined) {\n                                                                                                                                                                    const _errs98 = errors;\n                                                                                                                                                                    if (!(validate0(data.else, { instancePath: instancePath + \"/else\", parentData: data, parentDataProperty: \"else\", rootData }))) {\n                                                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                                        errors = vErrors.length;\n                                                                                                                                                                    }\n                                                                                                                                                                    var valid0 = _errs98 === errors;\n                                                                                                                                                                }\n                                                                                                                                                                else {\n                                                                                                                                                                    var valid0 = true;\n                                                                                                                                                                }\n                                                                                                                                                                if (valid0) {\n                                                                                                                                                                    if (data.allOf !== undefined) {\n                                                                                                                                                                        const _errs99 = errors;\n                                                                                                                                                                        if (!(validate3(data.allOf, { instancePath: instancePath + \"/allOf\", parentData: data, parentDataProperty: \"allOf\", rootData }))) {\n                                                                                                                                                                            vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);\n                                                                                                                                                                            errors = vErrors.length;\n                                                                                                                                                                        }\n                                                                                                                                                                        var valid0 = _errs99 === errors;\n                                                                                                                                                                    }\n                                                                                                                                                                    else {\n                                                                                                                                                                        var valid0 = true;\n                                                                                                                                                                    }\n                                                                                                                                                                    if (valid0) {\n                                                                                                                                                                        if (data.anyOf !== undefined) {\n                                                                                                                                                                            const _errs100 = errors;\n                                                                                                                                                                            if (!(validate3(data.anyOf, { instancePath: instancePath + \"/anyOf\", parentData: data, parentDataProperty: \"anyOf\", rootData }))) {\n                                                                                                                                                                                vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);\n                                                                                                                                                                                errors = vErrors.length;\n                                                                                                                                                                            }\n                                                                                                                                                                            var valid0 = _errs100 === errors;\n                                                                                                                                                                        }\n                                                                                                                                                                        else {\n                                                                                                                                                                            var valid0 = true;\n                                                                                                                                                                        }\n                                                                                                                                                                        if (valid0) {\n                                                                                                                                                                            if (data.oneOf !== undefined) {\n                                                                                                                                                                                const _errs101 = errors;\n                                                                                                                                                                                if (!(validate3(data.oneOf, { instancePath: instancePath + \"/oneOf\", parentData: data, parentDataProperty: \"oneOf\", rootData }))) {\n                                                                                                                                                                                    vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);\n                                                                                                                                                                                    errors = vErrors.length;\n                                                                                                                                                                                }\n                                                                                                                                                                                var valid0 = _errs101 === errors;\n                                                                                                                                                                            }\n                                                                                                                                                                            else {\n                                                                                                                                                                                var valid0 = true;\n                                                                                                                                                                            }\n                                                                                                                                                                            if (valid0) {\n                                                                                                                                                                                if (data.not !== undefined) {\n                                                                                                                                                                                    const _errs102 = errors;\n                                                                                                                                                                                    if (!(validate0(data.not, { instancePath: instancePath + \"/not\", parentData: data, parentDataProperty: \"not\", rootData }))) {\n                                                                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                                                                                        errors = vErrors.length;\n                                                                                                                                                                                    }\n                                                                                                                                                                                    var valid0 = _errs102 === errors;\n                                                                                                                                                                                }\n                                                                                                                                                                                else {\n                                                                                                                                                                                    var valid0 = true;\n                                                                                                                                                                                }\n                                                                                                                                                                            }\n                                                                                                                                                                        }\n                                                                                                                                                                    }\n                                                                                                                                                                }\n                                                                                                                                                            }\n                                                                                                                                                        }\n                                                                                                                                                    }\n                                                                                                                                                }\n                                                                                                                                            }\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n} validate0.errors = vErrors; return errors === 0; }\nconst func2 = Object.prototype.hasOwnProperty;\nfunction validate12(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/offering.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if (((((data.description === undefined) && (missing0 = \"description\")) || ((data.payin === undefined) && (missing0 = \"payin\"))) || ((data.payout === undefined) && (missing0 = \"payout\"))) || ((data.payoutUnitsPerPayinUnit === undefined) && (missing0 = \"payoutUnitsPerPayinUnit\"))) {\n            validate12.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            if (data.additionalProperties !== undefined) {\n                var valid0 = false;\n                validate12.errors = [{ instancePath: instancePath + \"/additionalProperties\", schemaPath: \"#/properties/additionalProperties/false schema\", keyword: \"false schema\", params: {}, message: \"boolean schema is false\" }];\n                return false;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.description !== undefined) {\n                    const _errs1 = errors;\n                    if (typeof data.description !== \"string\") {\n                        validate12.errors = [{ instancePath: instancePath + \"/description\", schemaPath: \"#/properties/description/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs1 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.payin !== undefined) {\n                        let data2 = data.payin;\n                        const _errs3 = errors;\n                        if (errors === _errs3) {\n                            if (data2 && typeof data2 == \"object\" && !Array.isArray(data2)) {\n                                let missing1;\n                                if (((data2.currencyCode === undefined) && (missing1 = \"currencyCode\")) || ((data2.methods === undefined) && (missing1 = \"methods\"))) {\n                                    validate12.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/required\", keyword: \"required\", params: { missingProperty: missing1 }, message: \"must have required property '\" + missing1 + \"'\" }];\n                                    return false;\n                                }\n                                else {\n                                    const _errs5 = errors;\n                                    for (const key0 in data2) {\n                                        if (!((((key0 === \"currencyCode\") || (key0 === \"min\")) || (key0 === \"max\")) || (key0 === \"methods\"))) {\n                                            validate12.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                                            return false;\n                                            break;\n                                        }\n                                    }\n                                    if (_errs5 === errors) {\n                                        if (data2.currencyCode !== undefined) {\n                                            const _errs6 = errors;\n                                            if (typeof data2.currencyCode !== \"string\") {\n                                                validate12.errors = [{ instancePath: instancePath + \"/payin/currencyCode\", schemaPath: \"#/properties/payin/properties/currencyCode/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                return false;\n                                            }\n                                            var valid1 = _errs6 === errors;\n                                        }\n                                        else {\n                                            var valid1 = true;\n                                        }\n                                        if (valid1) {\n                                            if (data2.min !== undefined) {\n                                                let data4 = data2.min;\n                                                const _errs8 = errors;\n                                                const _errs9 = errors;\n                                                if (errors === _errs9) {\n                                                    if (typeof data4 === \"string\") {\n                                                        if (!pattern0.test(data4)) {\n                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/min\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                            return false;\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate12.errors = [{ instancePath: instancePath + \"/payin/min\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid1 = _errs8 === errors;\n                                            }\n                                            else {\n                                                var valid1 = true;\n                                            }\n                                            if (valid1) {\n                                                if (data2.max !== undefined) {\n                                                    let data5 = data2.max;\n                                                    const _errs11 = errors;\n                                                    const _errs12 = errors;\n                                                    if (errors === _errs12) {\n                                                        if (typeof data5 === \"string\") {\n                                                            if (!pattern0.test(data5)) {\n                                                                validate12.errors = [{ instancePath: instancePath + \"/payin/max\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                return false;\n                                                            }\n                                                        }\n                                                        else {\n                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/max\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                            return false;\n                                                        }\n                                                    }\n                                                    var valid1 = _errs11 === errors;\n                                                }\n                                                else {\n                                                    var valid1 = true;\n                                                }\n                                                if (valid1) {\n                                                    if (data2.methods !== undefined) {\n                                                        let data6 = data2.methods;\n                                                        const _errs14 = errors;\n                                                        if (errors === _errs14) {\n                                                            if (Array.isArray(data6)) {\n                                                                var valid4 = true;\n                                                                const len0 = data6.length;\n                                                                for (let i0 = 0; i0 < len0; i0++) {\n                                                                    let data7 = data6[i0];\n                                                                    const _errs16 = errors;\n                                                                    if (errors === _errs16) {\n                                                                        if (data7 && typeof data7 == \"object\" && !Array.isArray(data7)) {\n                                                                            let missing2;\n                                                                            if ((data7.kind === undefined) && (missing2 = \"kind\")) {\n                                                                                validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0, schemaPath: \"#/properties/payin/properties/methods/items/required\", keyword: \"required\", params: { missingProperty: missing2 }, message: \"must have required property '\" + missing2 + \"'\" }];\n                                                                                return false;\n                                                                            }\n                                                                            else {\n                                                                                const _errs18 = errors;\n                                                                                for (const key1 in data7) {\n                                                                                    if (!((((((((key1 === \"kind\") || (key1 === \"name\")) || (key1 === \"description\")) || (key1 === \"group\")) || (key1 === \"requiredPaymentDetails\")) || (key1 === \"min\")) || (key1 === \"max\")) || (key1 === \"fee\"))) {\n                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0, schemaPath: \"#/properties/payin/properties/methods/items/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key1 }, message: \"must NOT have additional properties\" }];\n                                                                                        return false;\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                if (_errs18 === errors) {\n                                                                                    if (data7.kind !== undefined) {\n                                                                                        const _errs19 = errors;\n                                                                                        if (typeof data7.kind !== \"string\") {\n                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/kind\", schemaPath: \"#/properties/payin/properties/methods/items/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                            return false;\n                                                                                        }\n                                                                                        var valid5 = _errs19 === errors;\n                                                                                    }\n                                                                                    else {\n                                                                                        var valid5 = true;\n                                                                                    }\n                                                                                    if (valid5) {\n                                                                                        if (data7.name !== undefined) {\n                                                                                            const _errs21 = errors;\n                                                                                            if (typeof data7.name !== \"string\") {\n                                                                                                validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/name\", schemaPath: \"#/properties/payin/properties/methods/items/properties/name/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                return false;\n                                                                                            }\n                                                                                            var valid5 = _errs21 === errors;\n                                                                                        }\n                                                                                        else {\n                                                                                            var valid5 = true;\n                                                                                        }\n                                                                                        if (valid5) {\n                                                                                            if (data7.description !== undefined) {\n                                                                                                const _errs23 = errors;\n                                                                                                if (typeof data7.description !== \"string\") {\n                                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/description\", schemaPath: \"#/properties/payin/properties/methods/items/properties/description/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                    return false;\n                                                                                                }\n                                                                                                var valid5 = _errs23 === errors;\n                                                                                            }\n                                                                                            else {\n                                                                                                var valid5 = true;\n                                                                                            }\n                                                                                            if (valid5) {\n                                                                                                if (data7.group !== undefined) {\n                                                                                                    const _errs25 = errors;\n                                                                                                    if (typeof data7.group !== \"string\") {\n                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/group\", schemaPath: \"#/properties/payin/properties/methods/items/properties/group/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                        return false;\n                                                                                                    }\n                                                                                                    var valid5 = _errs25 === errors;\n                                                                                                }\n                                                                                                else {\n                                                                                                    var valid5 = true;\n                                                                                                }\n                                                                                                if (valid5) {\n                                                                                                    if (data7.requiredPaymentDetails !== undefined) {\n                                                                                                        const _errs27 = errors;\n                                                                                                        if (!(validate0(data7.requiredPaymentDetails, { instancePath: instancePath + \"/payin/methods/\" + i0 + \"/requiredPaymentDetails\", parentData: data7, parentDataProperty: \"requiredPaymentDetails\", rootData }))) {\n                                                                                                            vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                            errors = vErrors.length;\n                                                                                                        }\n                                                                                                        var valid5 = _errs27 === errors;\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        var valid5 = true;\n                                                                                                    }\n                                                                                                    if (valid5) {\n                                                                                                        if (data7.min !== undefined) {\n                                                                                                            let data13 = data7.min;\n                                                                                                            const _errs28 = errors;\n                                                                                                            const _errs29 = errors;\n                                                                                                            if (errors === _errs29) {\n                                                                                                                if (typeof data13 === \"string\") {\n                                                                                                                    if (!pattern0.test(data13)) {\n                                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/min\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                        return false;\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/min\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                    return false;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            var valid5 = _errs28 === errors;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            var valid5 = true;\n                                                                                                        }\n                                                                                                        if (valid5) {\n                                                                                                            if (data7.max !== undefined) {\n                                                                                                                let data14 = data7.max;\n                                                                                                                const _errs31 = errors;\n                                                                                                                const _errs32 = errors;\n                                                                                                                if (errors === _errs32) {\n                                                                                                                    if (typeof data14 === \"string\") {\n                                                                                                                        if (!pattern0.test(data14)) {\n                                                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/max\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/max\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                        return false;\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                var valid5 = _errs31 === errors;\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                var valid5 = true;\n                                                                                                            }\n                                                                                                            if (valid5) {\n                                                                                                                if (data7.fee !== undefined) {\n                                                                                                                    let data15 = data7.fee;\n                                                                                                                    const _errs34 = errors;\n                                                                                                                    const _errs35 = errors;\n                                                                                                                    if (errors === _errs35) {\n                                                                                                                        if (typeof data15 === \"string\") {\n                                                                                                                            if (!pattern0.test(data15)) {\n                                                                                                                                validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                                return false;\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0 + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    var valid5 = _errs34 === errors;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    var valid5 = true;\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                        else {\n                                                                            validate12.errors = [{ instancePath: instancePath + \"/payin/methods/\" + i0, schemaPath: \"#/properties/payin/properties/methods/items/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                            return false;\n                                                                        }\n                                                                    }\n                                                                    var valid4 = _errs16 === errors;\n                                                                    if (!valid4) {\n                                                                        break;\n                                                                    }\n                                                                }\n                                                            }\n                                                            else {\n                                                                validate12.errors = [{ instancePath: instancePath + \"/payin/methods\", schemaPath: \"#/properties/payin/properties/methods/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                                                return false;\n                                                            }\n                                                        }\n                                                        var valid1 = _errs14 === errors;\n                                                    }\n                                                    else {\n                                                        var valid1 = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                validate12.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.payout !== undefined) {\n                            let data16 = data.payout;\n                            const _errs37 = errors;\n                            if (errors === _errs37) {\n                                if (data16 && typeof data16 == \"object\" && !Array.isArray(data16)) {\n                                    let missing3;\n                                    if (((data16.currencyCode === undefined) && (missing3 = \"currencyCode\")) || ((data16.methods === undefined) && (missing3 = \"methods\"))) {\n                                        validate12.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/required\", keyword: \"required\", params: { missingProperty: missing3 }, message: \"must have required property '\" + missing3 + \"'\" }];\n                                        return false;\n                                    }\n                                    else {\n                                        const _errs39 = errors;\n                                        for (const key2 in data16) {\n                                            if (!((((key2 === \"currencyCode\") || (key2 === \"min\")) || (key2 === \"max\")) || (key2 === \"methods\"))) {\n                                                validate12.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key2 }, message: \"must NOT have additional properties\" }];\n                                                return false;\n                                                break;\n                                            }\n                                        }\n                                        if (_errs39 === errors) {\n                                            if (data16.currencyCode !== undefined) {\n                                                const _errs40 = errors;\n                                                if (typeof data16.currencyCode !== \"string\") {\n                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/currencyCode\", schemaPath: \"#/properties/payout/properties/currencyCode/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid9 = _errs40 === errors;\n                                            }\n                                            else {\n                                                var valid9 = true;\n                                            }\n                                            if (valid9) {\n                                                if (data16.min !== undefined) {\n                                                    let data18 = data16.min;\n                                                    const _errs42 = errors;\n                                                    const _errs43 = errors;\n                                                    if (errors === _errs43) {\n                                                        if (typeof data18 === \"string\") {\n                                                            if (!pattern0.test(data18)) {\n                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/min\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                return false;\n                                                            }\n                                                        }\n                                                        else {\n                                                            validate12.errors = [{ instancePath: instancePath + \"/payout/min\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                            return false;\n                                                        }\n                                                    }\n                                                    var valid9 = _errs42 === errors;\n                                                }\n                                                else {\n                                                    var valid9 = true;\n                                                }\n                                                if (valid9) {\n                                                    if (data16.max !== undefined) {\n                                                        let data19 = data16.max;\n                                                        const _errs45 = errors;\n                                                        const _errs46 = errors;\n                                                        if (errors === _errs46) {\n                                                            if (typeof data19 === \"string\") {\n                                                                if (!pattern0.test(data19)) {\n                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/max\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                    return false;\n                                                                }\n                                                            }\n                                                            else {\n                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/max\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                return false;\n                                                            }\n                                                        }\n                                                        var valid9 = _errs45 === errors;\n                                                    }\n                                                    else {\n                                                        var valid9 = true;\n                                                    }\n                                                    if (valid9) {\n                                                        if (data16.methods !== undefined) {\n                                                            let data20 = data16.methods;\n                                                            const _errs48 = errors;\n                                                            if (errors === _errs48) {\n                                                                if (Array.isArray(data20)) {\n                                                                    var valid12 = true;\n                                                                    const len1 = data20.length;\n                                                                    for (let i1 = 0; i1 < len1; i1++) {\n                                                                        let data21 = data20[i1];\n                                                                        const _errs50 = errors;\n                                                                        if (errors === _errs50) {\n                                                                            if (data21 && typeof data21 == \"object\" && !Array.isArray(data21)) {\n                                                                                let missing4;\n                                                                                if (((data21.kind === undefined) && (missing4 = \"kind\")) || ((data21.estimatedSettlementTime === undefined) && (missing4 = \"estimatedSettlementTime\"))) {\n                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1, schemaPath: \"#/properties/payout/properties/methods/items/required\", keyword: \"required\", params: { missingProperty: missing4 }, message: \"must have required property '\" + missing4 + \"'\" }];\n                                                                                    return false;\n                                                                                }\n                                                                                else {\n                                                                                    const _errs52 = errors;\n                                                                                    for (const key3 in data21) {\n                                                                                        if (!(func2.call(schema13.properties.payout.properties.methods.items.properties, key3))) {\n                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1, schemaPath: \"#/properties/payout/properties/methods/items/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key3 }, message: \"must NOT have additional properties\" }];\n                                                                                            return false;\n                                                                                            break;\n                                                                                        }\n                                                                                    }\n                                                                                    if (_errs52 === errors) {\n                                                                                        if (data21.kind !== undefined) {\n                                                                                            const _errs53 = errors;\n                                                                                            if (typeof data21.kind !== \"string\") {\n                                                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/kind\", schemaPath: \"#/properties/payout/properties/methods/items/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                return false;\n                                                                                            }\n                                                                                            var valid13 = _errs53 === errors;\n                                                                                        }\n                                                                                        else {\n                                                                                            var valid13 = true;\n                                                                                        }\n                                                                                        if (valid13) {\n                                                                                            if (data21.name !== undefined) {\n                                                                                                const _errs55 = errors;\n                                                                                                if (typeof data21.name !== \"string\") {\n                                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/name\", schemaPath: \"#/properties/payout/properties/methods/items/properties/name/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                    return false;\n                                                                                                }\n                                                                                                var valid13 = _errs55 === errors;\n                                                                                            }\n                                                                                            else {\n                                                                                                var valid13 = true;\n                                                                                            }\n                                                                                            if (valid13) {\n                                                                                                if (data21.description !== undefined) {\n                                                                                                    const _errs57 = errors;\n                                                                                                    if (typeof data21.description !== \"string\") {\n                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/description\", schemaPath: \"#/properties/payout/properties/methods/items/properties/description/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                        return false;\n                                                                                                    }\n                                                                                                    var valid13 = _errs57 === errors;\n                                                                                                }\n                                                                                                else {\n                                                                                                    var valid13 = true;\n                                                                                                }\n                                                                                                if (valid13) {\n                                                                                                    if (data21.group !== undefined) {\n                                                                                                        const _errs59 = errors;\n                                                                                                        if (typeof data21.group !== \"string\") {\n                                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/group\", schemaPath: \"#/properties/payout/properties/methods/items/properties/group/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                            return false;\n                                                                                                        }\n                                                                                                        var valid13 = _errs59 === errors;\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        var valid13 = true;\n                                                                                                    }\n                                                                                                    if (valid13) {\n                                                                                                        if (data21.requiredPaymentDetails !== undefined) {\n                                                                                                            const _errs61 = errors;\n                                                                                                            if (!(validate0(data21.requiredPaymentDetails, { instancePath: instancePath + \"/payout/methods/\" + i1 + \"/requiredPaymentDetails\", parentData: data21, parentDataProperty: \"requiredPaymentDetails\", rootData }))) {\n                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);\n                                                                                                                errors = vErrors.length;\n                                                                                                            }\n                                                                                                            var valid13 = _errs61 === errors;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            var valid13 = true;\n                                                                                                        }\n                                                                                                        if (valid13) {\n                                                                                                            if (data21.min !== undefined) {\n                                                                                                                let data27 = data21.min;\n                                                                                                                const _errs62 = errors;\n                                                                                                                const _errs63 = errors;\n                                                                                                                if (errors === _errs63) {\n                                                                                                                    if (typeof data27 === \"string\") {\n                                                                                                                        if (!pattern0.test(data27)) {\n                                                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/min\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/min\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                        return false;\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                var valid13 = _errs62 === errors;\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                var valid13 = true;\n                                                                                                            }\n                                                                                                            if (valid13) {\n                                                                                                                if (data21.max !== undefined) {\n                                                                                                                    let data28 = data21.max;\n                                                                                                                    const _errs65 = errors;\n                                                                                                                    const _errs66 = errors;\n                                                                                                                    if (errors === _errs66) {\n                                                                                                                        if (typeof data28 === \"string\") {\n                                                                                                                            if (!pattern0.test(data28)) {\n                                                                                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/max\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                                return false;\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/max\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                            return false;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                    var valid13 = _errs65 === errors;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    var valid13 = true;\n                                                                                                                }\n                                                                                                                if (valid13) {\n                                                                                                                    if (data21.fee !== undefined) {\n                                                                                                                        let data29 = data21.fee;\n                                                                                                                        const _errs68 = errors;\n                                                                                                                        const _errs69 = errors;\n                                                                                                                        if (errors === _errs69) {\n                                                                                                                            if (typeof data29 === \"string\") {\n                                                                                                                                if (!pattern0.test(data29)) {\n                                                                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                                                                                                    return false;\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            else {\n                                                                                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                                                                                                return false;\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                        var valid13 = _errs68 === errors;\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        var valid13 = true;\n                                                                                                                    }\n                                                                                                                    if (valid13) {\n                                                                                                                        if (data21.estimatedSettlementTime !== undefined) {\n                                                                                                                            let data30 = data21.estimatedSettlementTime;\n                                                                                                                            const _errs71 = errors;\n                                                                                                                            if (errors === _errs71) {\n                                                                                                                                if ((typeof data30 == \"number\") && (isFinite(data30))) {\n                                                                                                                                    if (data30 < 0 || isNaN(data30)) {\n                                                                                                                                        validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/estimatedSettlementTime\", schemaPath: \"#/properties/payout/properties/methods/items/properties/estimatedSettlementTime/minimum\", keyword: \"minimum\", params: { comparison: \">=\", limit: 0 }, message: \"must be >= 0\" }];\n                                                                                                                                        return false;\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                                else {\n                                                                                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1 + \"/estimatedSettlementTime\", schemaPath: \"#/properties/payout/properties/methods/items/properties/estimatedSettlementTime/type\", keyword: \"type\", params: { type: \"number\" }, message: \"must be number\" }];\n                                                                                                                                    return false;\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                            var valid13 = _errs71 === errors;\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            var valid13 = true;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                validate12.errors = [{ instancePath: instancePath + \"/payout/methods/\" + i1, schemaPath: \"#/properties/payout/properties/methods/items/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                                                return false;\n                                                                            }\n                                                                        }\n                                                                        var valid12 = _errs50 === errors;\n                                                                        if (!valid12) {\n                                                                            break;\n                                                                        }\n                                                                    }\n                                                                }\n                                                                else {\n                                                                    validate12.errors = [{ instancePath: instancePath + \"/payout/methods\", schemaPath: \"#/properties/payout/properties/methods/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                                                    return false;\n                                                                }\n                                                            }\n                                                            var valid9 = _errs48 === errors;\n                                                        }\n                                                        else {\n                                                            var valid9 = true;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    validate12.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                    return false;\n                                }\n                            }\n                            var valid0 = _errs37 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.payoutUnitsPerPayinUnit !== undefined) {\n                                const _errs73 = errors;\n                                if (typeof data.payoutUnitsPerPayinUnit !== \"string\") {\n                                    validate12.errors = [{ instancePath: instancePath + \"/payoutUnitsPerPayinUnit\", schemaPath: \"#/properties/payoutUnitsPerPayinUnit/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                    return false;\n                                }\n                                var valid0 = _errs73 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.requiredClaims !== undefined) {\n                                    let data32 = data.requiredClaims;\n                                    const _errs75 = errors;\n                                    if (!(data32 && typeof data32 == \"object\" && !Array.isArray(data32))) {\n                                        validate12.errors = [{ instancePath: instancePath + \"/requiredClaims\", schemaPath: \"#/properties/requiredClaims/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                        return false;\n                                    }\n                                    var valid0 = _errs75 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate12.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate12.errors = vErrors; return errors === 0; }\nexport const balance = validate15;\nconst schema24 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/balance.schema.json\", \"type\": \"object\", \"properties\": { \"additionalProperties\": false, \"currencyCode\": { \"type\": \"string\", \"description\": \"ISO 3166 currency code string\" }, \"available\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"The amount available to be transacted with\" } }, \"required\": [\"currencyCode\", \"available\"] };\nfunction validate15(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/balance.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if (((data.currencyCode === undefined) && (missing0 = \"currencyCode\")) || ((data.available === undefined) && (missing0 = \"available\"))) {\n            validate15.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            if (data.additionalProperties !== undefined) {\n                var valid0 = false;\n                validate15.errors = [{ instancePath: instancePath + \"/additionalProperties\", schemaPath: \"#/properties/additionalProperties/false schema\", keyword: \"false schema\", params: {}, message: \"boolean schema is false\" }];\n                return false;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.currencyCode !== undefined) {\n                    const _errs1 = errors;\n                    if (typeof data.currencyCode !== \"string\") {\n                        validate15.errors = [{ instancePath: instancePath + \"/currencyCode\", schemaPath: \"#/properties/currencyCode/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs1 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.available !== undefined) {\n                        let data2 = data.available;\n                        const _errs3 = errors;\n                        const _errs4 = errors;\n                        if (errors === _errs4) {\n                            if (typeof data2 === \"string\") {\n                                if (!pattern0.test(data2)) {\n                                    validate15.errors = [{ instancePath: instancePath + \"/available\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                    return false;\n                                }\n                            }\n                            else {\n                                validate15.errors = [{ instancePath: instancePath + \"/available\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate15.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate15.errors = vErrors; return errors === 0; }\nexport const message = validate16;\nconst schema26 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/message.schema.json\", \"definitions\": { \"MessageMetadata\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"from\": { \"$ref\": \"definitions.json#/definitions/did\", \"description\": \"The sender's DID\" }, \"to\": { \"$ref\": \"definitions.json#/definitions/did\", \"description\": \"The recipient's DID\" }, \"kind\": { \"type\": \"string\", \"enum\": [\"rfq\", \"quote\", \"order\", \"orderstatus\", \"close\"], \"description\": \"The message kind (e.g. rfq, quote)\" }, \"id\": { \"type\": \"string\", \"description\": \"The message ID\" }, \"exchangeId\": { \"type\": \"string\", \"description\": \"ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread\" }, \"externalId\": { \"type\": \"string\", \"description\": \"Arbitrary ID for the caller to associate with the message.\" }, \"createdAt\": { \"type\": \"string\", \"description\": \"ISO8601 formatted string representing the timestamp\" }, \"protocol\": { \"type\": \"string\", \"description\": \"Version of the protocol in use (x.x format)\" } }, \"required\": [\"from\", \"to\", \"kind\", \"id\", \"exchangeId\", \"createdAt\", \"protocol\"] } }, \"type\": \"object\", \"properties\": { \"metadata\": { \"$ref\": \"#/definitions/MessageMetadata\" }, \"data\": { \"type\": \"object\", \"description\": \"The actual message content\" }, \"signature\": { \"type\": \"string\", \"description\": \"Signature that verifies the authenticity and integrity of a message\" }, \"privateData\": { \"type\": \"object\", \"description\": \"Private data which can be detached from the payload without disrupting integrity. Only used in RFQs\" } }, \"additionalProperties\": false, \"required\": [\"metadata\", \"data\", \"signature\"] };\nconst schema27 = { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"from\": { \"$ref\": \"definitions.json#/definitions/did\", \"description\": \"The sender's DID\" }, \"to\": { \"$ref\": \"definitions.json#/definitions/did\", \"description\": \"The recipient's DID\" }, \"kind\": { \"type\": \"string\", \"enum\": [\"rfq\", \"quote\", \"order\", \"orderstatus\", \"close\"], \"description\": \"The message kind (e.g. rfq, quote)\" }, \"id\": { \"type\": \"string\", \"description\": \"The message ID\" }, \"exchangeId\": { \"type\": \"string\", \"description\": \"ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread\" }, \"externalId\": { \"type\": \"string\", \"description\": \"Arbitrary ID for the caller to associate with the message.\" }, \"createdAt\": { \"type\": \"string\", \"description\": \"ISO8601 formatted string representing the timestamp\" }, \"protocol\": { \"type\": \"string\", \"description\": \"Version of the protocol in use (x.x format)\" } }, \"required\": [\"from\", \"to\", \"kind\", \"id\", \"exchangeId\", \"createdAt\", \"protocol\"] };\nconst schema28 = { \"type\": \"string\", \"pattern\": \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" };\nconst pattern11 = new RegExp(\"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\", \"u\");\nfunction validate17(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((((((((data.from === undefined) && (missing0 = \"from\")) || ((data.to === undefined) && (missing0 = \"to\"))) || ((data.kind === undefined) && (missing0 = \"kind\"))) || ((data.id === undefined) && (missing0 = \"id\"))) || ((data.exchangeId === undefined) && (missing0 = \"exchangeId\"))) || ((data.createdAt === undefined) && (missing0 = \"createdAt\"))) || ((data.protocol === undefined) && (missing0 = \"protocol\"))) {\n            validate17.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!((((((((key0 === \"from\") || (key0 === \"to\")) || (key0 === \"kind\")) || (key0 === \"id\")) || (key0 === \"exchangeId\")) || (key0 === \"externalId\")) || (key0 === \"createdAt\")) || (key0 === \"protocol\"))) {\n                    validate17.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.from !== undefined) {\n                    let data0 = data.from;\n                    const _errs2 = errors;\n                    const _errs3 = errors;\n                    if (errors === _errs3) {\n                        if (typeof data0 === \"string\") {\n                            if (!pattern11.test(data0)) {\n                                validate17.errors = [{ instancePath: instancePath + \"/from\", schemaPath: \"definitions.json#/definitions/did/pattern\", keyword: \"pattern\", params: { pattern: \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" }, message: \"must match pattern \\\"\" + \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" + \"\\\"\" }];\n                                return false;\n                            }\n                        }\n                        else {\n                            validate17.errors = [{ instancePath: instancePath + \"/from\", schemaPath: \"definitions.json#/definitions/did/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                            return false;\n                        }\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.to !== undefined) {\n                        let data1 = data.to;\n                        const _errs5 = errors;\n                        const _errs6 = errors;\n                        if (errors === _errs6) {\n                            if (typeof data1 === \"string\") {\n                                if (!pattern11.test(data1)) {\n                                    validate17.errors = [{ instancePath: instancePath + \"/to\", schemaPath: \"definitions.json#/definitions/did/pattern\", keyword: \"pattern\", params: { pattern: \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" }, message: \"must match pattern \\\"\" + \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" + \"\\\"\" }];\n                                    return false;\n                                }\n                            }\n                            else {\n                                validate17.errors = [{ instancePath: instancePath + \"/to\", schemaPath: \"definitions.json#/definitions/did/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs5 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.kind !== undefined) {\n                            let data2 = data.kind;\n                            const _errs8 = errors;\n                            if (typeof data2 !== \"string\") {\n                                validate17.errors = [{ instancePath: instancePath + \"/kind\", schemaPath: \"#/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                            if (!(((((data2 === \"rfq\") || (data2 === \"quote\")) || (data2 === \"order\")) || (data2 === \"orderstatus\")) || (data2 === \"close\"))) {\n                                validate17.errors = [{ instancePath: instancePath + \"/kind\", schemaPath: \"#/properties/kind/enum\", keyword: \"enum\", params: { allowedValues: schema27.properties.kind.enum }, message: \"must be equal to one of the allowed values\" }];\n                                return false;\n                            }\n                            var valid0 = _errs8 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.id !== undefined) {\n                                const _errs10 = errors;\n                                if (typeof data.id !== \"string\") {\n                                    validate17.errors = [{ instancePath: instancePath + \"/id\", schemaPath: \"#/properties/id/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                    return false;\n                                }\n                                var valid0 = _errs10 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.exchangeId !== undefined) {\n                                    const _errs12 = errors;\n                                    if (typeof data.exchangeId !== \"string\") {\n                                        validate17.errors = [{ instancePath: instancePath + \"/exchangeId\", schemaPath: \"#/properties/exchangeId/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                        return false;\n                                    }\n                                    var valid0 = _errs12 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                                if (valid0) {\n                                    if (data.externalId !== undefined) {\n                                        const _errs14 = errors;\n                                        if (typeof data.externalId !== \"string\") {\n                                            validate17.errors = [{ instancePath: instancePath + \"/externalId\", schemaPath: \"#/properties/externalId/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                            return false;\n                                        }\n                                        var valid0 = _errs14 === errors;\n                                    }\n                                    else {\n                                        var valid0 = true;\n                                    }\n                                    if (valid0) {\n                                        if (data.createdAt !== undefined) {\n                                            const _errs16 = errors;\n                                            if (typeof data.createdAt !== \"string\") {\n                                                validate17.errors = [{ instancePath: instancePath + \"/createdAt\", schemaPath: \"#/properties/createdAt/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                return false;\n                                            }\n                                            var valid0 = _errs16 === errors;\n                                        }\n                                        else {\n                                            var valid0 = true;\n                                        }\n                                        if (valid0) {\n                                            if (data.protocol !== undefined) {\n                                                const _errs18 = errors;\n                                                if (typeof data.protocol !== \"string\") {\n                                                    validate17.errors = [{ instancePath: instancePath + \"/protocol\", schemaPath: \"#/properties/protocol/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid0 = _errs18 === errors;\n                                            }\n                                            else {\n                                                var valid0 = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate17.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate17.errors = vErrors; return errors === 0; }\nfunction validate16(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/message.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((((data.metadata === undefined) && (missing0 = \"metadata\")) || ((data.data === undefined) && (missing0 = \"data\"))) || ((data.signature === undefined) && (missing0 = \"signature\"))) {\n            validate16.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!((((key0 === \"metadata\") || (key0 === \"data\")) || (key0 === \"signature\")) || (key0 === \"privateData\"))) {\n                    validate16.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.metadata !== undefined) {\n                    const _errs2 = errors;\n                    if (!(validate17(data.metadata, { instancePath: instancePath + \"/metadata\", parentData: data, parentDataProperty: \"metadata\", rootData }))) {\n                        vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);\n                        errors = vErrors.length;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.data !== undefined) {\n                        let data1 = data.data;\n                        const _errs3 = errors;\n                        if (!(data1 && typeof data1 == \"object\" && !Array.isArray(data1))) {\n                            validate16.errors = [{ instancePath: instancePath + \"/data\", schemaPath: \"#/properties/data/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                            return false;\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.signature !== undefined) {\n                            const _errs5 = errors;\n                            if (typeof data.signature !== \"string\") {\n                                validate16.errors = [{ instancePath: instancePath + \"/signature\", schemaPath: \"#/properties/signature/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                            var valid0 = _errs5 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.privateData !== undefined) {\n                                let data3 = data.privateData;\n                                const _errs7 = errors;\n                                if (!(data3 && typeof data3 == \"object\" && !Array.isArray(data3))) {\n                                    validate16.errors = [{ instancePath: instancePath + \"/privateData\", schemaPath: \"#/properties/privateData/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                    return false;\n                                }\n                                var valid0 = _errs7 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate16.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate16.errors = vErrors; return errors === 0; }\nexport const order = validate19;\nconst schema30 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/order.schema.json\", \"type\": \"object\", \"additionalProperties\": false, \"properties\": {} };\nfunction validate19(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/order.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        for (const key0 in data) {\n            validate19.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n            return false;\n            break;\n        }\n    }\n    else {\n        validate19.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate19.errors = vErrors; return errors === 0; }\nexport const orderstatus = validate20;\nconst schema31 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/orderstatus.schema.json\", \"type\": \"object\", \"required\": [\"orderStatus\"], \"additionalProperties\": false, \"properties\": { \"orderStatus\": { \"type\": \"string\" } } };\nfunction validate20(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/orderstatus.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((data.orderStatus === undefined) && (missing0 = \"orderStatus\")) {\n            validate20.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === \"orderStatus\")) {\n                    validate20.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.orderStatus !== undefined) {\n                    if (typeof data.orderStatus !== \"string\") {\n                        validate20.errors = [{ instancePath: instancePath + \"/orderStatus\", schemaPath: \"#/properties/orderStatus/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate20.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate20.errors = vErrors; return errors === 0; }\nexport const quote = validate21;\nconst schema32 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/quote.schema.json\", \"definitions\": { \"QuoteDetails\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"currencyCode\": { \"type\": \"string\", \"description\": \"ISO 3166 currency code string\" }, \"amount\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"The amount of currency expressed in the smallest respective unit\" }, \"fee\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"The amount paid in fees\" }, \"paymentInstruction\": { \"$ref\": \"#/definitions/PaymentInstruction\" } }, \"required\": [\"currencyCode\", \"amount\"] }, \"PaymentInstruction\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"link\": { \"type\": \"string\", \"description\": \"Link to allow Alice to pay PFI, or be paid by the PFI\" }, \"instruction\": { \"type\": \"string\", \"description\": \"Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI\" } } } }, \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"expiresAt\": { \"type\": \"string\", \"description\": \"When this quote expires. Expressed as ISO8601\" }, \"payin\": { \"$ref\": \"#/definitions/QuoteDetails\" }, \"payout\": { \"$ref\": \"#/definitions/QuoteDetails\" } }, \"required\": [\"expiresAt\", \"payin\", \"payout\"] };\nconst schema33 = { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"currencyCode\": { \"type\": \"string\", \"description\": \"ISO 3166 currency code string\" }, \"amount\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"The amount of currency expressed in the smallest respective unit\" }, \"fee\": { \"$ref\": \"definitions.json#/definitions/decimalString\", \"description\": \"The amount paid in fees\" }, \"paymentInstruction\": { \"$ref\": \"#/definitions/PaymentInstruction\" } }, \"required\": [\"currencyCode\", \"amount\"] };\nconst schema36 = { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"link\": { \"type\": \"string\", \"description\": \"Link to allow Alice to pay PFI, or be paid by the PFI\" }, \"instruction\": { \"type\": \"string\", \"description\": \"Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI\" } } };\nfunction validate22(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if (((data.currencyCode === undefined) && (missing0 = \"currencyCode\")) || ((data.amount === undefined) && (missing0 = \"amount\"))) {\n            validate22.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!((((key0 === \"currencyCode\") || (key0 === \"amount\")) || (key0 === \"fee\")) || (key0 === \"paymentInstruction\"))) {\n                    validate22.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.currencyCode !== undefined) {\n                    const _errs2 = errors;\n                    if (typeof data.currencyCode !== \"string\") {\n                        validate22.errors = [{ instancePath: instancePath + \"/currencyCode\", schemaPath: \"#/properties/currencyCode/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.amount !== undefined) {\n                        let data1 = data.amount;\n                        const _errs4 = errors;\n                        const _errs5 = errors;\n                        if (errors === _errs5) {\n                            if (typeof data1 === \"string\") {\n                                if (!pattern0.test(data1)) {\n                                    validate22.errors = [{ instancePath: instancePath + \"/amount\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                    return false;\n                                }\n                            }\n                            else {\n                                validate22.errors = [{ instancePath: instancePath + \"/amount\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs4 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.fee !== undefined) {\n                            let data2 = data.fee;\n                            const _errs7 = errors;\n                            const _errs8 = errors;\n                            if (errors === _errs8) {\n                                if (typeof data2 === \"string\") {\n                                    if (!pattern0.test(data2)) {\n                                        validate22.errors = [{ instancePath: instancePath + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                        return false;\n                                    }\n                                }\n                                else {\n                                    validate22.errors = [{ instancePath: instancePath + \"/fee\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                    return false;\n                                }\n                            }\n                            var valid0 = _errs7 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.paymentInstruction !== undefined) {\n                                let data3 = data.paymentInstruction;\n                                const _errs10 = errors;\n                                const _errs11 = errors;\n                                if (errors === _errs11) {\n                                    if (data3 && typeof data3 == \"object\" && !Array.isArray(data3)) {\n                                        const _errs13 = errors;\n                                        for (const key1 in data3) {\n                                            if (!((key1 === \"link\") || (key1 === \"instruction\"))) {\n                                                validate22.errors = [{ instancePath: instancePath + \"/paymentInstruction\", schemaPath: \"#/definitions/PaymentInstruction/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key1 }, message: \"must NOT have additional properties\" }];\n                                                return false;\n                                                break;\n                                            }\n                                        }\n                                        if (_errs13 === errors) {\n                                            if (data3.link !== undefined) {\n                                                const _errs14 = errors;\n                                                if (typeof data3.link !== \"string\") {\n                                                    validate22.errors = [{ instancePath: instancePath + \"/paymentInstruction/link\", schemaPath: \"#/definitions/PaymentInstruction/properties/link/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid4 = _errs14 === errors;\n                                            }\n                                            else {\n                                                var valid4 = true;\n                                            }\n                                            if (valid4) {\n                                                if (data3.instruction !== undefined) {\n                                                    const _errs16 = errors;\n                                                    if (typeof data3.instruction !== \"string\") {\n                                                        validate22.errors = [{ instancePath: instancePath + \"/paymentInstruction/instruction\", schemaPath: \"#/definitions/PaymentInstruction/properties/instruction/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                        return false;\n                                                    }\n                                                    var valid4 = _errs16 === errors;\n                                                }\n                                                else {\n                                                    var valid4 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        validate22.errors = [{ instancePath: instancePath + \"/paymentInstruction\", schemaPath: \"#/definitions/PaymentInstruction/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                        return false;\n                                    }\n                                }\n                                var valid0 = _errs10 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate22.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate22.errors = vErrors; return errors === 0; }\nfunction validate21(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/quote.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((((data.expiresAt === undefined) && (missing0 = \"expiresAt\")) || ((data.payin === undefined) && (missing0 = \"payin\"))) || ((data.payout === undefined) && (missing0 = \"payout\"))) {\n            validate21.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(((key0 === \"expiresAt\") || (key0 === \"payin\")) || (key0 === \"payout\"))) {\n                    validate21.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.expiresAt !== undefined) {\n                    const _errs2 = errors;\n                    if (typeof data.expiresAt !== \"string\") {\n                        validate21.errors = [{ instancePath: instancePath + \"/expiresAt\", schemaPath: \"#/properties/expiresAt/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.payin !== undefined) {\n                        const _errs4 = errors;\n                        if (!(validate22(data.payin, { instancePath: instancePath + \"/payin\", parentData: data, parentDataProperty: \"payin\", rootData }))) {\n                            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);\n                            errors = vErrors.length;\n                        }\n                        var valid0 = _errs4 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.payout !== undefined) {\n                            const _errs5 = errors;\n                            if (!(validate22(data.payout, { instancePath: instancePath + \"/payout\", parentData: data, parentDataProperty: \"payout\", rootData }))) {\n                                vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);\n                                errors = vErrors.length;\n                            }\n                            var valid0 = _errs5 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate21.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate21.errors = vErrors; return errors === 0; }\nexport const resource = validate25;\nconst schema37 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/resource.schema.json\", \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"metadata\": { \"type\": \"object\", \"properties\": { \"from\": { \"$ref\": \"definitions.json#/definitions/did\", \"description\": \"The PFI's DID\" }, \"kind\": { \"type\": \"string\", \"enum\": [\"offering\", \"balance\"], \"description\": \"The resource kind (e.g. Offering)\" }, \"id\": { \"type\": \"string\", \"description\": \"The resource id\" }, \"createdAt\": { \"type\": \"string\", \"description\": \"When the resource was created at. Expressed as ISO8601\" }, \"updatedAt\": { \"type\": \"string\", \"description\": \"When the resource was last updated. Expressed as ISO8601\" }, \"protocol\": { \"type\": \"string\", \"description\": \"Version of the protocol in use (x.x format)\" } }, \"required\": [\"from\", \"kind\", \"id\", \"createdAt\", \"protocol\"], \"description\": \"The metadata object contains fields about the resource and is present for every tbdex resources of all types.\" }, \"data\": { \"description\": \"The actual resource content\", \"type\": \"object\" }, \"signature\": { \"type\": \"string\", \"description\": \"Signature that verifies that authenticity and integrity of a message\" } }, \"required\": [\"metadata\", \"data\", \"signature\"], \"description\": \"ResourceModel\" };\nfunction validate25(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/resource.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((((data.metadata === undefined) && (missing0 = \"metadata\")) || ((data.data === undefined) && (missing0 = \"data\"))) || ((data.signature === undefined) && (missing0 = \"signature\"))) {\n            validate25.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(((key0 === \"metadata\") || (key0 === \"data\")) || (key0 === \"signature\"))) {\n                    validate25.errors = [{ instancePath, schemaPath: \"#/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.metadata !== undefined) {\n                    let data0 = data.metadata;\n                    const _errs2 = errors;\n                    if (errors === _errs2) {\n                        if (data0 && typeof data0 == \"object\" && !Array.isArray(data0)) {\n                            let missing1;\n                            if ((((((data0.from === undefined) && (missing1 = \"from\")) || ((data0.kind === undefined) && (missing1 = \"kind\"))) || ((data0.id === undefined) && (missing1 = \"id\"))) || ((data0.createdAt === undefined) && (missing1 = \"createdAt\"))) || ((data0.protocol === undefined) && (missing1 = \"protocol\"))) {\n                                validate25.errors = [{ instancePath: instancePath + \"/metadata\", schemaPath: \"#/properties/metadata/required\", keyword: \"required\", params: { missingProperty: missing1 }, message: \"must have required property '\" + missing1 + \"'\" }];\n                                return false;\n                            }\n                            else {\n                                if (data0.from !== undefined) {\n                                    let data1 = data0.from;\n                                    const _errs4 = errors;\n                                    const _errs5 = errors;\n                                    if (errors === _errs5) {\n                                        if (typeof data1 === \"string\") {\n                                            if (!pattern11.test(data1)) {\n                                                validate25.errors = [{ instancePath: instancePath + \"/metadata/from\", schemaPath: \"definitions.json#/definitions/did/pattern\", keyword: \"pattern\", params: { pattern: \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" }, message: \"must match pattern \\\"\" + \"^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\" + \"\\\"\" }];\n                                                return false;\n                                            }\n                                        }\n                                        else {\n                                            validate25.errors = [{ instancePath: instancePath + \"/metadata/from\", schemaPath: \"definitions.json#/definitions/did/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                            return false;\n                                        }\n                                    }\n                                    var valid1 = _errs4 === errors;\n                                }\n                                else {\n                                    var valid1 = true;\n                                }\n                                if (valid1) {\n                                    if (data0.kind !== undefined) {\n                                        let data2 = data0.kind;\n                                        const _errs7 = errors;\n                                        if (typeof data2 !== \"string\") {\n                                            validate25.errors = [{ instancePath: instancePath + \"/metadata/kind\", schemaPath: \"#/properties/metadata/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                            return false;\n                                        }\n                                        if (!((data2 === \"offering\") || (data2 === \"balance\"))) {\n                                            validate25.errors = [{ instancePath: instancePath + \"/metadata/kind\", schemaPath: \"#/properties/metadata/properties/kind/enum\", keyword: \"enum\", params: { allowedValues: schema37.properties.metadata.properties.kind.enum }, message: \"must be equal to one of the allowed values\" }];\n                                            return false;\n                                        }\n                                        var valid1 = _errs7 === errors;\n                                    }\n                                    else {\n                                        var valid1 = true;\n                                    }\n                                    if (valid1) {\n                                        if (data0.id !== undefined) {\n                                            const _errs9 = errors;\n                                            if (typeof data0.id !== \"string\") {\n                                                validate25.errors = [{ instancePath: instancePath + \"/metadata/id\", schemaPath: \"#/properties/metadata/properties/id/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                return false;\n                                            }\n                                            var valid1 = _errs9 === errors;\n                                        }\n                                        else {\n                                            var valid1 = true;\n                                        }\n                                        if (valid1) {\n                                            if (data0.createdAt !== undefined) {\n                                                const _errs11 = errors;\n                                                if (typeof data0.createdAt !== \"string\") {\n                                                    validate25.errors = [{ instancePath: instancePath + \"/metadata/createdAt\", schemaPath: \"#/properties/metadata/properties/createdAt/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid1 = _errs11 === errors;\n                                            }\n                                            else {\n                                                var valid1 = true;\n                                            }\n                                            if (valid1) {\n                                                if (data0.updatedAt !== undefined) {\n                                                    const _errs13 = errors;\n                                                    if (typeof data0.updatedAt !== \"string\") {\n                                                        validate25.errors = [{ instancePath: instancePath + \"/metadata/updatedAt\", schemaPath: \"#/properties/metadata/properties/updatedAt/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                        return false;\n                                                    }\n                                                    var valid1 = _errs13 === errors;\n                                                }\n                                                else {\n                                                    var valid1 = true;\n                                                }\n                                                if (valid1) {\n                                                    if (data0.protocol !== undefined) {\n                                                        const _errs15 = errors;\n                                                        if (typeof data0.protocol !== \"string\") {\n                                                            validate25.errors = [{ instancePath: instancePath + \"/metadata/protocol\", schemaPath: \"#/properties/metadata/properties/protocol/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                            return false;\n                                                        }\n                                                        var valid1 = _errs15 === errors;\n                                                    }\n                                                    else {\n                                                        var valid1 = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            validate25.errors = [{ instancePath: instancePath + \"/metadata\", schemaPath: \"#/properties/metadata/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                            return false;\n                        }\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.data !== undefined) {\n                        let data7 = data.data;\n                        const _errs17 = errors;\n                        if (!(data7 && typeof data7 == \"object\" && !Array.isArray(data7))) {\n                            validate25.errors = [{ instancePath: instancePath + \"/data\", schemaPath: \"#/properties/data/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                            return false;\n                        }\n                        var valid0 = _errs17 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.signature !== undefined) {\n                            const _errs19 = errors;\n                            if (typeof data.signature !== \"string\") {\n                                validate25.errors = [{ instancePath: instancePath + \"/signature\", schemaPath: \"#/properties/signature/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                return false;\n                            }\n                            var valid0 = _errs19 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate25.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate25.errors = vErrors; return errors === 0; }\nexport const rfqPrivate = validate26;\nconst schema39 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/rfq-private.schema.json\", \"type\": \"object\", \"properties\": { \"additionalProperties\": false, \"salt\": { \"type\": \"string\", \"description\": \"Randomly generated cryptographic salt used to hash privateData fields\" }, \"claims\": { \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"description\": \"Presentation Submission that fulfills the requirements included in the respective Offering\" }, \"payin\": { \"type\": \"object\", \"additionalProperties\": false, \"properties\": { \"paymentDetails\": { \"type\": \"object\", \"description\": \"An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema\" } } }, \"payout\": { \"additionalProperties\": false, \"type\": \"object\", \"properties\": { \"paymentDetails\": { \"type\": \"object\", \"description\": \"An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema\" } } } }, \"required\": [\"salt\"] };\nfunction validate26(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/rfq-private.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((data.salt === undefined) && (missing0 = \"salt\")) {\n            validate26.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            if (data.additionalProperties !== undefined) {\n                var valid0 = false;\n                validate26.errors = [{ instancePath: instancePath + \"/additionalProperties\", schemaPath: \"#/properties/additionalProperties/false schema\", keyword: \"false schema\", params: {}, message: \"boolean schema is false\" }];\n                return false;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.salt !== undefined) {\n                    const _errs1 = errors;\n                    if (typeof data.salt !== \"string\") {\n                        validate26.errors = [{ instancePath: instancePath + \"/salt\", schemaPath: \"#/properties/salt/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs1 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.claims !== undefined) {\n                        let data2 = data.claims;\n                        const _errs3 = errors;\n                        if (errors === _errs3) {\n                            if (Array.isArray(data2)) {\n                                var valid1 = true;\n                                const len0 = data2.length;\n                                for (let i0 = 0; i0 < len0; i0++) {\n                                    const _errs5 = errors;\n                                    if (typeof data2[i0] !== \"string\") {\n                                        validate26.errors = [{ instancePath: instancePath + \"/claims/\" + i0, schemaPath: \"#/properties/claims/items/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                        return false;\n                                    }\n                                    var valid1 = _errs5 === errors;\n                                    if (!valid1) {\n                                        break;\n                                    }\n                                }\n                            }\n                            else {\n                                validate26.errors = [{ instancePath: instancePath + \"/claims\", schemaPath: \"#/properties/claims/type\", keyword: \"type\", params: { type: \"array\" }, message: \"must be array\" }];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.payin !== undefined) {\n                            let data4 = data.payin;\n                            const _errs7 = errors;\n                            if (errors === _errs7) {\n                                if (data4 && typeof data4 == \"object\" && !Array.isArray(data4)) {\n                                    const _errs9 = errors;\n                                    for (const key0 in data4) {\n                                        if (!(key0 === \"paymentDetails\")) {\n                                            validate26.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key0 }, message: \"must NOT have additional properties\" }];\n                                            return false;\n                                            break;\n                                        }\n                                    }\n                                    if (_errs9 === errors) {\n                                        if (data4.paymentDetails !== undefined) {\n                                            let data5 = data4.paymentDetails;\n                                            if (!(data5 && typeof data5 == \"object\" && !Array.isArray(data5))) {\n                                                validate26.errors = [{ instancePath: instancePath + \"/payin/paymentDetails\", schemaPath: \"#/properties/payin/properties/paymentDetails/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                return false;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    validate26.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                    return false;\n                                }\n                            }\n                            var valid0 = _errs7 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.payout !== undefined) {\n                                let data6 = data.payout;\n                                const _errs12 = errors;\n                                if (errors === _errs12) {\n                                    if (data6 && typeof data6 == \"object\" && !Array.isArray(data6)) {\n                                        const _errs14 = errors;\n                                        for (const key1 in data6) {\n                                            if (!(key1 === \"paymentDetails\")) {\n                                                validate26.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/additionalProperties\", keyword: \"additionalProperties\", params: { additionalProperty: key1 }, message: \"must NOT have additional properties\" }];\n                                                return false;\n                                                break;\n                                            }\n                                        }\n                                        if (_errs14 === errors) {\n                                            if (data6.paymentDetails !== undefined) {\n                                                let data7 = data6.paymentDetails;\n                                                if (!(data7 && typeof data7 == \"object\" && !Array.isArray(data7))) {\n                                                    validate26.errors = [{ instancePath: instancePath + \"/payout/paymentDetails\", schemaPath: \"#/properties/payout/properties/paymentDetails/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                                    return false;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        validate26.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                        return false;\n                                    }\n                                }\n                                var valid0 = _errs12 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate26.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate26.errors = vErrors; return errors === 0; }\nexport const rfq = validate27;\nconst schema40 = { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"https://tbdex.dev/rfq.schema.json\", \"type\": \"object\", \"properties\": { \"additionalProperties\": false, \"offeringId\": { \"type\": \"string\", \"description\": \"Offering which Alice would like to get a quote for\" }, \"claimsHash\": { \"type\": \"string\", \"description\": \"Digests of Presentation Submissions that fulfills the requirements included in the respective Offering\" }, \"payin\": { \"type\": \"object\", \"properties\": { \"amount\": { \"$ref\": \"definitions.json#/definitions/decimalString\" }, \"kind\": { \"type\": \"string\", \"description\": \"Type of payment method e.g. BTC_ADDRESS, DEBIT_CARD, MOMO_MPESA\" }, \"paymentDetailsHash\": { \"type\": \"string\", \"description\": \"Digest of an object containing the properties defined in the respective Offering's requiredPaymentDetails json schema\" } }, \"required\": [\"amount\", \"kind\"] }, \"payout\": { \"type\": \"object\", \"properties\": { \"kind\": { \"type\": \"string\", \"description\": \"Selected payout method from the respective offering\" }, \"paymentDetailsHash\": { \"type\": \"string\", \"description\": \"Digest of an object containing the properties defined in the respective Offering's requiredPaymentDetails json schema\" } }, \"required\": [\"kind\"] } }, \"required\": [\"offeringId\", \"payin\", \"payout\"] };\nfunction validate27(data, { instancePath = \"\", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL=\"https://tbdex.dev/rfq.schema.json\" */ ; let vErrors = null; let errors = 0; if (errors === 0) {\n    if (data && typeof data == \"object\" && !Array.isArray(data)) {\n        let missing0;\n        if ((((data.offeringId === undefined) && (missing0 = \"offeringId\")) || ((data.payin === undefined) && (missing0 = \"payin\"))) || ((data.payout === undefined) && (missing0 = \"payout\"))) {\n            validate27.errors = [{ instancePath, schemaPath: \"#/required\", keyword: \"required\", params: { missingProperty: missing0 }, message: \"must have required property '\" + missing0 + \"'\" }];\n            return false;\n        }\n        else {\n            if (data.additionalProperties !== undefined) {\n                var valid0 = false;\n                validate27.errors = [{ instancePath: instancePath + \"/additionalProperties\", schemaPath: \"#/properties/additionalProperties/false schema\", keyword: \"false schema\", params: {}, message: \"boolean schema is false\" }];\n                return false;\n            }\n            else {\n                var valid0 = true;\n            }\n            if (valid0) {\n                if (data.offeringId !== undefined) {\n                    const _errs1 = errors;\n                    if (typeof data.offeringId !== \"string\") {\n                        validate27.errors = [{ instancePath: instancePath + \"/offeringId\", schemaPath: \"#/properties/offeringId/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                        return false;\n                    }\n                    var valid0 = _errs1 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.claimsHash !== undefined) {\n                        const _errs3 = errors;\n                        if (typeof data.claimsHash !== \"string\") {\n                            validate27.errors = [{ instancePath: instancePath + \"/claimsHash\", schemaPath: \"#/properties/claimsHash/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                            return false;\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.payin !== undefined) {\n                            let data3 = data.payin;\n                            const _errs5 = errors;\n                            if (errors === _errs5) {\n                                if (data3 && typeof data3 == \"object\" && !Array.isArray(data3)) {\n                                    let missing1;\n                                    if (((data3.amount === undefined) && (missing1 = \"amount\")) || ((data3.kind === undefined) && (missing1 = \"kind\"))) {\n                                        validate27.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/required\", keyword: \"required\", params: { missingProperty: missing1 }, message: \"must have required property '\" + missing1 + \"'\" }];\n                                        return false;\n                                    }\n                                    else {\n                                        if (data3.amount !== undefined) {\n                                            let data4 = data3.amount;\n                                            const _errs7 = errors;\n                                            const _errs8 = errors;\n                                            if (errors === _errs8) {\n                                                if (typeof data4 === \"string\") {\n                                                    if (!pattern0.test(data4)) {\n                                                        validate27.errors = [{ instancePath: instancePath + \"/payin/amount\", schemaPath: \"definitions.json#/definitions/decimalString/pattern\", keyword: \"pattern\", params: { pattern: \"^([0-9]+(?:[.][0-9]+)?)$\" }, message: \"must match pattern \\\"\" + \"^([0-9]+(?:[.][0-9]+)?)$\" + \"\\\"\" }];\n                                                        return false;\n                                                    }\n                                                }\n                                                else {\n                                                    validate27.errors = [{ instancePath: instancePath + \"/payin/amount\", schemaPath: \"definitions.json#/definitions/decimalString/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                            }\n                                            var valid1 = _errs7 === errors;\n                                        }\n                                        else {\n                                            var valid1 = true;\n                                        }\n                                        if (valid1) {\n                                            if (data3.kind !== undefined) {\n                                                const _errs10 = errors;\n                                                if (typeof data3.kind !== \"string\") {\n                                                    validate27.errors = [{ instancePath: instancePath + \"/payin/kind\", schemaPath: \"#/properties/payin/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid1 = _errs10 === errors;\n                                            }\n                                            else {\n                                                var valid1 = true;\n                                            }\n                                            if (valid1) {\n                                                if (data3.paymentDetailsHash !== undefined) {\n                                                    const _errs12 = errors;\n                                                    if (typeof data3.paymentDetailsHash !== \"string\") {\n                                                        validate27.errors = [{ instancePath: instancePath + \"/payin/paymentDetailsHash\", schemaPath: \"#/properties/payin/properties/paymentDetailsHash/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                        return false;\n                                                    }\n                                                    var valid1 = _errs12 === errors;\n                                                }\n                                                else {\n                                                    var valid1 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    validate27.errors = [{ instancePath: instancePath + \"/payin\", schemaPath: \"#/properties/payin/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                    return false;\n                                }\n                            }\n                            var valid0 = _errs5 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.payout !== undefined) {\n                                let data7 = data.payout;\n                                const _errs14 = errors;\n                                if (errors === _errs14) {\n                                    if (data7 && typeof data7 == \"object\" && !Array.isArray(data7)) {\n                                        let missing2;\n                                        if ((data7.kind === undefined) && (missing2 = \"kind\")) {\n                                            validate27.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/required\", keyword: \"required\", params: { missingProperty: missing2 }, message: \"must have required property '\" + missing2 + \"'\" }];\n                                            return false;\n                                        }\n                                        else {\n                                            if (data7.kind !== undefined) {\n                                                const _errs16 = errors;\n                                                if (typeof data7.kind !== \"string\") {\n                                                    validate27.errors = [{ instancePath: instancePath + \"/payout/kind\", schemaPath: \"#/properties/payout/properties/kind/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                    return false;\n                                                }\n                                                var valid3 = _errs16 === errors;\n                                            }\n                                            else {\n                                                var valid3 = true;\n                                            }\n                                            if (valid3) {\n                                                if (data7.paymentDetailsHash !== undefined) {\n                                                    const _errs18 = errors;\n                                                    if (typeof data7.paymentDetailsHash !== \"string\") {\n                                                        validate27.errors = [{ instancePath: instancePath + \"/payout/paymentDetailsHash\", schemaPath: \"#/properties/payout/properties/paymentDetailsHash/type\", keyword: \"type\", params: { type: \"string\" }, message: \"must be string\" }];\n                                                        return false;\n                                                    }\n                                                    var valid3 = _errs18 === errors;\n                                                }\n                                                else {\n                                                    var valid3 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        validate27.errors = [{ instancePath: instancePath + \"/payout\", schemaPath: \"#/properties/payout/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n                                        return false;\n                                    }\n                                }\n                                var valid0 = _errs14 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        validate27.errors = [{ instancePath, schemaPath: \"#/type\", keyword: \"type\", params: { type: \"object\" }, message: \"must be object\" }];\n        return false;\n    }\n} validate27.errors = vErrors; return errors === 0; }\n", "import { Crypto } from './crypto.js';\nimport { typeid } from 'typeid-js';\nimport { validate } from './validator.js';\n/**\n * Representation of the protocol messages.\n * It also provides helper functions to manipulate raw messages, JSON and parsing.\n * @beta\n */\nexport class Message {\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /** Message kind-specific data to facilitate the exchange of assets between Alice and the PFI */\n    data;\n    /** signature that verifies that authenticity and integrity of a message */\n    _signature;\n    /**\n     * Constructor is primarily for intended for internal use. For a better developer experience,\n     * consumers should use concrete classes to programmatically create and parse messages,\n     * e.g. {@link Rfq.parse} and {@link Rfq.create}\n     * @param metadata - {@link Message.metadata}\n     * @param data - {@link Message.data}\n     * @param signature - {@link Message._signature}\n     */\n    constructor(metadata, data, signature) {\n        this.metadata = metadata;\n        this.data = data;\n        this._signature = signature;\n    }\n    /** Generates a unique id with the message kind's prefix */\n    static generateId(messageKind) {\n        return typeid(messageKind).toString();\n    }\n    /**\n     * Signs the message as a jws with detached content and sets the signature property\n     * @param did - the signer's DID\n     * @throws If the signature could not be produced\n     */\n    async sign(did) {\n        this._signature = await Crypto.sign({ did, payload: this.digest(), detached: true });\n    }\n    /**\n     * Validates the message structure and verifies the cryptographic signature\n     * @throws if the message signature is invalid\n     * @throws if the message structure is invalid\n     * @throws see {@link Crypto.verify}\n     * @returns Signer's DID\n     */\n    async verify() {\n        this.validate();\n        const signer = await this.verifySignature();\n        return signer;\n    }\n    /**\n     * Verifies the integrity of the cryptographic signature\n     * @throws if the resource signature is invalid\n     * @throws if the signer's DID does not match Resource.metadata.from\n     * @returns Resource signer's DID\n     */\n    async verifySignature() {\n        if (this.signature === undefined) {\n            throw new Error('Could not verify message signature because no signature is missing');\n        }\n        const signer = await Crypto.verify({ detachedPayload: this.digest(), signature: this.signature });\n        if (this.metadata.from !== signer) { // ensure that DID used to sign matches `from` property in metadata\n            throw new Error('Signature verification failed: Expected DID in kid of JWS header must match metadata.from');\n        }\n        return signer;\n    }\n    /**\n     * Computes a digest of the payload by:\n     * * JSON serializing the payload as per [RFC-8785: JSON Canonicalization Scheme](https://www.rfc-editor.org/rfc/rfc8785)\n     * * sha256 hashing the serialized payload\n     *\n     * @returns The SHA-256 hash of the canonicalized payload, represented as a byte array.\n     */\n    digest() {\n        return Crypto.digest({ metadata: this.metadata, data: this.data });\n    }\n    /**\n     * Valid structure of the message including the presence of the signature\n     * using the official spec JSON Schemas\n     * @throws If the message's structure does not match the JSON schemas\n     */\n    validate() {\n        validate(this.toJSON(), 'message');\n        this.validateData();\n    }\n    /**\n     * Validates `data` section of message only using the official TBDex JSON Schemas.\n     * This is useful for partially validating unsigned messages.\n     * @throws If the structure of the messages's data does not match the JSON schemas\n     */\n    validateData() {\n        validate(this.data, this.kind);\n    }\n    /** the message's cryptographic signature */\n    get signature() {\n        return this._signature;\n    }\n    /** the message id */\n    get id() {\n        return this.metadata.id;\n    }\n    /** ID for an \"exchange\" of messages between Alice - PFI. Uses the id of the RFQ that initiated the exchange */\n    get exchangeId() {\n        return this.metadata.exchangeId;\n    }\n    /** The sender's DID */\n    get from() {\n        return this.metadata.from;\n    }\n    /** the recipient's DID */\n    get to() {\n        return this.metadata.to;\n    }\n    /** Message creation time. Expressed as ISO8601 */\n    get createdAt() {\n        return this.metadata.createdAt;\n    }\n    /** the external ID */\n    get externalId() {\n        return this.metadata.externalId;\n    }\n    /** the protocol version */\n    get protocol() {\n        return this.metadata.protocol;\n    }\n    /** Rfq type guard */\n    isRfq() {\n        return this.metadata.kind === 'rfq';\n    }\n    /** Quote type guard */\n    isQuote() {\n        return this.metadata.kind === 'quote';\n    }\n    /** Order type guard */\n    isOrder() {\n        return this.metadata.kind === 'order';\n    }\n    /** OrderStatus type guard */\n    isOrderStatus() {\n        return this.metadata.kind === 'orderstatus';\n    }\n    /** Close type guard */\n    isClose() {\n        return this.metadata.kind === 'close';\n    }\n    /**\n     * returns the message as a json object. Automatically used by `JSON.stringify` method.\n     */\n    toJSON() {\n        const message = {\n            metadata: this.metadata,\n            data: this.data,\n            signature: this.signature\n        };\n        return message;\n    }\n}\n", "export * from './offering.js';\nexport * from './balance.js';\n", "import { Resource } from '../resource.js';\nimport { Parser } from '../parser.js';\n/**\n * An Offering is used by the PFI to describe a currency pair they have to offer\n * including the requirements, conditions, and constraints in\n * order to fulfill that offer.\n * @beta\n */\nexport class Offering extends Resource {\n    /** The resource kind (offering) */\n    kind = 'offering';\n    /** Metadata such as sender, date created, date updated, and ID */\n    metadata;\n    /** Offering's data such as payment methods, required claims, and currencies */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json resource into an Offering\n     * @param rawMessage - the Offering to parse\n     * @throws if the offering could not be parsed or is not a valid Offering\n     * @returns The parsed Offering\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToResourceModel(rawMessage);\n        const offering = new Offering(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await offering.verify();\n        return offering;\n    }\n    /**\n     * Creates an Offering with the given options\n     * @param opts - options to create an offering\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'offering',\n            id: Resource.generateId('offering'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const offering = new Offering(metadata, opts.data);\n        offering.validateData();\n        return offering;\n    }\n}\n", "import { Rfq, Quote, Order, OrderStatus, Close } from './message-kinds/index.js';\nimport { Balance, Offering } from './resource-kinds/index.js';\n/**\n * Utility functions for parsing Messages and Resources\n * @beta\n */\nexport class Parser {\n    constructor() { }\n    /**\n     * @beta\n     *\n     * Parses the json message into a message instance.\n     * Performs format validation and an integrity check on the signature\n     * @param message - the message to parse. can either be an object or a string\n     * @returns {@link Message}\n     */\n    static async parseMessage(rawMessage) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        let message;\n        switch (jsonMessage.metadata.kind) {\n            case 'rfq':\n                message = new Rfq(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature, jsonMessage.privateData);\n                break;\n            case 'quote':\n                message = new Quote(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n                break;\n            case 'order':\n                message = new Order(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n                break;\n            case 'orderstatus':\n                message = new OrderStatus(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n                break;\n            case 'close':\n                message = new Close(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n                break;\n            default:\n                throw new Error(`Unrecognized message kind (${jsonMessage.metadata.kind})`);\n        }\n        await message.verify();\n        return message;\n    }\n    /**\n     * @beta\n     *\n     * Parses a json message into an instance of message kind's class.\n     * Performs format validation and an integrity check of the signature\n     * @param jsonResource - the resource to parse\n     * @returns {@link Resource}\n     */\n    static async parseResource(rawResource) {\n        const jsonResource = Parser.rawToResourceModel(rawResource);\n        let resource;\n        switch (jsonResource.metadata.kind) {\n            case 'offering':\n                resource = new Offering(jsonResource.metadata, jsonResource.data, jsonResource.signature);\n                break;\n            case 'balance':\n                resource = new Balance(jsonResource.metadata, jsonResource.data, jsonResource.signature);\n                break;\n            default:\n                throw new Error(`Unrecognized resource kind (${jsonResource.metadata.kind})`);\n        }\n        await resource.verify();\n        return resource;\n    }\n    /**\n     * Util for JSON.parse-ing a stringified Tbdex Message\n     * @param rawMessage - Either a stringified Tbdex Message or an object Tbdex Message\n     * @returns A Tbdex Message as an object\n     * @throws If the stringified message could not be JSON.parse'd\n     */\n    static rawToMessageModel(rawMessage) {\n        try {\n            return typeof rawMessage === 'string' ? JSON.parse(rawMessage) : rawMessage;\n        }\n        catch (e) {\n            const errorMessage = e instanceof Error ? e.message : e;\n            throw new Error(`parse: Failed to parse message. Error: ${errorMessage}`);\n        }\n    }\n    /**\n     * Util for JSON.parse-ing a stringified Tbdex resource\n     * @param rawResource - Either a stringified Tbdex resource or an object Tbdex resource\n     * @returns A Tbdex message as an object\n     * @throws If the stringified resource could not be JSON.parse'd\n     */\n    static rawToResourceModel(rawResource) {\n        try {\n            return typeof rawResource === 'string' ? JSON.parse(rawResource) : rawResource;\n        }\n        catch (e) {\n            const errorMessage = e instanceof Error ? e.message : e;\n            throw new Error(`parse: Failed to parse resource. Error: ${errorMessage}`);\n        }\n    }\n}\n", "export * from './rfq.js';\nexport * from './quote.js';\nexport * from './order.js';\nexport * from './order-status.js';\nexport * from './close.js';\n", "import { BigNumber } from 'bignumber.js';\nimport { Crypto } from '../crypto.js';\nimport { VerifiableCredential, PresentationExchange } from '@web5/credentials';\nimport { Message } from '../message.js';\nimport Ajv from 'ajv';\nimport { Parser } from '../parser.js';\nimport { validate } from '../validator.js';\nimport { Convert } from '@web5/common';\nimport { randomBytes } from '@web5/crypto/utils';\n/**\n * Message sent by Alice to PFI to request a quote (RFQ)\n * @beta\n */\nexport class Rfq extends Message {\n    /** a set of valid Message kinds that can come after an rfq */\n    validNext = new Set(['quote', 'close']);\n    /** The message kind (rfq) */\n    kind = 'rfq';\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /** Rfq's data containing information to initiate an exchange between Alice and a PFI */\n    data;\n    /** Rfq's unhashed private information to initiate an exchange between Alice and a PFI */\n    privateData;\n    constructor(metadata, data, signature, privateData) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n        this.privateData = privateData;\n    }\n    /**\n     * Parses a json message into an Rfq\n     * @param rawMessage - the rfq to parse\n     * @throws if the rfq could not be parsed or is not a valid Rfq\n     * @returns The parsed Rfq\n     */\n    static async parse(rawMessage, opts) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        const rfq = new Rfq(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature, jsonMessage.privateData);\n        await rfq.verify();\n        if (opts?.requireAllPrivateData) {\n            rfq.verifyAllPrivateData();\n        }\n        else {\n            rfq.verifyPresentPrivateData();\n        }\n        return rfq;\n    }\n    /**\n     * Valid structure of the message including the presence of the signature\n     * using the official spec JSON Schemas\n     * @override\n     * @throws If the message's structure does not match the JSON schemas\n     */\n    validate() {\n        super.validate();\n        if (this.privateData !== undefined) {\n            validate(this.privateData, 'rfqPrivate');\n        }\n    }\n    /**\n     * Creates an rfq with the given options\n     * @param opts - options to create an rfq\n     * @returns {@link Rfq}\n     */\n    static create(opts) {\n        const id = Message.generateId('rfq');\n        const metadata = {\n            ...opts.metadata,\n            kind: 'rfq',\n            id: id,\n            exchangeId: id,\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const { data, privateData } = Rfq.hashPrivateData(opts.data);\n        const rfq = new Rfq(metadata, data, undefined, privateData);\n        rfq.validateData();\n        return rfq;\n    }\n    /**\n     * Hash private RFQ data and set private fields in an RfqPrivateData object\n     * @param - unhashedRfqData\n     * @returns An object with fields data and privateData.\n     * @returns {@link RfqData} The value of data field.\n     * @returns {@link RfqPrivateData} The value of privateData field.\n     */\n    static hashPrivateData(unhashedRfqData) {\n        const salt = Convert.uint8Array(randomBytes(16)).toBase64Url();\n        const { claims, payin, payout, ...remainingRfqData } = unhashedRfqData;\n        const { paymentDetails: payinDetails, ...remainingPayin } = payin;\n        const { paymentDetails: payoutDetails, ...remainingPayout } = payout;\n        const data = {\n            ...remainingRfqData,\n            payin: remainingPayin,\n            payout: remainingPayout,\n        };\n        if (payinDetails !== undefined) {\n            data.payin.paymentDetailsHash = Rfq.digestPrivateData(salt, payinDetails);\n        }\n        if (payoutDetails !== undefined) {\n            data.payout.paymentDetailsHash = Rfq.digestPrivateData(salt, payoutDetails);\n        }\n        if (claims !== undefined && claims?.length > 0) {\n            data.claimsHash = Rfq.digestPrivateData(salt, claims);\n        }\n        const privateData = {\n            salt,\n            payin: {\n                paymentDetails: payinDetails,\n            },\n            payout: {\n                paymentDetails: payoutDetails,\n            },\n            claims: claims\n        };\n        return {\n            data,\n            privateData,\n        };\n    }\n    /**\n     * Verify the presence and integrity of all possible properties in {@link Rfq.privateData}.\n     * @throws if there are properties missing in {@link Rfq.privateData} or which do not match the corresponding\n     *         hashed property in {@link Rfq.data}\n     */\n    verifyAllPrivateData() {\n        if (this.privateData === undefined) {\n            throw new Error('Could not verify all privateData because privateData property is missing');\n        }\n        // Verify payin details\n        if (this.data.payin.paymentDetailsHash !== undefined) {\n            this.verifyPayinDetailsHash();\n        }\n        // Verify payout details\n        if (this.data.payout.paymentDetailsHash !== undefined) {\n            this.verifyPayoutDetailsHash();\n        }\n        // Verify claims\n        if (this.data.claimsHash !== undefined) {\n            this.verifyClaimsHash();\n        }\n    }\n    /**\n     * Verify the integrity properties that are present in {@link Rfq.privateData}.\n     * @throws if there are properties present in {@link Rfq.privateData} which do not match the corresponding\n     *         hashed property in {@link Rfq.data}\n     */\n    verifyPresentPrivateData() {\n        // Verify payin details\n        if (this.data.payin.paymentDetailsHash !== undefined && this.privateData?.payin?.paymentDetails !== undefined) {\n            this.verifyPayinDetailsHash();\n        }\n        // Verify payout details\n        if (this.data.payout.paymentDetailsHash !== undefined && this.privateData?.payout?.paymentDetails !== undefined) {\n            this.verifyPayoutDetailsHash();\n        }\n        // Verify claims\n        if (this.data.claimsHash !== undefined && this.privateData?.claims !== undefined) {\n            this.verifyClaimsHash();\n        }\n    }\n    verifyPayinDetailsHash() {\n        const digest = Rfq.digestPrivateData(this.privateData.salt, this.privateData?.payin?.paymentDetails);\n        if (digest !== this.data.payin.paymentDetailsHash) {\n            throw new Error('Private data integrity check failed: ' +\n                'data.payin.paymentDetailsHash does not match digest of privateData.payin.paymentDetails');\n        }\n    }\n    verifyPayoutDetailsHash() {\n        const digest = Rfq.digestPrivateData(this.privateData.salt, this.privateData?.payout?.paymentDetails);\n        if (digest !== this.data.payout.paymentDetailsHash) {\n            throw new Error('Private data integrity check failed: ' +\n                'data.payout.paymentDetailsHash does not match digest of privateData.payout.paymentDetails');\n        }\n    }\n    verifyClaimsHash() {\n        const claimsHash = this.data.claimsHash;\n        const claims = this.privateData?.claims;\n        const digest = Rfq.digestPrivateData(this.privateData.salt, claims);\n        if (digest !== claimsHash) {\n            throw new Error('Private data integrity check failed: ' +\n                `data.claimsHash does not match digest of privateData.claims`);\n        }\n    }\n    /**\n     * Given a salt and a value, compute a deterministic digest used in hashed fields in RfqData\n     * @param - salt\n     * @param - value\n     * @returns salted hash of the private data value\n     */\n    static digestPrivateData(salt, value) {\n        const digestible = [salt, value];\n        const byteArray = Crypto.digest(digestible);\n        return Convert.uint8Array(byteArray).toBase64Url();\n    }\n    /**\n     * evaluates this rfq against the provided offering\n     * @param offering - the offering to evaluate this rfq against\n     * @throws if Rfq.data.offeringId doesn't match the provided offering's id\n     * @see RfqData#offeringId\n     * @throws if payinAmount in {@link Rfq.data} exceeds the provided offering's max units allowed or is below the offering's min units allowed\n     * @throws if payinMethod in {@link Rfq.data} property `kind` cannot be validated against the provided offering's payinMethod kinds\n     * @throws if payinMethod in {@link Rfq.data} property `paymentDetails` cannot be validated against the provided offering's payinMethod requiredPaymentDetails\n     * @throws if payoutMethod in {@link Rfq.data} property `kind` cannot be validated against the provided offering's payoutMethod kinds\n     * @throws if payoutMethod in {@link Rfq.data} property `paymentDetails` cannot be validated against the provided offering's payoutMethod requiredPaymentDetails\n     */\n    async verifyOfferingRequirements(offering) {\n        if (offering.metadata.protocol !== this.metadata.protocol) {\n            throw new Error(`protocol version mismatch. (rfq) ${this.metadata.protocol} !== ${offering.metadata.protocol} (offering)`);\n        }\n        if (offering.metadata.id !== this.data.offeringId) {\n            throw new Error(`offering id mismatch. (rfq) ${this.data.offeringId} !== ${offering.metadata.id} (offering)`);\n        }\n        // Verifying payin amount is less than maximum\n        let payinAmount;\n        if (offering.data.payin.max) {\n            payinAmount = BigNumber(this.data.payin.amount);\n            const maxAmount = BigNumber(offering.data.payin.max);\n            if (payinAmount.isGreaterThan(maxAmount)) {\n                throw new Error(`rfq payinAmount exceeds offering's maxAmount. (rfq) ${this.data.payin.amount} > ${offering.data.payin.max} (offering)`);\n            }\n        }\n        // Verify payin amount is more than minimum\n        if (offering.data.payin.min) {\n            payinAmount ??= BigNumber(this.data.payin.amount);\n            const minAmount = BigNumber(offering.data.payin.min);\n            if (payinAmount.isLessThan(minAmount)) {\n                throw new Error(`rfq payinAmount is below offering's minAmount. (rfq) ${this.data.payin.amount} > ${offering.data.payin.min} (offering)`);\n            }\n        }\n        // Verify payin/payout methods\n        this.verifyPaymentMethod(this.data.payin.kind, this.data.payin.paymentDetailsHash, this.privateData?.payin?.paymentDetails, offering.data.payin.methods, 'payin');\n        this.verifyPaymentMethod(this.data.payout.kind, this.data.payout.paymentDetailsHash, this.privateData?.payout?.paymentDetails, offering.data.payout.methods, 'payout');\n        await this.verifyClaims(offering);\n    }\n    /**\n     * Validate the Rfq's payin/payout method against an Offering's allow payin/payout methods\n     *\n     * @param rfqPaymentMethod - The Rfq's selected payin/payout method being validated\n     * @param allowedPaymentMethods - The Offering's allowed payin/payout methods\n     * @param payDirection - Either 'payin' or 'payout', used to provide more detailed error messages.\n     *\n     * @throws if rfqPaymentMethod property `kind` cannot be validated against the provided offering's paymentMethod's kinds\n     * @throws if {@link Rfq.privateData} property `paymentDetails` is missing but is necessary to validate against the provided offering's paymentMethod's kinds\n     * @throws if rfqPaymentMethod property `paymentDetails` cannot be validated against the provided offering's paymentMethod's requiredPaymentDetails\n     */\n    verifyPaymentMethod(selectedPaymentKind, selectedPaymentDetailsHash, selectedPaymentDetails, allowedPaymentMethods, payDirection) {\n        const paymentMethodMatches = allowedPaymentMethods.filter(paymentMethod => paymentMethod.kind === selectedPaymentKind);\n        if (!paymentMethodMatches.length) {\n            const paymentMethodKinds = allowedPaymentMethods.map(paymentMethod => paymentMethod.kind).join(', ');\n            throw new Error(`offering does not support rfq's ${payDirection}Method kind. (rfq) ${selectedPaymentKind} was not found in: [${paymentMethodKinds}] (offering)`);\n        }\n        const ajv = new Ajv.default();\n        const invalidPaymentDetailsErrors = new Set();\n        for (const paymentMethodMatch of paymentMethodMatches) {\n            if (!paymentMethodMatch.requiredPaymentDetails) {\n                // If requiredPaymentDetails is omitted, and paymentDetails is also omitted, we have a match\n                if (selectedPaymentDetailsHash === undefined) {\n                    return;\n                }\n                // paymentDetails is present even though requiredPaymentDetails is omitted. This is unsatisfactory.\n                invalidPaymentDetailsErrors.add(new Error('paymentDetails must be omitted when requiredPaymentDetails is omitted'));\n            }\n            else {\n                // requiredPaymentDetails is present, so Rfq's payment details must match\n                const validate = ajv.compile(paymentMethodMatch.requiredPaymentDetails);\n                const isValid = validate(selectedPaymentDetails);\n                if (isValid) {\n                    // Selected payment method matches one of the offering's allowed payment methods\n                    return;\n                }\n                invalidPaymentDetailsErrors.add(validate.errors);\n            }\n        }\n        throw new Error(`rfq ${payDirection}Method paymentDetails could not be validated against offering requiredPaymentDetails. ` +\n            `Schema validation errors: ${Array.from(invalidPaymentDetailsErrors).join()}`);\n    }\n    /**\n     * checks the claims provided in this rfq against an offering's requirements\n     * @param offering - the offering to check against\n     * @throws if rfq's claims do not fulfill the offering's requirements\n     */\n    async verifyClaims(offering) {\n        if (!offering.data.requiredClaims) {\n            return;\n        }\n        const credentials = PresentationExchange.selectCredentials({ vcJwts: this.privateData?.claims ?? [], presentationDefinition: offering.data.requiredClaims });\n        if (credentials.length === 0) {\n            throw new Error('claims do not fulfill the offering\\'s requirements');\n        }\n        for (let credential of credentials) {\n            await VerifiableCredential.verify({ vcJwt: credential });\n        }\n    }\n    /**\n     * Converts this rfq message to a json object\n     */\n    toJSON() {\n        const jsonMessage = super.toJSON();\n        if (this.privateData !== undefined) {\n            jsonMessage.privateData = this.privateData;\n        }\n        return jsonMessage;\n    }\n}\n", "/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n", "export * from './jwt.js';\nexport * from './presentation-exchange.js';\nexport * from './verifiable-credential.js';\nexport * from './verifiable-presentation.js';\nexport * as utils from './utils.js';", "import { BearerDid } from '@web5/dids';\nimport type {\n  JwtPayload,\n  JwtHeaderParams,\n  JwkParamsEcPublic,\n  JwkParamsOkpPublic,\n} from '@web5/crypto';\n\nimport { Convert } from '@web5/common';\nimport { LocalKeyManager as CryptoApi  } from '@web5/crypto';\nimport { DidDht, DidIon, DidKey, DidJwk, DidWeb, UniversalResolver, utils as didUtils } from '@web5/dids';\n\nconst crypto = new CryptoApi();\n\n/**\n * Represents the result of parsing a JWT (JSON Web Token).\n */\nexport type JwtParseResult = {\n  /**\n   * The decoded part of the JWT, which includes the verified results.\n   * This contains the JWT's payload and other data that has been\n   * validated against the JWT's signature to ensure its integrity and authenticity.\n   */\n  decoded: JwtVerifyResult\n\n  /**\n   * The encoded components of the JWT, including the header, payload,\n   * and signature, each as a separate string. These are the raw, encoded\n   * parts of the JWT as they were received or transmitted.\n   */\n  encoded: {\n    /** The encoded header of the JWT. */\n    header: string,\n    /** The encoded payload of the JWT. */\n    payload: string,\n    /** The encoded signature of the JWT. */\n    signature: string,\n  }\n}\n\n/**\n * Result of verifying a JWT.\n */\nexport interface JwtVerifyResult {\n  /** JWT Protected Header */\n  header: JwtHeaderParams;\n\n  /** JWT Claims Set */\n  payload: JwtPayload;\n}\n\n/**\n * Parameters for parsing a JWT.\n * used in {@link Jwt.parse}\n */\nexport type ParseJwtOptions = {\n  /** The JWT string to parse. */\n  jwt: string\n}\n\n/**\n * Parameters for signing a JWT.\n */\nexport type SignJwtOptions = {\n  /** The DID of the signer. */\n  signerDid: BearerDid\n  /** The payload to sign. */\n  payload: JwtPayload\n}\n\n/**\n * Parameters for verifying a JWT.\n */\nexport type VerifyJwtOptions = {\n  /** The JWT string to verify. */\n  jwt: string\n}\n\n/**\n * Class for handling Compact JSON Web Tokens (JWTs).\n * This class provides methods to create, verify, and decode JWTs using various cryptographic algorithms.\n * More information on JWTs can be found [here](https://datatracker.ietf.org/doc/html/rfc7519)\n */\nexport class Jwt {\n  /**\n   * DID Resolver instance for resolving decentralized identifiers.\n   */\n  static didResolver: UniversalResolver = new UniversalResolver({ didResolvers: [DidDht, DidIon, DidKey, DidJwk, DidWeb] });\n\n  /**\n   * Creates a signed JWT.\n   *\n   * @example\n   * ```ts\n   * const jwt = await Jwt.sign({ signerDid: myDid, payload: myPayload });\n   * ```\n   *\n   * @param options - Parameters for JWT creation including signer DID and payload.\n   * @returns The compact JWT as a string.\n   */\n  static async sign(options: SignJwtOptions): Promise<string> {\n    const { signerDid, payload } = options;\n    const signer = await signerDid.getSigner();\n\n    let vmId = signer.keyId;\n    if (vmId.charAt(0) === '#') {\n      vmId = `${signerDid.uri}${vmId}`;\n    }\n\n    const header: JwtHeaderParams = {\n      typ : 'JWT',\n      alg : signer.algorithm,\n      kid : vmId,\n    };\n\n    const base64UrlEncodedHeader = Convert.object(header).toBase64Url();\n    const base64UrlEncodedPayload = Convert.object(payload).toBase64Url();\n\n    const toSign = `${base64UrlEncodedHeader}.${base64UrlEncodedPayload}`;\n    const toSignBytes = Convert.string(toSign).toUint8Array();\n\n    const signatureBytes = await signer.sign({ data: toSignBytes });\n\n    const base64UrlEncodedSignature = Convert.uint8Array(signatureBytes).toBase64Url();\n\n    return `${toSign}.${base64UrlEncodedSignature}`;\n  }\n\n  /**\n   * Verifies a JWT.\n   *\n   * @example\n   * ```ts\n   * const verifiedJwt = await Jwt.verify({ jwt: myJwt });\n   * ```\n   *\n   * @param options - Parameters for JWT verification\n   * @returns Verified JWT information including signer DID, header, and payload.\n   */\n  static async verify(options: VerifyJwtOptions): Promise<JwtVerifyResult> {\n    const { decoded: decodedJwt, encoded: encodedJwt } = Jwt.parse({ jwt: options.jwt });\n\n    if (decodedJwt.payload.exp && Math.floor(Date.now() / 1000) > decodedJwt.payload.exp) {\n      throw new Error(`Verification failed: JWT is expired`);\n    }\n\n    // TODO: should really be looking for verificationMethod with authentication verification relationship\n    const dereferenceResult = await Jwt.didResolver.dereference(decodedJwt.header.kid!);\n    if (dereferenceResult.dereferencingMetadata.error) {\n      throw new Error(`Failed to resolve ${decodedJwt.header.kid}`);\n    }\n\n    const verificationMethod = dereferenceResult.contentStream;\n    if (!verificationMethod || !didUtils.isDidVerificationMethod(verificationMethod)) { // ensure that appropriate verification method was found\n      throw new Error('Verification failed: Expected kid in JWT header to dereference a DID Document Verification Method');\n    }\n\n    // will be used to verify signature\n    const publicKeyJwk = verificationMethod.publicKeyJwk as JwkParamsEcPublic | JwkParamsOkpPublic;\n    if (!publicKeyJwk) { // ensure that Verification Method includes public key as a JWK.\n      throw new Error('Verification failed: Expected kid in JWT header to dereference to a DID Document Verification Method with publicKeyJwk');\n    }\n\n    if(publicKeyJwk.alg && (publicKeyJwk.alg !== decodedJwt.header.alg)) {\n      throw new Error('Verification failed: Expected alg in JWT header to match DID Document Verification Method alg');\n    }\n\n    const signedData = `${encodedJwt.header}.${encodedJwt.payload}`;\n    const signedDataBytes = Convert.string(signedData).toUint8Array();\n\n    const signatureBytes = Convert.base64Url(encodedJwt.signature).toUint8Array();\n\n    const isSignatureValid = await crypto.verify({\n      key       : publicKeyJwk,\n      signature : signatureBytes,\n      data      : signedDataBytes,\n    });\n\n    if (!isSignatureValid) {\n      throw new Error('Signature verification failed: Integrity mismatch');\n    }\n\n    return decodedJwt;\n  }\n\n  /**\n   * Parses a JWT without verifying its signature.\n   *\n   * @example\n   * ```ts\n   * const { encoded: encodedJwt, decoded: decodedJwt } = Jwt.parse({ jwt: myJwt });\n   * ```\n   *\n   * @param options - Parameters for JWT decoding, including the JWT string.\n   * @returns both encoded and decoded JWT parts\n   */\n  static parse(options: ParseJwtOptions): JwtParseResult {\n    const splitJwt = options.jwt.split('.');\n    if (splitJwt.length !== 3) {\n      throw new Error(`Verification failed: Malformed JWT. expected 3 parts. got ${splitJwt.length}`);\n    }\n\n    const [base64urlEncodedJwtHeader, base64urlEncodedJwtPayload, base64urlEncodedSignature] = splitJwt;\n    let jwtHeader: JwtHeaderParams;\n    let jwtPayload: JwtPayload;\n\n    try {\n      jwtHeader = Convert.base64Url(base64urlEncodedJwtHeader).toObject() as JwtHeaderParams;\n    } catch(e) {\n      throw new Error('Verification failed: Malformed JWT. Invalid base64url encoding for JWT header');\n    }\n\n    if (!jwtHeader.typ || jwtHeader.typ !== 'JWT') {\n      throw new Error('Verification failed: Expected JWT header to contain typ property set to JWT');\n    }\n\n    if (!jwtHeader.alg || !jwtHeader.kid) { // ensure that JWT header has required properties\n      throw new Error('Verification failed: Expected JWT header to contain alg and kid');\n    }\n\n    // TODO: validate optional payload fields: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\n    try {\n      jwtPayload = Convert.base64Url(base64urlEncodedJwtPayload).toObject() as JwtPayload;\n    } catch(e) {\n      throw new Error('Verification failed: Malformed JWT. Invalid base64url encoding for JWT payload');\n    }\n\n    return {\n      decoded: {\n        header  : jwtHeader,\n        payload : jwtPayload,\n      },\n      encoded: {\n        header    : base64urlEncodedJwtHeader,\n        payload   : base64urlEncodedJwtPayload,\n        signature : base64urlEncodedSignature\n      }\n    };\n  }\n}", "import type { IPresentation, PresentationSubmission } from '@sphereon/ssi-types';\nimport type { PresentationDefinitionV2 as PexPresDefV2 } from '@sphereon/pex-models';\nimport type {\n  SelectResults,\n  EvaluationResults,\n  PresentationResult,\n  Validated as PexValidated,\n} from '@sphereon/pex';\n\nimport { PEX } from '@sphereon/pex';\n\n/** The Presentation Definition V2 as defined in the PEX models. */\nexport interface PresentationDefinitionV2 extends PexPresDefV2 { }\n\n/** The validated object as defined in the PEX models. */\nexport type Validated = PexValidated;\n\n/**\n * The Presentation Exchange (PEX) Library implements the functionality described in the DIF Presentation Exchange specification\n */\nexport class PresentationExchange {\n  /** The Presentation Exchange (PEX) instance. */\n  private static pex: PEX = new PEX();\n\n  /**\n   * Selects credentials that satisfy a given presentation definition.\n   *\n   * @param params - The parameters for the credential selection.\n   * @param params.vcJwts  The list of Verifiable Credentials to select from.\n   * @param params.presentationDefinition The Presentation Definition to match against.\n   * @returns {string[]} selectedVcJwts A list of Verifiable Credentials that satisfy the Presentation Definition.\n   */\n\n  public static selectCredentials({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): string[] {\n    this.resetPex();\n    const selectResults: SelectResults = this.pex.selectFrom(presentationDefinition, vcJwts);\n\n    // If errors exist in the results object the credentials provided didn't satisfy the requirements in the Presentation Definition\n    if(selectResults.errors?.length !== 0) {\n      return [];\n    }\n\n    return Array.from(new Set(selectResults.verifiableCredential as string[] ?? []));\n  }\n\n  /**\n   * Validates if a list of VC JWTs satisfies the given presentation definition.\n   *\n   * @param params - The parameters for the satisfaction check.\n   * @param params.vcJwts - An array of VC JWTs as strings.\n   * @param params.presentationDefinition - The criteria to validate against.\n   * @throws Error if the evaluation results in warnings or errors.\n   */\n  public static satisfiesPresentationDefinition({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): void {\n    this.resetPex();\n    const evaluationResults: EvaluationResults = this.pex.evaluateCredentials(presentationDefinition, vcJwts);\n    if (evaluationResults.warnings?.length) {\n      console.warn('Warnings were generated during the evaluation process: ' + JSON.stringify(evaluationResults.warnings));\n    }\n\n    if (evaluationResults.areRequiredCredentialsPresent.toString() !== 'info' || evaluationResults.errors?.length) {\n      let errorMessage = 'Failed to create Verifiable Presentation JWT due to: ';\n      if(evaluationResults.areRequiredCredentialsPresent) {\n        errorMessage += 'Required Credentials Not Present: ' + JSON.stringify(evaluationResults.areRequiredCredentialsPresent);\n      }\n\n      if (evaluationResults.errors?.length) {\n        errorMessage += 'Errors: ' + JSON.stringify(evaluationResults.errors);\n      }\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Creates a presentation from a list of Verifiable Credentials that satisfy a given presentation definition.\n   * This function initializes the Presentation Exchange (PEX) process, validates the presentation definition,\n   * evaluates the credentials against the definition, and finally constructs the presentation result if the\n   * evaluation is successful.\n   *\n   * @param params - The parameters for the presentation creation.\n   * @param params.vcJwts The list of Verifiable Credentials (VCs) in JWT format to be evaluated.\n   * @param params.presentationDefinition The Presentation Definition V2 to match the VCs against.\n   * @returns {PresentationResult} The result of the presentation creation process, containing a presentation submission\n   *                               that satisfies the presentation definition criteria.\n   * @throws {Error} If the evaluation results in warnings or errors, or if the required credentials are not present,\n   *                 an error is thrown with a descriptive message.\n   */\n  public static createPresentationFromCredentials({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): PresentationResult {\n    this.resetPex();\n\n    const pdValidated: Validated = PEX.validateDefinition(presentationDefinition);\n    isValid(pdValidated);\n\n    const evaluationResults: EvaluationResults = this.pex.evaluateCredentials(presentationDefinition, vcJwts);\n\n    if (evaluationResults.warnings?.length) {\n      console.warn('Warnings were generated during the evaluation process: ' + JSON.stringify(evaluationResults.warnings));\n    }\n\n    if (evaluationResults.areRequiredCredentialsPresent.toString() !== 'info' || evaluationResults.errors?.length) {\n      let errorMessage = 'Failed to create Verifiable Presentation JWT due to: ';\n      if(evaluationResults.areRequiredCredentialsPresent) {\n        errorMessage += 'Required Credentials Not Present: ' + JSON.stringify(evaluationResults.areRequiredCredentialsPresent);\n      }\n\n      if (evaluationResults.errors?.length) {\n        errorMessage += 'Errors: ' + JSON.stringify(evaluationResults.errors);\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    const presentationResult: PresentationResult = this.pex.presentationFrom(presentationDefinition, vcJwts);\n\n    const submissionValidated: Validated = PEX.validateSubmission(presentationResult.presentationSubmission);\n    isValid(submissionValidated);\n\n    return presentationResult;\n  }\n\n  /**\n   * This method validates whether an object is usable as a presentation definition or not.\n   *\n   * @param {PresentationDefinitionV2} presentationDefinition: presentationDefinition to be validated.\n   * @returns {Validated} the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation definition\n   */\n  public static validateDefinition({ presentationDefinition }: {\n    presentationDefinition: PresentationDefinitionV2\n  }): Validated {\n    return PEX.validateDefinition(presentationDefinition);\n  }\n\n  /**\n   * This method validates whether an object is usable as a presentation submission or not.\n   *\n   * @param {PresentationSubmission} presentationSubmission the object to be validated.\n   * @returns {Validated} the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation submission\n   */\n  public static validateSubmission({ presentationSubmission }: {\n    presentationSubmission: PresentationSubmission\n  }): Validated {\n    return PEX.validateSubmission(presentationSubmission);\n  }\n\n  /**\n   * Evaluates a presentation against a presentation definition.\n   *\n   * @returns {EvaluationResults} The result of the evaluation process.\n   */\n  public static evaluatePresentation({ presentationDefinition, presentation }: {\n    presentationDefinition: PresentationDefinitionV2,\n    presentation: IPresentation\n  }): EvaluationResults {\n    this.resetPex();\n    return this.pex.evaluatePresentation(presentationDefinition, presentation);\n  }\n\n  /** Resets the PEX instance. */\n  private static resetPex() {\n    this.pex = new PEX();\n  }\n}\n\nfunction isValid(validated: Validated) {\n  let errorMessage = 'Failed to pass validation check due to: ';\n  if (Array.isArray(validated)) {\n    if (!validated.every(item => item.status === 'info')) {\n      errorMessage += 'Validation Errors: ' + JSON.stringify(validated);\n      throw new Error(errorMessage);\n    }\n  } else {\n    if (validated.status !== 'info') {\n      errorMessage += 'Validation Errors: ' + JSON.stringify(validated);\n      throw new Error(errorMessage);\n    }\n  }\n}", "import type {\n  ICredentialContextType,\n  ICredentialSubject\n} from '@sphereon/ssi-types';\n\nimport {\n  DEFAULT_VC_CONTEXT,\n  DEFAULT_VC_TYPE,\n  VerifiableCredential\n} from './verifiable-credential.js';\n\nimport { isValidRFC3339Timestamp, isValidXmlSchema112Timestamp } from './utils.js';\nimport { DEFAULT_VP_TYPE } from './verifiable-presentation.js';\n\nexport class SsiValidator {\n  static validateCredentialPayload(vc: VerifiableCredential): void {\n    this.validateContext(vc.vcDataModel['@context']);\n    this.validateVcType(vc.type);\n    this.validateCredentialSubject(vc.vcDataModel.credentialSubject);\n    if (vc.vcDataModel.issuanceDate) this.validateTimestamp(vc.vcDataModel.issuanceDate);\n    if (vc.vcDataModel.expirationDate) this.validateTimestamp(vc.vcDataModel.expirationDate);\n  }\n\n  static validateContext(value: ICredentialContextType | ICredentialContextType[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VC_CONTEXT) === -1) {\n      throw new Error(`@context is missing default context \"${DEFAULT_VC_CONTEXT}\"`);\n    }\n  }\n\n  static validateVcType(value: string | string[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VC_TYPE) === -1) {\n      throw new Error(`type is missing default \"${DEFAULT_VC_TYPE}\"`);\n    }\n  }\n\n  static validateVpType(value: string | string[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VP_TYPE) === -1) {\n      throw new Error(`type is missing default \"${DEFAULT_VP_TYPE}\"`);\n    }\n  }\n\n  static validateCredentialSubject(value: ICredentialSubject | ICredentialSubject[]): void {\n    if (Object.keys(value).length === 0) {\n      throw new Error(`credentialSubject must not be empty`);\n    }\n  }\n\n  static validateTimestamp(timestamp: string) {\n    if(!isValidXmlSchema112Timestamp(timestamp) && !isValidRFC3339Timestamp(timestamp)){\n      throw new Error(`timestamp is not valid xml schema 112 timestamp`);\n    }\n  }\n\n  static asArray(arg: any | any[]): any[] {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n}", "/**\n * Retrieves the current timestamp in XML Schema 1.1.2 date-time format.\n *\n * This function omits the milliseconds part from the ISO 8601 timestamp, returning a date-time\n * string in the format \"yyyy-MM-ddTHH:mm:ssZ\".\n *\n * @example\n * ```ts\n * const currentTimestamp = getCurrentXmlSchema112Timestamp(); // \"2023-08-23T12:34:56Z\"\n * ```\n *\n * @returns The current timestamp in XML Schema 1.1.2 format.\n */\nexport function getCurrentXmlSchema112Timestamp(): string {\n  // Omit the milliseconds part from toISOString() output\n  return new Date().toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Converts a UNIX timestamp to an XML Schema 1.1.2 compliant date-time string, omitting milliseconds.\n *\n * This function takes a UNIX timestamp (number of seconds since the UNIX epoch) as input and converts it\n * to a date-time string formatted according to XML Schema 1.1.2 specifications, specifically omitting\n * the milliseconds component from the standard ISO 8601 format. This is useful for generating\n * timestamps for verifiable credentials and other applications requiring precision to the second\n * without the need for millisecond granularity.\n *\n * @param timestampInSeconds The UNIX timestamp to convert, measured in seconds.\n * @example\n * ```ts\n * const issuanceDate = getXmlSchema112Timestamp(1633036800); // \"2021-10-01T00:00:00Z\"\n * ```\n *\n * @returns A date-time string in the format \"yyyy-MM-ddTHH:mm:ssZ\", compliant with XML Schema 1.1.2, based on the provided UNIX timestamp.\n */\nexport function getXmlSchema112Timestamp(timestampInSeconds: number): string {\n  const date = new Date(timestampInSeconds * 1000);\n\n  // Format the date to an ISO string and then remove milliseconds\n  return date.toISOString().replace(/\\.\\d{3}/, '');\n}\n\n/**\n * Calculates a future timestamp in XML Schema 1.1.2 date-time format based on a given number of\n * seconds.\n *\n * This function takes a number of seconds and adds it to the current timestamp, returning a\n * date-time string in the format \"yyyy-MM-ddTHH:mm:ssZ\" without milliseconds.\n *\n * @example\n * ```ts\n * const futureTimestamp = getFutureXmlSchema112Timestamp(60); // \"2023-08-23T12:35:56Z\"\n * ```\n *\n * @param secondsInFuture - The number of seconds to project into the future.\n * @returns The future timestamp in XML Schema 1.1.2 format.\n */\nexport function getFutureXmlSchema112Timestamp(secondsInFuture: number): string {\n  const futureDate = new Date(Date.now() + secondsInFuture * 1000);\n  return futureDate.toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Validates a timestamp string against the XML Schema 1.1.2 date-time format.\n *\n * This function checks whether the provided timestamp string conforms to the\n * format \"yyyy-MM-ddTHH:mm:ssZ\", without milliseconds, as defined in XML Schema 1.1.2.\n *\n * @example\n * ```ts\n * const isValid = isValidXmlSchema112Timestamp('2023-08-23T12:34:56Z'); // true\n * ```\n *\n * @param timestamp - The timestamp string to validate.\n * @returns `true` if the timestamp is valid, `false` otherwise.\n */\nexport function isValidXmlSchema112Timestamp(timestamp: string): boolean {\n  // Format: yyyy-MM-ddTHH:mm:ssZ\n  const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\n  if (!regex.test(timestamp)) {\n    return false;\n  }\n\n  const date = new Date(timestamp);\n\n  return !isNaN(date.getTime());\n}\n\n/**\n * Validates a timestamp string against the RFC 3339 format.\n *\n * This function checks whether the provided timestamp string conforms to the\n * RFC 3339 standard, which includes full date and time representations with\n * optional fractional seconds and a timezone offset. The format allows for\n * both 'Z' (indicating UTC) and numeric timezone offsets (e.g., \"-07:00\", \"+05:30\").\n * This validation ensures that the timestamp is not only correctly formatted\n * but also represents a valid date and time.\n *\n * @param timestamp - The timestamp string to validate.\n * @returns `true` if the timestamp is valid and conforms to RFC 3339, `false` otherwise.\n */\nexport function isValidRFC3339Timestamp(timestamp: string): boolean {\n  // RFC 3339 format: yyyy-MM-ddTHH:mm:ss[.fractional-seconds]Z or yyyy-MM-ddTHH:mm:ss[.fractional-seconds]±HH:mm\n  // This regex matches both 'Z' for UTC and timezone offsets like '-07:00'\n  const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})$/;\n  if (!regex.test(timestamp)) {\n    return false;\n  }\n\n  // Parsing the timestamp to a Date object to check validity\n  const date = new Date(timestamp);\n\n  // Checking if the date is an actual date\n  return !isNaN(date.getTime());\n}", "import type { BearerDid } from '@web5/dids';\nimport type { IPresentation} from '@sphereon/ssi-types';\n\nimport { utils as cryptoUtils } from '@web5/crypto';\n\nimport { Jwt } from './jwt.js';\nimport { SsiValidator } from './validators.js';\n\nimport { VerifiableCredential, DEFAULT_VC_CONTEXT } from './verifiable-credential.js';\n\n/** The default type for a Verifiable Presentation. */\nexport const DEFAULT_VP_TYPE = 'VerifiablePresentation';\n\n/**\n * A Verifiable Presentation\n *\n * @see {@link https://www.w3.org/TR/vc-data-model/#credentials | VC Data Model}\n */\nexport type VpDataModel = IPresentation;\n\n/**\n * Options for creating a verifiable presentation.\n * @param holder The holder URI of the presentation, as a string.\n * @param vcJwts The JWTs of the credentials to be included in the presentation.\n * @param type Optional. The type of the presentation, can be a string or an array of strings.\n * @param additionalData Optional additional data to be included in the presentation.\n */\nexport type VerifiablePresentationCreateOptions = {\n  /** The holder URI of the presentation, as a string. */\n  holder: string,\n  /** The JWTs of the credentials to be included in the presentation. */\n  vcJwts: string[],\n  /** The type of the presentation, can be a string or an array of strings. */\n  type?: string | string[];\n  /** Optional additional data to be included in the presentation. */\n  additionalData?: Record<string, any>\n};\n\n/**\n * Options for signing a verifiable presentation.\n * @param did - The holder DID of the presentation, represented as a PortableDid.\n */\nexport type VerifiablePresentationSignOptions = {\n  /** The holder DID of the presentation, represented as a PortableDid. */\n  did: BearerDid;\n};\n\n/**\n * `VerifiablePresentation` is a tamper-evident presentation encoded in such a way that authorship of the data\n * can be trusted after a process of cryptographic verification.\n * [W3C Verifiable Presentation Data Model](https://www.w3.org/TR/vc-data-model/#presentations).\n *\n * It provides functionalities to sign, verify, and create presentations, offering a concise API to\n * work with JWT representations of verifiable presentations and ensuring that the signatures\n * and claims within those JWTs can be validated.\n *\n * @property vpDataModel The [vpDataModel] instance representing the core data model of a verifiable presentation.\n */\nexport class VerifiablePresentation {\n  constructor(public vpDataModel: VpDataModel) {}\n\n  /** The type of the Verifiable Presentation. */\n  get type(): string {\n    return this.vpDataModel.type![this.vpDataModel.type!.length - 1];\n  }\n\n  /** The holder of the Verifiable Presentation. */\n  get holder(): string {\n    return this.vpDataModel.holder!.toString();\n  }\n\n  /** The verifiable credentials contained in the Verifiable Presentation. */\n  get verifiableCredential(): string[] {\n    return this.vpDataModel.verifiableCredential! as string[];\n  }\n\n  /**\n   * Signs the verifiable presentation and returns it as a signed JWT.\n   *\n   * @example\n   * ```ts\n   * const vpJwt = verifiablePresentation.sign({ did: myDid });\n   * ```\n   *\n   * @param options - The sign options used to sign the presentation.\n   * @returns The JWT representing the signed verifiable presentation.\n   */\n  public async sign(options: VerifiablePresentationSignOptions): Promise<string> {\n    const vpJwt: string = await Jwt.sign({\n      signerDid : options.did,\n      payload   : {\n        vp  : this.vpDataModel,\n        iss : options.did.uri,\n        sub : options.did.uri,\n        jti : this.vpDataModel.id,\n        iat : Math.floor(Date.now() / 1000)\n      }\n    });\n\n    return vpJwt;\n  }\n\n  /**\n   * Converts the current object to its JSON representation.\n   *\n   * @returns The JSON representation of the object.\n   */\n  public toString(): string {\n    return JSON.stringify(this.vpDataModel);\n  }\n\n  /**\n   * Create a [VerifiablePresentation] based on the provided parameters.\n   *\n   * @example\n   * ```ts\n   * const vp = await VerifiablePresentation.create({\n   *     type: 'PresentationSubmission',\n   *     holder: 'did:ex:holder',\n   *     vcJwts: vcJwts,\n   *     additionalData: { 'arbitrary': 'data' }\n   *   })\n   * ```\n   *\n   * @param options - The options to use when creating the Verifiable Presentation.\n   * @returns A [VerifiablePresentation] instance.\n   */\n  public static async create(options: VerifiablePresentationCreateOptions): Promise<VerifiablePresentation> {\n    const { type, holder, vcJwts, additionalData } = options;\n\n    if (additionalData) {\n      const jsonData = JSON.parse(JSON.stringify(additionalData));\n\n      if (typeof jsonData !== 'object') {\n        throw new Error('Expected data to be parseable into a JSON object');\n      }\n    }\n\n    if(!holder) {\n      throw new Error('Holder must be defined');\n    }\n\n    if(typeof holder !== 'string') {\n      throw new Error('Holder must be of type string');\n    }\n\n    const vpDataModel: VpDataModel = {\n      '@context' : [DEFAULT_VC_CONTEXT],\n      type       : Array.isArray(type)\n        ? [DEFAULT_VP_TYPE, ...type]\n        : (type ? [DEFAULT_VP_TYPE, type] : [DEFAULT_VP_TYPE]),\n      id                   : `urn:uuid:${cryptoUtils.randomUuid()}`,\n      holder               : holder,\n      verifiableCredential : vcJwts,\n      ...additionalData,\n    };\n\n    validatePayload(vpDataModel);\n\n    return new VerifiablePresentation(vpDataModel);\n  }\n\n  /**\n   * Verifies the integrity and authenticity of a Verifiable Presentation (VP) encoded as a JSON Web Token (JWT).\n   *\n   * This function performs several crucial validation steps to ensure the trustworthiness of the provided VP:\n   * - Parses and validates the structure of the JWT.\n   * - Ensures the presence of critical header elements `alg` and `kid` in the JWT header.\n   * - Resolves the Decentralized Identifier (DID) and retrieves the associated DID Document.\n   * - Validates the DID and establishes a set of valid verification method IDs.\n   * - Identifies the correct Verification Method from the DID Document based on the `kid` parameter.\n   * - Verifies the JWT's signature using the public key associated with the Verification Method.\n   *\n   * If any of these steps fail, the function will throw a [Error] with a message indicating the nature of the failure.\n   *\n   * @example\n   * ```ts\n   * try {\n   *     VerifiablePresentation.verify({ vpJwt: signedVpJwt })\n   *     console.log(\"VC Verification successful!\")\n   * } catch (e: Error) {\n   *     console.log(\"VC Verification failed: ${e.message}\")\n   * }\n   * ```\n   *\n   * @param vpJwt The Verifiable Presentation in JWT format as a [string].\n   * @throws Error if the verification fails at any step, providing a message with failure details.\n   * @throws Error if critical JWT header elements are absent.\n   */\n  public static async verify({ vpJwt }: {\n    vpJwt: string\n  }) {\n    const { payload } = await Jwt.verify({ jwt: vpJwt });\n    const vp = payload['vp'] as VpDataModel;\n    if (!vp) {\n      throw new Error('vp property missing.');\n    }\n\n    validatePayload(vp);\n\n    for (const vcJwt of vp.verifiableCredential!) {\n      await VerifiableCredential.verify({ vcJwt: vcJwt as string });\n    }\n\n    return {\n      /** The issuer of the VP */\n      issuer  : payload.iss!,\n      /** The subject of the VP. */\n      subject : payload.sub!,\n      /** The VP data model object. */\n      vp      : payload['vp'] as VpDataModel\n    };\n  }\n\n  /**\n   * Parses a JWT into a [VerifiablePresentation] instance.\n   *\n   * @example\n   * ```ts\n   * const vp = VerifiablePresentation.parseJwt({ vpJwt: signedVpJwt })\n   * ```\n   *\n   * @param vpJwt The verifiable presentation JWT as a [String].\n   * @returns A [VerifiablePresentation] instance derived from the JWT.\n   */\n  public static parseJwt({ vpJwt }: { vpJwt: string }): VerifiablePresentation {\n    const parsedJwt = Jwt.parse({ jwt: vpJwt });\n    const vpDataModel: VpDataModel = parsedJwt.decoded.payload['vp'] as VpDataModel;\n\n    if(!vpDataModel) {\n      throw Error('Jwt payload missing vp property');\n    }\n\n    return new VerifiablePresentation(vpDataModel);\n  }\n}\n\n/**\n * Validates the structure and integrity of a Verifiable Presentation payload.\n *\n * @param vp - The Verifiable Presentaation object to validate.\n * @throws Error if any validation check fails.\n */\nfunction validatePayload(vp: VpDataModel): void {\n  SsiValidator.validateContext(vp['@context']);\n  SsiValidator.validateVpType(vp.type!);\n}", "import type { BearerDid } from '@web5/dids';\nimport type { ICredential, ICredentialSubject} from '@sphereon/ssi-types';\n\nimport { utils as cryptoUtils } from '@web5/crypto';\n\nimport { Jwt } from './jwt.js';\nimport { SsiValidator } from './validators.js';\nimport { getCurrentXmlSchema112Timestamp, getXmlSchema112Timestamp } from './utils.js';\n\n/** The default Verifiable Credential context. */\nexport const DEFAULT_VC_CONTEXT = 'https://www.w3.org/2018/credentials/v1';\n/** The default Verifiable Credential type. */\nexport const DEFAULT_VC_TYPE = 'VerifiableCredential';\n\n/**\n * A Verifiable Credential is a set of one or more claims made by the same entity.\n *\n * @see {@link https://www.w3.org/TR/vc-data-model/#credentials | VC Data Model}\n */\nexport type VcDataModel = ICredential;\n\n/**\n * Options for creating a verifiable credential.\n * @param type Optional. The type of the credential, can be a string or an array of strings.\n * @param issuer The issuer URI of the credential, as a string.\n * @param subject The subject URI of the credential, as a string.\n * @param data The credential data, as a generic type any.\n * @param issuanceDate Optional. The issuance date of the credential, as a string.\n *               Defaults to the current date if not specified.\n * @param expirationDate Optional. The expiration date of the credential, as a string.\n * @param evidence Optional. Evidence can be included by an issuer to provide the verifier with additional supporting information in a verifiable credential.\n */\nexport type VerifiableCredentialCreateOptions = {\n  /** The type of the credential, can be a string or an array of strings. */\n  type?: string | string[];\n  /** The issuer URI of the credential, as a string. */\n  issuer: string;\n  /** The subject URI of the credential, as a string. */\n  subject: string;\n  /** The credential data, as a generic type any. */\n  data: any;\n  /** The issuance date of the credential, as a string. */\n  issuanceDate?: string;\n  /** The expiration date of the credential, as a string. */\n  expirationDate?: string;\n  /** The evidence of the credential, as an array of any. */\n  evidence?: any[];\n};\n\n/**\n * Options for signing a verifiable credential.\n * @param did - The issuer DID of the credential, represented as a PortableDid.\n */\nexport type VerifiableCredentialSignOptions = {\n  /** The issuer DID of the credential, represented as a PortableDid. */\n  did: BearerDid;\n};\n\n/** The credential subject of a verifiable credential. */\ntype CredentialSubject = ICredentialSubject;\n\n/**\n * `VerifiableCredential` represents a digitally verifiable credential according to the\n * [W3C Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/).\n *\n * It provides functionalities to sign, verify, and create credentials, offering a concise API to\n * work with JWT representations of verifiable credentials and ensuring that the signatures\n * and claims within those JWTs can be validated.\n *\n * @property vcDataModel The [VcDataModel] instance representing the core data model of a verifiable credential.\n */\nexport class VerifiableCredential {\n  constructor(public vcDataModel: VcDataModel) {}\n\n  /** The type of the credential. */\n  get type(): string {\n    return this.vcDataModel.type[this.vcDataModel.type.length - 1];\n  }\n\n  /** The issuer of the credential. */\n  get issuer(): string {\n    return this.vcDataModel.issuer.toString();\n  }\n\n  /** The subject of the credential. */\n  get subject(): string {\n    if (Array.isArray(this.vcDataModel.credentialSubject)) {\n      return this.vcDataModel.credentialSubject[0].id!;\n    } else {\n      return this.vcDataModel.credentialSubject.id!;\n    }\n  }\n\n  /**\n   * Signs the verifiable credential and returns it as a signed JWT.\n   *\n   * @example\n   * ```ts\n   * const vcJwt = verifiableCredential.sign({ did: myDid });\n   * ```\n   *\n   * @param options - The sign options used to sign the credential.\n   * @returns The JWT representing the signed verifiable credential.\n   */\n  public async sign(options: VerifiableCredentialSignOptions): Promise<string> {\n    const vcJwt: string = await Jwt.sign({\n      signerDid : options.did,\n      payload   : {\n        vc  : this.vcDataModel,\n        nbf : Math.floor(new Date(this.vcDataModel.issuanceDate).getTime() / 1000),\n        jti : this.vcDataModel.id,\n        iss : options.did.uri,\n        sub : this.subject,\n        iat : Math.floor(Date.now() / 1000),\n        ...(this.vcDataModel.expirationDate && {\n          exp: Math.floor(new Date(this.vcDataModel.expirationDate).getTime() / 1000),\n        }),\n      }\n    });\n\n    return vcJwt;\n  }\n\n  /**\n   * Converts the current object to its JSON representation.\n   *\n   * @returns The JSON representation of the object.\n   */\n  public toString(): string {\n    return JSON.stringify(this.vcDataModel);\n  }\n\n  /**\n   * Create a [VerifiableCredential] based on the provided parameters.\n   *\n   * @example\n   * ```ts\n   * const vc = await VerifiableCredential.create({\n   *     type: 'StreetCredibility',\n   *     issuer: 'did:ex:issuer',\n   *     subject: 'did:ex:subject',\n   *     data: { 'arbitrary': 'data' }\n   *   })\n   * ```\n   *\n   * @param options - The options to use when creating the Verifiable Credential.\n   * @returns A [VerifiableCredential] instance.\n   */\n  public static async create(options: VerifiableCredentialCreateOptions): Promise<VerifiableCredential> {\n    const { type, issuer, subject, data, issuanceDate, expirationDate, evidence } = options;\n\n    const jsonData = JSON.parse(JSON.stringify(data));\n\n    if (typeof jsonData !== 'object') {\n      throw new Error('Expected data to be parseable into a JSON object');\n    }\n\n    if(!issuer || !subject) {\n      throw new Error('Issuer and subject must be defined');\n    }\n\n    if(typeof issuer !== 'string' || typeof subject !== 'string') {\n      throw new Error('Issuer and subject must be of type string');\n    }\n\n    const credentialSubject: CredentialSubject = {\n      id: subject,\n      ...jsonData\n    };\n\n    const vcDataModel: VcDataModel = {\n      '@context' : [DEFAULT_VC_CONTEXT],\n      type       : Array.isArray(type)\n        ? [DEFAULT_VC_TYPE, ...type]\n        : (type ? [DEFAULT_VC_TYPE, type] : [DEFAULT_VC_TYPE]),\n      id                : `urn:uuid:${cryptoUtils.randomUuid()}`,\n      issuer            : issuer,\n      issuanceDate      : issuanceDate || getCurrentXmlSchema112Timestamp(),\n      credentialSubject : credentialSubject,\n      // Include optional properties only if they have values\n      ...(expirationDate && { expirationDate }),\n      ...(evidence && { evidence }),\n    };\n\n    validatePayload(vcDataModel);\n\n    return new VerifiableCredential(vcDataModel);\n  }\n\n  /**\n   * Verifies the integrity and authenticity of a Verifiable Credential (VC) encoded as a JSON Web Token (JWT).\n   *\n   * This function performs several crucial validation steps to ensure the trustworthiness of the provided VC:\n   * - Parses and validates the structure of the JWT.\n   * - Ensures the presence of critical header elements `alg` and `kid` in the JWT header.\n   * - Resolves the Decentralized Identifier (DID) and retrieves the associated DID Document.\n   * - Validates the DID and establishes a set of valid verification method IDs.\n   * - Identifies the correct Verification Method from the DID Document based on the `kid` parameter.\n   * - Verifies the JWT's signature using the public key associated with the Verification Method.\n   *\n   * If any of these steps fail, the function will throw a [Error] with a message indicating the nature of the failure:\n   * - exp MUST represent the expirationDate property, encoded as a UNIX timestamp (NumericDate).\n   * - iss MUST represent the issuer property of a verifiable credential or the holder property of a verifiable presentation.\n   * - nbf MUST represent issuanceDate, encoded as a UNIX timestamp (NumericDate).\n   * - jti MUST represent the id property of the verifiable credential or verifiable presentation.\n   * - sub MUST represent the id property contained in the credentialSubject.\n   *\n   * Once the verifications are successful, when recreating the VC data model object, this function will:\n   * - If exp is present, the UNIX timestamp MUST be converted to an [XMLSCHEMA11-2] date-time, and MUST be used to set the value of the expirationDate property of credentialSubject of the new JSON object.\n   * - If iss is present, the value MUST be used to set the issuer property of the new credential JSON object or the holder property of the new presentation JSON object.\n   * - If nbf is present, the UNIX timestamp MUST be converted to an [XMLSCHEMA11-2] date-time, and MUST be used to set the value of the issuanceDate property of the new JSON object.\n   * - If sub is present, the value MUST be used to set the value of the id property of credentialSubject of the new credential JSON object.\n   * - If jti is present, the value MUST be used to set the value of the id property of the new JSON object.\n   *\n   * @example\n   * ```ts\n   * try {\n   *     VerifiableCredential.verify({ vcJwt: signedVcJwt })\n   *     console.log(\"VC Verification successful!\")\n   * } catch (e: Error) {\n   *     console.log(\"VC Verification failed: ${e.message}\")\n   * }\n   * ```\n   * @param param - The parameters for the verification process.\n   * @param param.vcJwt The Verifiable Credential in JWT format as a [string].\n   * @throws Error if the verification fails at any step, providing a message with failure details.\n   * @throws Error if critical JWT header elements are absent.\n   */\n  public static async verify({ vcJwt }: {\n    vcJwt: string\n  }) {\n    const { payload } = await Jwt.verify({ jwt: vcJwt });\n    const { exp, iss, nbf, jti, sub, vc } = payload;\n\n    if (!vc) {\n      throw new Error('vc property missing.');\n    }\n\n    const vcTyped: VcDataModel = payload['vc'] as VcDataModel;\n\n    // exp MUST represent the expirationDate property, encoded as a UNIX timestamp (NumericDate).\n    if(exp && vcTyped.expirationDate && exp !==  Math.floor(new Date(vcTyped.expirationDate).getTime() / 1000)) {\n      throw new Error('Verification failed: exp claim does not match expirationDate');\n    }\n\n    // If exp is present, the UNIX timestamp MUST be converted to an [XMLSCHEMA11-2] date-time, and MUST be used to set the value of the expirationDate property of credentialSubject of the new JSON object.\n    if(exp) {\n      vcTyped.expirationDate = getXmlSchema112Timestamp(exp);\n    }\n\n    if (!iss) throw new Error('Verification failed: iss claim is required');\n\n    // iss MUST represent the issuer property of a verifiable credential or the holder property of a verifiable presentation.\n    if (iss !== vcTyped.issuer) {\n      throw new Error('Verification failed: iss claim does not match expected issuer');\n    }\n\n    // nbf cannot represent time in the future\n    if(nbf && nbf > Math.floor(Date.now() / 1000)) {\n      throw new Error('Verification failed: nbf claim is in the future');\n    }\n\n    // nbf MUST represent issuanceDate, encoded as a UNIX timestamp (NumericDate).\n    if(nbf && vcTyped.issuanceDate && nbf !== Math.floor(new Date(vcTyped.issuanceDate).getTime() / 1000)) {\n      throw new Error('Verification failed: nbf claim does not match issuanceDate');\n    }\n\n    // If nbf is present, the UNIX timestamp MUST be converted to an [XMLSCHEMA11-2] date-time, and MUST be used to set the value of the issuanceDate property of the new JSON object.\n    if(nbf) {\n      vcTyped.issuanceDate = getXmlSchema112Timestamp(nbf);\n    }\n\n    // sub MUST represent the id property contained in the credentialSubject.\n    if(sub && !Array.isArray(vcTyped.credentialSubject) && sub !== vcTyped.credentialSubject.id) {\n      throw new Error('Verification failed: sub claim does not match credentialSubject.id');\n    }\n\n    // If sub is present, the value MUST be used to set the value of the id property of credentialSubject of the new credential JSON object.\n    if(sub && !Array.isArray(vcTyped.credentialSubject)) {\n      vcTyped.credentialSubject.id = sub;\n    }\n\n    // jti MUST represent the id property of the verifiable credential or verifiable presentation.\n    if(jti && jti !== vcTyped.id) {\n      throw new Error('Verification failed: jti claim does not match id');\n    }\n\n    if(jti) {\n      vcTyped.id = jti;\n    }\n\n    validatePayload(vcTyped);\n\n    return {\n      /** The issuer of the VC. */\n      issuer  : payload.iss!,\n      /** The subject of the VC. */\n      subject : payload.sub!,\n      /** The VC data model object. */\n      vc      : vcTyped\n    };\n  }\n\n  /**\n   * Parses a JWT into a [VerifiableCredential] instance.\n   *\n   * @example\n   * ```ts\n   * const vc = VerifiableCredential.parseJwt({ vcJwt: signedVcJwt })\n   * ```\n   *\n   * @param vcJwt The verifiable credential JWT as a [String].\n   * @returns A [VerifiableCredential] instance derived from the JWT.\n   */\n  public static parseJwt({ vcJwt }: { vcJwt: string }): VerifiableCredential {\n    const parsedJwt = Jwt.parse({ jwt: vcJwt });\n    const vcDataModel: VcDataModel = parsedJwt.decoded.payload['vc'] as VcDataModel;\n\n    if(!vcDataModel) {\n      throw Error('Jwt payload missing vc property');\n    }\n\n    validatePayload(vcDataModel);\n\n    return new VerifiableCredential(vcDataModel);\n  }\n}\n\n/**\n * Validates the structure and integrity of a Verifiable Credential payload.\n *\n * @param vc - The Verifiable Credential object to validate.\n * @throws Error if any validation check fails.\n */\nfunction validatePayload(vc: VcDataModel): void {\n  SsiValidator.validateContext(vc['@context']);\n  SsiValidator.validateVcType(vc.type);\n  SsiValidator.validateCredentialSubject(vc.credentialSubject);\n  if (vc.issuanceDate) SsiValidator.validateTimestamp(vc.issuanceDate);\n  if (vc.expirationDate) SsiValidator.validateTimestamp(vc.expirationDate);\n}", "import { Message } from '../message.js';\nimport { Parser } from '../parser.js';\n/**\n * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until\n * the quote expires\n * @beta\n */\nexport class Quote extends Message {\n    /** a set of valid Message kinds that can come after a quote */\n    validNext = new Set(['order', 'close']);\n    /** The message kind (quote) */\n    kind = 'quote';\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /**\n     * Quote's data containing locked-in price and payment methods that the PFI is willing to honor\n     * until the quote expires\n     */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json message into a Quote\n     * @param rawMessage - the quote to parse\n     * @throws if the quote could not be parsed or is not a valid Quote\n     * @returns The parsed Quote\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        const quote = new Quote(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await quote.verify();\n        return quote;\n    }\n    /**\n     * Creates a quote message with the given options\n     * @param opts - options to create a quote\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'quote',\n            id: Message.generateId('quote'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const quote = new Quote(metadata, opts.data);\n        quote.validateData();\n        return quote;\n    }\n}\n", "import { Message } from '../message.js';\nimport { Parser } from '../parser.js';\n/**\n * Message sent by Alice to the PFI to accept a Quote.\n * @beta\n */\nexport class Order extends Message {\n    /** a set of valid Message kinds that can come after an order */\n    validNext = new Set(['orderstatus']);\n    /** The message kind (order) */\n    kind = 'order';\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /** Order's data */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json message into an Order\n     * @param rawMessage - the order to parse\n     * @throws if the order could not be parsed or is not a valid Order\n     * @returns The parsed Order\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        const order = new Order(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await order.verify();\n        return order;\n    }\n    /**\n     * Creates an order with the given options\n     * @param opts - options to create an order\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'order',\n            id: Message.generateId('order'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const order = new Order(metadata, {});\n        order.validateData();\n        return order;\n    }\n}\n", "import { Message } from '../message.js';\nimport { Parser } from '../parser.js';\n/**\n * Sent by the PFI to Alice to convey the current status of an order. There can be many OrderStatus\n * messages in a given Exchange\n * @beta\n */\nexport class OrderStatus extends Message {\n    /** a set of valid Message kinds that can come after an order status */\n    validNext = new Set(['orderstatus', 'close']);\n    /** The message kind (orderstatus) */\n    kind = 'orderstatus';\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /** OrderStatus's data containing a description of the status */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json message into an OrderStatus\n     * @param rawMessage - the orderstatus to parse\n     * @throws if the orderstatus could not be parsed or is not a valid OrderStatus\n     * @returns The parsed OrderStatus\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        const orderStatus = new OrderStatus(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await orderStatus.verify();\n        return orderStatus;\n    }\n    /**\n     * Creates an order status with the given options\n     * @param opts - options to create an order status\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'orderstatus',\n            id: Message.generateId('orderstatus'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const orderStatus = new OrderStatus(metadata, opts.data);\n        orderStatus.validateData();\n        return orderStatus;\n    }\n    /** Current status of Order that's being executed (e.g. PROCESSING, COMPLETED, FAILED etc.) */\n    get orderStatus() {\n        return this.data.orderStatus;\n    }\n}\n", "import { Message } from '../message.js';\nimport { Parser } from '../parser.js';\n/**\n * A Close can be sent by Alice or the PFI as a reply to an RFQ or a Quote\n * @beta\n */\nexport class Close extends Message {\n    /** A set of valid Message kinds that can come after a close */\n    validNext = new Set([]);\n    /** The message kind (close) */\n    kind = 'close';\n    /** Metadata such as sender, recipient, date created, and ID */\n    metadata;\n    /** Close's data containing a reason why the exchange was closed */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json message into an Close\n     * @param rawMessage - the close to parse\n     * @throws if the close could not be parsed or is not a valid Close\n     * @returns The parsed Close\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToMessageModel(rawMessage);\n        const close = new Close(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await close.verify();\n        return close;\n    }\n    /**\n     * Creates a close message with the given options\n     * @param opts - options to create a close message\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'close',\n            id: Message.generateId('close'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const close = new Close(metadata, opts.data);\n        close.validateData();\n        return close;\n    }\n    /** an explanation of why the exchange is being closed */\n    get reason() {\n        return this.data.reason;\n    }\n}\n", "import { Resource } from '../resource.js';\nimport { Parser } from '../parser.js';\n/**\n * A Balance is a protected resource used to communicate the amounts of each\n * currency held by the PFI on behalf of its customer.\n * @beta\n */\nexport class Balance extends Resource {\n    /** The resource kind (balance) */\n    kind = 'balance';\n    /** Metadata such as sender, date created, date updated, and ID */\n    metadata;\n    /** Balance's data such as currencies and available amounts */\n    data;\n    constructor(metadata, data, signature) {\n        super(metadata, data, signature);\n        this.metadata = metadata;\n        this.data = data;\n    }\n    /**\n     * Parses a json resource into an Balance\n     * @param rawMessage - the Balance to parse\n     * @throws if the balance could not be parsed or is not a valid Balance\n     * @returns The parsed Balance\n     */\n    static async parse(rawMessage) {\n        const jsonMessage = Parser.rawToResourceModel(rawMessage);\n        const balance = new Balance(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);\n        await balance.verify();\n        return balance;\n    }\n    /**\n     * Creates an Balance with the given options\n     * @param opts - options to create an balance\n     */\n    static create(opts) {\n        const metadata = {\n            ...opts.metadata,\n            kind: 'balance',\n            id: Resource.generateId('balance'),\n            createdAt: new Date().toISOString(),\n            protocol: opts.metadata.protocol ?? '1.0'\n        };\n        const balance = new Balance(metadata, opts.data);\n        balance.validateData();\n        return balance;\n    }\n}\n", "/**\n * State-machine for validating the order and metadata of Tbdex messages in an exchange.\n *\n * This state-machine does not validate the {@link Message.signature} or {@link Message.data}\n * of messages in the exchange.\n *\n * Either add messages in order one at a time using {@link Exchange.addNextMessage},\n * or add a list of unsorted messages in an exchange using {@link Exchange.addMessages}\n *\n * @beta\n */\nexport class Exchange {\n    /** Message sent by Alice to PFI to request a quote */\n    rfq;\n    /** Message sent by the PFI in response to an RFQ */\n    quote;\n    /** Message sent by Alice to the PFI to accept a quote*/\n    order;\n    /** Message sent by the PFI to Alice to convet the current status of the order */\n    orderstatus;\n    /** Message sent by either the PFI or Alice to terminate an exchange */\n    close;\n    constructor() {\n        this.orderstatus = [];\n    }\n    /**\n     * Add a list of unsorted messages to an exchange.\n     * @param messages - An unsorted array of Tbdex messages in a given exchange\n     */\n    addMessages(messages) {\n        // Sort with earliest dateCreated first\n        const sortedMessages = messages.sort((m1, m2) => {\n            const time1 = new Date(m1.metadata.createdAt).getTime();\n            const time2 = new Date(m2.metadata.createdAt).getTime();\n            return time1 - time2;\n        });\n        for (const message of sortedMessages) {\n            this.addNextMessage(message);\n        }\n    }\n    /**\n     * Add the next message in the exchange\n     * @param message - The next allowed message in the exchange\n     * @throws if message's protocol version does not match protocol version of other messages in the exchange\n     * @throws if message is not a valid next message. See {@link Exchange.isValidNext}\n     * @throws if message's exchangeId does not match id of the exchange\n     */\n    addNextMessage(message) {\n        if (this.protocol !== undefined && message.metadata.protocol !== this.protocol) {\n            throw new Error(`Could not add message (${message.metadata.id}) with protocol version ${message.metadata.protocol} to exchange because it does not have matching ` +\n                `protocol version ${this.protocol} as other messages in the exchange`);\n        }\n        if (!this.isValidNext(message.metadata.kind)) {\n            throw new Error(`Could not add message (${message.metadata.id}) to exchange because ${message.metadata.kind} ` +\n                `is not a valid next message`);\n        }\n        if (this.exchangeId !== undefined && message.metadata.exchangeId !== this.exchangeId) {\n            throw new Error(`Could not add message (${message.metadata.id}) with exchange id ${message.metadata.exchangeId} to exchange because it does not have matching ` +\n                `exchange id ${this.exchangeId} as the exchange`);\n        }\n        if (message.isRfq()) {\n            this.rfq = message;\n        }\n        else if (message.isQuote()) {\n            this.quote = message;\n        }\n        else if (message.isClose()) {\n            this.close = message;\n        }\n        else if (message.isOrder()) {\n            this.order = message;\n        }\n        else if (message.isOrderStatus()) {\n            this.orderstatus.push(message);\n        }\n        else {\n            // Unreachable\n            throw new Error('Unrecognized message kind');\n        }\n    }\n    /**\n     * Determines if the message kind is a valid next message in the current exchange\n     * @param messageKind - the kind of TBDex message\n     * @returns true if the next message in the exchange may have kind messageKind, false otherwise\n     */\n    isValidNext(messageKind) {\n        const validNext = this.latestMessage?.validNext ?? new Set(['rfq']);\n        return validNext.has(messageKind);\n    }\n    /**\n     * Latest message in an exchange if there are any messages currently\n     */\n    get latestMessage() {\n        return this.close ??\n            this.orderstatus[this.orderstatus.length - 1] ??\n            this.order ??\n            this.quote ??\n            this.rfq;\n    }\n    /**\n     * The exchangeId of all messages in the Exchange\n     */\n    get exchangeId() {\n        return this.rfq?.metadata?.exchangeId;\n    }\n    /**\n     * The protocol version of all messages in the Exchange\n     */\n    get protocol() {\n        return this.rfq?.metadata?.protocol;\n    }\n    /**\n     * A sorted list of messages currently in the exchange.\n     */\n    get messages() {\n        const allPossibleMessages = [\n            this.rfq,\n            this.quote,\n            this.order,\n            ...this.orderstatus,\n            this.close\n        ];\n        return allPossibleMessages.filter((message) => message !== undefined);\n    }\n}\n", "import { Balance, Offering } from './resource-kinds/index.js';\nimport { Rfq } from './message-kinds/index.js';\nimport { Resource } from './resource.js';\nimport { VerifiableCredential } from '@web5/credentials';\n/**\n * Utility functions for testing purposes\n * @beta\n */\nexport class DevTools {\n    /**\n     * creates and returns an example offering. Useful for testing purposes\n     */\n    static createOffering(opts) {\n        return Offering.create({\n            metadata: { from: opts?.from ?? 'did:ex:pfi' },\n            data: opts?.offeringData ?? DevTools.createOfferingData()\n        });\n    }\n    /**\n     * creates an example OfferingData. Useful for testing purposes\n     */\n    static createOfferingData() {\n        return {\n            description: 'Selling BTC for USD',\n            payin: {\n                currencyCode: 'USD',\n                min: '0.0',\n                max: '999999.99',\n                methods: [{\n                        kind: 'DEBIT_CARD',\n                        requiredPaymentDetails: {\n                            $schema: 'http://json-schema.org/draft-07/schema',\n                            type: 'object',\n                            properties: {\n                                cardNumber: {\n                                    type: 'string',\n                                    description: 'The 16-digit debit card number',\n                                    minLength: 16,\n                                    maxLength: 16\n                                },\n                                expiryDate: {\n                                    type: 'string',\n                                    description: 'The expiry date of the card in MM/YY format',\n                                    pattern: '^(0[1-9]|1[0-2])\\\\/([0-9]{2})$'\n                                },\n                                cardHolderName: {\n                                    type: 'string',\n                                    description: 'Name of the cardholder as it appears on the card'\n                                },\n                                cvv: {\n                                    type: 'string',\n                                    description: 'The 3-digit CVV code',\n                                    minLength: 3,\n                                    maxLength: 3\n                                }\n                            },\n                            required: ['cardNumber', 'expiryDate', 'cardHolderName', 'cvv'],\n                            additionalProperties: false\n                        }\n                    }]\n            },\n            payout: {\n                currencyCode: 'BTC',\n                max: '999526.11',\n                methods: [{\n                        kind: 'BTC_ADDRESS',\n                        requiredPaymentDetails: {\n                            $schema: 'http://json-schema.org/draft-07/schema',\n                            type: 'object',\n                            properties: {\n                                btcAddress: {\n                                    type: 'string',\n                                    description: 'your Bitcoin wallet address'\n                                }\n                            },\n                            required: ['btcAddress'],\n                            additionalProperties: false\n                        },\n                        estimatedSettlementTime: 10, // seconds\n                    }]\n            },\n            payoutUnitsPerPayinUnit: '0.00003826',\n            requiredClaims: {\n                id: '7ce4004c-3c38-4853-968b-e411bafcd945',\n                input_descriptors: [{\n                        id: 'bbdb9b7c-5754-4f46-b63b-590bada959e0',\n                        constraints: {\n                            fields: [\n                                {\n                                    path: ['$.type[*]'],\n                                    filter: {\n                                        type: 'string',\n                                        pattern: '^YoloCredential$'\n                                    }\n                                },\n                            ]\n                        }\n                    }]\n            }\n        };\n    }\n    /**\n     * creates and returns an example balance. Useful for testing purposes\n     */\n    static createBalance(opts) {\n        return Balance.create({\n            metadata: { from: opts?.from ?? 'did:ex:pfi' },\n            data: opts?.balanceData ?? DevTools.createBalanceData()\n        });\n    }\n    /**\n     * creates an example BalanceData. Useful for testing purposes\n     */\n    static createBalanceData() {\n        return {\n            currencyCode: 'USD',\n            available: '400.00'\n        };\n    }\n    /**\n     * creates an example QuoteData. Useful for testing purposes\n     */\n    static createQuoteData() {\n        return {\n            expiresAt: new Date().toISOString(),\n            payin: {\n                currencyCode: 'BTC',\n                amount: '0.01',\n                fee: '0.0001',\n                paymentInstruction: {\n                    link: 'tbdex.io/example',\n                    instruction: 'Fake instruction'\n                }\n            },\n            payout: {\n                currencyCode: 'USD',\n                amount: '1000.00',\n                paymentInstruction: {\n                    link: 'tbdex.io/example',\n                    instruction: 'Fake instruction'\n                }\n            }\n        };\n    }\n    /**\n     *\n     * creates and returns an example rfq for the offering returned by {@link DevTools.createOffering}.\n     * Useful for testing purposes.\n     *\n     * **NOTE**: generates a random credential that fulfills the offering's required claims\n     */\n    static async createRfq(opts) {\n        const { sender, receiver } = opts;\n        const rfqData = await DevTools.createRfqData(opts);\n        return Rfq.create({\n            metadata: { from: sender.uri, to: receiver?.uri ?? 'did:ex:pfi' },\n            data: rfqData\n        });\n    }\n    /**\n     * creates an example RfqData. Useful for testing purposes\n     */\n    static async createRfqData(opts) {\n        let vcJwt = '';\n        if (opts?.sender) {\n            const vc = await VerifiableCredential.create({\n                type: 'YoloCredential',\n                issuer: opts.sender.uri,\n                subject: opts.sender.uri,\n                data: {\n                    'beep': 'boop'\n                }\n            });\n            vcJwt = await vc.sign({ did: opts.sender });\n        }\n        return {\n            offeringId: Resource.generateId('offering'),\n            payin: {\n                kind: 'DEBIT_CARD',\n                amount: '200.00',\n                paymentDetails: {\n                    'cardNumber': '1234567890123456',\n                    'expiryDate': '12/22',\n                    'cardHolderName': 'Ephraim Bartholomew Winthrop',\n                    'cvv': '123'\n                }\n            },\n            payout: {\n                kind: 'BTC_ADDRESS',\n                paymentDetails: {\n                    btcAddress: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'\n                }\n            },\n            claims: [vcJwt]\n        };\n    }\n}\n", "export {};\n", "import { Parser, } from '@tbdex/protocol';\nimport { RequestError, ResponseError, InvalidDidError, MissingServiceEndpointError, RequestTokenMissingClaimsError, RequestTokenAudienceMismatchError, RequestTokenSigningError, RequestTokenVerificationError, RequestTokenIssuerSignerMismatchError } from './errors/index.js';\nimport { resolveDid, Offering } from '@tbdex/protocol';\nimport { utils as didUtils } from '@web5/dids';\nimport { typeid } from 'typeid-js';\nimport { Jwt } from '@web5/credentials';\nimport queryString from 'query-string';\nimport ms from 'ms';\n/**\n * Required jwt claims expected in a request token\n * @beta\n */\nexport const requestTokenRequiredClaims = ['aud', 'iss', 'exp', 'iat', 'jti'];\n/**\n * HTTP client for interacting with TBDex PFIs\n * @beta\n */\nexport class TbdexHttpClient {\n    /**\n     * Sends an RFQ and options to the PFI to initiate an exchange\n     * @param rfq - The RFQ message that will be sent to the PFI\n     * @param opts.replyTo A callback URL where the PFI will send subsequent messages\n     * @throws if message verification fails\n     * @throws if recipient DID resolution fails\n     * @throws if recipient DID does not have a PFI service entry\n     */\n    static async createExchange(rfq, opts) {\n        await rfq.verify();\n        const { to: pfiDid } = rfq.metadata;\n        const requestBody = JSON.stringify({ rfq, replyTo: opts?.replyTo });\n        await TbdexHttpClient.sendMessage(pfiDid, 'POST', `/exchanges`, requestBody);\n    }\n    /**\n     * Sends the Order message to the PFI\n     * @param - order The Order message that will be sent to the PFI\n     * @throws if message verification fails\n     * @throws if recipient DID resolution fails\n     * @throws if recipient DID does not have a PFI service entry\n     */\n    static async submitOrder(order) {\n        await order.verify();\n        const { to: pfiDid, exchangeId } = order.metadata;\n        const requestBody = JSON.stringify(order);\n        await TbdexHttpClient.sendMessage(pfiDid, 'PUT', `/exchanges/${exchangeId}`, requestBody);\n    }\n    /**\n     * Sends the Close message to the PFI\n     * @param - close The Close message that will be sent to the PFI\n     * @throws if message verification fails\n     * @throws if recipient DID resolution fails\n     * @throws if recipient DID does not have a PFI service entry\n     */\n    static async submitClose(close) {\n        await close.verify();\n        const { to: pfiDid, exchangeId } = close.metadata;\n        const requestBody = JSON.stringify(close);\n        await TbdexHttpClient.sendMessage(pfiDid, 'PUT', `/exchanges/${exchangeId}`, requestBody);\n    }\n    static async sendMessage(pfiDid, verb, path, requestBody) {\n        const pfiServiceEndpoint = await TbdexHttpClient.getPfiServiceEndpoint(pfiDid);\n        const apiRoute = `${pfiServiceEndpoint}${path}`;\n        let response;\n        try {\n            response = await fetch(apiRoute, {\n                method: verb,\n                headers: { 'content-type': 'application/json' },\n                body: requestBody\n            });\n        }\n        catch (e) {\n            throw new RequestError({ message: `Failed to send message to ${pfiDid}`, recipientDid: pfiDid, url: apiRoute, cause: e });\n        }\n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new ResponseError({ statusCode: response.status, details: errorDetails, recipientDid: pfiDid, url: apiRoute });\n        }\n    }\n    /**\n     * gets offerings from the pfi provided\n     * @param opts - options\n     * @beta\n     */\n    static async getOfferings(opts) {\n        const { pfiDid } = opts;\n        const pfiServiceEndpoint = await TbdexHttpClient.getPfiServiceEndpoint(pfiDid);\n        const apiRoute = `${pfiServiceEndpoint}/offerings`;\n        let response;\n        try {\n            response = await fetch(apiRoute);\n        }\n        catch (e) {\n            throw new RequestError({ message: `Failed to get offerings from ${pfiDid}`, recipientDid: pfiDid, url: apiRoute, cause: e });\n        }\n        const offerings = [];\n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new ResponseError({ statusCode: response.status, details: errorDetails, recipientDid: pfiDid, url: apiRoute });\n        }\n        const responseBody = await response.json();\n        const jsonOfferings = responseBody.data;\n        for (let jsonOffering of jsonOfferings) {\n            const offering = await Offering.parse(jsonOffering);\n            offerings.push(offering);\n        }\n        return offerings;\n    }\n    /**\n     * gets balances from the pfi provided\n     * @param opts - options\n     * @beta\n     */\n    static async getBalances(opts) {\n        const { pfiDid, did } = opts;\n        const pfiServiceEndpoint = await TbdexHttpClient.getPfiServiceEndpoint(pfiDid);\n        const apiRoute = `${pfiServiceEndpoint}/balances`;\n        const requestToken = await TbdexHttpClient.generateRequestToken({ requesterDid: did, pfiDid });\n        let response;\n        try {\n            response = await fetch(apiRoute, {\n                headers: {\n                    authorization: `Bearer ${requestToken}`\n                }\n            });\n        }\n        catch (e) {\n            throw new RequestError({ message: `Failed to get balances from ${pfiDid}`, recipientDid: pfiDid, url: apiRoute, cause: e });\n        }\n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new ResponseError({ statusCode: response.status, details: errorDetails, recipientDid: pfiDid, url: apiRoute });\n        }\n        const responseBody = await response.json();\n        const data = responseBody.data;\n        return data;\n    }\n    /**\n     * get a specific exchange from the pfi provided\n     * @param opts - options\n     */\n    static async getExchange(opts) {\n        const { pfiDid, exchangeId, did } = opts;\n        const pfiServiceEndpoint = await TbdexHttpClient.getPfiServiceEndpoint(pfiDid);\n        const apiRoute = `${pfiServiceEndpoint}/exchanges/${exchangeId}`;\n        const requestToken = await TbdexHttpClient.generateRequestToken({ requesterDid: did, pfiDid });\n        let response;\n        try {\n            response = await fetch(apiRoute, {\n                headers: {\n                    authorization: `Bearer ${requestToken}`\n                }\n            });\n        }\n        catch (e) {\n            throw new RequestError({ message: `Failed to get exchange from ${pfiDid}`, recipientDid: pfiDid, url: apiRoute, cause: e });\n        }\n        const messages = [];\n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new ResponseError({ statusCode: response.status, details: errorDetails, recipientDid: pfiDid, url: apiRoute });\n        }\n        const responseBody = await response.json();\n        for (let jsonMessage of responseBody.data) {\n            const message = await Parser.parseMessage(jsonMessage);\n            messages.push(message);\n        }\n        return messages;\n    }\n    // TODO: Wrap Message[] in Exchange object and verify each message\n    /**\n     * returns all exchanges created by requester\n     * @param opts - options\n     */\n    static async getExchanges(opts) {\n        const { pfiDid, filter, did } = opts;\n        const pfiServiceEndpoint = await TbdexHttpClient.getPfiServiceEndpoint(pfiDid);\n        const queryParams = filter ? `?${queryString.stringify(filter)}` : '';\n        const apiRoute = `${pfiServiceEndpoint}/exchanges${queryParams}`;\n        const requestToken = await TbdexHttpClient.generateRequestToken({ requesterDid: did, pfiDid });\n        let response;\n        try {\n            response = await fetch(apiRoute, {\n                headers: {\n                    authorization: `Bearer ${requestToken}`\n                }\n            });\n        }\n        catch (e) {\n            throw new RequestError({ message: `Failed to get exchanges from ${pfiDid}`, recipientDid: pfiDid, url: apiRoute, cause: e });\n        }\n        const exchanges = [];\n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new ResponseError({ statusCode: response.status, details: errorDetails, recipientDid: pfiDid, url: apiRoute });\n        }\n        const responseBody = await response.json();\n        for (let jsonExchange of responseBody.data) {\n            const exchange = [];\n            for (let jsonMessage of jsonExchange) {\n                const message = await Parser.parseMessage(jsonMessage);\n                exchange.push(message);\n            }\n            exchanges.push(exchange);\n        }\n        return exchanges;\n    }\n    /**\n     * returns the PFI service entry from the DID Doc of the DID provided\n     * @param did - the pfi's DID\n     */\n    static async getPfiServiceEndpoint(did) {\n        let didDocument;\n        try {\n            didDocument = await resolveDid(did);\n        }\n        catch (e) {\n            throw new InvalidDidError(e.message);\n        }\n        const [didService] = didUtils.getServices({ didDocument, type: 'PFI' });\n        if (!didService?.serviceEndpoint) {\n            throw new MissingServiceEndpointError(`${did} has no PFI service entry`);\n        }\n        return didService.serviceEndpoint;\n    }\n    /**\n    * Creates and signs a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))\n    * that's included as the value of Authorization header for requests sent to a PFI API's\n    * endpoints that require authentication\n    *\n    * JWT payload with the following claims:\n    *  * `aud`\n    *  * `iss`\n    *  * `exp`\n    *  * `iat`\n    *  * `jti` The JWT is then signed and returned.\n    *\n    * @returns the request token (JWT)\n    * @throws {@link RequestTokenSigningError} If an error occurs during the token generation.\n    */\n    static async generateRequestToken(params) {\n        const { pfiDid, requesterDid } = params;\n        const now = Date.now();\n        const exp = (now + ms('1m'));\n        const jwtPayload = {\n            aud: pfiDid,\n            iss: requesterDid.uri,\n            exp: Math.floor(exp / 1000),\n            iat: Math.floor(now / 1000),\n            jti: typeid().getSuffix()\n        };\n        try {\n            return await Jwt.sign({ signerDid: requesterDid, payload: jwtPayload });\n        }\n        catch (e) {\n            throw new RequestTokenSigningError({ message: e.message, cause: e });\n        }\n    }\n    /**\n     * Validates and verifies the integrity of a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))\n     * generated by {@link TbdexHttpClient.generateRequestToken}. Specifically:\n     *   * verifies integrity of the JWT\n     *   * ensures all required claims are present and valid.\n     *   * ensures the token has not expired\n     *   * ensures token audience matches the expected PFI DID.\n     *\n     * @returns the requester's DID as a string if the token is valid.\n     * @throws {@link RequestTokenVerificationError} If the token is invalid, expired, or has been tampered with\n     * @throws {@link RequestTokenMissingClaimsError} If the token does not contain all required claims\n     * @throws {@link RequestTokenAudienceMismatchError} If the token's `aud` property does not match the PFI's DID\n    */\n    static async verifyRequestToken(params) {\n        let result;\n        try {\n            result = await Jwt.verify({ jwt: params.requestToken });\n        }\n        catch (e) {\n            throw new RequestTokenVerificationError({ message: e.message, cause: e });\n        }\n        const { header: requestTokenHeader, payload: requestTokenPayload } = result;\n        // check to ensure all expected claims are present\n        for (let claim of requestTokenRequiredClaims) {\n            if (!requestTokenPayload[claim]) {\n                throw new RequestTokenMissingClaimsError({ message: `Request token missing ${claim} claim. Expected ${requestTokenRequiredClaims}.` });\n            }\n        }\n        // TODO: decide if we want to ensure that the expiration date is not longer than 1 minute after the issuance date\n        if (requestTokenPayload.aud !== params.pfiDid) {\n            throw new RequestTokenAudienceMismatchError({ message: 'Request token contains invalid audience. Expected aud property to be PFI DID.' });\n        }\n        const signerKid = requestTokenHeader.kid;\n        const issuerDid = requestTokenPayload.iss;\n        if (!signerKid.includes(issuerDid)) {\n            throw new RequestTokenIssuerSignerMismatchError({ message: 'Request token issuer does not match signer' });\n        }\n        return issuerDid;\n    }\n}\n", "export { RequestError } from './request-error.js';\nexport { ResponseError } from './response-error.js';\nexport { ValidationError, InvalidDidError, MissingServiceEndpointError } from './validation-error.js';\nexport { RequestTokenError, RequestTokenSigningError, RequestTokenVerificationError, RequestTokenMissingClaimsError, RequestTokenAudienceMismatchError, RequestTokenIssuerSignerMismatchError } from './request-token-error.js';\n", "/**\n * Error thrown when making HTTP requests\n * @beta\n */\nexport class RequestError extends Error {\n    /** string DID of the recipient */\n    recipientDid;\n    /** URL of the request */\n    url;\n    constructor(params) {\n        super(params.message, { cause: params.cause });\n        this.name = this.constructor.name;\n        this.recipientDid = params.recipientDid;\n        this.url = params.url;\n    }\n}\n", "/**\n * Error thrown when getting HTTP responses\n * @beta\n */\nexport class ResponseError extends Error {\n    /** HTTP status code of the error */\n    statusCode;\n    /** Array of ErrorDetails */\n    details;\n    /** String DID of the recipient of the error */\n    recipientDid;\n    /** URL where the error was thrown */\n    url;\n    constructor(params) {\n        super();\n        this.name = this.constructor.name;\n        this.statusCode = params.statusCode;\n        this.details = params.details;\n        this.recipientDid = params.recipientDid;\n        this.url = params.url;\n    }\n}\n", "/**\n * Error thrown when validating data\n * @beta\n */\nexport class ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n/**\n * Error thrown when a DID is invalid\n * @beta\n */\nexport class InvalidDidError extends ValidationError {\n}\n/**\n * Error thrown when a PFI's service endpoint can't be found\n * @beta\n */\nexport class MissingServiceEndpointError extends ValidationError {\n}\n", "// TODO: decide whether this should be a ValidationError\n/**\n   * Error thrown for request token related things\n   * @beta\n   */\nexport class RequestTokenError extends Error {\n    constructor(params) {\n        super(params.message, { cause: params.cause });\n        this.name = this.constructor.name;\n    }\n}\n/**\n   * Error thrown when a request token cannot be signed\n   * @beta\n   */\nexport class RequestTokenSigningError extends RequestTokenError {\n}\n/**\n   * Error thrown when a request token cannot be verified\n   * @beta\n   */\nexport class RequestTokenVerificationError extends RequestTokenError {\n}\n/**\n   * Error thrown when a request token is missing required claims\n   * @beta\n   */\nexport class RequestTokenMissingClaimsError extends RequestTokenError {\n}\n/**\n   * Error thrown when a request token aud does not match the PFI did for which its intended\n   * @beta\n   */\nexport class RequestTokenAudienceMismatchError extends RequestTokenError {\n}\n/**\n   * Error thrown when a request token payload iss does not match request token header kid\n   * @beta\n   */\nexport class RequestTokenIssuerSignerMismatchError extends RequestTokenError {\n}\n", "export * from './types/did-core.js';\nexport * from './types/did-resolution.js';\nexport type * from './types/multibase.js';\nexport type * from './types/portable-did.js';\n\nexport * from './did.js';\nexport * from './did-error.js';\nexport * from './bearer-did.js';\n\nexport * from './methods/did-dht.js';\nexport * from './methods/did-ion.js';\nexport * from './methods/did-jwk.js';\nexport * from './methods/did-key.js';\nexport * from './methods/did-method.js';\nexport * from './methods/did-web.js';\n\nexport * from './resolver/resolver-cache-level.js';\nexport * from './resolver/resolver-cache-noop.js';\nexport * from './resolver/universal-resolver.js';\n\nexport * as utils from './utils.js';", "import { Jwk } from '@web5/crypto';\n\n/**\n * Represents metadata related to the process of DID dereferencing.\n *\n * This type includes fields that provide information about the outcome of a DID dereferencing operation,\n * including the content type of the returned resource and any errors that occurred during the dereferencing process.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-metadata | DID Core Specification, § DID URL Dereferencing Metadata}\n */\nexport type DidDereferencingMetadata = {\n  /**\n   * The Media Type of the returned contentStream SHOULD be expressed using this property if\n   * dereferencing is successful.\n   */\n  contentType?: string;\n\n  /**\n   * The error code from the dereferencing process. This property is REQUIRED when there is an\n   * error in the dereferencing process. The value of this property MUST be a single keyword\n   * expressed as an ASCII string. The possible property values of this field SHOULD be registered\n   * in the {@link https://www.w3.org/TR/did-spec-registries/ | DID Specification Registries}.\n   * The DID Core specification defines the following common error values:\n   *\n   * - `invalidDidUrl`: The DID URL supplied to the DID URL dereferencing function does not conform\n   *                    to valid syntax.\n   * - `notFound`: The DID URL dereferencer was unable to find the `contentStream` resulting from\n   *               this dereferencing request.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-metadata | DID Core Specification, § DID URL Dereferencing Metadata}\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents the options that can be used during the process of DID dereferencing.\n *\n * This interface allows the caller to specify preferences and additional parameters for the DID\n * dereferencing operation.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing-options}\n */\nexport interface DidDereferencingOptions {\n  /** The Media Type that the caller prefers for contentStream. */\n  accept?: string;\n\n  /** Additional properties used during DID dereferencing. */\n  [key: string]: any;\n}\n\n/**\n * Represents the result of a DID dereferencing operation.\n *\n * This type encapsulates the outcomes of the DID URL dereferencing process, including metadata\n * about the dereferencing operation, the content stream retrieved (if any), and metadata about the\n * content stream.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core Specification, § DID URL Dereferencing}\n */\nexport type DidDereferencingResult = {\n  /**\n   * A metadata structure consisting of values relating to the results of the DID URL dereferencing\n   * process. This structure is REQUIRED, and in the case of an error in the dereferencing process,\n   * this MUST NOT be empty. Properties defined by this specification are in 7.2.2 DID URL\n   * Dereferencing Metadata. If the dereferencing is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   */\n  dereferencingMetadata: DidDereferencingMetadata;\n\n  /**\n   * If the `dereferencing` function was called and successful, this MUST contain a resource\n   * corresponding to the DID URL. The contentStream MAY be a resource such as:\n   *   - a DID document that is serializable in one of the conformant representations\n   *   - a Verification Method\n   *   - a service.\n   *   - any other resource format that can be identified via a Media Type and obtained through the\n   *     resolution process.\n   *\n   * If the dereferencing is unsuccessful, this value MUST be empty.\n   */\n  contentStream: DidResource | null;\n\n  /**\n   * If the dereferencing is successful, this MUST be a metadata structure, but the structure MAY be\n   * empty. This structure contains metadata about the contentStream. If the contentStream is a DID\n   * document, this MUST be a didDocumentMetadata structure as described in DID Resolution. If the\n   * dereferencing is unsuccessful, this output MUST be an empty metadata structure.\n   */\n  contentMetadata: DidDocumentMetadata;\n}\n\n/**\n * A set of data describing the Decentralized Identifierr (DID) subject.\n *\n * A DID Document contains information associated with the DID, such as cryptographic public keys\n * and service endpoints, enabling trustable interactions associated with the DID subject.\n *\n * - Cryptographic public keys - Used by the DID subject or a DID delegate to authenticate itself\n *                               and prove its association with the DID.\n * - Service endpoints - Used to communicate or interact with the DID subject or associated\n *                       entities. Examples include discovery, agent, social networking, file\n *                       storage, and verifiable credential repository services.\n *\n * A DID Document can be retrieved by resolving a DID, as described in\n * {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core Specification, § DID Resolution}.\n */\nexport interface DidDocument {\n  /**\n   * A JSON-LD context link, which provides a JSON-LD processor with the information necessary to\n   * interpret the DID document JSON. The default context URL is 'https://www.w3.org/ns/did/v1'.\n   */\n  '@context'?: 'https://www.w3.org/ns/did/v1' | string | (string | Record<string, any>)[];\n\n  /**\n   * The DID Subject to which this DID Document pertains.\n   *\n   * The `id` property is REQUIRED and must be a valid DID.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-subject | DID Core Specification, § DID Subject}\n   */\n  id: string;\n\n  /**\n   * A DID subject can have multiple identifiers for different purposes, or at different times.\n   * The assertion that two or more DIDs (or other types of URI) refer to the same DID subject can\n   * be made using the `alsoKnownAs` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#also-known-as | DID Core Specification, § Also Known As}\n   */\n  alsoKnownAs?: string[];\n\n  /**\n   * A DID controller is an entity that is authorized to make changes to a DID document. Typically,\n   * only the DID Subject (i.e., the value of `id` property in the DID document) is authoritative.\n   * However, another DID can be specified as the DID controller, and when doing so, any\n   * verification methods contained in the DID document for the other DID should be accepted as\n   * authoritative.  In other words, proofs created by the controller DID should be considered\n   * equivalent to proofs created by the DID Subject.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-controller | DID Core Specification, § DID Controller}\n   */\n  controller?: string | string[];\n\n  /**\n   * A DID document can express verification methods, such as cryptographic public keys, which can\n   * be used to authenticate or authorize interactions with the DID subject or associated parties.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   */\n  verificationMethod?: DidVerificationMethod[];\n\n  /**\n   * The `assertionMethod` verification relationship is used to specify how the DID subject is\n   * expected to express claims, such as for the purposes of issuing a Verifiable Credential.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#assertion | DID Core Specification, § Assertion}\n   */\n  assertionMethod?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `authentication` verification relationship is used to specify how the DID subject is expected\n   * to be authenticated, for purposes such as logging into a website or engaging in any sort of\n   * challenge-response protocol.\n\n   * @see {@link https://www.w3.org/TR/did-core/#authentication | DID Core Specification, § Authentication}\n   */\n  authentication?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `keyAgreement` verification relationship is used to specify how an entity can generate\n   * encryption material in order to transmit confidential  information intended for the DID\n   * subject, such as for the purposes of establishing a secure communication channel with the\n   * recipient.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#key-agreement | DID Core Specification, § Key Agreement}\n   */\n  keyAgreement?: (DidVerificationMethod | string)[];\n\n  /**\n   *  The `capabilityDelegation` verification relationship is used to specify a mechanism that might\n   * be used by the DID subject to delegate a cryptographic capability to another party, such as\n   * delegating the authority to access a specific HTTP API to a subordinate.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-delegation | DID Core Specification, § Capability Delegation}\n   */\n  capabilityDelegation?: (DidVerificationMethod | string)[];\n\n  /**\n   * The `capabilityInvocation` verification relationship is used to specify a verification method\n   * that might be used by the DID subject to invoke a cryptographic capability, such as the\n   * authorization to update the DID Document.\n   */\n  capabilityInvocation?: (DidVerificationMethod | string)[];\n\n  /**\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   */\n  service?: DidService[];\n}\n\n/**\n * Represents metadata about the DID document resulting from a DID resolution operation.\n *\n * This metadata typically does not change between invocations of the `resolve` and\n * `resolveRepresentation` functions unless the DID document changes, as it represents metadata\n * about the DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-document-metadata | DID Core Specification, § DID Document Metadata}\n */\nexport interface DidDocumentMetadata {\n  /**\n   * Timestamp of the Create operation.\n   *\n   * The value of the property MUST be a string formatted as an XML Datetime normalized to\n   * UTC 00:00:00 and  without sub-second decimal precision. For example: `2020-12-20T19:17:47Z`.\n   */\n  created?: string;\n\n  /**\n   * Timestamp of the last Update operation for the document version which was resolved.\n   *\n   * The value of the property MUST follow the same formatting rules as the `created` property.\n   * The `updated` property is omitted if an Update operation has never been performed on the DID\n   * document. If an `updated` property exists, it can be the same value as the `created` property\n   * when the difference between the two timestamps is less than one second.\n   */\n  updated?: string;\n\n  /**\n   * Whether the DID has been deactivated.\n   *\n   * If a DID has been deactivated, DID document metadata MUST include this property with the\n   * boolean value `true`. If a DID has not been deactivated, this properrty is OPTIONAL, but if\n   * present, MUST have the boolean value `false`.\n   */\n  deactivated?: boolean;\n\n  /**\n   * Version ID of the last Update operation for the document version which was resolved.\n   */\n  versionId?: string;\n\n  /**\n   * Timestamp of the next Update operation if the resolved document version is not the latest\n   * version of the document.\n   *\n   * The value of the property MUST follow the same formatting rules as the `created` property.\n   */\n  nextUpdate?: string;\n\n  /**\n   * Version ID of the next Update operation if the resolved document version is not the latest\n   * version of the document.\n   */\n  nextVersionId?: string;\n\n  /**\n   * A DID method can define different forms of a DID that are logically equivalent. An example is\n   * when a DID takes one form prior to registration in a verifiable data registry and another form\n   * after such registration. In this case, the DID method specification might need to express one\n   * or more DIDs that are logically equivalent to the resolved DID as a property of the DID\n   * document. This is the purpose of the `equivalentId` property.\n   *\n   * A requesting party is expected to retain the values from the id and equivalentId properties to\n   * ensure any subsequent interactions with any of the values they contain are correctly handled as\n   * logically equivalent (e.g., retain all variants in a database so an interaction with any one\n   * maps to the same underlying account).\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-equivalentid | DID Core Specification, § DID Document Metadata}\n  */\n equivalentId?: string[];\n\n /**\n  * The `canonicalId` property is identical to the `equivalentId` property except:\n  * - it is associated with a single value rather than a set\n  * - the DID is defined to be the canonical ID for the DID subject within the scope of the\n  *   containing DID document.\n  *\n  * A requesting party is expected to use the `canonicalId` value as its primary ID value for the\n  * DID subject and treat all other equivalent values as secondary aliases (e.g., update\n  * corresponding primary references in their systems to reflect the new canonical ID directive).\n  *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-canonicalid | DID Core Specification, § DID Document Metadata}\n   */\n  canonicalId?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents metadata related to the result of a DID resolution operation.\n *\n * This type includes fields that provide information about the outcome of a DID resolution process,\n * including the content type of the returned DID document and any errors that occurred during the\n * resolution process.\n *\n * This metadata typically changes between invocations of the `resolve` and `resolveRepresentation`\n * functions, as it represents data about the resolution process itself.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-metadata | DID Core Specification, § DID Resolution Metadata}\n */\nexport type DidResolutionMetadata = {\n  /**\n   * The Media Type of the returned `didDocumentStream`.\n   *\n   * This property is REQUIRED if resolution is successful and if the `resolveRepresentation`\n   * function was called. This property MUST NOT be present if the `resolve` function was called.\n   * The value of this property MUST be an ASCII string that is the Media Type of the conformant\n   * representations. The caller of the `resolveRepresentation` function MUST use this value when\n   * determining how to parse and process the `didDocumentStream` returned by this function into the\n   * data model.\n   */\n  contentType?: string;\n\n  /**\n   * An error code indicating issues encountered during the DID Resolution or DID URL\n   * Dereferencing process.\n   *\n   * Defined error codes include:\n   *   - `internalError`: An unexpected error occurred during DID Resolution or DID URL\n   *                      dereferencing process.\n   *   - `invalidDid`: The provided DID is invalid.\n   *   - `methodNotSupported`: The DID method specified is not supported.\n   *   - `notFound`: The DID or DID URL does not exist.\n   *   - `representationNotSupported`: The DID document representation is not supported.\n   *   - Custom error codes can also be provided as strings.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-resolution-metadata | DID Core Specification, § DID Resolution Metadata}\n   * @see {@link https://www.w3.org/TR/did-spec-registries/#error | DID Specification Registries, § Error}\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID Resolution.\n  [key: string]: any;\n};\n\n/**\n * DID Resolution input metadata.\n*\n* The DID Core specification defines the following common properties:\n*  - `accept`: The Media Type that the caller prefers for the returned representation of the DID\n*              Document.\n*\n* The possible properties within this structure and their possible values are registered in the\n* {@link https://www.w3.org/TR/did-spec-registries/#did-resolution-options | DID Specification Registries}.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-options | DID Core Specification, § DID Resolution Options}\n */\nexport interface DidResolutionOptions {\n  /**\n   * The Media Type that the caller prefers for the returned representation of the DID Document.\n   *\n   * This property is REQUIRED if the `resolveRepresentation` function was called. This property\n   * MUST NOT be present if the `resolve` function was called.\n   *\n   * The value of this property MUST be an ASCII string that is the Media Type of the conformant\n   * representations. The caller of the `resolveRepresentation` function MUST use this value when\n   * determining how to parse and process the `didDocumentStream` returned by this function into the\n   * data model.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-resolution-options | DID Core Specification, § DID Resolution Options}\n   */\n  accept?: string;\n\n  // Additional properties used during DID Resolution.\n  [key: string]: any;\n}\n\n/**\n * Represents the result of a Decentralized Identifier (DID) resolution operation.\n *\n * This type encapsulates the complete outcome of resolving a DID, including the resolution metadata,\n * the DID document (if resolution is successful), and metadata about the DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core Specification, § DID Resolution}\n */\nexport type DidResolutionResult = {\n  /**\n   * A JSON-LD context link, which provides the JSON-LD processor with the information necessary to\n   * interpret the resolution result JSON. The default context URL is\n   * 'https://w3id.org/did-resolution/v1'.\n   */\n  '@context'?: 'https://w3id.org/did-resolution/v1' | string | (string | Record<string, any>)[];\n\n  /**\n   * A metadata structure consisting of values relating to the results of the DID resolution\n   * process.\n   *\n   * This structure is REQUIRED, and in the case of an error in the resolution process,\n   * this MUST NOT be empty. If the resolution is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-didresolutionmetadata | DID Core Specification, § DID Resolution Metadata}\n   */\n  didResolutionMetadata: DidResolutionMetadata;\n\n  /**\n   * The DID document resulting from the resolution process, if successful.\n   *\n   * If the `resolve` function was called and successful, this MUST contain a DID document\n   * corresponding to the DID. If the resolution is unsuccessful, this value MUST be empty.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  didDocument: DidDocument | null;\n\n  /**\n   * Metadata about the DID Document.\n   *\n   * This structure contains information about the DID Document like creation and update timestamps,\n   * deactivation status, versioning information, and other details relevant to the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocumentmetadata | DID Core Specification, § DID Document Metadata}\n   */\n  didDocumentMetadata: DidDocumentMetadata;\n};\n\n/**\n * A DID Resource is either a DID Document, a DID Verification method or a DID Service\n */\nexport type DidResource = DidDocument | DidService | DidVerificationMethod;\n\n/**\n * Services are used in DID documents to express ways of communicating with the DID subject or\n * associated entities. A service can be any type of service the DID subject wants to advertise.\n *\n * @see {@link https://www.w3.org/TR/did-core/#services}\n */\nexport type DidService = {\n  /**\n   * Identifier of the service.\n   *\n   * The `id` property is REQUIRED. It MUST be a URI conforming to\n   * {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986} and MUST be unique within the\n   * DID document.\n   */\n  id: string;\n\n  /**\n   * The type of service being described.\n   *\n   * The `type` property is REQUIRED. It MUST be a string. To maximize interoperability, the value\n   * SHOULD be registered in the\n   * {@link https://www.w3.org/TR/did-spec-registries/ | DID Specification Registries}. Examples of\n   * service types can be found in\n   * {@link https://www.w3.org/TR/did-spec-registries/#service-types | § Service Types}.\n   */\n  type: string;\n\n  /**\n   * A URI that can be used to interact with the DID service.\n   *\n   * The value of the `serviceEndpoint` property MUST be a string, an object containing key/value\n   * pairs, or an array composed of strings or objects. All string values MUST be valid URIs\n   * conforming to {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986}.\n   */\n  serviceEndpoint: DidServiceEndpoint | DidServiceEndpoint[];\n\n  // DID methods MAY include additional service properties.\n  [key: string]: any;\n};\n\n/**\n * A service endpoint is a URI (Uniform Resource Identifier) that can be used to interact with the\n * DID service.\n *\n * The value of the `serviceEndpoint` property MUST be a string or an object containing key/value\n * pairs. All string values MUST be valid URIs conforming to\n * {@link https://datatracker.ietf.org/doc/html/rfc3986 | RFC3986}.\n *\n * @see {@link https://www.w3.org/TR/did-core/#dfn-serviceendpoint | RFC3986, § 5.4 Services}\n */\nexport type DidServiceEndpoint = string | Record<string, any>;\n\n/**\n * Represents a verification method in the context of a DID document.\n *\n * A verification method is a mechanism by which a DID controller can cryptographically assert proof\n * of ownership or control over a DID or DID document. This can include, but is not limited to,\n * cryptographic public keys or other data that can be used to authenticate or authorize actions.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n */\nexport interface DidVerificationMethod {\n  /**\n   * The identifier of the verification method, which must be a URI.\n   */\n  id: string;\n\n  /**\n   * The type of the verification method.\n   *\n   * To maximize interoperability this value SHOULD be one of the valid verification method types\n   * registered in the {@link https://www.w3.org/TR/did-spec-registries/#verification-method-types | DID Specification Registries}.\n   */\n  type: string;\n\n  /**\n   * The DID of the entity that controls this verification method.\n   */\n  controller: string;\n\n  /**\n   * (Optional) A public key in JWK format.\n   *\n   * A JSON Web Key (JWK) that conforms to {@link https://datatracker.ietf.org/doc/html/rfc7517 | RFC 7517}.\n   */\n  publicKeyJwk?: Jwk;\n\n  /**\n   * (Optional) A public key in Multibase format.\n   *\n   * A multibase key that conforms to the draft\n   * {@link https://datatracker.ietf.org/doc/draft-multiformats-multibase/ | Multibase specification}.\n   */\n  publicKeyMultibase?: string;\n}\n\n/**\n * Represents the various verification relationships defined in a DID document.\n *\n * These verification relationships indicate the intended usage of verification methods within a DID\n * document. Each relationship signifies a different purpose or context in which a verification\n * method can be used, such as authentication, assertionMethod, keyAgreement, capabilityDelegation,\n * and capabilityInvocation. The array provides a standardized set of relationship names for\n * consistent referencing and implementation across different DID methods.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-relationships | DID Core Specification, § Verification Relationships}\n */\nexport enum DidVerificationRelationship {\n  /**\n   * Specifies how the DID subject is expected to be authenticated. This is commonly used for\n   * purposes like logging into a website or participating in challenge-response protocols.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#authentication | DID Core Specification, § Authentication}\n   */\n  authentication = 'authentication',\n\n  /**\n   * Specifies how the DID subject is expected to express claims, such as for issuing Verifiable\n   * Credentials. This relationship is typically used when the DID subject is the issuer of a\n   * credential.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#assertion | DID Core Specification, § Assertion}\n   */\n  assertionMethod = 'assertionMethod',\n\n  /**\n   * Specifies how an entity can generate encryption material to communicate confidentially with the\n   * DID subject. Often used in scenarios requiring secure communication channels.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#key-agreement | DID Core Specification, § Key Agreement}\n   */\n  keyAgreement = 'keyAgreement',\n\n  /**\n   * Specifies a mechanism used by the DID subject to delegate a cryptographic capability to another\n   * party. This can include delegating access to a specific resource or API.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-delegation | DID Core Specification, § Capability Delegation}\n   */\n  capabilityDelegation = 'capabilityDelegation',\n\n  /**\n   * Specifies a verification method used by the DID subject to invoke a cryptographic capability.\n   * This is frequently associated with authorization actions, like updating the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#capability-invocation | DID Core Specification, § Capability Invocation}\n   */\n  capabilityInvocation = 'capabilityInvocation'\n}", "import type { KeyValueStore } from '@web5/common';\n\nimport type { DidDereferencingOptions, DidDereferencingResult, DidResolutionOptions, DidResolutionResult } from './did-core.js';\n\n/**\n * Represents the interface for resolving a Decentralized Identifier (DID) to its corresponding DID\n * document.\n *\n * The `DidResolver` interface defines a single method, `resolve`, which takes a DID URL as input\n * and returns a `Promise` that resolves to a `DidResolutionResult`. This result contains the DID\n * document associated with the given DID, along with metadata about the resolution process.\n *\n * Implementations of this interface are expected to support resolution of DIDs according to the\n * specific rules and methods defined by the DID scheme in use.\n *\n * More information on DID URL dereferencing can be found in the\n * {@link https://www.w3.org/TR/did-core/#did-resolution | DID Core specification}.\n *\n * @example\n * ```typescript\n * const resolutionResult = await didResolver.resolve('did:example:123456789abcdefghi');\n * ```\n */\nexport interface DidResolver {\n  /**\n   * Resolves a DID URI to a DID document and associated metadata.\n   *\n   * This function should resolve the DID URI in accordance with the relevant DID method\n   * specification, using the provided `options`.\n   *\n   * @param didUri - The DID URI to be resolved.\n   * @param options - Optional. The options used for resolving the DID.\n   * @returns A {@link DidResolutionResult} object containing the DID document and metadata or an\n   *          error.\n   */\n  resolve(didUrl: string, options?: DidResolutionOptions): Promise<DidResolutionResult>;\n}\n\n/**\n * Interface for cache implementations used by to store resolved DID documents.\n */\nexport interface DidResolverCache extends KeyValueStore<string, DidResolutionResult | void> {}\n\n/**\n * Represents the interface for dereferencing a DID URL to a specific resource within a DID\n * document.\n *\n * The `DidUrlDereferencer` interface defines a single method, `dereference`, which takes a DID URL\n * as input and returns a `Promise` that resolves to a `DidDereferencingResult`. This result\n * includes the dereferenced resource (if found) and metadata about the dereferencing process.\n *\n * Dereferencing a DID URL involves parsing the URL to identify the specific part of the DID\n * document being referenced, which could be a verification method, a service endpoint, or the\n * entire document itself.\n *\n * Implementations of this interface must adhere to the dereferencing mechanisms defined in the DID\n * Core specifications, handling various components of the DID URL including the DID itself, path,\n * query, and fragment.\n *\n * More information on DID URL dereferencing can be found in the\n * {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core specification}.\n *\n * @example\n * ```typescript\n * const dereferenceResult = await didUrlDereferencer.dereference('did:example:123456789abcdefghi#keys-1');\n * ```\n */\nexport interface DidUrlDereferencer {\n  /**\n   * Dereferences a DID (Decentralized Identifier) URL to a corresponding DID resource.\n   *\n   * This method interprets the DID URL's components, which include the DID method, method-specific\n   * identifier, path, query, and fragment, and retrieves the related resource as per the DID Core\n   * specifications.\n   *\n   * @param didUrl - The DID URL string to dereference.\n   * @param options - Input options to the dereference function. Optional.\n   * @returns a {@link DidDereferencingResult}\n   */\n  dereference(didUrl: string, options?: DidDereferencingOptions): Promise<DidDereferencingResult>;\n}\n\n/**\n * A constant representing an empty DID Resolution Result. This object is used as the basis for a\n * result of DID resolution and is typically augmented with additional properties by the\n * DID method resolver.\n */\nexport const EMPTY_DID_RESOLUTION_RESULT: DidResolutionResult = {\n  '@context'            : 'https://w3id.org/did-resolution/v1',\n  didResolutionMetadata : {},\n  didDocument           : null,\n  didDocumentMetadata   : {},\n};", "/**\n * The `Did` class represents a Decentralized Identifier (DID) Uniform Resource Identifier (URI).\n *\n * This class provides a method for parsing a DID URI string into its component parts, as well as a\n * method for serializing a DID URI object into a string.\n *\n * A DID URI is composed of the following components:\n * - scheme\n * - method\n * - id\n * - path\n * - query\n * - fragment\n * - params\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-syntax | DID Core Specification, § DID Syntax}\n */\nexport class Did {\n  /** Regular expression pattern for matching the method component of a DID URI. */\n  static readonly METHOD_PATTERN = '([a-z0-9]+)';\n  /** Regular expression pattern for matching percent-encoded characters in a method identifier. */\n  static readonly PCT_ENCODED_PATTERN = '(?:%[0-9a-fA-F]{2})';\n  /** Regular expression pattern for matching the characters allowed in a method identifier. */\n  static readonly ID_CHAR_PATTERN = `(?:[a-zA-Z0-9._-]|${Did.PCT_ENCODED_PATTERN})`;\n  /** Regular expression pattern for matching the method identifier component of a DID URI. */\n  static readonly METHOD_ID_PATTERN = `((?:${Did.ID_CHAR_PATTERN}*:)*(${Did.ID_CHAR_PATTERN}+))`;\n  /** Regular expression pattern for matching the path component of a DID URI. */\n  static readonly PATH_PATTERN = `(/[^#?]*)?`;\n  /** Regular expression pattern for matching the query component of a DID URI. */\n  static readonly QUERY_PATTERN = `([?][^#]*)?`;\n  /** Regular expression pattern for matching the fragment component of a DID URI. */\n  static readonly FRAGMENT_PATTERN = `(#.*)?`;\n  /** Regular expression pattern for matching all of the components of a DID URI. */\n  static readonly DID_URI_PATTERN = new RegExp(\n    `^did:(?<method>${Did.METHOD_PATTERN}):(?<id>${Did.METHOD_ID_PATTERN})(?<path>${Did.PATH_PATTERN})(?<query>${Did.QUERY_PATTERN})(?<fragment>${Did.FRAGMENT_PATTERN})$`\n  );\n\n  /**\n   * A string representation of the DID.\n   *\n   * A DID is a URI composed of three parts: the scheme `did:`, a method identifier, and a unique,\n   * method-specific identifier specified by the DID method.\n   *\n   * @example\n   * did:dht:h4d3ixkwt6q5a455tucw7j14jmqyghdtbr6cpiz6on5oxj5bpr3o\n   */\n  uri: string;\n\n  /**\n   * The name of the DID method.\n   *\n   * Examples of DID method names are `dht`, `jwk`, and `web`, among others.\n   */\n  method: string;\n\n  /**\n   * The DID method identifier.\n   *\n   * @example\n   * h4d3ixkwt6q5a455tucw7j14jmqyghdtbr6cpiz6on5oxj5bpr3o\n   */\n  id: string;\n\n  /**\n      * Optional path component of the DID URI.\n      *\n      * @example\n      * did:web:tbd.website/path\n      */\n  path?: string;\n\n  /**\n      * Optional query component of the DID URI.\n      *\n      * @example\n      * did:web:tbd.website?versionId=1\n      */\n  query?: string;\n\n  /**\n   * Optional fragment component of the DID URI.\n   *\n   * @example\n   * did:web:tbd.website#key-1\n   */\n  fragment?: string;\n\n  /**\n    * Optional query parameters in the DID URI.\n    *\n    * @example\n    * did:web:tbd.website?service=files&relativeRef=/whitepaper.pdf\n    */\n  params?: Record<string, string>;\n\n  /**\n   * Constructs a new `Did` instance from individual components.\n   *\n   * @param params - An object containing the parameters to be included in the DID URI.\n   * @param params.method - The name of the DID method.\n   * @param params.id - The DID method identifier.\n   * @param params.path - Optional. The path component of the DID URI.\n   * @param params.query - Optional. The query component of the DID URI.\n   * @param params.fragment - Optional. The fragment component of the DID URI.\n   * @param params.params - Optional. The query parameters in the DID URI.\n   */\n  constructor({ method, id, path, query, fragment, params }: {\n    method: string,\n    id: string,\n    path?: string,\n    query?: string,\n    fragment?: string,\n    params?: Record<string, string>\n  }) {\n    this.uri = `did:${method}:${id}`;\n    this.method = method;\n    this.id = id;\n    this.path = path;\n    this.query = query;\n    this.fragment = fragment;\n    this.params = params;\n  }\n\n  /**\n   * Parses a DID URI string into its individual components.\n   *\n   * @example\n   * ```ts\n   * const did = Did.parse('did:example:123?service=agent&relativeRef=/credentials#degree');\n   *\n   * console.log(did.uri)      // Output: 'did:example:123'\n   * console.log(did.method)   // Output: 'example'\n   * console.log(did.id)       // Output: '123'\n   * console.log(did.query)    // Output: 'service=agent&relativeRef=/credentials'\n   * console.log(did.fragment) // Output: 'degree'\n   * console.log(did.params)   // Output: { service: 'agent', relativeRef: '/credentials' }\n   * ```\n   *\n   * @params didUri - The DID URI string to be parsed.\n   * @returns A `Did` object representing the parsed DID URI, or `null` if the input string is not a valid DID URI.\n   */\n  static parse(didUri: string): Did | null {\n    // Return null if the input string is empty or not provided.\n    if (!didUri) return null;\n\n    // Execute the regex pattern on the input string to extract URI components.\n    const match = Did.DID_URI_PATTERN.exec(didUri);\n\n    // If the pattern does not match, or if the required groups are not found, return null.\n    if (!match || !match.groups) return null;\n\n    // Extract the method, id, params, path, query, and fragment from the regex match groups.\n    const { method, id, path, query, fragment } = match.groups;\n\n    // Initialize a new Did object with the uri, method and id.\n    const did: Did = {\n      uri: `did:${method}:${id}`,\n      method,\n      id,\n    };\n\n    // If path is present, add it to the Did object.\n    if (path) did.path = path;\n\n    // If query is present, add it to the Did object, removing the leading '?'.\n    if (query) did.query = query.slice(1);\n\n    // If fragment is present, add it to the Did object, removing the leading '#'.\n    if (fragment) did.fragment = fragment.slice(1);\n\n    // If query params are present, parse them into a key-value object and add to the Did object.\n    if (query) {\n      const parsedParams = {} as Record<string, string>;\n      // Split the query string by '&' to get individual parameter strings.\n      const paramPairs = query.slice(1).split('&');\n      for (const pair of paramPairs) {\n        // Split each parameter string by '=' to separate keys and values.\n        const [key, value] = pair.split('=');\n        parsedParams[key] = value;\n      }\n      did.params = parsedParams;\n    }\n\n    return did;\n  }\n}", "/**\n * A custom error class for DID-related errors.\n */\nexport class DidError extends Error {\n  /**\n   * Constructs an instance of DidError, a custom error class for handling DID-related errors.\n   *\n   * @param code - A {@link DidErrorCode} representing the specific type of error encountered.\n   * @param message - A human-readable description of the error.\n   */\n  constructor(public code: DidErrorCode, message: string) {\n    super(message);\n    this.name = 'DidError';\n\n    // Ensures that instanceof works properly, the correct prototype chain when using inheritance,\n    // and that V8 stack traces (like Chrome, Edge, and Node.js) are more readable and relevant.\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    // Captures the stack trace in V8 engines (like Chrome, Edge, and Node.js).\n    // In non-V8 environments, the stack trace will still be captured.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, DidError);\n    }\n  }\n}\n\n/**\n * An enumeration of possible DID error codes.\n */\nexport enum DidErrorCode {\n  /** The DID supplied does not conform to valid syntax. */\n  InvalidDid = 'invalidDid',\n\n  /** The supplied method name is not supported by the DID method and/or DID resolver implementation. */\n  MethodNotSupported = 'methodNotSupported',\n\n  /** An unexpected error occurred during the requested DID operation. */\n  InternalError = 'internalError',\n\n  /** The DID document supplied does not conform to valid syntax. */\n  InvalidDidDocument = 'invalidDidDocument',\n\n  /** The byte length of a DID document does not match the expected value. */\n  InvalidDidDocumentLength = 'invalidDidDocumentLength',\n\n  /** The DID URL supplied to the dereferencing function does not conform to valid syntax. */\n  InvalidDidUrl = 'invalidDidUrl',\n\n  /** An invalid public key is detected during a DID operation. */\n  InvalidPublicKey = 'invalidPublicKey',\n\n  /** The byte length of a public key does not match the expected value. */\n  InvalidPublicKeyLength = 'invalidPublicKeyLength',\n\n  /** An invalid public key type was detected during a DID operation. */\n  InvalidPublicKeyType = 'invalidPublicKeyType',\n\n  /** Verification of a signature failed during a DID operation. */\n  InvalidSignature = 'invalidSignature',\n\n  /** The DID resolver was unable to find the DID document resulting from the resolution request. */\n  NotFound = 'notFound',\n\n  /**\n   * The representation requested via the `accept` input metadata property is not supported by the\n   * DID method and/or DID resolver implementation.\n   */\n  RepresentationNotSupported = 'representationNotSupported',\n\n  /** The type of a public key is not supported by the DID method and/or DID resolver implementation. */\n  UnsupportedPublicKeyType = 'unsupportedPublicKeyType',\n}", "export * from './local-key-manager.js';\nexport * as utils from './utils.js';\n\nexport * from './algorithms/aes-ctr.js';\nexport * from './algorithms/aes-gcm.js';\nexport * from './algorithms/crypto-algorithm.js';\nexport * from './algorithms/ecdsa.js';\nexport * from './algorithms/eddsa.js';\nexport * from './algorithms/sha-2.js';\n\nexport * from './jose/jwe.js';\nexport * from './jose/jwk.js';\nexport * from './jose/jws.js';\nexport * from './jose/jwt.js';\nexport * from './jose/utils.js';\n\nexport * from './primitives/aes-ctr.js';\nexport * from './primitives/aes-gcm.js';\nexport * from './primitives/concat-kdf.js';\nexport * from './primitives/ed25519.js';\nexport * from './primitives/secp256r1.js';\nexport * from './primitives/pbkdf2.js';\nexport * from './primitives/secp256k1.js';\nexport * from './primitives/sha256.js';\nexport * from './primitives/x25519.js';\nexport * from './primitives/xchacha20.js';\nexport * from './primitives/xchacha20-poly1305.js';\n\nexport type * from './types/cipher.js';\nexport type * from './types/crypto-api.js';\nexport type * from './types/hasher.js';\nexport type * from './types/identifier.js';\nexport type * from './types/key-compressor.js';\nexport type * from './types/key-converter.js';\nexport type * from './types/key-deriver.js';\nexport type * from './types/key-generator.js';\nexport type * from './types/key-io.js';\nexport type * from './types/key-wrapper.js';\nexport type * from './types/params-direct.js';\nexport type * from './types/params-enclosed.js';\nexport type * from './types/params-kms.js';\nexport type * from './types/signer.js';", "export type * from './types.js';\n\nexport * from './cache.js';\nexport * from './convert.js';\nexport * from './multicodec.js';\nexport * from './object.js';\nexport * from './stores.js';\nexport * from './stream.js';\nexport * from './stream-node.js';\nexport * from './type-utils.js';", "import TTLCache from '@isaacs/ttlcache';\nexport { TTLCache as TtlCache };", "/**\n * Represents an array of a fixed length, preventing modifications to its size.\n *\n * The `FixedLengthArray` utility type transforms a standard array into a variant where\n * methods that could alter the length are omitted. It leverages TypeScript's advanced types,\n * such as conditional types and mapped types, to ensure that the array cannot be resized\n * through methods like `push`, `pop`, `splice`, `shift`, and `unshift`. The utility type\n * maintains all other characteristics of a standard array, including indexing, iteration,\n * and type checking for its elements.\n *\n * Note: The type does not prevent direct assignment to indices, even if it would exceed\n * the original length. However, such actions would lead to TypeScript type errors.\n *\n * @example\n * ```ts\n * // Declare a variable with a type of fixed-length array of three strings.\n * let myFixedLengthArray: FixedLengthArray< [string, string, string]>;\n *\n * // Array declaration tests\n * myFixedLengthArray = [ 'a', 'b', 'c' ];  // OK\n * myFixedLengthArray = [ 'a', 'b', 123 ];  // TYPE ERROR\n * myFixedLengthArray = [ 'a' ];            // LENGTH ERROR\n * myFixedLengthArray = [ 'a', 'b' ];       // LENGTH ERROR\n *\n * // Index assignment tests\n * myFixedLengthArray[1] = 'foo';           // OK\n * myFixedLengthArray[1000] = 'foo';        // INVALID INDEX ERROR\n *\n * // Methods that mutate array length\n * myFixedLengthArray.push('foo');          // MISSING METHOD ERROR\n * myFixedLengthArray.pop();                // MISSING METHOD ERROR\n *\n * // Direct length manipulation\n * myFixedLengthArray.length = 123;         // READ-ONLY ERROR\n *\n * // Destructuring\n * let [ a ] = myFixedLengthArray;          // OK\n * let [ a, b ] = myFixedLengthArray;       // OK\n * let [ a, b, c ] = myFixedLengthArray;    // OK\n * let [ a, b, c, d ] = myFixedLengthArray; // INVALID INDEX ERROR\n * ```\n *\n * @template T extends any[] - The array type to be transformed.\n */\nexport type FixedLengthArray<T extends any[]> =\n  Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>>\n  & {\n    /**\n     * Custom iterator for the `FixedLengthArray` type.\n     *\n     * This iterator allows the `FixedLengthArray` to be used in standard iteration\n     * contexts, such as `for...of` loops and spread syntax. It ensures that even though\n     * the array is of a fixed length with disabled mutation methods, it still retains\n     * iterable behavior similar to a regular array.\n     *\n     * @returns An IterableIterator for the array items.\n     */\n    [Symbol.iterator]: () => IterableIterator<ArrayItems<T>>\n  };\n\n/** Helper types for {@link FixedLengthArray} */\ntype ArrayLengthMutationKeys = 'splice' | 'push' | 'pop' | 'shift' | 'unshift' | number;\ntype ArrayItems<T extends Array<any>> = T extends Array<infer TItems> ? TItems : never;\n\n/**\n * isArrayBufferSlice\n *\n * Checks if the ArrayBufferView represents a slice (subarray or a subview)\n * of an ArrayBuffer.\n *\n * An ArrayBufferView (TypedArray or DataView) can represent a portion of an\n * ArrayBuffer - such a view is said to be a \"slice\" of the original buffer.\n * This can occur when the `subarray` or `slice` method is called on a\n * TypedArray or when a DataView is created with a byteOffset and/or\n * byteLength that doesn't cover the full ArrayBuffer.\n *\n * @param arrayBufferView - The ArrayBufferView to be checked\n * @returns true if the ArrayBufferView represents a slice of an ArrayBuffer; false otherwise.\n */\nexport function isArrayBufferSlice(arrayBufferView: ArrayBufferView): boolean {\n  return arrayBufferView.byteOffset !== 0 || arrayBufferView.byteLength !== arrayBufferView.buffer.byteLength;\n}\n\n/**\n * Checks if the given object is an AsyncIterable.\n *\n * An AsyncIterable is an object that implements the AsyncIterable protocol,\n * which means it has a [Symbol.asyncIterator] method. This function checks\n * if the provided object conforms to this protocol by verifying the presence\n * and type of the [Symbol.asyncIterator] method.\n *\n * @param obj - The object to be checked for AsyncIterable conformity.\n * @returns True if the object is an AsyncIterable, false otherwise.\n *\n * @example\n * ```ts\n * // Returns true for a valid AsyncIterable\n * const asyncIterable = {\n *   async *[Symbol.asyncIterator]() {\n *     yield 1;\n *     yield 2;\n *   }\n * };\n * console.log(isAsyncIterable(asyncIterable)); // true\n * ```\n *\n * @example\n * ```ts\n * // Returns false for a regular object\n * console.log(isAsyncIterable({ a: 1, b: 2 })); // false\n * ```\n */\nexport function isAsyncIterable(obj: any): obj is AsyncIterable<any> {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * isDefined\n *\n * Utility function to check if a variable is neither null nor undefined.\n * This function helps in making TypeScript infer the type of the variable\n * as being defined, excluding `null` and `undefined`.\n *\n * The function uses strict equality (`!==`) for the comparison, ensuring\n * that the variable is not just falsy (like an empty string or zero),\n * but is truly either `null` or `undefined`.\n *\n * @param arg - The variable to be checked\n * @returns true if the variable is neither `null` nor `undefined`\n */\nexport function isDefined<T>(arg: T): arg is Exclude<T, null | undefined> {\n  return arg !== null && typeof arg !== 'undefined';\n}\n\n/**\n * Utility type that transforms a type `T` to have only certain keys `K` as required, while the\n * rest remain optional, except for keys specified in `O`, which are omitted entirely.\n *\n * This type is useful when you need a variation of a type where only specific properties are\n * required, and others are either optional or not included at all. It allows for more flexible type\n * definitions based on existing types without the need to redefine them.\n *\n * @template T - The original type to be transformed.\n * @template K - The keys of `T` that should be required.\n * @template O - The keys of `T` that should be omitted from the resulting type (optional).\n *\n * @example\n * ```ts\n * // Given an interface\n * interface Example {\n *   requiredProp: string;\n *   optionalProp?: number;\n *   anotherOptionalProp?: boolean;\n * }\n *\n * // Making 'optionalProp' required and omitting 'anotherOptionalProp'\n * type ModifiedExample = RequireOnly<Example, 'optionalProp', 'anotherOptionalProp'>;\n * // Result: { requiredProp?: string; optionalProp: number; }\n * ```\n */\nexport type RequireOnly<T, K extends keyof T, O extends keyof T = never> = Required<Pick<T, K>> & Omit<Partial<T>, O>;\n\n/**\n * universalTypeOf\n *\n * Why does this function exist?\n *\n * You can typically check if a value is of a particular type, such as\n * Uint8Array or ArrayBuffer, by using the `instanceof` operator. The\n * `instanceof` operator checks the prototype property of a constructor\n * in the object's prototype chain.\n *\n * However, there is a caveat with the `instanceof` check if the value\n * was created from a different JavaScript context (like an iframe or\n * a web worker). In those cases, the `instanceof` check might fail\n * because each context has a different global object, and therefore,\n * different built-in constructor functions.\n *\n * The `typeof` operator provides information about the type of the\n * operand in a less detailed way. For basic data types like number,\n * string, boolean, and undefined, the `typeof` operator works as\n * expected.  However, for objects, including arrays and null,\n * it always returns \"object\".  For functions, it returns \"function\".\n * So, while `typeof` is good for basic type checking, it doesn't\n * give detailed information about complex data types.\n *\n * Unlike `instanceof` and `typeof`, `Object.prototype.toString.call(value)`\n * can ensure a consistent result across different JavaScript\n * contexts.\n *\n * Credit for inspiration:\n *   Angus Croll\n *   https://github.com/angus-c\n *   https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n */\nexport function universalTypeOf(value: unknown) {\n  // Returns '[Object Type]' string.\n  const typeString = Object.prototype.toString.call(value);\n  // Returns ['Object', 'Type'] array or null.\n  const match = typeString.match(/\\s([a-zA-Z0-9]+)/);\n  // Deconstructs the array and gets just the type from index 1.\n  const [_, type] = match as RegExpMatchArray;\n\n  return type;\n}\n\n/**\n * Utility type to extract the type resolved by a Promise.\n *\n * This type unwraps the type `T` from `Promise<T>` if `T` is a Promise, otherwise returns `T` as\n * is. It's useful in situations where you need to handle the type returned by a promise-based\n * function in a synchronous context, such as defining types for test vectors or handling return\n * types in non-async code blocks.\n *\n * @template T - The type to unwrap from the Promise.\n *\n * @example\n * ```ts\n * // For a Promise type, it extracts the resolved type.\n * type AsyncNumber = Promise<number>;\n * type UnwrappedNumber = UnwrapPromise<AsyncNumber>; // number\n *\n * // For a non-Promise type, it returns the type as is.\n * type StringValue = string;\n * type UnwrappedString = UnwrapPromise<StringValue>; // string\n * ```\n */\nexport type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;", "import type { Multibase } from 'multiformats';\n\nimport { base32z } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base64url } from 'multiformats/bases/base64';\n\nimport { isAsyncIterable, isArrayBufferSlice, universalTypeOf } from './type-utils.js';\n\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\n\nexport class Convert {\n  data: any;\n  format: string;\n\n  constructor(data: any, format: string) {\n    this.data = data;\n    this.format = format;\n  }\n\n  static arrayBuffer(data: ArrayBuffer): Convert {\n    return new Convert(data, 'ArrayBuffer');\n  }\n\n  static asyncIterable(data: AsyncIterable<any>): Convert {\n    if (!isAsyncIterable(data)) {\n      throw new TypeError('Input must be of type AsyncIterable.');\n    }\n    return new Convert(data, 'AsyncIterable');\n  }\n\n  static base32Z(data: string): Convert {\n    return new Convert(data, 'Base32Z');\n  }\n\n  static base58Btc(data: string): Convert {\n    return new Convert(data, 'Base58Btc');\n  }\n\n  static base64Url(data: string): Convert {\n    return new Convert(data, 'Base64Url');\n  }\n\n  /**\n   * Reference:\n   * The BufferSource type is a TypeScript type that represents an ArrayBuffer\n   * or one of the ArrayBufferView types, such a TypedArray (e.g., Uint8Array)\n   * or a DataView.\n   */\n  static bufferSource(data: BufferSource): Convert {\n    return new Convert(data, 'BufferSource');\n  }\n\n  static hex(data: string): Convert {\n    if (typeof data !== 'string') {\n      throw new TypeError('Hex input must be a string.');\n    }\n    if (data.length % 2 !== 0) {\n      throw new TypeError('Hex input must have an even number of characters.');\n    }\n    return new Convert(data, 'Hex');\n  }\n\n  static multibase(data: string): Convert {\n    return new Convert(data, 'Multibase');\n  }\n\n  static object(data: Record<string, any>): Convert {\n    return new Convert(data, 'Object');\n  }\n\n  static string(data: string): Convert {\n    return new Convert(data, 'String');\n  }\n\n  static uint8Array(data: Uint8Array): Convert {\n    return new Convert(data, 'Uint8Array');\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    switch (this.format) {\n\n      case 'Base58Btc': {\n        return base58btc.baseDecode(this.data).buffer;\n      }\n\n      case 'Base64Url': {\n        return base64url.baseDecode(this.data).buffer;\n      }\n\n      case 'BufferSource': {\n        const dataType = universalTypeOf(this.data);\n        if (dataType === 'ArrayBuffer') {\n          // Data is already an ArrayBuffer, No conversion is necessary.\n          return this.data;\n        } else if (ArrayBuffer.isView(this.data)) {\n          // Data is a DataView or a different TypedArray (e.g., Uint16Array).\n          if (isArrayBufferSlice(this.data)) {\n            // Data is a slice of an ArrayBuffer. Return a new ArrayBuffer or ArrayBufferView of the same slice.\n            return this.data.buffer.slice(this.data.byteOffset, this.data.byteOffset + this.data.byteLength);\n          } else {\n            // Data is a whole ArrayBuffer viewed as a different TypedArray or DataView. Return the whole ArrayBuffer.\n            return this.data.buffer;\n          }\n        } else {\n          throw new TypeError(`${this.format} value is not of type: ArrayBuffer, DataView, or TypedArray.`);\n        }\n      }\n\n      case 'Hex': {\n        return this.toUint8Array().buffer;\n      }\n\n      case 'String': {\n        return this.toUint8Array().buffer;\n      }\n\n      case 'Uint8Array': {\n        return this.data.buffer;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to ArrayBuffer is not supported.`);\n    }\n  }\n\n  async toArrayBufferAsync(): Promise<ArrayBuffer> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        const blob = await this.toBlobAsync();\n        return await blob.arrayBuffer();\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to ArrayBuffer is not supported.`);\n    }\n  }\n\n  toBase32Z(): string {\n    switch (this.format) {\n\n      case 'Uint8Array': {\n        return base32z.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base64Z is not supported.`);\n    }\n  }\n\n  toBase58Btc(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = new Uint8Array(this.data);\n        return base58btc.baseEncode(u8a);\n      }\n\n      case 'Multibase': {\n        return this.data.substring(1);\n      }\n\n      case 'Uint8Array': {\n        return base58btc.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base58Btc is not supported.`);\n    }\n  }\n\n  toBase64Url(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = new Uint8Array(this.data);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'BufferSource': {\n        const u8a = this.toUint8Array();\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'Object': {\n        const string = JSON.stringify(this.data);\n        const u8a = textEncoder.encode(string);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'String': {\n        const u8a = textEncoder.encode(this.data);\n        return base64url.baseEncode(u8a);\n      }\n\n      case 'Uint8Array': {\n        return base64url.baseEncode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Base64Url is not supported.`);\n    }\n  }\n\n  async toBlobAsync(): Promise<Blob> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Initialize an array to hold the chunks from the AsyncIterable.\n        const chunks = [];\n\n        // Asynchronously iterate over each chunk in the AsyncIterable.\n        for await (const chunk of (this.data as AsyncIterable<any>)) {\n          // Append each chunk to the chunks array. These chunks can be of any type, typically binary data or text.\n          chunks.push(chunk);\n        }\n\n        // Create a new Blob from the aggregated chunks.\n        // The Blob constructor combines these chunks into a single Blob object.\n        const blob = new Blob(chunks);\n\n        return blob;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Blob is not supported.`);\n    }\n  }\n\n  toHex(): string {\n    // pre-calculating Hex values improves runtime by 6-10x.\n    const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        const u8a = this.toUint8Array();\n        return Convert.uint8Array(u8a).toHex();\n      }\n\n      case 'Base64Url': {\n        const u8a = this.toUint8Array();\n        return Convert.uint8Array(u8a).toHex();\n      }\n\n      case 'Uint8Array': {\n        let hex = '';\n        for (let i = 0; i < this.data.length; i++) {\n          hex += hexes[this.data[i]];\n        }\n        return hex;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Hex is not supported.`);\n    }\n  }\n\n  toMultibase(): Multibase<any> {\n    switch (this.format) {\n      case 'Base58Btc': {\n        return `z${this.data}`;\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Multibase is not supported.`);\n    }\n  }\n\n  toObject(): object {\n    switch (this.format) {\n\n      case 'Base64Url': {\n        const u8a = base64url.baseDecode(this.data);\n        const text = textDecoder.decode(u8a);\n        return JSON.parse(text);\n      }\n\n      case 'String': {\n        return JSON.parse(this.data);\n      }\n\n      case 'Uint8Array': {\n        const text = textDecoder.decode(this.data);\n        return JSON.parse(text);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Object is not supported.`);\n    }\n  }\n\n  async toObjectAsync(): Promise<any> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Convert the AsyncIterable to a String.\n        const text = await this.toStringAsync();\n\n        // Parse the string as JSON. This step assumes that the string represents a valid JSON structure.\n        // JSON.parse() will convert the string into a corresponding JavaScript object.\n        const json = JSON.parse(text);\n\n        // Return the parsed JavaScript object. The type of this object will depend on the structure\n        // of the JSON in the stream. It could be an object, array, string, number, etc.\n        return json;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Object is not supported.`);\n    }\n  }\n\n  toString(): string {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        return textDecoder.decode(this.data);\n      }\n\n      case 'Base64Url': {\n        const u8a = base64url.baseDecode(this.data);\n        return textDecoder.decode(u8a);\n      }\n\n      case 'Object': {\n        return JSON.stringify(this.data);\n      }\n\n      case 'Uint8Array': {\n        return textDecoder.decode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to String is not supported.`);\n    }\n  }\n\n  async toStringAsync(): Promise<string> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        // Initialize an empty string to accumulate the decoded text.\n        let str = '';\n\n        // Iterate over the chunks from the AsyncIterable.\n        for await (const chunk of (this.data as AsyncIterable<any>)) {\n          // If the chunk is already a string, concatenate it directly.\n          if (typeof chunk === 'string')\n            str += chunk;\n          else\n          // If the chunk is a Uint8Array or similar, use the decoder to convert it to a string.\n          // The `stream: true` option lets the decoder handle multi-byte characters spanning\n          // multiple chunks.\n            str += textDecoder.decode(chunk, { stream: true });\n        }\n\n        // Finalize the decoding process to handle any remaining bytes and signal the end of the stream.\n        // The `stream: false` option flushes the decoder's internal state.\n        str += textDecoder.decode(undefined, { stream: false });\n\n        // Return the accumulated string.\n        return str;\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to String is not supported.`);\n    }\n  }\n\n  toUint8Array(): Uint8Array {\n    switch (this.format) {\n\n      case 'ArrayBuffer': {\n        // Çreate Uint8Array as a view on the ArrayBuffer.\n        // Note: The Uint8Array shares the same memory as the ArrayBuffer, so this operation is very efficient.\n        return new Uint8Array(this.data);\n      }\n\n      case 'Base32Z': {\n        return base32z.baseDecode(this.data);\n      }\n\n      case 'Base58Btc': {\n        return base58btc.baseDecode(this.data);\n      }\n\n      case 'Base64Url': {\n        return base64url.baseDecode(this.data);\n      }\n\n      case 'BufferSource': {\n        const dataType = universalTypeOf(this.data);\n        if (dataType === 'Uint8Array') {\n          // Data is already a Uint8Array. No conversion is necessary.\n          // Note: Uint8Array is a type of BufferSource.\n          return this.data;\n        } else if (dataType === 'ArrayBuffer') {\n          // Data is an ArrayBuffer, create Uint8Array as a view on the ArrayBuffer.\n          // Note: The Uint8Array shares the same memory as the ArrayBuffer, so this operation is very efficient.\n          return new Uint8Array(this.data);\n        } else if (ArrayBuffer.isView(this.data)) {\n          // Data is a DataView or a different TypedArray (e.g., Uint16Array).\n          return new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\n        } else {\n          throw new TypeError(`${this.format} value is not of type: ArrayBuffer, DataView, or TypedArray.`);\n        }\n      }\n\n      case 'Hex': {\n        const u8a = new Uint8Array(this.data.length / 2);\n        for (let i = 0; i < this.data.length; i += 2) {\n          const byteValue = parseInt(this.data.substring(i, i + 2), 16);\n          if (isNaN(byteValue)) {\n            throw new TypeError('Input is not a valid hexadecimal string.');\n          }\n          u8a[i / 2] = byteValue;\n        }\n        return u8a;\n      }\n\n      case 'Object': {\n        const string = JSON.stringify(this.data);\n        return textEncoder.encode(string);\n      }\n\n      case 'String': {\n        return textEncoder.encode(this.data);\n      }\n\n      default:\n        throw new TypeError(`Conversion from ${this.format} to Uint8Array is not supported.`);\n    }\n  }\n\n  async toUint8ArrayAsync(): Promise<Uint8Array> {\n    switch (this.format) {\n      case 'AsyncIterable': {\n        const arrayBuffer = await this.toArrayBufferAsync();\n        return new Uint8Array(arrayBuffer);\n      }\n\n      default:\n        throw new TypeError(`Asynchronous conversion from ${this.format} to Uint8Array is not supported.`);\n    }\n  }\n}", "import { varint } from 'multiformats';\n\nexport type MulticodecCode = number;\n\nexport type MulticodecDefinition<MulticodecCode> = {\n  code: MulticodecCode;\n  // codeBytes: Uint8Array;\n  name: string;\n}\n\n/**\n * The `Multicodec` class provides an interface to prepend binary data\n * with a prefix that identifies the data that follows.\n * https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Multicodec is a self-describing multiformat, it wraps other formats with\n * a tiny bit of self-description. A multicodec identifier is a\n * varint (variable integer) that indicates the format of the data.\n *\n * The canonical table of multicodecs can be access at the following URL:\n * https://github.com/multiformats/multicodec/blob/master/table.csv\n *\n * Example usage:\n *\n * ```ts\n * Multicodec.registerCodec({ code: 0xed, name: 'ed25519-pub' });\n * const prefixedData = Multicodec.addPrefix({ code: 0xed, data: new Uint8Array(32) });\n * ```\n */\nexport class Multicodec {\n  /**\n   * A static field containing a map of codec codes to their corresponding names.\n   */\n  static codeToName = new Map<MulticodecCode, string>();\n\n  /**\n   * A static field containing a map of codec names to their corresponding codes.\n   */\n  static nameToCode = new Map<string, MulticodecCode>();\n\n  /**\n   * Adds a multicodec prefix to input data.\n   *\n   * @param options - The options for adding a prefix.\n   * @param options.code - The codec code. Either the code or name must be provided.\n   * @param options.name - The codec name. Either the code or name must be provided.\n   * @param options.data - The data to be prefixed.\n   * @returns The data with the added prefix as a Uint8Array.\n   */\n  public static addPrefix(options: {\n    code?: MulticodecCode,\n    data: Uint8Array,\n    name?: string,\n  }): Uint8Array {\n    let { code, data, name } = options;\n\n    if (!(name ? !code : code)) {\n      throw new Error(`Either 'name' or 'code' must be defined, but not both.`);\n    }\n\n    // If code was given, confirm it exists, or lookup code by name.\n    code = Multicodec.codeToName.has(code!) ? code : Multicodec.nameToCode.get(name!);\n\n    // Throw error if a registered Codec wasn't found.\n    if (code === undefined) {\n      throw new Error(`Unsupported multicodec: ${options.name ?? options.code}`);\n    }\n\n    // Create a new array to store the prefix and input data.\n    const prefixLength = varint.encodingLength(code);\n    const dataWithPrefix = new Uint8Array(prefixLength + data.byteLength);\n    dataWithPrefix.set(data, prefixLength);\n\n    // Prepend the prefix.\n    varint.encodeTo(code, dataWithPrefix);\n\n    return dataWithPrefix;\n  }\n\n  /**\n   * Get the Multicodec code from given prefixed data.\n   *\n   * @param options - The options for getting the codec code.\n   * @param options.prefixedData - The data to extract the codec code from.\n   * @returns - The Multicodec code as a number.\n   */\n  public static getCodeFromData(options: {\n    prefixedData: Uint8Array\n  }): MulticodecCode {\n    const { prefixedData } = options;\n    const [code, _] = varint.decode(prefixedData);\n\n    return code;\n  }\n\n  /**\n   * Get the Multicodec code from given Multicodec name.\n   *\n   * @param options - The options for getting the codec code.\n   * @param options.name - The name to lookup.\n   * @returns - The Multicodec code as a number.\n   */\n  public static getCodeFromName(options: {\n    name: string\n  }): MulticodecCode {\n    const { name } = options;\n\n    // Throw error if a registered Codec wasn't found.\n    const code = Multicodec.nameToCode.get(name);\n    if (code === undefined) {\n      throw new Error(`Unsupported multicodec: ${name}`);\n    }\n\n    return code;\n  }\n\n  /**\n   * Get the Multicodec name from given Multicodec code.\n   *\n   * @param options - The options for getting the codec name.\n   * @param options.name - The code to lookup.\n   * @returns - The Multicodec name as a string.\n   */\n  public static getNameFromCode(options: {\n    code: MulticodecCode\n  }): string {\n    const { code } = options;\n\n    // Throw error if a registered Codec wasn't found.\n    const name = Multicodec.codeToName.get(code);\n    if (name === undefined) {\n      throw new Error(`Unsupported multicodec: ${code}`);\n    }\n\n    return name;\n  }\n\n  /**\n   * Registers a new codec in the Multicodec class.\n   *\n   * @param codec - The codec to be registered.\n   */\n  public static registerCodec(codec: MulticodecDefinition<MulticodecCode>) {\n    Multicodec.codeToName.set(codec.code, codec.name);\n    Multicodec.nameToCode.set(codec.name, codec.code);\n  }\n\n  /**\n   * Returns the data with the Multicodec prefix removed.\n   *\n   * @param refixedData - The data to extract the codec code from.\n   * @returns {Uint8Array}\n   */\n  public static removePrefix(options: {\n    prefixedData: Uint8Array\n  }): { code: MulticodecCode, name: string, data: Uint8Array } {\n    const { prefixedData } = options;\n    const [code, codeByteLength] = varint.decode(prefixedData);\n\n    // Throw error if a registered Codec wasn't found.\n    const name = Multicodec.codeToName.get(code);\n    if (name === undefined) {\n      throw new Error(`Unsupported multicodec: ${code}`);\n    }\n\n    return { code, data: prefixedData.slice(codeByteLength), name };\n  }\n}\n\n// Pre-defined registered codecs:\nMulticodec.registerCodec({ code: 0xed, name: 'ed25519-pub' });\nMulticodec.registerCodec({ code: 0x1300, name: 'ed25519-priv' });\nMulticodec.registerCodec({ code: 0xec, name: 'x25519-pub' });\nMulticodec.registerCodec({ code: 0x1302, name: 'x25519-priv' });\nMulticodec.registerCodec({ code: 0xe7, name: 'secp256k1-pub' });\nMulticodec.registerCodec({ code: 0x1301, name: 'secp256k1-priv' });", "/**\n * Checks whether the given object has any properties.\n */\nexport function isEmptyObject(obj: unknown): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  if (Object.getOwnPropertySymbols(obj).length > 0) {\n    return false;\n  }\n\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Recursively removes all properties with an empty object or array as its value from the given object.\n */\nexport function removeEmptyObjects(obj: Record<string, unknown>): void {\n  Object.keys(obj).forEach(key => {\n    if (typeof(obj[key]) === 'object') {\n      // recursive remove empty object or array properties in nested objects\n      removeEmptyObjects(obj[key] as Record<string, unknown>);\n    }\n\n    if (isEmptyObject(obj[key])) {\n      delete obj[key];\n    }\n  });\n}\n\n/**\n * Recursively removes all properties with `undefined` as its value from the given object.\n */\nexport function removeUndefinedProperties(obj: Record<string, unknown>): void {\n  Object.keys(obj).forEach(key => {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    } else if (typeof(obj[key]) === 'object') {\n      removeUndefinedProperties(obj[key] as Record<string, unknown>); // recursive remove `undefined` properties in nested objects\n    }\n  });\n}", "import type { AbstractLevel } from 'abstract-level';\n\nimport { Level } from 'level';\n\nimport type { KeyValueStore } from './types.js';\n\nexport class LevelStore<K = string, V = any> implements KeyValueStore<K, V> {\n  private store: AbstractLevel<string | Buffer | Uint8Array, K, V>;\n\n  constructor({ db, location = 'DATASTORE' }: {\n    db?: AbstractLevel<string | Buffer | Uint8Array, K, V>;\n    location?: string;\n  } = {}) {\n    this.store = db ?? new Level<K, V>(location);\n  }\n\n  async clear(): Promise<void> {\n    await this.store.clear();\n  }\n\n  async close(): Promise<void> {\n    await this.store.close();\n  }\n\n  async delete(key: K): Promise<void> {\n    await this.store.del(key);\n  }\n\n  async get(key: K): Promise<V | undefined> {\n    try {\n      return await this.store.get(key);\n    } catch (error: any) {\n      // Don't throw when a key wasn't found.\n      if (error.notFound) return undefined;\n      throw error;\n    }\n  }\n\n  async set(key: K, value: V): Promise<void> {\n    await this.store.put(key, value);\n  }\n}\n\n/**\n * The `MemoryStore` class is an implementation of\n * `KeyValueStore` that holds data in memory.\n *\n * It provides a basic key-value store that works synchronously and keeps all\n * data in memory. This can be used for testing, or for handling small amounts\n * of data with simple key-value semantics.\n *\n * Example usage:\n *\n * ```ts\n * const memoryStore = new MemoryStore<string, number>();\n * await memoryStore.set(\"key1\", 1);\n * const value = await memoryStore.get(\"key1\");\n * console.log(value); // 1\n * ```\n *\n * @public\n */\nexport class MemoryStore<K, V> implements KeyValueStore<K, V> {\n  /**\n   * A private field that contains the Map used as the key-value store.\n   */\n  private store: Map<K, V> = new Map();\n\n  /**\n   * Clears all entries in the key-value store.\n   *\n   * @returns A Promise that resolves when the operation is complete.\n   */\n  async clear(): Promise<void> {\n    this.store.clear();\n  }\n\n  /**\n   * This operation is no-op for `MemoryStore`\n   * and will log a warning if called.\n   */\n  async close(): Promise<void> {\n    /** no-op */\n  }\n\n  /**\n   * Deletes an entry from the key-value store by its key.\n   *\n   * @param id - The key of the entry to delete.\n   * @returns A Promise that resolves to a boolean indicating whether the entry was successfully deleted.\n   */\n  async delete(id: K): Promise<boolean> {\n    return this.store.delete(id);\n  }\n\n  /**\n   * Retrieves the value of an entry by its key.\n   *\n   * @param id - The key of the entry to retrieve.\n   * @returns A Promise that resolves to the value of the entry, or `undefined` if the entry does not exist.\n   */\n  async get(id: K): Promise<V | undefined> {\n    return this.store.get(id);\n  }\n\n  /**\n   * Checks for the presence of an entry by key.\n   *\n   * @param id - The key to check for the existence of.\n   * @returns A Promise that resolves to a boolean indicating whether an element with the specified key exists or not.\n   */\n  async has(id: K): Promise<boolean> {\n    return this.store.has(id);\n  }\n\n  /**\n   * Retrieves all values in the key-value store.\n   *\n   * @returns A Promise that resolves to an array of all values in the store.\n   */\n  async list(): Promise<V[]> {\n    return Array.from(this.store.values());\n  }\n\n  /**\n   * Sets the value of an entry in the key-value store.\n   *\n   * @param id - The key of the entry to set.\n   * @param key - The new value for the entry.\n   * @returns A Promise that resolves when the operation is complete.\n   */\n  async set(id: K, key: V): Promise<void> {\n    this.store.set(id, key);\n  }\n}", "import type { Duplex, ReadableStateOptions, Transform, Writable } from 'readable-stream';\n\nimport { Readable } from 'readable-stream';\nimport { Stream } from './stream.js';\nimport { Convert } from './convert.js';\n\nexport { Readable } from 'readable-stream';\n\nexport class NodeStream {\n  /**\n   * Consumes a `Readable` stream and returns its contents as an `ArrayBuffer`.\n   *\n   * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into\n   * an `ArrayBuffer`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const arrayBuffer = await NodeStream.consumeToArrayBuffer({ readable: nodeReadable });\n   * ```\n   *\n   * @param readable - The Node.js Readable stream whose data will be consumed.\n   * @returns A Promise that resolves to an `ArrayBuffer` containing all the data from the stream.\n   */\n  public static async consumeToArrayBuffer({ readable }: { readable: Readable}): Promise<ArrayBuffer> {\n    const arrayBuffer = await Convert.asyncIterable(readable).toArrayBufferAsync();\n\n    return arrayBuffer;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a `Blob`.\n   *\n   * This method reads all data from a Node.js `Readable` stream, collects it, and converts it into\n   * a `Blob`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const blob = await NodeStream.consumeToBlob({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n   * @returns A Promise that resolves to a `Blob` containing all the data from the stream.\n   */\n  public static async consumeToBlob({ readable }: { readable: Readable }): Promise<Blob> {\n    const blob = await Convert.asyncIterable(readable).toBlobAsync();\n\n    return blob;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a `Uint8Array`.\n   *\n   * This method reads all data from a Node.js `Readable`, collects it, and converts it into a\n   * `Uint8Array`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const bytes = await NodeStream.consumeToBytes({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose data will be consumed.\n   * @returns A Promise that resolves to a `Uint8Array` containing all the data from the stream.\n   */\n  public static async consumeToBytes({ readable }: { readable: Readable }): Promise<Uint8Array> {\n    const bytes = await Convert.asyncIterable(readable).toUint8ArrayAsync();\n\n    return bytes;\n  }\n\n  /**\n   * Consumes a `Readable` stream and parses its contents as JSON.\n   *\n   * This method reads all the data from the stream, converts it to a text string, and then parses\n   * it as JSON, returning the resulting object.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const jsonData = await NodeStream.consumeToJson({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose JSON content will be consumed.\n   * @returns A Promise that resolves to the parsed JSON object from the stream's data.\n   */\n  public static async consumeToJson({ readable }: { readable: Readable }): Promise<any> {\n    const object = await Convert.asyncIterable(readable).toObjectAsync();\n\n    return object;\n  }\n\n  /**\n   * Consumes a `Readable` stream and returns its contents as a text string.\n   *\n   * This method reads all the data from the stream, converting it into a single string.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getReadableStreamSomehow();\n   * const text = await NodeStream.consumeToText({ readable: nodeReadable });\n   * ```\n   *\n   * @param readableStream - The Node.js `Readable` stream whose text content will be consumed.\n   * @returns A Promise that resolves to a string containing all the data from the stream.\n   */\n  public static async consumeToText({ readable }: { readable: Readable}): Promise<string> {\n    const text = await Convert.asyncIterable(readable).toStringAsync();\n\n    return text;\n  }\n\n  /**\n   * Converts a Web `ReadableStream` to a Node.js `Readable` stream.\n   *\n   * This method takes a Web `ReadableStream` and converts it to a Node.js `Readable` stream.\n   * The conversion is done by reading chunks from the Web `ReadableStream` and pushing them\n   * into the Node.js `Readable` stream.\n   *\n   * @example\n   * ```ts\n   * const webReadableStream = getWebReadableStreamSomehow();\n   * const nodeReadableStream = NodeStream.fromWebReadable({ readableStream: webReadableStream });\n   * ```\n   *\n   * @param readableStream - The Web `ReadableStream` to be converted.\n   * @param readableOptions - Optional `Readable` stream options for the Node.js stream.\n   * @returns The Node.js `Readable` stream.\n   */\n  public static fromWebReadable({ readableStream, readableOptions }: {\n    readableStream: ReadableStream,\n    readableOptions?: ReadableStateOptions\n  }): Readable {\n    if (!Stream.isReadableStream(readableStream)) {\n      throw new TypeError(`NodeStream.fromWebReadable: 'readableStream' is not a Web ReadableStream.`);\n    }\n\n    const reader = readableStream.getReader();\n    let closed = false;\n\n    const nodeReadable = new Readable({\n      ...readableOptions,\n\n      read: function () {\n        reader.read().then(({ done, value }) => {\n          if (done) {\n            this.push(null); // Push null to signify end of stream.\n          } else {\n            if (!this.push(value)) {\n              // When push returns false, we should stop reading until _read is called again.\n              return;\n            }\n          }\n        }).catch((error) => {\n          // If an error occurs while reading, destroy the stream.\n          this.destroy(error);\n        });\n      },\n\n      destroy: function (error, callback) {\n        function done() {\n          callback(error);\n        }\n\n        if (!closed) {\n          reader.cancel(error)\n            .then(done)\n            .catch(done);\n          return;\n        }\n        done();\n      }\n    });\n\n    reader.closed\n      .then(() => {\n        closed = true; // Prevents reader.cancel() from being called in destroy()\n      })\n      .catch((error) => {\n        closed = true; // Prevents reader.cancel() from being called in destroy()\n        nodeReadable.destroy(error);\n      });\n\n    return nodeReadable;\n  }\n\n  /**\n   * Checks if a Node.js stream (`Readable`, `Writable`, `Duplex`, or `Transform`) has been destroyed.\n   *\n   * This method determines whether the provided Node.js stream has been destroyed. A stream\n   * is considered destroyed if its 'destroyed' property is set to true or if its internal state\n   * indicates it has been destroyed.\n   *\n   * @example\n   * ```ts\n   * const stream = getStreamSomehow();\n   * stream.destroy(); // Destroy the stream.\n   * const isDestroyed = NodeStream.isDestroyed({ stream });\n   * console.log(isDestroyed); // Output: true\n   * ```\n   *\n   * @param stream - The Node.js stream to check.\n   * @returns `true` if the stream has been destroyed; otherwise, `false`.\n   */\n  public static isDestroyed({ stream }: { stream: Readable | Writable | Duplex | Transform }): boolean {\n    if (!NodeStream.isStream(stream)) {\n      throw new TypeError(`NodeStream.isDestroyed: 'stream' is not a Node stream.`);\n    }\n\n    const writableState = '_writableState' in stream ? stream._writableState : undefined;\n    const readableState = stream._readableState;\n    const state = writableState || readableState;\n\n    return !!(stream.destroyed || state.destroyed);\n  }\n\n  /**\n   * Checks if a Node.js `Readable` stream is still readable.\n   *\n   * This method checks if a Node.js `Readable` stream is still in a state that allows reading from\n   * it. A stream is considered readable if it has not ended, has not been destroyed, and is not\n   * currently paused.\n   *\n   * @example\n   * ```ts\n   * const readableStream = new Readable();\n   * const isReadable = NodeStream.isReadable({ readable: readableStream });\n   * console.log(isReadable); // Output: true or false\n   * ```\n   *\n   * @param readable - The Node.js `Readable` stream to be checked.\n   * @returns `true` if the stream is still readable; otherwise, `false`.\n   */\n  public static isReadable({ readable }: { readable: Readable }): boolean {\n    // Check if the object is a Node Readable stream.\n    if (!NodeStream.isReadableStream(readable)) {\n      return false;\n    }\n\n    // Check if the stream is still readable.\n    return (\n      readable.readable && // Is the stream readable?\n        (typeof readable._readableState.ended === 'boolean' && !readable._readableState.ended) && // Has the 'end' method been called?\n        (typeof readable._readableState.endEmitted === 'boolean' && !readable._readableState.endEmitted) && // Has the 'end' event been emitted?\n        !readable.destroyed && // Has the 'destroy' method been called?\n        !readable.isPaused() // Is the stream paused?\n    );\n  }\n\n  /**\n   * Checks if an object is a Node.js `Readable` stream.\n   *\n   * This method verifies if the provided object is a Node.js `Readable` stream by checking for\n   * specific properties and methods typical of a `Readable` stream in Node.js.\n   *\n   * @example\n   * ```ts\n   * const obj = getSomeObject();\n   * if (NodeStream.isReadableStream(obj)) {\n   *   // obj is a Node.js Readable stream\n   * }\n   * ```\n   *\n   * @param obj - The object to be checked.\n   * @returns `true` if `obj` is a Node.js `Readable` stream; otherwise, `false`.\n   */\n  static isReadableStream(obj: unknown): obj is Readable {\n    return (\n      typeof obj === 'object' &&\n        obj !== null &&\n        ('pipe' in obj && typeof obj.pipe === 'function') &&\n        ('on' in obj && typeof obj.on === 'function') &&\n        (!('_writableState' in obj) && '_readableState' in obj)\n    );\n  }\n\n  /**\n   * Checks if the provided object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`).\n   *\n   * This method checks for the presence of internal properties specific to Node.js streams:\n   * `_readableState` and `_writableState`. These properties are present in Node.js stream\n   * instances, allowing identification of the stream type.\n   *\n   * The `_readableState` property is found in `Readable` and `Duplex` streams (including\n   * `Transform` streams, which are a type of `Duplex` stream), indicating that the stream can be\n   * read from. The `_writableState` property is found in `Writable` and `Duplex` streams,\n   * indicating that the stream can be written to.\n   *\n   * @example\n   * ```ts\n   * const { Readable, Writable, Duplex, Transform } = require('stream');\n   *\n   * const readableStream = new Readable();\n   * console.log(NodeStream.isStream(readableStream)); // Output: true\n   *\n   * const writableStream = new Writable();\n   * console.log(NodeStream.isStream(writableStream)); // Output: true\n   *\n   * const duplexStream = new Duplex();\n   * console.log(NodeStream.isStream(duplexStream)); // Output: true\n   *\n   * const transformStream = new Transform();\n   * console.log(NodeStream.isStream(transformStream)); // Output: true\n   *\n   * const nonStreamObject = {};\n   * console.log(NodeStream.isStream(nonStreamObject)); // Output: false\n   * ```\n   *\n   * @remarks\n   * - This method does not differentiate between the different types of streams (Readable,\n   *   Writable, Duplex, Transform). It simply checks if the object is any kind of Node.js stream.\n   * - While this method can identify standard Node.js streams, it may not recognize custom or\n   *   third-party stream-like objects that do not inherit directly from Node.js's stream classes\n   *   or do not have these internal state properties. This is intentional as many of the methods\n   *   in this library are designed to work with standard Node.js streams.\n   *\n   * @param obj - The object to be checked for being a Node.js stream.\n   * @returns `true` if the object is a Node.js stream (`Duplex`, `Readable`, `Writable`, or `Transform`); otherwise, `false`.\n   */\n  public static isStream(obj: unknown): obj is Duplex | Readable | Writable | Transform  {\n    return (\n      typeof obj === 'object' && obj !== null &&\n      ('_readableState' in obj || '_writableState' in obj)\n    );\n  }\n\n  /**\n   * Converts a Node.js `Readable` stream to a Web `ReadableStream`.\n   *\n   * This method provides a bridge between Node.js streams and the Web Streams API by converting a\n   * Node.js `Readable` stream into a Web `ReadableStream`. It listens for 'data', 'end', and 'error'\n   * events on the Node.js stream and appropriately enqueues data, closes, or errors the Web\n   * `ReadableStream`.\n   *\n   * If the Node.js stream is already destroyed, the method returns an immediately cancelled\n   * Web `ReadableStream`.\n   *\n   * @example\n   * ```ts\n   * const nodeReadable = getNodeReadableStreamSomehow();\n   * const webReadableStream = NodeStream.toWebReadable({ readable: nodeReadable });\n   * ```\n   *\n   * @param readable - The Node.js `Readable` stream to be converted.\n   * @returns A Web `ReadableStream` corresponding to the provided Node.js `Readable` stream.\n   * @throws TypeError if `readable` is not a Node.js `Readable` stream.\n   * @throws Error if the Node.js `Readable` stream is already destroyed.\n   */\n  static toWebReadable({ readable }: { readable: Readable }): ReadableStream {\n    if (!NodeStream.isReadableStream(readable)) {\n      throw new TypeError(`NodeStream.toWebReadable: 'readable' is not a Node Readable stream.`);\n    }\n\n    if (NodeStream.isDestroyed({ stream: readable })) {\n      const readable = new ReadableStream();\n      readable.cancel();\n      return readable;\n    }\n\n    return new ReadableStream({\n      start(controller) {\n        readable.on('data', (chunk) => {\n          controller.enqueue(chunk);\n        });\n\n        readable.on('end', () => {\n          controller.close();\n        });\n\n        readable.on('error', (err) => {\n          controller.error(err);\n        });\n      },\n\n      cancel() {\n        readable.destroy();\n      }\n    });\n  }\n}", "import { sha256 } from '@noble/hashes/sha256';\n\n/**\n * The `Sha256` class provides an interface for generating SHA-256 hash digests.\n *\n * This class utilizes the '@noble/hashes/sha256' function to generate hash digests\n * of the provided data. The SHA-256 algorithm is widely used in cryptographic\n * applications to produce a fixed-size 256-bit (32-byte) hash.\n *\n * The methods of this class are asynchronous and return Promises. They use the Uint8Array\n * type for input data and the resulting digest, ensuring a consistent interface\n * for binary data processing.\n *\n * @example\n * ```ts\n * const data = new Uint8Array([...]);\n * const hash = await Sha256.digest({ data });\n * ```\n */\nexport class Sha256 {\n  /**\n   * Generates a SHA-256 hash digest for the given data.\n   *\n   * @remarks\n   * This method produces a hash digest using the SHA-256 algorithm. The resultant digest\n   * is deterministic, meaning the same data will always produce the same hash, but\n   * is computationally infeasible to regenerate the original data from the hash.\n   *\n   * @example\n   * ```ts\n   * const data = new Uint8Array([...]);\n   * const hash = await Sha256.digest({ data });\n   * ```\n   *\n   * @param params - The parameters for the hashing operation.\n   * @param params.data - The data to hash, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the SHA-256 hash digest of the provided data as a Uint8Array.\n   */\n  public static async digest({ data }: {\n    data: Uint8Array;\n  }): Promise<Uint8Array> {\n    const hash = sha256(data);\n\n    return hash;\n  }\n}", "/**\n * Base class for all cryptographic algorithm implementations.\n */\nexport abstract class CryptoAlgorithm {}", "import type { Hasher } from '../types/hasher.js';\nimport type { DigestParams } from '../types/params-direct.js';\n\nimport { Sha256 } from '../primitives/sha256.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\n\n/**\n * The `Sha2DigestParams` interface defines the algorithm-specific parameters that should be\n * passed into the `digest()` method when using the SHA-2 algorithm.\n */\nexport interface Sha2DigestParams extends DigestParams {\n  /**\n   * A string defining the name of hash function to use. The value must be one of the following:\n   * - `\"SHA-256\"`: Generates a 256-bit digest.\n   */\n  algorithm: 'SHA-256';\n}\n\n/**\n * The `Sha2Algorithm` class is an implementation of the {@link Hasher | `Hasher`} interface for the\n * SHA-2 family of cryptographic hash functions. The `digest` method takes the algorithm identifier\n * of the hash function and arbitrary data as input and returns the hash digest of the data.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class Sha2Algorithm extends CryptoAlgorithm\n  implements Hasher<Sha2DigestParams> {\n\n  /**\n   * Generates a hash digest of the provided data.\n   *\n   * @remarks\n   * A digest is the output of the hash function. It's a fixed-size string of bytes\n   * that uniquely represents the data input into the hash function. The digest is often used for\n   * data integrity checks, as any alteration in the input data results in a significantly\n   * different digest.\n   *\n   * It takes the algorithm identifier of the hash function and data to digest as input and returns\n   * the digest of the data.\n   *\n   * @example\n   * ```ts\n   * const sha2 = new Sha2Algorithm();\n   * const data = new TextEncoder().encode('Messsage');\n   * const digest = await sha2.digest({ data });\n   * ```\n   *\n   * @param params - The parameters for the digest operation.\n   * @param params.algorithm - The name of hash function to use.\n   * @param params.data - The data to digest.\n   *\n   * @returns A Promise which will be fulfilled with the hash digest.\n   */\n  public async digest({ algorithm, data }: Sha2DigestParams): Promise<Uint8Array> {\n    switch (algorithm) {\n\n      case 'SHA-256': {\n        const hash = await Sha256.digest({ data });\n        return hash;\n      }\n    }\n\n  }\n}", "/**\n * Canonicalizes a given object according to RFC 8785 (https://tools.ietf.org/html/rfc8785),\n * which describes JSON Canonicalization Scheme (JCS). This function sorts the keys of the\n * object and its nested objects alphabetically and then returns a stringified version of it.\n * This method handles nested objects, array values, and null values appropriately.\n *\n * @param obj - The object to canonicalize.\n * @returns The stringified version of the input object with its keys sorted alphabetically\n * per RFC 8785.\n */\nexport function canonicalize(obj: { [key: string]: any }): string {\n  /**\n   * Recursively sorts the keys of an object.\n   *\n   * @param obj - The object whose keys are to be sorted.\n   * @returns A new object with sorted keys.\n   */\n  const sortObjKeys = (obj: { [key: string]: any }): { [key: string]: any } => {\n    if (obj !== null && typeof obj === 'object' && !Array.isArray(obj)) {\n      const sortedKeys = Object.keys(obj).sort();\n      const sortedObj: { [key: string]: any } = {};\n      for (const key of sortedKeys) {\n        // Recursively sort keys of nested objects.\n        sortedObj[key] = sortObjKeys(obj[key]);\n      }\n      return sortedObj;\n    }\n    return obj;\n  };\n\n  // Stringify and return the final sorted object.\n  const sortedObj = sortObjKeys(obj);\n  return JSON.stringify(sortedObj);\n}", "import { Convert, removeUndefinedProperties } from '@web5/common';\n\nimport { canonicalize } from './utils.js';\nimport { Sha256 } from '../primitives/sha256.js';\n\n/**\n * Constant defining the prefix for JSON Web Keys (JWK) key URIs in this library.\n *\n * The prefix 'urn:jwk:' makes it explicit that a string represents a JWK, referenced by a\n * {@link https://datatracker.ietf.org/doc/html/rfc3986 | URI} (Uniform Resource Identifier),\n * which ensures consistent key referencing across all Web5 Key Management System (KMS)\n * implementations.\n *\n * These key URIs take the form `urn:jwk:<JWK thumbprint>`, where the\n * {@link https://datatracker.ietf.org/doc/html/rfc7638 | JWK thumbprint}, derived from the JWK, is\n * unique to the key's material, unaffected by the order or optional properties in the JWK.\n */\nexport const KEY_URI_PREFIX_JWK = 'urn:jwk:';\n\n/**\n * JSON Web Key Operations\n *\n * The \"key_ops\" (key operations) parameter identifies the operation(s)\n * for which the key is intended to be used.  The \"key_ops\" parameter is\n * intended for use cases in which public, private, or symmetric keys\n * may be present.\n *\n * Its value is an array of key operation values.  Values defined by\n * {@link https://www.rfc-editor.org/rfc/rfc7517.html#section-4.3 | RFC 7517 Section 4.3} are:\n *\n * - \"decrypt\"    : Decrypt content and validate decryption, if applicable\n * - \"deriveBits\" : Derive bits not to be used as a key\n * - \"deriveKey\"  : Derive key\n * - \"encrypt\"    : Encrypt content\n * - \"sign\"       : Compute digital signature or MAC\n * - \"unwrapKey\"  : Decrypt key and validate decryption, if applicable\n * - \"verify\"     : Verify digital signature or MAC\n * - \"wrapKey\"    : Encrypt key\n *\n * Other values MAY be used.  The key operation values are case-\n * sensitive strings.  Duplicate key operation values MUST NOT be\n * present in the array.  Use of the \"key_ops\" member is OPTIONAL,\n * unless the application requires its presence.\n *\n * The \"use\" and \"key_ops\" JWK members SHOULD NOT be used together;\n * however, if both are used, the information they convey MUST be\n * consistent.  Applications should specify which of these members they\n * use, if either is to be used by the application.\n */\nexport type JwkOperation = 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'deriveKey' | 'deriveBits' | 'wrapKey' | 'unwrapKey';\n\n/**\n * JSON Web Key Use\n *\n * The \"use\" (public key use) parameter identifies the intended use of\n * the public key.  The \"use\" parameter is employed to indicate whether\n * a public key is used for encrypting data or verifying the signature\n * on data.\n *\n * Values defined by {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.2 | RFC 7517 Section 4.2} are:\n *\n * - \"sig\" (signature)\n * - \"enc\" (encryption)\n *\n * Other values MAY be used.  The \"use\" value is a case-sensitive\n * string.  Use of the \"use\" member is OPTIONAL, unless the application\n * requires its presence.\n *\n * The \"use\" and \"key_ops\" JWK members SHOULD NOT be used together;\n * however, if both are used, the information they convey MUST be\n * consistent.  Applications should specify which of these members they\n * use, if either is to be used by the application.\n *\n * When a key is used to wrap another key and a public key use\n * designation for the first key is desired, the \"enc\" (encryption) key\n * use value is used, since key wrapping is a kind of encryption.  The\n * \"enc\" value is also to be used for public keys used for key agreement\n * operations.\n */\nexport type JwkUse = 'sig' | 'enc' | string;\n\n/**\n * JSON Web Key Types\n */\nexport type JwkType =\n  /**\n   * Elliptic Curve\n   * Used with Elliptic Curve Digital Signature Algorithm (ECDSA) and Elliptic\n   * Curve Diffie-Hellman (ECDH), including secp256k1, P-256, P-384, and P-521.\n   */\n  | 'EC'\n  /**\n   * RSA\n   * Widely used for encryption and digital signatures. RSA keys are used in\n   * various algorithms like RS256, RS384, RS512, etc.\n   */\n  | 'RSA'\n  /**\n   * Octet sequence\n   * Used with symmetric signing (e.g., HMAC HS256, HS512, etc.) and\n   * symmetric encryption (e.g., A256CBC-HS512, A256GCM, etc.) algorithms.\n   */\n  | 'oct'\n  /**\n   * Octet string key pairs (OKP)\n   * A type of public key that is used with algorithms such as EdDSA (Ed25519 and\n   * Ed448 curves) and ECDH (X25519 and X448 curves).\n   */\n  | 'OKP'\n\n/**\n * JSON Web Key Elliptic Curve\n */\nexport type JwkNamedCurves =\n  // P-256 Curve\n  | 'P-256'\n  // P-384 Curve\n  | 'P-384'\n  // P-521 Curve\n  | 'P-521'\n  // Ed25519 signature algorithm key pairs\n  | 'Ed25519'\n  // Ed448 signature algorithm key pairs\n  | 'Ed448'\n  // X25519 function key pairs\n  | 'X25519'\n  // X448 function key pairs\n  | 'X448'\n  // SECG secp256k1 curve\n  | 'secp256k1';\n\n/**\n * JSON Web Key Parameters\n */\n\n/** Parameters used with any \"kty\" (key type) value. */\nexport type JwkParamsAnyKeyType = {\n  /** JWK Algorithm Parameter. The algorithm intended for use with the key. */\n  alg?: string;\n  /** JWK Extractable Parameter */\n  ext?: 'true' | 'false';\n  /** JWK Key Operations Parameter */\n  key_ops?: JwkOperation[];\n  /** JWK Key ID Parameter */\n  kid?: string;\n  /** JWK Key Type Parameter */\n  kty: JwkType;\n  /** JWK Public Key Use Parameter */\n  use?: JwkUse;\n  /** JWK X.509 Certificate Chain Parameter */\n  x5c?: string;\n  /** JWK X.509 Certificate SHA-1 Thumbprint Parameter */\n  x5t?: string;\n  /** JWK X.509 Certificate SHA-256 Thumbprint Parameter */\n  'x5t#S256'?: string;\n  /** JWK X.509 URL Parameter */\n  x5u?: string;\n}\n\n/** Parameters used with \"EC\" (elliptic curve) public keys. */\nexport type JwkParamsEcPublic = Omit<JwkParamsAnyKeyType, 'alg' | 'kty'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * ES256  : ECDSA using P-256 and SHA-256\n   * ES256K : ECDSA using secp256k1 curve and SHA-256\n   * ES384  : ECDSA using P-384 and SHA-384\n   * ES512  : ECDSA using P-521 and SHA-512\n   */\n  alg?: 'ES256' | 'ES256K' | 'ES384' | 'ES512';\n\n  /**\n   * Elliptic Curve key pair.\n   */\n  kty: 'EC';\n\n  /**\n   * The cryptographic curve used with the key.\n   * MUST be present for all EC public keys.\n   */\n  crv: 'secp256k1' | 'P-256' | 'P-384' | 'P-521';\n\n  /**\n   * The x-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC public keys\n   */\n  x: string;\n\n  /**\n   * The y-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present only for secp256k1 public keys.\n   */\n  y?: string;\n}\n\n/** Parameters used with \"EC\" (elliptic curve) private keys. */\nexport type JwkParamsEcPrivate = JwkParamsEcPublic & {\n  /**\n   * The d-coordinate for the Elliptic Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC private keys.\n   */\n  d: string;\n}\n\n/** Parameters used with \"OKP\" (octet key pair) public keys. */\nexport type JwkParamsOkpPublic =\n  Omit<JwkParamsAnyKeyType, 'kty' | 'alg' | 'crv'> &\n  Pick<JwkParamsEcPublic, 'x'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * EdDSA: Edwards Curve Digital Signature Algorithm\n   */\n  alg?: 'EdDSA';\n\n  /**\n   * The cryptographic curve used with the key.\n   * MUST be present for all OKP public keys.\n   */\n  crv: 'Ed25519' | 'Ed448' | 'X25519' | 'X448';\n\n  /**\n   * Key type\n   * OKP (Octet Key Pair) is defined for public key algorithms that use octet\n   * strings as private and public keys.\n   */\n  kty: 'OKP';\n}\n\n/** Parameters used with \"OKP\" (octet key pair) private keys. */\nexport type JwkParamsOkpPrivate = JwkParamsOkpPublic & {\n  /**\n   * The d-coordinate for the Edwards Curve point.\n   * Represented as the base64url encoding of the octet string\n   * representation of the coordinate.\n   * MUST be present for all EC private keys.\n   */\n  d: string;\n};\n\n/** Parameters used with \"oct\" (octet sequence) private keys. */\nexport type JwkParamsOctPrivate = Omit<JwkParamsAnyKeyType, 'alg' | 'kty'> & {\n  /**\n   * The algorithm intended for use with the key.\n   * Used with symmetric signing (e.g., HMAC HS256, etc.) and\n   * symmetric encryption (e.g., A256GCM, etc.) algorithms.\n   */\n  alg?:\n    // AES CBC using 128-bit key\n    | 'A128CBC'\n    // AES CBC using 192-bit key\n    | 'A192CBC'\n    // AES CBC using 256-bit key\n    | 'A256CBC'\n    // AES CTR using 128-bit key\n    | 'A128CTR'\n    // AES CTR using 192-bit key\n    | 'A192CTR'\n    // AES CTR using 256-bit key\n    | 'A256CTR'\n    // AES GCM using a 128-bit key\n    | 'A128GCM'\n    // AES GCM using a 192-bit key\n    | 'A192GCM'\n    // AES GCM using a 256-bit key\n    | 'A256GCM'\n    // HMAC using SHA-256\n    | 'HS256'\n    // HMAC using SHA-384\n    | 'HS384'\n    // HMAC using SHA-512\n    | 'HS512'\n\n  /**\n   * The \"k\" (key value) parameter contains the value of the symmetric\n   * (or other single-valued) key.  It is represented as the base64url\n   * encoding of the octet sequence containing the key value.\n   */\n  k: string;\n\n  /**\n   * Key type\n   * oct (Octet Sequence) is defined for symmetric encryption and\n   * symmetric signature algorithms.\n   */\n  kty: 'oct';\n}\n\n/** Parameters Used with \"RSA\" public keys. */\nexport type JwkParamsRsaPublic = Omit<JwkParamsAnyKeyType, 'kty'> & {\n  /** Public exponent for RSA */\n  e: string;\n\n  /**\n   * Key type\n   * RSA is widely used for encryption and digital signatures.\n   */\n  kty: 'RSA';\n\n  /** Modulus for RSA */\n  n: string;\n};\n\n/** Parameters used with \"RSA\" private keys. */\nexport type JwkParamsRsaPrivate = JwkParamsRsaPublic & {\n  /** Private exponent for RSA */\n  d: string;\n  /** First prime factor for RSA */\n  p?: string;\n  /** Second prime factor for RSA */\n  q?: string;\n  /** First factor's CRT exponent for RSA */\n  dp?: string;\n  /** Second factor's CRT exponent for RSA */\n  dq?: string;\n  /** First CRT coefficient for RSA */\n  qi?: string;\n  /** Other primes information (optional in RFC 7518) */\n  oth?: {\n    /** Other primes' factor */\n    r: string;\n    /** Other primes' CRT exponent */\n    d: string;\n    /** Other primes' CRT coefficient */\n    t: string;\n  }[];\n};\n\n/** Parameters used with public keys in JWK format. */\nexport type PublicKeyJwk = JwkParamsEcPublic | JwkParamsOkpPublic | JwkParamsRsaPublic;\n\n/** Parameters used with private keys in JWK format. */\nexport type PrivateKeyJwk = JwkParamsEcPrivate | JwkParamsOkpPrivate | JwkParamsOctPrivate | JwkParamsRsaPrivate;\n\n/**\n * JSON Web Key ({@link https://datatracker.ietf.org/doc/html/rfc7517 | JWK}).\n * \"RSA\", \"EC\", \"OKP\", and \"oct\" key types are supported.\n */\nexport interface Jwk {\n  // Common properties that apply to all key types.\n\n  /** JWK Algorithm Parameter. The algorithm intended for use with the key. */\n  alg?: string;\n  /** JWK Extractable Parameter */\n  ext?: 'true' | 'false';\n  /** JWK Key Operations Parameter */\n  key_ops?: JwkOperation[];\n  /** JWK Key ID Parameter */\n  kid?: string;\n  /** JWK Key Type Parameter */\n  kty: JwkType;\n  /** JWK Public Key Use Parameter */\n  use?: JwkUse;\n  /** JWK X.509 Certificate Chain Parameter */\n  x5c?: string;\n  /** JWK X.509 Certificate SHA-1 Thumbprint Parameter */\n  x5t?: string;\n  /** JWK X.509 Certificate SHA-256 Thumbprint Parameter */\n  'x5t#S256'?: string;\n  /** JWK X.509 URL Parameter */\n  x5u?: string;\n\n  // Elliptic Curve (EC or OKP) public key properties.\n\n  /** The cryptographic curve used with the key. */\n  crv?: string;\n  /** The x-coordinate for the Elliptic Curve point. */\n  x?: string;\n  /** The y-coordinate for the Elliptic Curve point. */\n  y?: string;\n\n  // Symmetric key properties.\n\n  /** The \"k\" (key value) parameter contains the value of the symmetric (or other single-valued) key. */\n  k?: string;\n\n  // RSA public key properties.\n\n  /** Public exponent for RSA */\n  e?: string;\n  /** Modulus for RSA */\n  n?: string;\n  /** First prime factor for RSA */\n  p?: string;\n  /** Second prime factor for RSA */\n  q?: string;\n  /** First factor's CRT exponent for RSA */\n  dp?: string;\n  /** Second factor's CRT exponent for RSA */\n  dq?: string;\n  /** First CRT coefficient for RSA */\n  qi?: string;\n  /** Other primes information (optional in RFC 7518) */\n  oth?: {\n    /** Other primes' factor */\n    r: string;\n    /** Other primes' CRT exponent */\n    d: string;\n    /** Other primes' CRT coefficient */\n    t: string;\n  }[];\n\n  // Elliptic Curve and RSA private key properties.\n\n  /** Private key component for EC, OKP, or RSA keys. */\n  d?: string;\n\n  // Additional public or private properties.\n  [key: string]: unknown;\n}\n\n/**\n * JSON Web Key Set ({@link https://datatracker.ietf.org/doc/html/rfc7517 | JWK Set})\n *\n * @remarks\n * A JWK Set is a JSON object that represents a set of JWKs. The JSON object MUST have a \"keys\"\n * member, with its value being an array of JWKs.\n *\n * Additional members can be present in the JWK Set but member names MUST be unique. If not\n * understood by implementations encountering them, they MUST be ignored. Parameters for\n * representing additional properties of JWK Sets should either be registered in the IANA\n * \"JSON Web Key Set Parameters\" registry or be a value that contains a Collision-Resistant Name.\n */\nexport interface JwkSet {\n  /** Array of JWKs */\n  keys: Jwk[]\n}\n\n/**\n * Computes the thumbprint of a JSON Web Key (JWK) using the method\n * specified in RFC 7638. This function accepts RSA, EC, OKP, and oct keys\n * and returns the thumbprint as a base64url encoded SHA-256 hash of the\n * JWK's required members, serialized and sorted lexicographically.\n *\n * Purpose:\n * - Uniquely Identifying Keys: The thumbprint allows the unique\n *   identification of a specific JWK within a set of JWKs. It provides a\n *   deterministic way to generate a value that can be used as a key\n *   identifier (kid) or to match a specific key.\n *\n * - Simplifying Key Management: In systems where multiple keys are used,\n *   managing and identifying individual keys can become complex. The\n *   thumbprint method simplifies this by creating a standardized, unique\n *   identifier for each key.\n *\n * - Enabling Interoperability: By standardizing the method to compute a\n *   thumbprint, different systems can compute the same thumbprint value for\n *   a given JWK. This enables interoperability among systems that use JWKs.\n *\n * - Secure Comparison: The thumbprint provides a way to securely compare\n *   JWKs to determine if they are equivalent.\n *\n * @example\n * ```ts\n * const jwk: PublicKeyJwk = {\n *   'kty': 'EC',\n *   'crv': 'secp256k1',\n *   'x': '61iPYuGefxotzBdQZtDvv6cWHZmXrTTscY-u7Y2pFZc',\n *   'y': '88nPCVLfrAY9i-wg5ORcwVbHWC_tbeAd1JE2e0co0lU'\n * };\n *\n * const thumbprint = jwkThumbprint(jwk);\n * console.log(`JWK thumbprint: ${thumbprint}`);\n * ```\n *\n * @see {@link https://datatracker.ietf.org/doc/html/rfc7638 | RFC7638} for\n * the specification of JWK thumbprint computation.\n *\n * @param jwk - The JSON Web Key for which the thumbprint will be computed.\n *              This must be an RSA, EC, OKP, or oct key.\n * @returns The thumbprint as a base64url encoded string.\n * @throws Throws an `Error` if the provided key type is unsupported.\n */\nexport async function computeJwkThumbprint({ jwk }: {\n  jwk: Jwk\n}): Promise<string> {\n  /** Step 1 - Normalization: The JWK is normalized to include only specific\n   * members and in lexicographic order.\n   */\n  const keyType = jwk.kty;\n  let normalizedJwk: Jwk;\n  if (keyType === 'EC') {\n    normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };\n  } else if (keyType === 'oct') {\n    normalizedJwk = { k: jwk.k, kty: jwk.kty };\n  } else if (keyType === 'OKP') {\n    normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };\n  } else if (keyType === 'RSA') {\n    normalizedJwk = { e: jwk.e, kty: jwk.kty, n: jwk.n };\n  } else {\n    throw new Error(`Unsupported key type: ${keyType}`);\n  }\n  removeUndefinedProperties(normalizedJwk);\n\n  /** Step 2 - Serialization: The normalized JWK is serialized to a UTF-8\n   * representation of its JSON encoding. */\n  const serializedJwk = canonicalize(normalizedJwk);\n\n  /** Step 3 - Digest Calculation: A cryptographic hash function\n   * (SHA-256 is recommended) is applied to the serialized JWK,\n   * resulting in the thumbprint. */\n  const utf8Bytes = Convert.string(serializedJwk).toUint8Array();\n  const digest = await Sha256.digest({ data: utf8Bytes });\n\n  // Encode as Base64Url.\n  const thumbprint = Convert.uint8Array(digest).toBase64Url();\n\n  return thumbprint;\n}\n\n/**\n * Checks if the provided object is a valid elliptic curve private key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid EC private JWK; otherwise, false.\n */\nexport function isEcPrivateJwk(obj: unknown): obj is JwkParamsEcPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj && 'd' in obj)) return false;\n  if (obj.kty !== 'EC') return false;\n  if (typeof obj.d !== 'string') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid elliptic curve public key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid EC public JWK; otherwise, false.\n */\nexport function isEcPublicJwk(obj: unknown): obj is JwkParamsEcPublic {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj)) return false;\n  if ('d' in obj) return false;\n  if (obj.kty !== 'EC') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet sequence (symmetric key) in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid oct private JWK; otherwise, false.\n */\nexport function isOctPrivateJwk(obj: unknown): obj is JwkParamsOctPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'k' in obj)) return false;\n  if (obj.kty !== 'oct') return false;\n  if (typeof obj.k !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet key pair private key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid OKP private JWK; otherwise, false.\n */\nexport function isOkpPrivateJwk(obj: unknown): obj is JwkParamsOkpPrivate {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj && 'd' in obj)) return false;\n  if (obj.kty !== 'OKP') return false;\n  if (typeof obj.d !== 'string') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid octet key pair public key in JWK format.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid OKP public JWK; otherwise, false.\n */\nexport function isOkpPublicJwk(obj: unknown): obj is JwkParamsOkpPublic {\n  if (!obj || typeof obj !== 'object') return false;\n  if ('d' in obj) return false;\n  if (!('kty' in obj && 'crv' in obj && 'x' in obj)) return false;\n  if (obj.kty !== 'OKP') return false;\n  if (typeof obj.x !== 'string') return false;\n  return true;\n}\n\n/**\n * Checks if the provided object is a valid private key in JWK format of any supported type.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid private JWK; otherwise, false.\n */\nexport function isPrivateJwk(obj: unknown): obj is PrivateKeyJwk {\n  if (!obj || typeof obj !== 'object') return false;\n\n  const kty = (obj as { kty: string }).kty;\n\n  switch (kty) {\n    case 'EC':\n    case 'OKP':\n    case 'RSA':\n      return 'd' in obj;\n    case 'oct':\n      return 'k' in obj;\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks if the provided object is a valid public key in JWK format of any supported type.\n *\n * @param obj - The object to check.\n * @returns True if the object is a valid public JWK; otherwise, false.\n */\nexport function isPublicJwk(obj: unknown): obj is PublicKeyJwk {\n  if (!obj || typeof obj !== 'object') return false;\n\n  const kty = (obj as { kty: string }).kty;\n\n  switch (kty) {\n    case 'EC':\n    case 'OKP':\n      return 'x' in obj && !('d' in obj);\n    case 'RSA':\n      return 'n' in obj && 'e' in obj && !('d' in obj);\n    default:\n      return false;\n  }\n}", "import type { AffinePoint } from '@noble/curves/abstract/weierstrass';\n\nimport { Convert } from '@web5/common';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToBytesBE } from '@noble/curves/abstract/utils';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Secp256k1` class provides a comprehensive suite of utilities for working with\n * the secp256k1 elliptic curve, commonly used in blockchain and cryptographic applications.\n * This class includes methods for key generation, conversion, signing, verification, and\n * Elliptic Curve Diffie-Hellman (ECDH) key agreement.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * adheres to RFC6979 for ECDSA signing and verification and RFC6090 for ECDH.\n *\n * Key Features:\n * - Key Generation: Generate secp256k1 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n * - ECDSA Signing and Verification: Sign data and verify signatures with secp256k1 keys.\n * - Key Validation: Validate the mathematical correctness of secp256k1 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Secp256k1.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Secp256k1.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Secp256k1.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await Secp256k1.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // ECDSA Signing\n * const signature = await Secp256k1.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // ECDSA Signature Verification\n * const isValid = await Secp256k1.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });\n * const compressedPublicKey = await Secp256k1.compressPublicKey({ publicKeyBytes });\n * const uncompressedPublicKey = await Secp256k1.decompressPublicKey({ publicKeyBytes });\n *\n * // Key Validation\n * const isPrivateKeyValid = await Secp256k1.validatePrivateKey({ privateKeyBytes });\n * const isPublicKeyValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Secp256k1 {\n  /**\n   * Adjusts an ECDSA signature to a normalized, low-S form.\n   *\n   * @remarks\n   * All ECDSA signatures, regardless of the curve, consist of two components, `r` and `s`, both of\n   * which are integers. The curve's order (the total number of points on the curve) is denoted by\n   * `n`. In a valid ECDSA signature, both `r` and `s` must be in the range [1, n-1]. However, due\n   * to the mathematical properties of ECDSA, if `(r, s)` is a valid signature, then `(r, n - s)` is\n   * also a valid signature for the same message and public key. In other words, for every\n   * signature, there's a \"mirror\" signature that's equally valid. For these elliptic curves:\n   *\n   * - Low S Signature: A signature where the `s` component is in the lower half of the range,\n   *                    specifically less than or equal to `n/2`.\n   *\n   * - High S Signature: This is where the `s` component is in the upper half of the range, greater\n   *                     than `n/2`.\n   *\n   * The practical implication is that a third-party can forge a second valid signature for the same\n   * message by negating the `s` component of the original signature, without any knowledge of the\n   * private key. This is known as a \"signature malleability\" attack.\n   *\n   * This type of forgery is not a problem in all systems, but it can be an issue in systems that\n   * rely on digital signature uniqueness to ensure transaction integrity. For example, in Bitcoin,\n   * transaction malleability is an issue because it allows for the modification of transaction\n   * identifiers (and potentially, transactions themselves) after they're signed but before they're\n   * confirmed in a block. By enforcing low `s` values, the Bitcoin network reduces the likelihood of\n   * this occurring, making the system more secure and predictable.\n   *\n   * For this reason, it's common practice to normalize ECDSA signatures to a low-S form. This\n   * form is considered standard and preferable in some systems and is known as the \"normalized\"\n   * form of the signature.\n   *\n   * This method takes a signature, and if it's high-S, returns the normalized low-S form. If the\n   * signature is already low-S, it's returned unmodified. It's important to note that this\n   * method does not change the validity of the signature but makes it compliant with systems that\n   * enforce low-S signatures.\n   *\n   * @example\n   * ```ts\n   * const signature = new Uint8Array([...]); // Your ECDSA signature\n   * const adjustedSignature = await Secp256k1.adjustSignatureToLowS({ signature });\n   * // Now 'adjustedSignature' is in the low-S form.\n   * ```\n   *\n   * @param params - The parameters for the signature adjustment.\n   * @param params.signature - The ECDSA signature as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the adjusted signature in low-S form as a `Uint8Array`.\n   */\n  public static async adjustSignatureToLowS({ signature }: {\n    signature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the signature to a `secp256k1.Signature` object.\n    const signatureObject = secp256k1.Signature.fromCompact(signature);\n\n    if (signatureObject.hasHighS()) {\n      // Adjust the signature to low-S format if it's high-S.\n      const adjustedSignatureObject = signatureObject.normalizeS();\n\n      // Convert the adjusted signature object back to a byte array.\n      const adjustedSignature = adjustedSignatureObject.toCompactRawBytes();\n\n      return adjustedSignature;\n\n    } else {\n      // Return the unmodified signature if it is already in low-S format.\n      return signature;\n    }\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method takes a private key represented as a byte array (Uint8Array) and\n   * converts it into a JWK object. The conversion involves extracting the\n   * elliptic curve point (x and y coordinates) from the private key and encoding\n   * them into base64url format, alongside other JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Secp256k1.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key in a byte array (Uint8Array) format and\n   * transforms it to a JWK object. It involves decoding the elliptic curve point\n   * (x and y coordinates) from the raw public key bytes and encoding them into\n   * base64url format, along with setting appropriate JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await Secp256k1.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided public key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: publicKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a public key to its compressed form.\n   *\n   * @remarks\n   * This method takes a public key represented as a byte array and compresses it. Public key\n   * compression is a process that reduces the size of the public key by removing the y-coordinate,\n   * making it more efficient for storage and transmission. The compressed key retains the same\n   * level of security as the uncompressed key.\n   *\n   * @example\n   * ```ts\n   * const uncompressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual uncompressed public key bytes\n   * const compressedPublicKey = await Secp256k1.compressPublicKey({\n   *   publicKeyBytes: uncompressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key compression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the compressed public key as a Uint8Array.\n   */\n  public static async compressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the compressed form of the public key.\n    return point.toRawBytes(true);\n  }\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The derivation process involves converting the private key to a raw\n   * byte array, then computing the elliptic curve point (x and y coordinates) from this private\n   * key. These coordinates are then encoded into base64url format to construct the public key in\n   * JWK format.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the secp256k1 elliptic curve standards. This method is useful in cryptographic\n   * operations where a public key is needed for operations like signature verification, but only\n   * the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const publicKey = await Secp256k1.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Secp256k1.privateKeyToBytes({ privateKey: key });\n\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256k1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'secp256k1',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an ASN.1 DER encoded ECDSA signature to a compact R+S format.\n   *\n   * @remarks\n   * This method is used for converting an ECDSA signature from the ASN.1 DER encoding to the more\n   * compact R+S format. This conversion is often required when dealing with ECDSA signatures in\n   * certain cryptographic standards such as JWS (JSON Web Signature).\n   *\n   * The method decodes the DER-encoded signature, extracts the R and S values, and concatenates\n   * them into a single byte array. This process involves handling the ASN.1 structure to correctly\n   * parse the R and S values, considering padding and integer encoding specifics of DER.\n   *\n   * @example\n   * ```ts\n   * const derSignature = new Uint8Array([...]); // Replace with your DER-encoded signature\n   * const signature = await Secp256k1.convertDerToCompactSignature({ derSignature });\n   * ```\n   *\n   * @param params - The parameters for the signature conversion.\n   * @param params.derSignature - The signature in ASN.1 DER format as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the signature in compact R+S format as a `Uint8Array`.\n   */\n  public static async convertDerToCompactSignature({ derSignature }: {\n    derSignature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the DER-encoded signature into a `secp256k1.Signature` object.\n    // This involves parsing the ASN.1 DER structure to extract the R and S components.\n    const signatureObject = secp256k1.Signature.fromDER(derSignature);\n\n    // Convert the signature object into compact R+S format, which concatenates the R and S values\n    // into a single byte array.\n    const compactSignature = signatureObject.toCompactRawBytes();\n\n    return  compactSignature;\n  }\n\n  /**\n   * Converts a public key to its uncompressed form.\n   *\n   * @remarks\n   * This method takes a compressed public key represented as a byte array and decompresses it.\n   * Public key decompression involves reconstructing the y-coordinate from the x-coordinate,\n   * resulting in the full public key. This method is used when the uncompressed key format is\n   * required for certain cryptographic operations or interoperability.\n   *\n   * @example\n   * ```ts\n   * const compressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual compressed public key bytes\n   * const decompressedPublicKey = await Secp256k1.decompressPublicKey({\n   *   publicKeyBytes: compressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key decompression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the uncompressed public key as a Uint8Array.\n   */\n  public static async decompressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the uncompressed form of the public key.\n    return point.toRawBytes(false);\n  }\n\n  /**\n   * Generates a secp256k1 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the secp256k1\n   * elliptic curve. The key is generated using cryptographically secure random\n   * number generation to ensure its uniqueness and security. The resulting\n   * private key adheres to the JWK format, specifically tailored for secp256k1,\n   * making it compatible with common cryptographic standards and easy to use in\n   * various cryptographic processes.\n   *\n   * The private key generated by this method includes the following components:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'secp256k1'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, derived from the private key, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, derived from the private key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in signin and key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Secp256k1.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = secp256k1.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Secp256k1.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from a secp256k1 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const publicKey = await Secp256k1.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    // Verify the provided JWK represents an elliptic curve (EC) secp256k1 private key.\n    if (!(isEcPrivateJwk(key) && key.crv === 'secp256k1')) {\n      throw new Error(`Secp256k1: The provided key is not a secp256k1 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method takes a private key in JWK format and extracts its raw byte representation.\n   * It specifically focuses on the 'd' parameter of the JWK, which represents the private\n   * key component in base64url encoding. The method decodes this value into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC secp256k1 private key.\n    if (!isEcPrivateJwk(privateKey)) {\n      throw new Error(`Secp256k1: The provided key is not a valid EC private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'x' and 'y' parameters of the JWK\n   * (which represent the x and y coordinates of the elliptic curve point, respectively)\n   * from base64url format into a byte array. The method then concatenates these values,\n   * along with a prefix indicating the key format, to form the full public key.\n   *\n   * This function is particularly useful for use cases where the public key is needed\n   * in its raw byte format, such as for certain cryptographic operations or when\n   * interfacing with systems that require raw key formats.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // A Jwk public key object\n   * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC secp256k1 public key, which must have a 'y' value.\n    if (!(isEcPublicJwk(publicKey) && publicKey.y)) {\n      throw new Error(`Secp256k1: The provided key is not a valid EC public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const prefix = new Uint8Array([0x04]); // Designates an uncompressed key.\n    const x = Convert.base64Url(publicKey.x).toUint8Array();\n    const y = Convert.base64Url(publicKey.y).toUint8Array();\n\n    // Concatenate the prefix, x-coordinate, and y-coordinate as a single byte array.\n    const publicKeyBytes = new Uint8Array([...prefix, ...x, ...y]);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256k1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256k1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk private key object for party A\n   * const publicKeyB = { ... }; // A Jwk public key object for party B\n   * const sharedSecret = await Secp256k1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`Secp256k1: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await Secp256k1.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await Secp256k1.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the compact representation shared secret between the public and private keys.\n    const sharedSecret = secp256k1.getSharedSecret(privateKeyABytes, publicKeyBBytes, true);\n\n    // Remove the leading byte that indicates the sign of the y-coordinate\n    // of the point on the elliptic curve.  See note above.\n    return sharedSecret.slice(1);\n  }\n\n  /**\n   * Generates an RFC6979-compliant ECDSA signature of given data using a secp256k1 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the ECDSA\n   * (Elliptic Curve Digital Signature Algorithm) signature algorithm, as defined in RFC6979.\n   * The data to be signed is first hashed using the SHA-256 algorithm, and this hash is then\n   * signed using the private key. The output is a digital signature in the form of a\n   * Uint8Array, which uniquely corresponds to both the data and the private key used for signing.\n   *\n   * This method is commonly used in cryptographic applications to ensure data integrity and\n   * authenticity. The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing a secp256k1 private key\n   * const signature = await Secp256k1.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ data, key }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    // Sign the provided data using the ECDSA algorithm.\n    // The `secp256k1.sign` operation returns a signature object with { r, s, recovery } properties.\n    const signatureObject = secp256k1.sign(digest, privateKeyBytes);\n\n    // Convert the signature object to Uint8Array.\n    const signature = signatureObject.toCompactRawBytes();\n\n    return signature;\n  }\n\n  /**\n   * Validates a given private key to ensure its compliance with the secp256k1 curve standards.\n   *\n   * @remarks\n   * This method checks whether a provided private key is a valid 32-byte number and falls within\n   * the range defined by the secp256k1 curve's order. It is essential for ensuring the private\n   * key's mathematical correctness in the context of secp256k1-based cryptographic operations.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // A 32-byte private key\n   * const isValid = await Secp256k1.validatePrivateKey({ privateKeyBytes });\n   * console.log(isValid); // true or false based on the key's validity\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.privateKeyBytes - The private key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the private key is valid.\n   */\n  public static async validatePrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    return secp256k1.utils.isValidPrivateKey(privateKeyBytes);\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the secp256k1 curve.\n   *\n   * @remarks\n   * This method checks if the provided public key represents a valid point on the secp256k1 curve.\n   * It decodes the key's Weierstrass points (x and y coordinates) and verifies their validity\n   * against the curve's parameters. A valid point must lie on the curve and meet specific\n   * mathematical criteria defined by the curve's equation.\n   *\n   * It's important to note that this method does not verify the key's ownership or whether it has\n   * been compromised; it solely focuses on the key's adherence to the curve's mathematical\n   * principles.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the secp256k1 curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating the public key's validity on\n   *          the secp256k1 curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n      // Decode Weierstrass points from key bytes.\n      const point = secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Short Weierstrass curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC6979-compliant ECDSA signature against given data and a secp256k1 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure that it was generated by the holder of the\n   * corresponding private key and that the signed data has not been altered. The signature\n   * verification is performed using the ECDSA (Elliptic Curve Digital Signature Algorithm) as\n   * specified in RFC6979. The data to be verified is first hashed using the SHA-256 algorithm, and\n   * this hash is then used along with the public key to verify the signature.\n   *\n   * The method returns a boolean value indicating whether the signature is valid. A valid signature\n   * proves that the signed data was indeed signed by the owner of the private key corresponding to\n   * the provided public key and that the data has not been tampered with since it was signed.\n   *\n   * Note: The verification process does not consider the malleability of low-s signatures, which\n   * may be relevant in certain contexts, such as Bitcoin transactions.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isSignatureValid = await Secp256k1.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * console.log(isSignatureValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key used for verification, represented in JWK format.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    /** Perform the verification of the signature.\n     * This verify operation has the malleability check disabled. Guaranteed support\n     * for low-s signatures across languages is unlikely especially in the context\n     * of SSI. Notable Cloud KMS providers do not natively support it either. It is\n     * also worth noting that low-s signatures are a requirement for Bitcoin. */\n    const isValid = secp256k1.verify(signature, digest, publicKeyBytes, { lowS: false });\n\n    return isValid;\n  }\n\n  /**\n   * Returns the elliptic curve point (x and y coordinates) for a given secp256k1 key.\n   *\n   * @remarks\n   * This method extracts the elliptic curve point from a given secp256k1 key, whether\n   * it's a private or a public key. For a private key, the method first computes the\n   * corresponding public key and then extracts the x and y coordinates. For a public key,\n   * it directly returns these coordinates. The coordinates are represented as Uint8Array.\n   *\n   * The x and y coordinates represent the key's position on the elliptic curve and can be\n   * used in various cryptographic operations, such as digital signatures or key agreement\n   * protocols.\n   *\n   * @example\n   * ```ts\n   * // For a private key\n   * const privateKey = new Uint8Array([...]); // A 32-byte private key\n   * const { x: xFromPrivateKey, y: yFromPrivateKey } = await Secp256k1.getCurvePoint({ keyBytes: privateKey });\n   *\n   * // For a public key\n   * const publicKey = new Uint8Array([...]); // A 33-byte or 65-byte public key\n   * const { x: xFromPublicKey, y: yFromPublicKey } = await Secp256k1.getCurvePoint({ keyBytes: publicKey });\n   * ```\n   *\n   * @param params - The parameters for the curve point decoding operation.\n   * @param params.keyBytes - The key for which to get the elliptic curve point.\n   *                          Can be either a private key or a public key.\n   *                          The key should be passed as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to an object with properties 'x' and 'y',\n   *          each being a Uint8Array representing the x and y coordinates of the key point on the\n   *          elliptic curve.\n   */\n  private static async getCurvePoint({ keyBytes }: {\n    keyBytes: Uint8Array;\n  }): Promise<AffinePoint<Uint8Array>> {\n    // If key is a private key, first compute the public key.\n    if (keyBytes.byteLength === 32) {\n      keyBytes = secp256k1.getPublicKey(keyBytes);\n    }\n\n    // Decode Weierstrass affine point from key bytes.\n    const point = secp256k1.ProjectivePoint.fromHex(keyBytes);\n\n    // Get x- and y-coordinate values and convert to Uint8Array.\n    const x = numberToBytesBE(point.x, 32);\n    const y = numberToBytesBE(point.y, 32);\n\n    return { x, y };\n  }\n}", "import type { AffinePoint } from '@noble/curves/abstract/weierstrass';\n\nimport { Convert } from '@web5/common';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { numberToBytesBE } from '@noble/curves/abstract/utils';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Secp256r1` class provides a comprehensive suite of utilities for working with\n * the secp256r1 (aka P-256) elliptic curve, commonly used in blockchain and cryptographic\n * applications. This class includes methods for key generation, conversion, signing, verification,\n * and Elliptic Curve Diffie-Hellman (ECDH) key agreement.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * adheres to RFC6979 for ECDSA signing and verification and RFC6090 for ECDH.\n *\n * Key Features:\n * - Key Generation: Generate secp256r1 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n * - ECDSA Signing and Verification: Sign data and verify signatures with secp256r1 keys.\n * - Key Validation: Validate the mathematical correctness of secp256r1 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Secp256r1.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Secp256r1.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Secp256r1.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await Secp256r1.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // ECDSA Signing\n * const signature = await Secp256r1.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // ECDSA Signature Verification\n * const isValid = await Secp256r1.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey });\n * const compressedPublicKey = await Secp256r1.compressPublicKey({ publicKeyBytes });\n * const uncompressedPublicKey = await Secp256r1.decompressPublicKey({ publicKeyBytes });\n *\n * // Key Validation\n * const isPrivateKeyValid = await Secp256r1.validatePrivateKey({ privateKeyBytes });\n * const isPublicKeyValid = await Secp256r1.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Secp256r1 {\n/**\n   * Adjusts an ECDSA signature to a normalized, low-S form.\n   *\n   * @remarks\n   * All ECDSA signatures, regardless of the curve, consist of two components, `r` and `s`, both of\n   * which are integers. The curve's order (the total number of points on the curve) is denoted by\n   * `n`. In a valid ECDSA signature, both `r` and `s` must be in the range [1, n-1]. However, due\n   * to the mathematical properties of ECDSA, if `(r, s)` is a valid signature, then `(r, n - s)` is\n   * also a valid signature for the same message and public key. In other words, for every\n   * signature, there's a \"mirror\" signature that's equally valid. For these elliptic curves:\n   *\n   * - Low S Signature: A signature where the `s` component is in the lower half of the range,\n   *                    specifically less than or equal to `n/2`.\n   *\n   * - High S Signature: This is where the `s` component is in the upper half of the range, greater\n   *                     than `n/2`.\n   *\n   * The practical implication is that a third-party can forge a second valid signature for the same\n   * message by negating the `s` component of the original signature, without any knowledge of the\n   * private key. This is known as a \"signature malleability\" attack.\n   *\n   * This type of forgery is not a problem in all systems, but it can be an issue in systems that\n   * rely on digital signature uniqueness to ensure transaction integrity. For example, in Bitcoin,\n   * transaction malleability is an issue because it allows for the modification of transaction\n   * identifiers (and potentially, transactions themselves) after they're signed but before they're\n   * confirmed in a block. By enforcing low `s` values, the Bitcoin network reduces the likelihood of\n   * this occurring, making the system more secure and predictable.\n   *\n   * For this reason, it's common practice to normalize ECDSA signatures to a low-S form. This\n   * form is considered standard and preferable in some systems and is known as the \"normalized\"\n   * form of the signature.\n   *\n   * This method takes a signature, and if it's high-S, returns the normalized low-S form. If the\n   * signature is already low-S, it's returned unmodified. It's important to note that this\n   * method does not change the validity of the signature but makes it compliant with systems that\n   * enforce low-S signatures.\n   *\n   * @example\n   * ```ts\n   * const signature = new Uint8Array([...]); // Your ECDSA signature\n   * const adjustedSignature = await Secp256r1.adjustSignatureToLowS({ signature });\n   * // Now 'adjustedSignature' is in the low-S form.\n   * ```\n   *\n   * @param params - The parameters for the signature adjustment.\n   * @param params.signature - The ECDSA signature as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the adjusted signature in low-S form as a `Uint8Array`.\n   */\n  public static async adjustSignatureToLowS({ signature }: {\n    signature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the signature to a `Secp256r1.Signature` object.\n    const signatureObject = secp256r1.Signature.fromCompact(signature);\n\n    if (signatureObject.hasHighS()) {\n      // Adjust the signature to low-S format if it's high-S.\n      const adjustedSignatureObject = signatureObject.normalizeS();\n\n      // Convert the adjusted signature object back to a byte array.\n      const adjustedSignature = adjustedSignatureObject.toCompactRawBytes();\n\n      return adjustedSignature;\n\n    } else {\n      // Return the unmodified signature if it is already in low-S format.\n      return signature;\n    }\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method takes a private key represented as a byte array (Uint8Array) and\n   * converts it into a JWK object. The conversion involves extracting the\n   * elliptic curve point (x and y coordinates) from the private key and encoding\n   * them into base64url format, alongside other JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Secp256r1.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve points (x and y coordinates) for the provided private key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key in a byte array (Uint8Array) format and\n   * transforms it to a JWK object. It involves decoding the elliptic curve point\n   * (x and y coordinates) from the raw public key bytes and encoding them into\n   * base64url format, along with setting appropriate JWK parameters.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `x`: The x-coordinate of the public key point, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await Secp256r1.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Get the elliptic curve point (x and y coordinates) for the provided public key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: publicKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a public key to its compressed form.\n   *\n   * @remarks\n   * This method takes a public key represented as a byte array and compresses it. Public key\n   * compression is a process that reduces the size of the public key by removing the y-coordinate,\n   * making it more efficient for storage and transmission. The compressed key retains the same\n   * level of security as the uncompressed key.\n   *\n   * @example\n   * ```ts\n   * const uncompressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual uncompressed public key bytes\n   * const compressedPublicKey = await Secp256r1.compressPublicKey({\n   *   publicKeyBytes: uncompressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key compression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the compressed public key as a Uint8Array.\n   */\n  public static async compressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the compressed form of the public key.\n    return point.toRawBytes(true);\n  }\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The derivation process involves converting the private key to a raw\n   * byte array, then computing the elliptic curve point (x and y coordinates) from this private\n   * key. These coordinates are then encoded into base64url format to construct the public key in\n   * JWK format.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the secp256r1 elliptic curve standards. This method is useful in cryptographic\n   * operations where a public key is needed for operations like signature verification, but only\n   * the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const publicKey = await Secp256r1.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Secp256r1.privateKeyToBytes({ privateKey: key });\n\n    // Get the elliptic curve point (x and y coordinates) for the provided private key.\n    const point = await Secp256r1.getCurvePoint({ keyBytes: privateKeyBytes });\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'EC',\n      crv : 'P-256',\n      x   : Convert.uint8Array(point.x).toBase64Url(),\n      y   : Convert.uint8Array(point.y).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an ASN.1 DER encoded ECDSA signature to a compact R+S format.\n   *\n   * @remarks\n   * This method is used for converting an ECDSA signature from the ASN.1 DER encoding to the more\n   * compact R+S format. This conversion is often required when dealing with ECDSA signatures in\n   * certain cryptographic standards such as JWS (JSON Web Signature).\n   *\n   * The method decodes the DER-encoded signature, extracts the R and S values, and concatenates\n   * them into a single byte array. This process involves handling the ASN.1 structure to correctly\n   * parse the R and S values, considering padding and integer encoding specifics of DER.\n   *\n   * @example\n   * ```ts\n   * const derSignature = new Uint8Array([...]); // Replace with your DER-encoded signature\n   * const signature = await Secp256r1.convertDerToCompactSignature({ derSignature });\n   * ```\n   *\n   * @param params - The parameters for the signature conversion.\n   * @param params.derSignature - The signature in ASN.1 DER format as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the signature in compact R+S format as a `Uint8Array`.\n   */\n  public static async convertDerToCompactSignature({ derSignature }: {\n    derSignature: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Convert the DER-encoded signature into a `Secp256r1.Signature` object.\n    // This involves parsing the ASN.1 DER structure to extract the R and S components.\n    const signatureObject = secp256r1.Signature.fromDER(derSignature);\n\n    // Convert the signature object into compact R+S format, which concatenates the R and S values\n    // into a single byte array.\n    const compactSignature = signatureObject.toCompactRawBytes();\n\n    return  compactSignature;\n  }\n\n  /**\n   * Converts a public key to its uncompressed form.\n   *\n   * @remarks\n   * This method takes a compressed public key represented as a byte array and decompresses it.\n   * Public key decompression involves reconstructing the y-coordinate from the x-coordinate,\n   * resulting in the full public key. This method is used when the uncompressed key format is\n   * required for certain cryptographic operations or interoperability.\n   *\n   * @example\n   * ```ts\n   * const compressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual compressed public key bytes\n   * const decompressedPublicKey = await Secp256r1.decompressPublicKey({\n   *   publicKeyBytes: compressedPublicKeyBytes\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key decompression.\n   * @param params.publicKeyBytes - The public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the uncompressed public key as a Uint8Array.\n   */\n  public static async decompressPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Uint8Array> {\n    // Decode Weierstrass points from the public key byte array.\n    const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n    // Return the uncompressed form of the public key.\n    return point.toRawBytes(false);\n  }\n\n  /**\n   * Generates a secp256r1 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the secp256r1\n   * elliptic curve. The key is generated using cryptographically secure random\n   * number generation to ensure its uniqueness and security. The resulting\n   * private key adheres to the JWK format, specifically tailored for secp256r1,\n   * making it compatible with common cryptographic standards and easy to use in\n   * various cryptographic processes.\n   *\n   * The private key generated by this method includes the following components:\n   * - `kty`: Key Type, set to 'EC' for Elliptic Curve.\n   * - `crv`: Curve Name, set to 'P-256'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The x-coordinate of the public key point, derived from the private key, base64url-encoded.\n   * - `y`: The y-coordinate of the public key point, derived from the private key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in signin and key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Secp256r1.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = secp256r1.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Secp256r1.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from a secp256r1 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const publicKey = await Secp256r1.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    // Verify the provided JWK represents an elliptic curve (EC) secp256r1 private key.\n    if (!(isEcPrivateJwk(key) && key.crv === 'P-256')) {\n      throw new Error(`Secp256r1: The provided key is not a 'P-256' private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method takes a private key in JWK format and extracts its raw byte representation.\n   * It specifically focuses on the 'd' parameter of the JWK, which represents the private\n   * key component in base64url encoding. The method decodes this value into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC P-256 private key.\n    if (!isEcPrivateJwk(privateKey)) {\n      throw new Error(`Secp256r1: The provided key is not a valid EC private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'x' and 'y' parameters of the JWK\n   * (which represent the x and y coordinates of the elliptic curve point, respectively)\n   * from base64url format into a byte array. The method then concatenates these values,\n   * along with a prefix indicating the key format, to form the full public key.\n   *\n   * This function is particularly useful for use cases where the public key is needed\n   * in its raw byte format, such as for certain cryptographic operations or when\n   * interfacing with systems that require raw key formats.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // A Jwk public key object\n   * const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid EC P-256 public key, which must have a 'y' value.\n    if (!(isEcPublicJwk(publicKey) && publicKey.y)) {\n      throw new Error(`Secp256r1: The provided key is not a valid EC public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const prefix = new Uint8Array([0x04]); // Designates an uncompressed key.\n    const x = Convert.base64Url(publicKey.x).toUint8Array();\n    const y = Convert.base64Url(publicKey.y).toUint8Array();\n\n    // Concatenate the prefix, x-coordinate, and y-coordinate as a single byte array.\n    const publicKeyBytes = new Uint8Array([...prefix, ...x, ...y]);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256r1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256r1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk private key object for party A\n   * const publicKeyB = { ... }; // A Jwk public key object for party B\n   * const sharedSecret = await Secp256r1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`Secp256r1: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await Secp256r1.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await Secp256r1.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the compact representation shared secret between the public and private keys.\n    const sharedSecret = secp256r1.getSharedSecret(privateKeyABytes, publicKeyBBytes, true);\n\n    // Remove the leading byte that indicates the sign of the y-coordinate\n    // of the point on the elliptic curve.  See note above.\n    return sharedSecret.slice(1);\n  }\n\n  /**\n   * Generates an RFC6979-compliant ECDSA signature of given data using a secp256r1 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the ECDSA\n   * (Elliptic Curve Digital Signature Algorithm) signature algorithm, as defined in RFC6979.\n   * The data to be signed is first hashed using the SHA-256 algorithm, and this hash is then\n   * signed using the private key. The output is a digital signature in the form of a\n   * Uint8Array, which uniquely corresponds to both the data and the private key used for signing.\n   *\n   * This method is commonly used in cryptographic applications to ensure data integrity and\n   * authenticity. The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing a secp256r1 private key\n   * const signature = await Secp256r1.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ data, key }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Secp256r1.privateKeyToBytes({ privateKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    // Sign the provided data using the ECDSA algorithm.\n    // The `Secp256r1.sign` operation returns a signature object with { r, s, recovery } properties.\n    const signatureObject = secp256r1.sign(digest, privateKeyBytes);\n\n    // Convert the signature object to Uint8Array.\n    const signature = signatureObject.toCompactRawBytes();\n\n    return signature;\n  }\n\n  /**\n   * Validates a given private key to ensure its compliance with the secp256r1 curve standards.\n   *\n   * @remarks\n   * This method checks whether a provided private key is a valid 32-byte number and falls within\n   * the range defined by the secp256r1 curve's order. It is essential for ensuring the private\n   * key's mathematical correctness in the context of secp256r1-based cryptographic operations.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // A 32-byte private key\n   * const isValid = await Secp256r1.validatePrivateKey({ privateKeyBytes });\n   * console.log(isValid); // true or false based on the key's validity\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.privateKeyBytes - The private key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the private key is valid.\n   */\n  public static async validatePrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    return secp256r1.utils.isValidPrivateKey(privateKeyBytes);\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the secp256r1 curve.\n   *\n   * @remarks\n   * This method checks if the provided public key represents a valid point on the secp256r1 curve.\n   * It decodes the key's Weierstrass points (x and y coordinates) and verifies their validity\n   * against the curve's parameters. A valid point must lie on the curve and meet specific\n   * mathematical criteria defined by the curve's equation.\n   *\n   * It's important to note that this method does not verify the key's ownership or whether it has\n   * been compromised; it solely focuses on the key's adherence to the curve's mathematical\n   * principles.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Secp256r1.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the secp256r1 curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating the public key's validity on\n   *          the secp256r1 curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n      // Decode Weierstrass points from key bytes.\n      const point = secp256r1.ProjectivePoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Short Weierstrass curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC6979-compliant ECDSA signature against given data and a secp256r1 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure that it was generated by the holder of the\n   * corresponding private key and that the signed data has not been altered. The signature\n   * verification is performed using the ECDSA (Elliptic Curve Digital Signature Algorithm) as\n   * specified in RFC6979. The data to be verified is first hashed using the SHA-256 algorithm, and\n   * this hash is then used along with the public key to verify the signature.\n   *\n   * The method returns a boolean value indicating whether the signature is valid. A valid signature\n   * proves that the signed data was indeed signed by the owner of the private key corresponding to\n   * the provided public key and that the data has not been tampered with since it was signed.\n   *\n   * Note: The verification process does not consider the malleability of low-s signatures, which\n   * may be relevant in certain contexts, such as Bitcoin transactions.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isSignatureValid = await Secp256r1.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * console.log(isSignatureValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key used for verification, represented in JWK format.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Secp256r1.publicKeyToBytes({ publicKey: key });\n\n    // Generate a digest of the data using the SHA-256 hash function.\n    const digest = sha256(data);\n\n    /** Perform the verification of the signature.\n     * This verify operation has the malleability check disabled. Guaranteed support\n     * for low-s signatures across languages is unlikely especially in the context\n     * of SSI. Notable Cloud KMS providers do not natively support it either. It is\n     * also worth noting that low-s signatures are a requirement for Bitcoin. */\n    const isValid = secp256r1.verify(signature, digest, publicKeyBytes, { lowS: false });\n\n    return isValid;\n  }\n\n  /**\n   * Returns the elliptic curve point (x and y coordinates) for a given secp256r1 key.\n   *\n   * @remarks\n   * This method extracts the elliptic curve point from a given secp256r1 key, whether\n   * it's a private or a public key. For a private key, the method first computes the\n   * corresponding public key and then extracts the x and y coordinates. For a public key,\n   * it directly returns these coordinates. The coordinates are represented as Uint8Array.\n   *\n   * The x and y coordinates represent the key's position on the elliptic curve and can be\n   * used in various cryptographic operations, such as digital signatures or key agreement\n   * protocols.\n   *\n   * @example\n   * ```ts\n   * // For a private key\n   * const privateKey = new Uint8Array([...]); // A 32-byte private key\n   * const { x: xFromPrivateKey, y: yFromPrivateKey } = await Secp256r1.getCurvePoint({ keyBytes: privateKey });\n   *\n   * // For a public key\n   * const publicKey = new Uint8Array([...]); // A 33-byte or 65-byte public key\n   * const { x: xFromPublicKey, y: yFromPublicKey } = await Secp256r1.getCurvePoint({ keyBytes: publicKey });\n   * ```\n   *\n   * @param params - The parameters for the curve point decoding operation.\n   * @param params.keyBytes - The key for which to get the elliptic curve point.\n   *                          Can be either a private key or a public key.\n   *                          The key should be passed as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to an object with properties 'x' and 'y',\n   *          each being a Uint8Array representing the x and y coordinates of the key point on the\n   *          elliptic curve.\n   */\n  private static async getCurvePoint({ keyBytes }: {\n    keyBytes: Uint8Array;\n  }): Promise<AffinePoint<Uint8Array>> {\n    // If key is a private key, first compute the public key.\n    if (keyBytes.byteLength === 32) {\n      keyBytes = secp256r1.getPublicKey(keyBytes);\n    }\n\n    // Decode Weierstrass affine point from key bytes.\n    const point = secp256r1.ProjectivePoint.fromHex(keyBytes);\n\n    // Get x- and y-coordinate values and convert to Uint8Array.\n    const x = numberToBytesBE(point.x, 32);\n    const y = numberToBytesBE(point.y, 32);\n\n    return { x, y };\n  }\n}\n\nexport { Secp256r1 as P256 };", "import type { Jwk } from '../jose/jwk.js';\nimport type { Signer } from '../types/signer.js';\nimport type { AsymmetricKeyGenerator } from '../types/key-generator.js';\nimport type { ComputePublicKeyParams, GenerateKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { Secp256k1 } from '../primitives/secp256k1.js';\nimport { Secp256r1 } from '../primitives/secp256r1.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\nimport { isEcPrivateJwk, isEcPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `EcdsaGenerateKeyParams` interface defines the algorithm-specific parameters that should be\n * passed into the `generateKey()` method when using the ECDSA algorithm.\n */\nexport interface EcdsaGenerateKeyParams extends GenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"ES256\"`: ECDSA using the secp256r1 (P-256) curve and SHA-256.\n   * - `\"ES256K\"`: ECDSA using the secp256k1 curve and SHA-256.\n   * - `\"secp256k1\"`: ECDSA using the secp256k1 curve and SHA-256.\n   * - `\"secp256r1\"`: ECDSA using the secp256r1 (P-256) curve and SHA-256.\n   */\n  algorithm: 'ES256' | 'ES256K' | 'secp256k1' | 'secp256r1';\n}\n\n/**\n * The `EcdsaAlgorithm` class provides a concrete implementation for cryptographic operations using\n * the Elliptic Curve Digital Signature Algorithm (ECDSA). This class implements both\n * {@link Signer | `Signer`} and { @link AsymmetricKeyGenerator | `AsymmetricKeyGenerator`}\n * interfaces, providing private key generation, public key derivation, and creation/verification\n * of signatures.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class EcdsaAlgorithm extends CryptoAlgorithm\n  implements AsymmetricKeyGenerator<EcdsaGenerateKeyParams, Jwk, GetPublicKeyParams>,\n             Signer<SignParams, VerifyParams> {\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The process ensures that the derived public key correctly corresponds to\n   * the given private key.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await ecdsa.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        const publicKey = await Secp256k1.computePublicKey({ key });\n        publicKey.alg = 'ES256K';\n        return publicKey;\n      }\n\n      case 'P-256': {\n        const publicKey = await Secp256r1.computePublicKey({ key });\n        publicKey.alg = 'ES256';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates a new private key with the specified algorithm in JSON Web Key (JWK) format.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = await ecdsa.generateKey({ algorithm: 'ES256K' });\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation.\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public async generateKey({ algorithm }:\n    EcdsaGenerateKeyParams\n  ): Promise<Jwk> {\n    switch (algorithm) {\n\n      case 'ES256K':\n      case 'secp256k1': {\n        const privateKey = await Secp256k1.generateKey();\n        privateKey.alg = 'ES256K';\n        return privateKey;\n      }\n\n      case 'ES256':\n      case 'secp256r1': {\n        const privateKey = await Secp256r1.generateKey();\n        privateKey.alg = 'ES256';\n        return privateKey;\n      }\n    }\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an ECDSA private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key.\n   *\n   * Note: This method offers a significant performance advantage, being about 200 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await ecdsa.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        const publicKey = await Secp256k1.getPublicKey({ key });\n        publicKey.alg = 'ES256K';\n        return publicKey;\n      }\n\n      case 'P-256': {\n        const publicKey = await Secp256r1.getPublicKey({ key });\n        publicKey.alg = 'ES256';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates an ECDSA signature of given data using a private key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the given `algorithm` to sign the\n   * provided data.\n   *\n   * The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const data = new TextEncoder().encode('Message');\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const signature = await ecdsa.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    if (!isEcPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) private key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        return await Secp256k1.sign({ key, data });\n      }\n\n      case 'P-256': {\n        return await Secp256r1.sign({ key, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Verifies an ECDSA signature associated with the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `crv` property of the provided key\n   * to check the validity of a digital signature against the original data. It confirms whether the\n   * signature was created by the holder of the corresponding private key and that the data has not\n   * been tampered with.\n   *s\n   * @example\n   * ```ts\n   * const ecdsa = new EcdsaAlgorithm();\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const data = new TextEncoder().encode('Message');\n   * const isValid = await ecdsa.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    if (!isEcPublicJwk(key)) throw new TypeError('Invalid key provided. Must be an elliptic curve (EC) public key.');\n\n    switch (key.crv) {\n\n      case 'secp256k1': {\n        return await Secp256k1.verify({ key, signature, data });\n      }\n\n      case 'P-256': {\n        return await Secp256r1.verify({ key, signature, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n}", "import { Convert } from '@web5/common';\nimport { ed25519, edwardsToMontgomeryPub, edwardsToMontgomeryPriv, x25519 } from '@noble/curves/ed25519';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams, SignParams, VerifyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `Ed25519` class provides a comprehensive suite of utilities for working with the Ed25519\n * elliptic curve, widely used in modern cryptographic applications. This class includes methods for\n * key generation, conversion, signing, verification, and public key derivation.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats. It\n * follows the guidelines and specifications outlined in RFC8032 for EdDSA (Edwards-curve Digital\n * Signature Algorithm) operations.\n *\n * Key Features:\n * - Key Generation: Generate Ed25519 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - Signing and Verification: Sign data and verify signatures with Ed25519 keys.\n * - Key Validation: Validate the mathematical correctness of Ed25519 keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments, and use `Uint8Array` for binary data handling.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await Ed25519.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await Ed25519.computePublicKey({ key: privateKey });\n * console.log(publicKey === await Ed25519.getPublicKey({ key: privateKey })); // Output: true\n *\n * // EdDSA Signing\n * const signature = await Ed25519.sign({\n *   key: privateKey,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // EdDSA Signature Verification\n * const isValid = await Ed25519.verify({\n *   key: publicKey,\n *   signature: signature,\n *   data: new TextEncoder().encode('Message')\n * });\n *\n * // Key Conversion\n * const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n * const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n *\n * // Key Validation\n * const isPublicKeyValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n * ```\n */\nexport class Ed25519 {\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a private key as a byte array (Uint8Array) for the Curve25519 curve in\n   * Twisted Edwards form and transforms it into a JWK object. The process involves first deriving\n   * the public key from the private key, then encoding both the private and public keys into\n   * base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'Ed25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The computed public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await Ed25519.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Derive the public key from the private key.\n    const publicKeyBytes  = ed25519.getPublicKey(privateKeyBytes);\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      crv : 'Ed25519',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      kty : 'OKP',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key as a byte array (Uint8Array) for the Curve25519 curve in\n   * Twisted Edwards form and transforms it into a JWK object. The process involves encoding the\n   * public key bytes into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `x`: The public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await X25519.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a `Uint8Array`.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'Ed25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Derives the public key in JWK format from a given Ed25519 private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format.  The derivation process involves converting the private key to a\n   * raw byte array and then computing the corresponding public key on the Curve25519 curve in\n   * Twisted Edwards form. The public key is then encoded into base64url format to construct\n   * a JWK representation.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const publicKey = await Ed25519.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the computed public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await Ed25519.privateKeyToBytes({ privateKey: key });\n\n    // Derive the public key from the private key.\n    const publicKeyBytes  = ed25519.getPublicKey(privateKeyBytes);\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'Ed25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts an Ed25519 private key to its X25519 counterpart.\n   *\n   * @remarks\n   * This method enables the use of the same key pair for both digital signature (Ed25519)\n   * and key exchange (X25519) operations. It takes an Ed25519 private key and converts it\n   * to the corresponding X25519 format, facilitating interoperability between signing\n   * and encryption protocols.\n   *\n   * @example\n   * ```ts\n   * const ed25519PrivateKey = { ... }; // An Ed25519 private key in JWK format\n   * const x25519PrivateKey = await Ed25519.convertPrivateKeyToX25519({\n   *   privateKey: ed25519PrivateKey\n   * });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The Ed25519 private key to convert, in JWK format.\n   *\n   * @returns A Promise that resolves to the X25519 private key in JWK format.\n   */\n  public static async convertPrivateKeyToX25519({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Jwk> {\n    // Convert the provided Ed25519 private key to bytes.\n    const ed25519PrivateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n\n    // Convert the Ed25519 private key to an X25519 private key.\n    const x25519PrivateKeyBytes = edwardsToMontgomeryPriv(ed25519PrivateKeyBytes);\n\n    // Derive the X25519 public key from the X25519 private key.\n    const x25519PublicKeyBytes = x25519.getPublicKey(x25519PrivateKeyBytes);\n\n    // Construct the X25519 private key in JWK format.\n    const x25519PrivateKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      d   : Convert.uint8Array(x25519PrivateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(x25519PublicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    x25519PrivateKey.kid = await computeJwkThumbprint({ jwk: x25519PrivateKey });\n\n    return x25519PrivateKey;\n  }\n\n  /**\n   * Converts an Ed25519 public key to its X25519 counterpart.\n   *\n   * @remarks\n   * This method enables the use of the same key pair for both digital signature (Ed25519)\n   * and key exchange (X25519) operations. It takes an Ed25519 public key and converts it\n   * to the corresponding X25519 format, facilitating interoperability between signing\n   * and encryption protocols.\n   *\n   * @example\n   * ```ts\n   * const ed25519PublicKey = { ... }; // An Ed25519 public key in JWK format\n   * const x25519PublicKey = await Ed25519.convertPublicKeyToX25519({\n   *   publicKey: ed25519PublicKey\n   * });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The Ed25519 public key to convert, in JWK format.\n   *\n   * @returns A Promise that resolves to the X25519 public key in JWK format.\n   */\n  public static async convertPublicKeyToX25519({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const ed25519PublicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n\n    // Verify Edwards public key is valid.\n    const isValid = await Ed25519.validatePublicKey({ publicKeyBytes: ed25519PublicKeyBytes });\n    if (!isValid) {\n      throw new Error('Ed25519: Invalid public key.');\n    }\n\n    // Convert the Ed25519 public key to an X25519 private key.\n    const x25519PublicKeyBytes = edwardsToMontgomeryPub(ed25519PublicKeyBytes);\n\n    // Construct the X25519 private key in JWK format.\n    const x25519PublicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(x25519PublicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    x25519PublicKey.kid = await computeJwkThumbprint({ jwk: x25519PublicKey });\n\n    return x25519PublicKey;\n  }\n\n  /**\n   * Generates an Ed25519 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the Curve25519 elliptic curve in\n   * Twisted Edwards form. The key generation process involves using cryptographically secure\n   * random number generation to ensure the uniqueness and security of the key. The resulting\n   * private key adheres to the JWK format making it compatible with common cryptographic\n   * standards and easy to use in various cryptographic processes.\n   *\n   * The generated private key in JWK format includes the following components:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'Ed25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await Ed25519.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = ed25519.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await Ed25519.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an Ed25519 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 100 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const publicKey = await Ed25519.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n  // Verify the provided JWK represents an octet key pair (OKP) Ed25519 private key.\n    if (!(isOkpPrivateJwk(key) && key.crv === 'Ed25519')) {\n      throw new Error(`Ed25519: The provided key is not an Ed25519 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a private key in JWK format and extracts its raw byte representation.\n   *\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'd' parameter of the JWK\n   * from base64url format into a byte array.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An Ed25519 private key in JWK format\n   * const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP private key.\n    if (!isOkpPrivateJwk(privateKey)) {\n      throw new Error(`Ed25519: The provided key is not a valid OKP private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary form.\n   * The conversion process involves decoding the 'x' parameter of the JWK (which represent the\n   * x coordinate of the elliptic curve point) from base64url format into a byte array.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // An Ed25519 public key in JWK format\n   * const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP public key.\n    if (!isOkpPublicJwk(publicKey)) {\n      throw new Error(`Ed25519: The provided key is not a valid OKP public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const publicKeyBytes = Convert.base64Url(publicKey.x).toUint8Array();\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Generates an RFC8032-compliant EdDSA signature of given data using an Ed25519 private key.\n   *\n   * @remarks\n   * This method signs the provided data with a specified private key using the EdDSA\n   * (Edwards-curve Digital Signature Algorithm) as defined in RFC8032. It\n   * involves converting the private key from JWK format to a byte array and then employing\n   * the Ed25519 algorithm to sign the data. The output is a digital signature in the form\n   * of a Uint8Array, uniquely corresponding to both the data and the private key used for\n   * signing.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data to be signed\n   * const privateKey = { ... }; // A Jwk object representing an Ed25519 private key\n   * const signature = await Ed25519.sign({ key: privateKey, data });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the signature as a Uint8Array.\n   */\n  public static async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    // Convert the private key from JWK format to bytes.\n    const privateKeyBytes = await Ed25519.privateKeyToBytes({ privateKey: key });\n\n    // Sign the provided data using the EdDSA algorithm.\n    const signature = ed25519.sign(data, privateKeyBytes);\n\n    return signature;\n  }\n\n  /**\n   * Validates a given public key to confirm its mathematical correctness on the Edwards curve.\n   *\n   * @remarks\n   * This method decodes the Edwards points from the key bytes and asserts their validity on the\n   * Curve25519 curve in Twisted Edwards form. If the points are not valid, the method returns\n   * false. If the points are valid, the method returns true.\n   *\n   * Note that this validation strictly pertains to the key's format and numerical validity; it does\n   * not assess whether the key corresponds to a known entity or its security status (e.g., whether\n   * it has been compromised).\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // A public key in byte format\n   * const isValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n   * console.log(isValid); // true if the key is valid on the Edwards curve, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the public key validation.\n   * @param params.publicKeyBytes - The public key to validate, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the key\n   *          corresponds to a valid point on the Edwards curve.\n   */\n  public static async validatePublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<boolean> {\n    try {\n    // Decode Edwards points from key bytes.\n      const point = ed25519.ExtendedPoint.fromHex(publicKeyBytes);\n\n      // Check if points are on the Twisted Edwards curve.\n      point.assertValidity();\n\n    } catch(error: any) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifies an RFC8032-compliant EdDSA signature against given data using an Ed25519 public key.\n   *\n   * @remarks\n   * This method validates a digital signature to ensure its authenticity and integrity.\n   * It uses the EdDSA (Edwards-curve Digital Signature Algorithm) as specified in RFC8032.\n   * The verification process involves converting the public key from JWK format to a raw\n   * byte array and using the Ed25519 algorithm to validate the signature against the provided data.\n   *\n   * @example\n   * ```ts\n   * const data = new TextEncoder().encode('Messsage'); // Data that was signed\n   * const publicKey = { ... }; // A Jwk object representing an Ed25519 public key\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const isValid = await Ed25519.verify({ key: publicKey, signature, data });\n   * console.log(isValid); // true if the signature is valid, false otherwise\n   * ```\n   *\n   * @param params - The parameters for the signature verification.\n   * @param params.key - The public key in JWK format used for verification.\n   * @param params.signature - The signature to verify, represented as a Uint8Array.\n   * @param params.data - The data that was signed, represented as a Uint8Array.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the signature is valid.\n   */\n  public static async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    // Convert the public key from JWK format to bytes.\n    const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey: key });\n\n    // Perform the verification of the signature.\n    const isValid = ed25519.verify(signature, data, publicKeyBytes);\n\n    return isValid;\n  }\n}", "import type { Jwk } from '../jose/jwk.js';\nimport type { Signer } from '../types/signer.js';\nimport type { AsymmetricKeyGenerator } from '../types/key-generator.js';\nimport type {\n  SignParams,\n  VerifyParams,\n  GenerateKeyParams,\n  GetPublicKeyParams,\n  ComputePublicKeyParams,\n} from '../types/params-direct.js';\n\nimport { Ed25519 } from '../primitives/ed25519.js';\nimport { CryptoAlgorithm } from './crypto-algorithm.js';\nimport { isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `EdDsaGenerateKeyParams` interface defines the algorithm-specific parameters that should be\n * passed into the `generateKey()` method when using the EdDSA algorithm.\n */\nexport interface EdDsaGenerateKeyParams extends GenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"Ed25519\"`: EdDSA using the Ed25519 curve.\n   */\n  algorithm: 'Ed25519';\n}\n\n/**\n * The `EdDsaAlgorithm` class provides a concrete implementation for cryptographic operations using\n * the Edwards-curve Digital Signature Algorithm (EdDSA). This class implements both\n * {@link Signer | `Signer`} and { @link AsymmetricKeyGenerator | `AsymmetricKeyGenerator`}\n * interfaces, providing private key generation, public key derivation, and creation/verification\n * of signatures.\n *\n * This class is typically accessed through implementations that extend the\n * {@link CryptoApi | `CryptoApi`} interface.\n */\nexport class EdDsaAlgorithm extends CryptoAlgorithm\n  implements AsymmetricKeyGenerator<EdDsaGenerateKeyParams, Jwk, GetPublicKeyParams>,\n             Signer<SignParams, VerifyParams> {\n\n  /**\n   * Derives the public key in JWK format from a given private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format. The process ensures that the derived public key correctly corresponds to\n   * the given private key.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await eddsa.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        const publicKey = await Ed25519.computePublicKey({ key });\n        publicKey.alg = 'EdDSA';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates a new private key with the specified algorithm in JSON Web Key (JWK) format.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = await eddsa.generateKey({ algorithm: 'Ed25519' });\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation.\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  async generateKey({ algorithm }:\n    EdDsaGenerateKeyParams\n  ): Promise<Jwk> {\n    switch (algorithm) {\n\n      case 'Ed25519': {\n        const privateKey = await Ed25519.generateKey();\n        privateKey.alg = 'EdDSA';\n        return privateKey;\n      }\n    }\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an EdDSA private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key.\n   *\n   * Note: This method offers a significant performance advantage, being about 100 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const publicKey = await eddsa.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        const publicKey = await Ed25519.getPublicKey({ key });\n        publicKey.alg = 'EdDSA';\n        return publicKey;\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Generates an EdDSA signature of given data using a private key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the given `algorithm` to sign the\n   * provided data.\n   *\n   * The signature can later be verified by parties with access to the corresponding\n   * public key, ensuring that the data has not been tampered with and was indeed signed by the\n   * holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const data = new TextEncoder().encode('Message');\n   * const privateKey = { ... }; // A Jwk object representing a private key\n   * const signature = await eddsa.sign({\n   *   key: privateKey,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.key - The private key to use for signing, represented in JWK format.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ key, data }:\n    SignParams\n  ): Promise<Uint8Array> {\n    if (!isOkpPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) private key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        return await Ed25519.sign({ key, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n\n  /**\n   * Verifies an EdDSA signature associated with the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `crv` property of the provided key\n   * to check the validity of a digital signature against the original data. It confirms whether the\n   * signature was created by the holder of the corresponding private key and that the data has not\n   * been tampered with.\n   *s\n   * @example\n   * ```ts\n   * const eddsa = new EdDsaAlgorithm();\n   * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data\n   * const signature = new Uint8Array([...]); // Signature to verify\n   * const data = new TextEncoder().encode('Message');\n   * const isValid = await eddsa.verify({\n   *   key: publicKey,\n   *   signature,\n   *   data\n   * });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    VerifyParams\n  ): Promise<boolean> {\n    if (!isOkpPublicJwk(key)) throw new TypeError('Invalid key provided. Must be an octet key pair (OKP) public key.');\n\n    switch (key.crv) {\n\n      case 'Ed25519': {\n        return await Ed25519.verify({ key, signature, data });\n      }\n\n      default: {\n        throw new Error(`Unsupported curve: ${key.crv}`);\n      }\n    }\n  }\n}", "import { KeyValueStore, MemoryStore } from '@web5/common';\n\nimport type { Jwk } from './jose/jwk.js';\nimport type { Hasher } from './types/hasher.js';\nimport type { Signer } from './types/signer.js';\nimport type { CryptoApi } from './types/crypto-api.js';\nimport type { KeyIdentifier } from './types/identifier.js';\nimport type { KeyImporterExporter } from './types/key-io.js';\nimport type { KeyGenerator, AsymmetricKeyGenerator } from './types/key-generator.js';\nimport type { GetPublicKeyParams, SignParams, VerifyParams } from './types/params-direct.js';\nimport type {\n  KmsSignParams,\n  KmsDigestParams,\n  KmsVerifyParams,\n  KmsExportKeyParams,\n  KmsGetKeyUriParams,\n  KmsImportKeyParams,\n  KmsGenerateKeyParams,\n  KmsGetPublicKeyParams,\n} from './types/params-kms.js';\n\nimport { Sha2Algorithm } from './algorithms/sha-2.js';\nimport { EcdsaAlgorithm } from './algorithms/ecdsa.js';\nimport { EdDsaAlgorithm } from './algorithms/eddsa.js';\nimport { CryptoAlgorithm } from './algorithms/crypto-algorithm.js';\nimport { computeJwkThumbprint, isPrivateJwk, KEY_URI_PREFIX_JWK } from './jose/jwk.js';\n\n/**\n * `supportedAlgorithms` is an object mapping algorithm names to their respective implementations\n * Each entry in this map specifies the algorithm name and its associated properties, including the\n * implementation class and any relevant names or identifiers for the algorithm. This structure\n * allows for easy retrieval and instantiation of algorithm implementations based on the algorithm\n * name or key specification. It facilitates the support of multiple algorithms within the\n * `LocalKeyManager` class.\n */\nconst supportedAlgorithms = {\n  'Ed25519': {\n    implementation : EdDsaAlgorithm,\n    names          : ['Ed25519'],\n  },\n  'secp256k1': {\n    implementation : EcdsaAlgorithm,\n    names          : ['ES256K', 'secp256k1'],\n  },\n  'secp256r1': {\n    implementation : EcdsaAlgorithm,\n    names          : ['ES256', 'secp256r1'],\n  },\n  'SHA-256': {\n    implementation : Sha2Algorithm,\n    names          : ['SHA-256']\n  }\n} satisfies {\n  [key: string]: {\n    implementation : typeof CryptoAlgorithm;\n    names          : string[];\n  }\n};\n\n/* Helper type for `supportedAlgorithms`. */\ntype SupportedAlgorithm = keyof typeof supportedAlgorithms;\n\n/* Helper type for `supportedAlgorithms` implementations. */\ntype AlgorithmConstructor = typeof supportedAlgorithms[SupportedAlgorithm]['implementation'];\n\n/**\n * The `LocalKeyManagerParams` interface specifies the parameters for initializing an instance of\n * `LocalKeyManager`. It allows the optional inclusion of a `KeyValueStore` instance for key\n * management. If not provided, a default `MemoryStore` instance will be used for storing keys in\n * memory. Note that the `MemoryStore` is not persistent and will be cleared when the application\n * exits.\n */\nexport type LocalKeyManagerParams = {\n  /**\n   * An optional property to specify a custom `KeyValueStore` instance for key management. If not\n   * provided, {@link LocalKeyManager | `LocalKeyManager`} uses a default `MemoryStore` instance.\n   * This store is responsible for managing cryptographic keys, allowing them to be retrieved,\n   * stored, and managed during cryptographic operations.\n   */\n  keyStore?: KeyValueStore<KeyIdentifier, Jwk>;\n};\n\n/**\n * The `LocalKeyManagerDigestParams` interface defines the algorithm-specific parameters that should\n * be passed into the {@link LocalKeyManager.digest | `LocalKeyManager.digest()`} method.\n */\nexport interface LocalKeyManagerDigestParams extends KmsDigestParams {\n  /**\n   * A string defining the name of hash function to use. The value must be one of the following:\n   * - `\"SHA-256\"`: Generates a 256-bit digest.\n   */\n  algorithm: 'SHA-256';\n}\n\n/**\n * The `LocalKeyManagerGenerateKeyParams` interface defines the algorithm-specific parameters that\n * should be passed into the {@link LocalKeyManager.generateKey | `LocalKeyManager.generateKey()`}\n * method when generating a key in the local KMS.\n */\nexport interface LocalKeyManagerGenerateKeyParams extends KmsGenerateKeyParams {\n  /**\n   * A string defining the type of key to generate. The value must be one of the following:\n   * - `\"Ed25519\"`\n   * - `\"secp256k1\"`\n   */\n  algorithm: 'Ed25519' | 'secp256k1' | 'secp256r1';\n}\n\nexport class LocalKeyManager implements\n    CryptoApi,\n    KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams> {\n\n  /**\n   * A private map that stores instances of cryptographic algorithm implementations. Each key in\n   * this map is an `AlgorithmConstructor`, and its corresponding value is an instance of a class\n   * that implements a specific cryptographic algorithm. This map is used to cache and reuse\n   * instances for performance optimization, ensuring that each algorithm is instantiated only once.\n   */\n  private _algorithmInstances: Map<AlgorithmConstructor, InstanceType<typeof CryptoAlgorithm>> = new Map();\n\n  /**\n   * The `_keyStore` private variable in `LocalKeyManager` is a `KeyValueStore` instance used for\n   * storing and managing cryptographic keys. It allows the `LocalKeyManager` class to save,\n   * retrieve, and handle keys efficiently within the local Key Management System (KMS) context.\n   * This variable can be configured to use different storage backends, like in-memory storage or\n   * persistent storage, providing flexibility in key management according to the application's\n   * requirements.\n   */\n  private _keyStore: KeyValueStore<KeyIdentifier, Jwk>;\n\n  constructor(params?: LocalKeyManagerParams) {\n    this._keyStore = params?.keyStore ?? new MemoryStore<KeyIdentifier, Jwk>();\n  }\n\n  /**\n   * Generates a hash digest of the provided data.\n   *\n   * @remarks\n   * A digest is the output of the hash function. It's a fixed-size string of bytes\n   * that uniquely represents the data input into the hash function. The digest is often used for\n   * data integrity checks, as any alteration in the input data results in a significantly\n   * different digest.\n   *\n   * It takes the algorithm identifier of the hash function and data to digest as input and returns\n   * the digest of the data.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const data = new Uint8Array([...]);\n   * const digest = await keyManager.digest({ algorithm: 'SHA-256', data });\n   * ```\n   *\n   * @param params - The parameters for the digest operation.\n   * @param params.algorithm - The name of hash function to use.\n   * @param params.data - The data to digest.\n   *\n   * @returns A Promise which will be fulfilled with the hash digest.\n   */\n  public async digest({ algorithm, data }:\n    LocalKeyManagerDigestParams\n  ): Promise<Uint8Array> {\n    // Get the hash function implementation based on the specified `algorithm` parameter.\n    const hasher = this.getAlgorithm({ algorithm }) as Hasher<KmsDigestParams>;\n\n    // Compute the hash.\n    const hash = await hasher.digest({ algorithm, data });\n\n    return hash;\n  }\n\n  /**\n   * Exports a private key identified by the provided key URI from the local KMS.\n   *\n   * @remarks\n   * This method retrieves the key from the key store and returns it. It is primarily used\n   * for extracting keys for backup or transfer purposes.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const privateKey = await keyManager.exportKey({ keyUri });\n   * ```\n   *\n   * @param params - Parameters for exporting the key.\n   * @param params.keyUri - The key URI identifying the key to export.\n   *\n   * @returns A Promise resolving to the JWK representation of the exported key.\n   */\n  public async exportKey({ keyUri }:\n    KmsExportKeyParams\n  ): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    return privateKey;\n  }\n\n  /**\n   * Generates a new cryptographic key in the local KMS with the specified algorithm and returns a\n   * unique key URI which can be used to reference the key in subsequent operations.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * console.log(keyUri); // Outputs the key URI\n   * ```\n   *\n   * @param params - The parameters for key generation.\n   * @param params.algorithm - The algorithm to use for key generation, defined in `SupportedAlgorithm`.\n   *\n   * @returns A Promise that resolves to the key URI, a unique identifier for the generated key.\n   */\n  public async generateKey({ algorithm }:\n    LocalKeyManagerGenerateKeyParams\n  ): Promise<KeyIdentifier> {\n    // Get the key generator implementation based on the specified `algorithm` parameter.\n    const keyGenerator = this.getAlgorithm({ algorithm }) as KeyGenerator<LocalKeyManagerGenerateKeyParams, Jwk>;\n\n    // Generate the key.\n    const key = await keyGenerator.generateKey({ algorithm });\n\n    if (key?.kid === undefined) {\n      throw new Error('Generated key is missing a required property: kid');\n    }\n\n    // Construct the key URI.\n    const keyUri = `${KEY_URI_PREFIX_JWK}${key.kid}`;\n\n    // Store the key in the key store.\n    await this._keyStore.set(keyUri, key);\n\n    return keyUri;\n  }\n\n  /**\n   * Computes the Key URI for a given public JWK (JSON Web Key).\n   *\n   * @remarks\n   * This method generates a {@link https://datatracker.ietf.org/doc/html/rfc3986 | URI}\n   * (Uniform Resource Identifier) for the given JWK, which uniquely identifies the key across all\n   * `CryptoApi` implementations. The key URI is constructed by appending the\n   * {@link https://datatracker.ietf.org/doc/html/rfc7638 | JWK thumbprint} to the prefix\n   * `urn:jwk:`. The JWK thumbprint is deterministically computed from the JWK and is consistent\n   * regardless of property order or optional property inclusion in the JWK. This ensures that the\n   * same key material represented as a JWK will always yield the same thumbprint, and therefore,\n   * the same key URI.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const publicKey = await keyManager.getPublicKey({ keyUri });\n   * const keyUriFromPublicKey = await keyManager.getKeyUri({ key: publicKey });\n   * console.log(keyUri === keyUriFromPublicKey); // Outputs `true`\n   * ```\n   *\n   * @param params - The parameters for getting the key URI.\n   * @param params.key - The JWK for which to compute the key URI.\n   *\n   * @returns A Promise that resolves to the key URI as a string.\n   */\n  public async getKeyUri({ key }:\n    KmsGetKeyUriParams\n  ): Promise<KeyIdentifier> {\n    // Compute the JWK thumbprint.\n    const jwkThumbprint = await computeJwkThumbprint({ jwk: key });\n\n    // Construct the key URI by appending the JWK thumbprint to the key URI prefix.\n    const keyUri = `${KEY_URI_PREFIX_JWK}${jwkThumbprint}`;\n\n    return keyUri;\n  }\n\n  /**\n   * Retrieves the public key associated with a previously generated private key, identified by\n   * the provided key URI.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const publicKey = await keyManager.getPublicKey({ keyUri });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key.\n   * @param params.keyUri - The key URI of the private key to retrieve the public key for.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public async getPublicKey({ keyUri }:\n    KmsGetPublicKeyParams\n  ): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key: privateKey });\n\n    // Get the key generator based on the algorithm name.\n    const keyGenerator = this.getAlgorithm({ algorithm }) as AsymmetricKeyGenerator<LocalKeyManagerGenerateKeyParams, Jwk, GetPublicKeyParams>;\n\n    // Get the public key properties from the private JWK.\n    const publicKey = await keyGenerator.getPublicKey({ key: privateKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Imports a private key into the local KMS.\n   *\n   * @remarks\n   * This method stores the provided JWK in the key store, making it available for subsequent\n   * cryptographic operations. It is particularly useful for initializing the KMS with pre-existing\n   * keys or for restoring keys from backups.\n   *\n   * Note that, if defined, the `kid` (key ID) property of the JWK is used as the key URI for the\n   * imported key. If the `kid` property is not provided, the key URI is computed from the JWK\n   * thumbprint of the key.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const privateKey = { ... } // A private key in JWK format\n   * const keyUri = await keyManager.importKey({ key: privateKey });\n   * ```\n   *\n   * @param params - Parameters for importing the key.\n   * @param params.key - The private key to import to in JWK format.\n   *\n   * @returns A Promise resolving to the key URI, uniquely identifying the imported key.\n   */\n  public async importKey({ key }:\n    KmsImportKeyParams\n  ): Promise<KeyIdentifier> {\n    if (!isPrivateJwk(key)) throw new TypeError('Invalid key provided. Must be a private key in JWK format.');\n\n    // Make a deep copy of the key to avoid mutating the original.\n    const privateKey = structuredClone(key);\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    privateKey.kid ??= await computeJwkThumbprint({ jwk: privateKey });\n\n    // Compute the key URI for the key.\n    const keyUri = await this.getKeyUri({ key: privateKey });\n\n    // Store the key in the key store.\n    await this._keyStore.set(keyUri, privateKey);\n\n    return keyUri;\n  }\n\n  /**\n   * Signs the provided data using the private key identified by the provided key URI.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `alg` and/or `crv` properties of the\n   * private key identified by the provided key URI to sign the provided data. The signature can\n   * later be verified by parties with access to the corresponding public key, ensuring that the\n   * data has not been tampered with and was indeed signed by the holder of the private key.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const data = new TextEncoder().encode('Message to sign');\n   * const signature = await keyManager.sign({ keyUri, data });\n   * ```\n   *\n   * @param params - The parameters for the signing operation.\n   * @param params.keyUri - The key URI of the private key to use for signing.\n   * @param params.data - The data to sign.\n   *\n   * @returns A Promise resolving to the digital signature as a `Uint8Array`.\n   */\n  public async sign({ keyUri, data }:\n    KmsSignParams\n  ): Promise<Uint8Array> {\n    // Get the private key from the key store.\n    const privateKey = await this.getPrivateKey({ keyUri });\n\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key: privateKey });\n\n    // Get the signature algorithm based on the algorithm name.\n    const signer = this.getAlgorithm({ algorithm }) as Signer<SignParams, VerifyParams>;\n\n    // Sign the data.\n    const signature = signer.sign({ data, key: privateKey });\n\n    return signature;\n  }\n\n  /**\n   * Verifies a digital signature associated the provided data using the provided key.\n   *\n   * @remarks\n   * This method uses the signature algorithm determined by the `alg` and/or `crv` properties of the\n   * provided key to check the validity of a digital signature against the original data. It\n   * confirms whether the signature was created by the holder of the corresponding private key and\n   * that the data has not been tampered with.\n   *\n   * @example\n   * ```ts\n   * const keyManager = new LocalKeyManager();\n   * const keyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n   * const data = new TextEncoder().encode('Message to sign');\n   * const signature = await keyManager.sign({ keyUri, data });\n   * const isSignatureValid = await keyManager.verify({ keyUri, data, signature });\n   * ```\n   *\n   * @param params - The parameters for the verification operation.\n   * @param params.key - The key to use for verification.\n   * @param params.signature - The signature to verify.\n   * @param params.data - The data to verify.\n   *\n   * @returns A Promise resolving to a boolean indicating whether the signature is valid.\n   */\n  public async verify({ key, signature, data }:\n    KmsVerifyParams\n  ): Promise<boolean> {\n    // Determine the algorithm name based on the JWK's `alg` and `crv` properties.\n    const algorithm = this.getAlgorithmName({ key });\n\n    // Get the signature algorithm based on the algorithm name.\n    const signer = this.getAlgorithm({ algorithm }) as Signer<SignParams, VerifyParams>;\n\n    // Verify the signature.\n    const isSignatureValid = signer.verify({ key, signature, data });\n\n    return isSignatureValid;\n  }\n\n  /**\n   * Retrieves an algorithm implementation instance based on the provided algorithm name.\n   *\n   * @remarks\n   * This method checks if the requested algorithm is supported and returns a cached instance\n   * if available. If an instance does not exist, it creates and caches a new one. This approach\n   * optimizes performance by reusing algorithm instances across cryptographic operations.\n   *\n   * @example\n   * ```ts\n   * const signer = this.getAlgorithm({ algorithm: 'Ed25519' });\n   * ```\n   *\n   * @param params - The parameters for retrieving the algorithm implementation.\n   * @param params.algorithm - The name of the algorithm to retrieve.\n   *\n   * @returns An instance of the requested algorithm implementation.\n   *\n   * @throws Error if the requested algorithm is not supported.\n   */\n  private getAlgorithm({ algorithm }: {\n    algorithm: SupportedAlgorithm;\n  }): InstanceType<typeof CryptoAlgorithm> {\n    // Check if algorithm is supported.\n    const AlgorithmImplementation = supportedAlgorithms[algorithm]?.['implementation'];\n    if (!AlgorithmImplementation) {\n      throw new Error(`Algorithm not supported: ${algorithm}`);\n    }\n\n    // Check if instance already exists for the `AlgorithmImplementation`.\n    if (!this._algorithmInstances.has(AlgorithmImplementation)) {\n    // If not, create a new instance and store it in the cache\n      this._algorithmInstances.set(AlgorithmImplementation, new AlgorithmImplementation());\n    }\n\n    // Return the cached instance\n    return this._algorithmInstances.get(AlgorithmImplementation)!;\n  }\n\n  /**\n   * Determines the name of the algorithm based on the key's properties.\n   *\n   * @remarks\n   * This method facilitates the identification of the correct algorithm for cryptographic\n   * operations based on the `alg` or `crv` properties of a {@link Jwk | JWK}.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // Public key in JWK format\n   * const algorithm = this.getAlgorithmName({ key: publicKey });\n   * ```\n   *\n   * @param params - The parameters for determining the algorithm name.\n   * @param params.key - A JWK containing the `alg` or `crv` properties.\n   *\n   * @returns The name of the algorithm associated with the key.\n   *\n   * @throws Error if the algorithm cannot be determined from the provided input.\n   */\n  private getAlgorithmName({ key }: {\n    key: { alg?: string, crv?: string };\n  }): SupportedAlgorithm {\n    const algProperty = key.alg;\n    const crvProperty = key.crv;\n\n    for (const algName in supportedAlgorithms) {\n      const algorithmInfo = supportedAlgorithms[algName as SupportedAlgorithm];\n      if (algProperty && algorithmInfo.names.includes(algProperty)) {\n        return algName as SupportedAlgorithm;\n      } else if (crvProperty && algorithmInfo.names.includes(crvProperty)) {\n        return algName as SupportedAlgorithm;\n      }\n    }\n\n    throw new Error(`Unable to determine algorithm based on provided input: alg=${algProperty}, crv=${crvProperty}`);\n  }\n\n  /**\n   * Retrieves a private key from the key store based on the provided key URI.\n   *\n   * @example\n   * ```ts\n   * const privateKey = this.getPrivateKey({ keyUri: 'urn:jwk:...' });\n   * ```\n   *\n   * @param params - Parameters for retrieving the private key.\n   * @param params.keyUri - The key URI identifying the private key to retrieve.\n   *\n   * @returns A Promise resolving to the JWK representation of the private key.\n   *\n   * @throws Error if the key is not found in the key store.\n   */\n  private async getPrivateKey({ keyUri }: {\n    keyUri: KeyIdentifier;\n  }): Promise<Jwk> {\n    // Get the private key from the key store.\n    const privateKey = await this._keyStore.get(keyUri);\n\n    if (!privateKey) {\n      throw new Error(`Key not found: ${keyUri}`);\n    }\n\n    return privateKey;\n  }\n}", "import type { Jwk } from './jose/jwk.js';\n\nimport { crypto } from '@noble/hashes/crypto';\nimport { randomBytes as nobleRandomBytes } from '@noble/hashes/utils';\n\n/**\n * Checks whether the properties object provided contains the specified property.\n *\n * @example\n * ```ts\n * const obj = { a: 'Bob', t: 30 };\n * checkRequiredProperty({ property: 'a', inObject: obj }); // No error\n * checkRequiredProperty({ property: 'z', inObject: obj }); // Throws TypeError\n * ```\n *\n * @param params - The parameters for the check.\n * @param params.property - Property key to check for.\n * @param params.properties - Properties object to check within.\n * @returns void\n * @throws {TypeError} If the property is not a key in the properties object.\n */\nexport function checkRequiredProperty(params: {\n  property: string,\n  inObject: object\n}): void {\n  if (!params || params.property === undefined || params.inObject === undefined) {\n    throw new TypeError(`One or more required parameters missing: 'property, properties'`);\n  }\n  const { property, inObject } = params;\n  if (!(property in inObject)) {\n    throw new TypeError(`Required parameter missing: '${property}'`);\n  }\n}\n\n/**\n * Checks whether the property specified is a member of the list of valid properties.\n *\n * @example\n * ```ts\n * const property = 'color';\n * const allowedProperties = ['size', 'shape', 'color'];\n * checkValidProperty({ property, allowedProperties }); // No error\n * checkValidProperty({ property: 'weight', allowedProperties }); // Throws TypeError\n * ```\n *\n * @param property Property key to check for.\n * @param allowedProperties Properties Array, Map, or Set to check within.\n * @returns void\n * @throws {TypeError} If the property is not a member of the allowedProperties Array, Map, or Set.\n */\nexport function checkValidProperty(params: {\n  property: string, allowedProperties: ReadonlyArray<string> | Array<string> | Map<string, unknown> | Set<string>\n}): void {\n  if (!params || params.property === undefined || params.allowedProperties === undefined) {\n    throw new TypeError(`One or more required parameters missing: 'property, allowedProperties'`);\n  }\n  const { property, allowedProperties } = params;\n  if (\n    (Array.isArray(allowedProperties) && !allowedProperties.includes(property)) ||\n    (allowedProperties instanceof Set && !allowedProperties.has(property)) ||\n    (allowedProperties instanceof Map && !allowedProperties.has(property))\n  ) {\n    const validProperties = Array.from((allowedProperties instanceof Map) ? allowedProperties.keys() : allowedProperties).join(', ');\n    throw new TypeError(`Out of range: '${property}'. Must be one of '${validProperties}'`);\n  }\n}\n\n/**\n * Determines the JOSE algorithm identifier of the digital signature algorithm based on the `alg` or\n * `crv` property of a {@link Jwk | JWK}.\n *\n * If the `alg` property is present, its value takes precedence and is returned. Otherwise, the\n * `crv` property is used to determine the algorithm.\n *\n * @see {@link https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms | JOSE Algorithms}\n * @see {@link https://datatracker.ietf.org/doc/draft-ietf-jose-fully-specified-algorithms/ | Fully-Specified Algorithms for JOSE and COSE}\n *\n * @example\n * ```ts\n * const publicKey: Jwk = {\n *   \"kty\": \"OKP\",\n *   \"crv\": \"Ed25519\",\n *   \"x\": \"FEJG7OakZi500EydXxuE8uMc8uaAzEJkmQeG8khXANw\"\n * }\n * const algorithm = getJoseSignatureAlgorithmFromPublicKey(publicKey);\n * console.log(algorithm); // Output: \"EdDSA\"\n * ```\n *\n * @param publicKey - A JWK containing the `alg` and/or `crv` properties.\n * @returns The name of the algorithm associated with the key.\n * @throws Error if the algorithm cannot be determined from the provided input.\n */\nexport function getJoseSignatureAlgorithmFromPublicKey(publicKey: Jwk): string {\n  const curveToJoseAlgorithm: Record<string, string> = {\n    'Ed25519'   : 'EdDSA',\n    'P-256'     : 'ES256',\n    'P-384'     : 'ES384',\n    'P-521'     : 'ES512',\n    'secp256k1' : 'ES256K',\n  };\n\n  // If the key contains an `alg` property that matches a JOSE registered algorithm identifier,\n  // return its value.\n  if (publicKey.alg && Object.values(curveToJoseAlgorithm).includes(publicKey.alg)) {\n    return publicKey.alg;\n  }\n\n  // If the key contains a `crv` property, return the corresponding algorithm.\n  if (publicKey.crv && Object.keys(curveToJoseAlgorithm).includes(publicKey.crv)) {\n    return curveToJoseAlgorithm[publicKey.crv];\n  }\n\n  throw new Error(\n    `Unable to determine algorithm based on provided input: alg=${publicKey.alg}, crv=${publicKey.crv}. ` +\n    `Supported 'alg' values: ${Object.values(curveToJoseAlgorithm).join(', ')}. ` +\n    `Supported 'crv' values: ${Object.keys(curveToJoseAlgorithm).join(', ')}.`\n  );\n}\n\n/**\n * Checks if the Web Crypto API is supported in the current runtime environment.\n *\n * @remarks\n * The function uses `globalThis` to provide a universal reference to the global\n * scope, regardless of the environment. `globalThis` is a standard feature introduced\n * in ECMAScript 2020 that is agnostic to the underlying JavaScript environment, making\n * the code portable across browser, Node.js, and Web Workers environments.\n *\n * In a web browser, `globalThis` is equivalent to the `window` object. In Node.js, it\n * is equivalent to the `global` object, and in Web Workers, it corresponds to `self`.\n *\n * This method checks for the `crypto` object and its `subtle` property on the global scope\n * to determine the availability of the Web Crypto API. If both are present, the API is\n * supported; otherwise, it is not.\n *\n * @example\n * ```ts\n * if (isWebCryptoSupported()) {\n *   console.log('Crypto operations can be performed');\n * } else {\n *   console.log('Crypto operations are not supported in this environment');\n * }\n * ```\n *\n * @returns A boolean indicating whether the Web Crypto API is supported in the current environment.\n */\nexport function isWebCryptoSupported(): boolean {\n  if (globalThis.crypto && globalThis.crypto.subtle) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Generates secure pseudorandom values of the specified length using\n * `crypto.getRandomValues`, which defers to the operating system.\n *\n * @remarks\n * This function is a wrapper around `randomBytes` from the '@noble/hashes'\n * package. It's designed to be cryptographically strong, suitable for\n * generating initialization vectors, nonces, and other random values.\n *\n * @see {@link https://www.npmjs.com/package/@noble/hashes | @noble/hashes on NPM} for more\n * information about the underlying implementation.\n *\n * @example\n * ```ts\n * const bytes = randomBytes(32); // Generates 32 random bytes\n * ```\n *\n * @param bytesLength - The number of bytes to generate.\n * @returns A Uint8Array containing the generated random bytes.\n */\nexport function randomBytes(bytesLength: number): Uint8Array {\n  return nobleRandomBytes(bytesLength);\n}\n\n/**\n * Generates a UUID (Universally Unique Identifier) using a\n * cryptographically strong random number generator following\n * the version 4 format, as specified in RFC 4122.\n *\n * A version 4 UUID is a randomly generated UUID. The 13th character\n * is set to '4' to denote version 4, and the 17th character is one\n * of '8', '9', 'A', or 'B' to comply with the variant 1 format of\n * UUIDs (the high bits are set to '10').\n *\n * The UUID is a 36 character string, including hyphens, and looks like this:\n * xxxxxxxx-xxxx-4xxx-axxx-xxxxxxxxxxxx\n *\n * Note that while UUIDs are not guaranteed to be unique, they are\n * practically unique\" given the large number of possible UUIDs and\n * the randomness of generation.\n *\n * @example\n * ```ts\n * const uuid = randomUuid();\n * console.log(uuid); // Outputs a version 4 UUID, e.g., '123e4567-e89b-12d3-a456-426655440000'\n * ```\n *\n * @returns A string containing a randomly generated, 36 character long v4 UUID.\n */\nexport function randomUuid(): string {\n  const uuid = crypto.randomUUID();\n\n  return uuid;\n}", "export {};\n//# sourceMappingURL=jwe.js.map", "export {};\n//# sourceMappingURL=jws.js.map", "export {};\n//# sourceMappingURL=jwt.js.map", "import { Convert } from '@web5/common';\nimport { x25519 } from '@noble/curves/ed25519';\n\nimport type { Jwk } from '../jose/jwk.js';\nimport type { ComputePublicKeyParams, GetPublicKeyParams } from '../types/params-direct.js';\n\nimport { computeJwkThumbprint, isOkpPrivateJwk, isOkpPublicJwk } from '../jose/jwk.js';\n\n/**\n * The `X25519` class provides a comprehensive suite of utilities for working with the X25519\n * elliptic curve, widely used for key agreement protocols and cryptographic applications. It\n * provides methods for key generation, conversion, and Elliptic Curve Diffie-Hellman (ECDH)\n * key agreement,  all aligned with standard cryptographic practices.\n *\n * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats,\n * making it versatile for various cryptographic tasks. It adheres to RFC6090 for ECDH, ensuring\n * secure and effective handling of keys and cryptographic operations.\n *\n * Key Features:\n * - Key Generation: Generate X25519 private keys in JWK format.\n * - Key Conversion: Transform keys between raw byte arrays and JWK formats.\n * - Public Key Derivation: Derive public keys from private keys.\n * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.\n *\n * The methods in this class are asynchronous, returning Promises to accommodate various\n * JavaScript environments.\n *\n * @example\n * ```ts\n * // Key Generation\n * const privateKey = await X25519.generateKey();\n *\n * // Public Key Derivation\n * const publicKey = await X25519.computePublicKey({ key: privateKey });\n * console.log(publicKey === await X25519.getPublicKey({ key: privateKey })); // Output: true\n *\n * // ECDH Shared Secret Computation\n * const sharedSecret = await X25519.sharedSecret({\n *   privateKeyA: privateKey,\n *   publicKeyB: anotherPublicKey\n * });\n *\n * // Key Conversion\n * const publicKeyBytes = await X25519.publicKeyToBytes({ publicKey });\n * const privateKeyBytes = await X25519.privateKeyToBytes({ privateKey });\n * ```\n */\nexport class X25519 {\n  /**\n   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a private key as a byte array (Uint8Array) for the X25519 elliptic curve\n   * and transforms it into a JWK object. The process involves first deriving the public key from\n   * the private key, then encoding both the private and public keys into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes\n   * const privateKey = await X25519.bytesToPrivateKey({ privateKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKeyBytes - The raw private key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the private key in JWK format.\n   */\n  public static async bytesToPrivateKey({ privateKeyBytes }: {\n    privateKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Derive the public key from the private key.\n    const publicKeyBytes  = x25519.getPublicKey(privateKeyBytes);\n\n    // Construct the private key in JWK format.\n    const privateKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      d   : Convert.uint8Array(privateKeyBytes).toBase64Url(),\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method accepts a public key as a byte array (Uint8Array) for the X25519 elliptic curve\n   * and transforms it into a JWK object. The conversion process involves encoding the public\n   * key bytes into base64url format.\n   *\n   * The resulting JWK object includes the following properties:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `x`: The public key, base64url-encoded.\n   *\n   * This method is useful for converting raw public keys into a standardized\n   * JSON format, facilitating their use in cryptographic operations and making\n   * them easy to share and store.\n   *\n   * @example\n   * ```ts\n   * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes\n   * const publicKey = await X25519.bytesToPublicKey({ publicKeyBytes });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKeyBytes - The raw public key as a Uint8Array.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async bytesToPublicKey({ publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n  }): Promise<Jwk> {\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url(),\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Derives the public key in JWK format from a given X25519 private key.\n   *\n   * @remarks\n   * This method takes a private key in JWK format and derives its corresponding public key,\n   * also in JWK format.  The derivation process involves converting the private key to a\n   * raw byte array and then computing the corresponding public key on the Curve25519 curve.\n   * The public key is then encoded into base64url format to construct a JWK representation.\n   *\n   * The process ensures that the derived public key correctly corresponds to the given private key,\n   * adhering to the Curve25519 elliptic curve in Twisted Edwards form standards. This method is\n   * useful in cryptographic operations where a public key is needed for operations like signature\n   * verification, but only the private key is available.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an X25519 private key\n   * const publicKey = await X25519.computePublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for the public key derivation.\n   * @param params.key - The private key in JWK format from which to derive the public key.\n   *\n   * @returns A Promise that resolves to the derived public key in JWK format.\n   */\n  public static async computePublicKey({ key }:\n    ComputePublicKeyParams\n  ): Promise<Jwk> {\n    // Convert the provided private key to a byte array.\n    const privateKeyBytes  = await X25519.privateKeyToBytes({ privateKey: key });\n\n    // Derive the public key from the private key.\n    const publicKeyBytes = x25519.getPublicKey(privateKeyBytes);\n\n    // Construct the public key in JWK format.\n    const publicKey: Jwk = {\n      kty : 'OKP',\n      crv : 'X25519',\n      x   : Convert.uint8Array(publicKeyBytes).toBase64Url()\n    };\n\n    // Compute the JWK thumbprint and set as the key ID.\n    publicKey.kid = await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Generates an X25519 private key in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method creates a new private key suitable for use with the X25519 elliptic curve.\n   * The key generation process involves using cryptographically secure random number generation\n   * to ensure the uniqueness and security of the key. The resulting private key adheres to the\n   * JWK format making it compatible with common cryptographic standards and easy to use in various\n   * cryptographic processes.\n   *\n   * The generated private key in JWK format includes the following components:\n   * - `kty`: Key Type, set to 'OKP' for Octet Key Pair.\n   * - `crv`: Curve Name, set to 'X25519'.\n   * - `d`: The private key component, base64url-encoded.\n   * - `x`: The derived public key, base64url-encoded.\n   *\n   * The key is returned in a format suitable for direct use in key agreement operations.\n   *\n   * @example\n   * ```ts\n   * const privateKey = await X25519.generateKey();\n   * ```\n   *\n   * @returns A Promise that resolves to the generated private key in JWK format.\n   */\n  public static async generateKey(): Promise<Jwk> {\n    // Generate a random private key.\n    const privateKeyBytes = x25519.utils.randomPrivateKey();\n\n    // Convert private key from bytes to JWK format.\n    const privateKey = await X25519.bytesToPrivateKey({ privateKeyBytes });\n\n    // Compute the JWK thumbprint and set as the key ID.\n    privateKey.kid = await computeJwkThumbprint({ jwk: privateKey });\n\n    return privateKey;\n  }\n\n  /**\n   * Retrieves the public key properties from a given private key in JWK format.\n   *\n   * @remarks\n   * This method extracts the public key portion from an X25519 private key in JWK format. It does\n   * so by removing the private key property 'd' and making a shallow copy, effectively yielding the\n   * public key. The method sets the 'kid' (key ID) property using the JWK thumbprint if it is not\n   * already defined. This approach is used under the assumption that a private key in JWK format\n   * always contains the corresponding public key properties.\n   *\n   * Note: This method offers a significant performance advantage, being about 500 times faster\n   * than `computePublicKey()`. However, it does not mathematically validate the private key, nor\n   * does it derive the public key from the private key. It simply extracts existing public key\n   * properties from the private key object. This makes it suitable for scenarios where speed is\n   * critical and the private key's integrity is already assured.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // A Jwk object representing an X25519 private key\n   * const publicKey = await X25519.getPublicKey({ key: privateKey });\n   * ```\n   *\n   * @param params - The parameters for retrieving the public key properties.\n   * @param params.key - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key in JWK format.\n   */\n  public static async getPublicKey({ key }:\n    GetPublicKeyParams\n  ): Promise<Jwk> {\n  // Verify the provided JWK represents an octet key pair (OKP) X25519 private key.\n    if (!(isOkpPrivateJwk(key) && key.crv === 'X25519')) {\n      throw new Error(`X25519: The provided key is not an X25519 private JWK.`);\n    }\n\n    // Remove the private key property ('d') and make a shallow copy of the provided key.\n    let { d, ...publicKey } = key;\n\n    // If the key ID is undefined, set it to the JWK thumbprint.\n    publicKey.kid ??= await computeJwkThumbprint({ jwk: publicKey });\n\n    return publicKey;\n  }\n\n  /**\n   * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a private key in JWK format and extracts its raw byte representation.\n   *\n   * This method accepts a public key in JWK format and converts it into its raw binary\n   * form. The conversion process involves decoding the 'd' parameter of the JWK\n   * from base64url format into a byte array.\n   *\n   * This conversion is essential for operations that require the private key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const privateKey = { ... }; // An X25519 private key in JWK format\n   * const privateKeyBytes = await X25519.privateKeyToBytes({ privateKey });\n   * ```\n   *\n   * @param params - The parameters for the private key conversion.\n   * @param params.privateKey - The private key in JWK format.\n   *\n   * @returns A Promise that resolves to the private key as a Uint8Array.\n   */\n  public static async privateKeyToBytes({ privateKey }: {\n    privateKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP private key.\n    if (!isOkpPrivateJwk(privateKey)) {\n      throw new Error(`X25519: The provided key is not a valid OKP private key.`);\n    }\n\n    // Decode the provided private key to bytes.\n    const privateKeyBytes = Convert.base64Url(privateKey.d).toUint8Array();\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).\n   *\n   * @remarks\n   * This method accepts a public key in JWK format and converts it into its raw binary form.\n   * The conversion process involves decoding the 'x' parameter of the JWK (which represent the\n   * x coordinate of the elliptic curve point) from base64url format into a byte array.\n   *\n   * This conversion is essential for operations that require the public key in its raw\n   * binary form, such as certain low-level cryptographic operations or when interfacing\n   * with systems and libraries that expect keys in a byte array format.\n   *\n   * @example\n   * ```ts\n   * const publicKey = { ... }; // An X25519 public key in JWK format\n   * const publicKeyBytes = await X25519.publicKeyToBytes({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the public key conversion.\n   * @param params.publicKey - The public key in JWK format.\n   *\n   * @returns A Promise that resolves to the public key as a Uint8Array.\n   */\n  public static async publicKeyToBytes({ publicKey }: {\n    publicKey: Jwk;\n  }): Promise<Uint8Array> {\n    // Verify the provided JWK represents a valid OKP public key.\n    if (!isOkpPublicJwk(publicKey)) {\n      throw new Error(`X25519: The provided key is not a valid OKP public key.`);\n    }\n\n    // Decode the provided public key to bytes.\n    const publicKeyBytes = Convert.base64Url(publicKey.x).toUint8Array();\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret\n   * using secp256k1 private and public keys in JSON Web Key (JWK) format.\n   *\n   * @remarks\n   * This method facilitates the ECDH key agreement protocol, which is a method of securely\n   * deriving a shared secret between two parties based on their private and public keys.\n   * It takes the private key of one party (privateKeyA) and the public key of another\n   * party (publicKeyB) to compute a shared secret. The shared secret is derived from the\n   * x-coordinate of the elliptic curve point resulting from the multiplication of the\n   * public key with the private key.\n   *\n   * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n   * the resulting shared secret is a point on the elliptic curve, which\n   * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like\n   * secp256k1, each of these coordinates is 32 bytes (256 bits) long. However,\n   * in the ECDH process, it's standard practice to use only the x-coordinate\n   * of the shared secret point as the resulting shared key. This is because\n   * the y-coordinate does not add to the entropy of the key, and both parties\n   * can independently compute the x-coordinate.  Consquently, this implementation\n   * omits the y-coordinate for simplicity and standard compliance.\n   *\n   * @example\n   * ```ts\n   * const privateKeyA = { ... }; // A Jwk object for party A\n   * const publicKeyB = { ... }; // A PublicKeyJwk object for party B\n   * const sharedSecret = await Secp256k1.sharedSecret({\n   *   privateKeyA,\n   *   publicKeyB\n   * });\n   * ```\n   *\n   * @param params - The parameters for the shared secret computation.\n   * @param params.privateKeyA - The private key in JWK format of one party.\n   * @param params.publicKeyB - The public key in JWK format of the other party.\n   *\n   * @returns A Promise that resolves to the computed shared secret as a Uint8Array.\n   */\n  public static async sharedSecret({ privateKeyA, publicKeyB }: {\n    privateKeyA: Jwk;\n    publicKeyB: Jwk;\n  }): Promise<Uint8Array> {\n    // Ensure that keys from the same key pair are not specified.\n    if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {\n      throw new Error(`X25519: ECDH shared secret cannot be computed from a single key pair's public and private keys.`);\n    }\n\n    // Convert the provided private and public keys to bytes.\n    const privateKeyABytes = await X25519.privateKeyToBytes({ privateKey: privateKeyA });\n    const publicKeyBBytes = await X25519.publicKeyToBytes({ publicKey: publicKeyB });\n\n    // Compute the shared secret between the public and private keys.\n    const sharedSecret = x25519.getSharedSecret(privateKeyABytes, publicKeyBBytes);\n\n    return sharedSecret;\n  }\n}", "import type { Jwk } from '@web5/crypto';\nimport type { RequireOnly } from '@web5/common';\n\nimport { Convert, Multicodec } from '@web5/common';\nimport { computeJwkThumbprint } from '@web5/crypto';\n\nimport type { KeyWithMulticodec } from './types/multibase.js';\n\nimport { DidError, DidErrorCode } from './did-error.js';\nimport {\n  DidService,\n  DidDocument,\n  DidVerificationMethod,\n  DidVerificationRelationship,\n} from './types/did-core.js';\n\n/**\n * Represents a Decentralized Web Node (DWN) service in a DID Document.\n *\n * A DWN DID service is a specialized type of DID service with the `type` set to\n * `DecentralizedWebNode`. It includes specific properties `enc` and `sig` that are used to identify\n * the public keys that can be used to interact with the DID Subject. The values of these properties\n * are strings or arrays of strings containing one or more verification method `id` values present in\n * the same DID document. If the `enc` and/or `sig` properties are an array of strings, an entity\n * interacting with the DID subject is expected to use the verification methods in the order they\n * are listed.\n *\n * @example\n * ```ts\n * const service: DwnDidService = {\n *   id: 'did:example:123#dwn',\n *   type: 'DecentralizedWebNode',\n *   serviceEndpoint: 'https://dwn.tbddev.org/dwn0',\n *   enc: 'did:example:123#key-1',\n *   sig: 'did:example:123#key-2'\n * }\n * ```\n *\n * @see {@link https://identity.foundation/decentralized-web-node/spec/ | DIF Decentralized Web Node (DWN) Specification}\n */\nexport interface DwnDidService extends DidService {\n  /**\n   * One or more verification method `id` values that can be used to encrypt information\n   * intended for the DID subject.\n   */\n  enc?: string | string[];\n\n  /**\n   * One or more verification method `id` values that will be used by the DID subject to sign data\n   * or by another entity to verify signatures created by the DID subject.\n   */\n  sig: string | string[];\n}\n\n/**\n * Extracts the fragment part of a Decentralized Identifier (DID) verification method identifier.\n *\n * This function takes any input and aims to return only the fragment of a DID identifier,\n * which comes after the '#' symbol in a DID string. It's designed specifically for handling\n * DID verification method identifiers. The function returns undefined for non-string inputs, inputs\n * that do not contain a '#', or complex data structures like objects or arrays, ensuring that only\n * the fragment part of a DID string is extracted when present.\n *\n * @example\n * ```ts\n * console.log(extractDidFragment(\"did:example:123#key-1\")); // Output: \"key-1\"\n * console.log(extractDidFragment(\"did:example:123\")); // Output: undefined\n * console.log(extractDidFragment({ id: \"did:example:123#0\", type: \"JsonWebKey\" })); // Output: undefined\n * console.log(extractDidFragment(undefined)); // Output: undefined\n * ```\n *\n * @param input - The input to be processed. Can be of any type, but the function is designed\n *                to work with strings that represent DID verification method identifiers.\n * @returns The fragment part of the DID identifier if the input is a string containing a '#'.\n *          Returns an empty string for all other inputs, including non-string types, strings\n *          without a '#', and complex data structures.\n */\nexport function extractDidFragment(input: unknown): string | undefined {\n  if (typeof input !== 'string') return undefined;\n  if (input.length === 0) return undefined;\n  return input.split('#').pop();\n}\n\n/**\n * Retrieves services from a given DID document, optionally filtered by `id` or `type`.\n *\n * If no `id` or `type` filters are provided, all defined services are returned.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = { ... }; // W3C DID document\n * const services = getServices({ didDocument, type: 'DecentralizedWebNode' });\n * ```\n *\n * @param params - An object containing input parameters for retrieving services.\n * @param params.didDocument - The DID document from which services are retrieved.\n * @param params.id - Optional. A string representing the specific service ID to match. If provided, only the service with this ID will be returned.\n * @param params.type - Optional. A string representing the specific service type to match. If provided, only the service(s) of this type will be returned.\n * @returns An array of services. If no matching service is found, an empty array is returned.\n */\nexport function getServices({ didDocument, id, type }: {\n  didDocument: DidDocument;\n  id?: string;\n  type?: string;\n}): DidService[] {\n  return didDocument?.service?.filter(service => {\n    if (id && service.id !== id) return false;\n    if (type && service.type !== type) return false;\n    return true;\n  }) ?? [];\n}\n\n/**\n * Retrieves a verification method object from a DID document if there is a match for the given\n * public key.\n *\n * This function searches the verification methods in a given DID document for a match with the\n * provided public key (either in JWK or multibase format). If a matching verification method is\n * found it is returned. If no match is found `null` is returned.\n *\n *\n * @example\n * ```ts\n * const didDocument = {\n *   // ... contents of a DID document ...\n * };\n * const publicKeyJwk = { kty: 'OKP', crv: 'Ed25519', x: '...' };\n *\n * const verificationMethod = await getVerificationMethodByKey({\n *   didDocument,\n *   publicKeyJwk\n * });\n * ```\n *\n * @param params - An object containing input parameters for retrieving the verification method ID.\n * @param params.didDocument - The DID document to search for the verification method.\n * @param params.publicKeyJwk - The public key in JSON Web Key (JWK) format to match against the verification methods in the DID document.\n * @param params.publicKeyMultibase - The public key as a multibase encoded string to match against the verification methods in the DID document.\n * @returns A promise that resolves with the matching verification method, or `null` if no match is found.\n * @throws Throws an `Error` if the `didDocument` parameter is missing or if the `didDocument` does not contain any verification methods.\n */\nexport async function getVerificationMethodByKey({ didDocument, publicKeyJwk, publicKeyMultibase }: {\n  didDocument: DidDocument;\n  publicKeyJwk?: Jwk;\n  publicKeyMultibase?: string;\n}): Promise<DidVerificationMethod | null> {\n  // Collect all verification methods from the DID document.\n  const verificationMethods = getVerificationMethods({ didDocument });\n\n  for (let method of verificationMethods) {\n    if (publicKeyJwk && method.publicKeyJwk) {\n      const publicKeyThumbprint = await computeJwkThumbprint({ jwk: publicKeyJwk });\n      if (publicKeyThumbprint === await computeJwkThumbprint({ jwk: method.publicKeyJwk })) {\n        return method;\n      }\n    } else if (publicKeyMultibase && method.publicKeyMultibase) {\n      if (publicKeyMultibase === method.publicKeyMultibase) {\n        return method;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Retrieves all verification methods from a given DID document, including embedded methods.\n *\n * This function consolidates all verification methods into a single array for easy access and\n * processing. It checks both the primary `verificationMethod` array and the individual verification\n * relationship properties `authentication`, `assertionMethod`, `keyAgreement`,\n * `capabilityInvocation`, and `capabilityDelegation` for embedded methods.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = { ... }; // W3C DID document\n * const verificationMethods = getVerificationMethods({ didDocument });\n * ```\n *\n * @param params - An object containing input parameters for retrieving verification methods.\n * @param params.didDocument - The DID document from which verification methods are retrieved.\n * @returns An array of `DidVerificationMethod`. If no verification methods are found, an empty array is returned.\n * @throws Throws an `TypeError` if the `didDocument` parameter is missing.\n */\nexport function getVerificationMethods({ didDocument }: {\n  didDocument: DidDocument;\n}): DidVerificationMethod[] {\n  if (!didDocument) throw new TypeError(`Required parameter missing: 'didDocument'`);\n\n  const verificationMethods: DidVerificationMethod[] = [];\n\n  // Check the 'verificationMethod' array.\n  verificationMethods.push(...didDocument.verificationMethod?.filter(isDidVerificationMethod) ?? []);\n\n  // Check verification relationship properties for embedded verification methods.\n  Object.keys(DidVerificationRelationship).forEach((relationship) => {\n    verificationMethods.push(\n      ...(didDocument[relationship as keyof DidDocument] as (string | DidVerificationMethod)[])\n        ?.filter(isDidVerificationMethod) ?? []\n    );\n  });\n\n  return verificationMethods;\n}\n\n/**\n * Retrieves all DID verification method types from a given DID document.\n *\n * The given DID Document must adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core Specification}.\n *\n * @example\n * ```ts\n * const didDocument = {\n *   verificationMethod: [\n *     {\n *       'id'              : 'did:example:123#key-0',\n *       'type'            : 'Ed25519VerificationKey2018',\n *       'controller'      : 'did:example:123',\n *       'publicKeyBase58' : '3M5RCDjPTWPkKSN3sxUmmMqHbmRPegYP1tjcKyrDbt9J'\n *     },\n *     {\n *       'id'              : 'did:example:123#key-1',\n *       'type'            : 'X25519KeyAgreementKey2019',\n *       'controller'      : 'did:example:123',\n *       'publicKeyBase58' : 'FbQWLPRhTH95MCkQUeFYdiSoQt8zMwetqfWoxqPgaq7x'\n *     },\n *     {\n *       'id'           : 'did:example:123#key-3',\n *       'type'         : 'JsonWebKey2020',\n *       'controller'   : 'did:example:123',\n *       'publicKeyJwk' : {\n *         'kty' : 'EC',\n *         'crv' : 'P-256',\n *         'x'   : 'Er6KSSnAjI70ObRWhlaMgqyIOQYrDJTE94ej5hybQ2M',\n *         'y'   : 'pPVzCOTJwgikPjuUE6UebfZySqEJ0ZtsWFpj7YSPGEk'\n *       }\n *     }\n *   ]\n * },\n * const vmTypes = getVerificationMethodTypes({ didDocument });\n * console.log(vmTypes);\n * // Output: ['Ed25519VerificationKey2018', 'X25519KeyAgreementKey2019', 'JsonWebKey2020']\n * ```\n *\n * @param params - An object containing input parameters for retrieving types.\n * @param params.didDocument - The DID document from which types are retrieved.\n * @returns An array of types. If no types were found, an empty array is returned.\n */\nexport function getVerificationMethodTypes({ didDocument }: {\n  didDocument: DidDocument;\n}): string[] {\n  // Collect all verification methods from the DID document.\n  const verificationMethods = getVerificationMethods({ didDocument });\n\n  // Map to extract 'type' from each verification method.\n  const types = verificationMethods.map(method => method.type);\n\n  return [...new Set(types)]; // Return only unique types.\n}\n\n/**\n * Retrieves a list of DID verification relationships by a specific method ID from a DID document.\n *\n * This function examines the specified DID document to identify any verification relationships\n * (e.g., `authentication`, `assertionMethod`) that reference a verification method by its method ID\n * or contain an embedded verification method matching the method ID. The method ID is typically a\n * fragment of a DID (e.g., `did:example:123#key-1`) that uniquely identifies a verification method\n * within the DID document.\n *\n * The search considers both direct references to verification methods by their IDs and verification\n * methods embedded within the verification relationship arrays. It returns an array of\n * `DidVerificationRelationship` enums corresponding to the verification relationships that contain\n * the specified method ID.\n *\n * @param params - An object containing input parameters for retrieving verification relationships.\n * @param params.didDocument - The DID document to search for verification relationships.\n * @param params.methodId - The method ID to search for within the verification relationships.\n * @returns An array of `DidVerificationRelationship` enums representing the types of verification\n *          relationships that reference the specified method ID.\n *\n * @example\n * ```ts\n * const didDocument: DidDocument = {\n *   // ...contents of a DID document...\n * };\n *\n * const relationships = getVerificationRelationshipsById({\n *   didDocument,\n *   methodId: 'key-1'\n * });\n * console.log(relationships);\n * // Output might include ['authentication', 'assertionMethod'] if those relationships\n * // reference or contain the specified method ID.\n * ```\n */\nexport function getVerificationRelationshipsById({ didDocument, methodId }: {\n  didDocument: DidDocument;\n  methodId: string;\n}): DidVerificationRelationship[] {\n  const relationships: DidVerificationRelationship[] = [];\n\n  Object.keys(DidVerificationRelationship).forEach((relationship) => {\n    if (Array.isArray(didDocument[relationship as keyof DidDocument])) {\n      const relationshipMethods = didDocument[relationship as keyof DidDocument] as (string | DidVerificationMethod)[];\n\n      const methodIdFragment = extractDidFragment(methodId);\n\n      // Check if the verification relationship property contains a matching method ID either\n      // directly referenced or as an embedded verification method.\n      const containsMethodId = relationshipMethods.some(method => {\n        const isByReferenceMatch = extractDidFragment(method) === methodIdFragment;\n        const isEmbeddedMethodMatch = isDidVerificationMethod(method) && extractDidFragment(method.id) === methodIdFragment;\n        return isByReferenceMatch || isEmbeddedMethodMatch;\n      });\n\n      if (containsMethodId) {\n        relationships.push(relationship as DidVerificationRelationship);\n      }\n    }\n  });\n\n  return relationships;\n}\n\n/**\n * Checks if a given object is a {@link DidService}.\n *\n * A {@link DidService} in the context of DID resources must include the properties `id`, `type`,\n * and `serviceEndpoint`. The `serviceEndpoint` can be a `DidServiceEndpoint` or an array of\n * `DidServiceEndpoint` objects.\n *\n * @example\n * ```ts\n * const service = {\n *   id: \"did:example:123#service-1\",\n *   type: \"OidcService\",\n *   serviceEndpoint: \"https://example.com/oidc\"\n * };\n *\n * if (isDidService(service)) {\n *   console.log('The object is a DidService');\n * } else {\n *   console.log('The object is not a DidService');\n * }\n * ```\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a `DidService`; otherwise, `false`.\n */\nexport function isDidService(obj: unknown): obj is DidService {\n  // Validate that the given value is an object.\n  if (!obj || typeof obj !== 'object' || obj === null) return false;\n\n  // Validate that the object has the necessary properties of DidService.\n  return 'id' in obj && 'type' in obj && 'serviceEndpoint' in obj;\n}\n\n/**\n * Checks if a given object is a {@link DwnDidService}.\n *\n * A {@link DwnDidService} is defined as {@link DidService} object with a `type` of\n * \"DecentralizedWebNode\" and `enc` and `sig` properties, where both properties are either strings\n * or arrays of strings.\n *\n * @example\n * ```ts\n * const didDocument: DidDocument = {\n *   id: 'did:example:123',\n *   verificationMethod: [\n *     {\n *       id: 'did:example:123#key-1',\n *       type: 'JsonWebKey2020',\n *       controller: 'did:example:123',\n *       publicKeyJwk: { ... }\n *     },\n *     {\n *       id: 'did:example:123#key-2',\n *       type: 'JsonWebKey2020',\n *       controller: 'did:example:123',\n *       publicKeyJwk: { ... }\n *     }\n *   ],\n *   service: [\n *     {\n *       id: 'did:example:123#dwn',\n *       type: 'DecentralizedWebNode',\n *       serviceEndpoint: 'https://dwn.tbddev.org/dwn0',\n *       enc: 'did:example:123#key-1',\n *       sig: 'did:example:123#key-2'\n *     }\n *   ]\n * };\n *\n * if (isDwnService(didDocument.service[0])) {\n *   console.log('The object is a DwnDidService');\n * } else {\n *   console.log('The object is not a DwnDidService');\n * }\n * ```\n *\n * @see {@link https://identity.foundation/decentralized-web-node/spec/ | Decentralized Web Node (DWN) Specification}\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a DwnDidService; otherwise, `false`.\n */\nexport function isDwnDidService(obj: unknown): obj is DwnDidService {\n  // Validate that the given value is a {@link DidService}.\n  if (!isDidService(obj)) return false;\n\n  // Validate that the `type` property is `DecentralizedWebNode`.\n  if (obj.type !== 'DecentralizedWebNode') return false;\n\n  // Validate that the given object has the `enc` and `sig` properties.\n  if (!('enc' in obj && 'sig' in obj)) return false;\n\n  // Validate that the `enc` and `sig` properties are either strings or arrays of strings.\n  const isStringOrStringArray = (prop: any): boolean =>\n    typeof prop === 'string' || Array.isArray(prop) && prop.every(item => typeof item === 'string');\n  return (isStringOrStringArray(obj.enc)) && (isStringOrStringArray(obj.sig));\n}\n\n/**\n * Checks if a given object is a DID Verification Method.\n *\n * A {@link DidVerificationMethod} in the context of DID resources must include the properties `id`,\n * `type`, and `controller`.\n *\n * @example\n * ```ts\n * const resource = {\n *  id           : \"did:example:123#0\",\n *  type         : \"JsonWebKey2020\",\n *  controller   : \"did:example:123\",\n *  publicKeyJwk : { ... }\n * };\n *\n * if (isDidVerificationMethod(resource)) {\n *   console.log('The resource is a DidVerificationMethod');\n * } else {\n *   console.log('The resource is not a DidVerificationMethod');\n * }\n * ```\n *\n * @param obj - The object to be checked.\n * @returns `true` if `obj` is a `DidVerificationMethod`; otherwise, `false`.\n */\nexport function isDidVerificationMethod(obj: unknown): obj is DidVerificationMethod {\n  // Validate that the given value is an object.\n  if (!obj || typeof obj !== 'object' || obj === null) return false;\n\n  // Validate that the object has the necessary properties of a DidVerificationMethod.\n  if (!('id' in obj && 'type' in obj && 'controller' in obj)) return false;\n\n  if (typeof obj.id !== 'string') return false;\n  if (typeof obj.type !== 'string') return false;\n  if (typeof obj.controller !== 'string') return false;\n\n  return true;\n}\n\n/**\n * Converts a cryptographic key to a multibase identifier.\n *\n * @remarks\n * This method provides a way to represent a cryptographic key as a multibase identifier.\n * It takes a `Uint8Array` representing the key, and either the multicodec code or multicodec name\n * as input. The method first adds the multicodec prefix to the key, then encodes it into Base58\n * format. Finally, it converts the Base58 encoded key into a multibase identifier.\n *\n * @example\n * ```ts\n * const key = new Uint8Array([...]); // Cryptographic key as Uint8Array\n * const multibaseId = keyBytesToMultibaseId({ key, multicodecName: 'ed25519-pub' });\n * ```\n *\n * @param params - The parameters for the conversion.\n * @returns The multibase identifier as a string.\n */\nexport function keyBytesToMultibaseId({ keyBytes, multicodecCode, multicodecName }:\n  RequireOnly<KeyWithMulticodec, 'keyBytes'>\n): string {\n  const prefixedKey = Multicodec.addPrefix({\n    code : multicodecCode,\n    data : keyBytes,\n    name : multicodecName\n  });\n  const prefixedKeyB58 = Convert.uint8Array(prefixedKey).toBase58Btc();\n  const multibaseKeyId = Convert.base58Btc(prefixedKeyB58).toMultibase();\n\n  return multibaseKeyId;\n}\n\n/**\n * Converts a multibase identifier to a cryptographic key.\n *\n * @remarks\n * This function decodes a multibase identifier back into a cryptographic key. It first decodes the\n * identifier from multibase format into Base58 format, and then converts it into a `Uint8Array`.\n * Afterward, it removes the multicodec prefix, extracting the raw key data along with the\n * multicodec code and name.\n *\n * @example\n * ```ts\n * const multibaseKeyId = '...'; // Multibase identifier of the key\n * const { key, multicodecCode, multicodecName } = multibaseIdToKey({ multibaseKeyId });\n * ```\n *\n * @param params - The parameters for the conversion.\n * @param params.multibaseKeyId - The multibase identifier string of the key.\n * @returns An object containing the key as a `Uint8Array` and its multicodec code and name.\n * @throws `DidError` if the multibase identifier is invalid.\n */\nexport function multibaseIdToKeyBytes({ multibaseKeyId }: {\n  multibaseKeyId: string\n}): Required<KeyWithMulticodec> {\n  try {\n    const prefixedKeyB58 = Convert.multibase(multibaseKeyId).toBase58Btc();\n    const prefixedKey = Convert.base58Btc(prefixedKeyB58).toUint8Array();\n    const { code, data, name } = Multicodec.removePrefix({ prefixedData: prefixedKey });\n\n    return { keyBytes: data, multicodecCode: code, multicodecName: name };\n  } catch (error: any) {\n    throw new DidError(DidErrorCode.InvalidDid, `Invalid multibase identifier: ${multibaseKeyId}`);\n  }\n}", "import type {\n  Jwk,\n  Signer,\n  CryptoApi,\n  KeyIdentifier,\n  EnclosedSignParams,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  EnclosedVerifyParams,\n} from '@web5/crypto';\n\nimport { LocalKeyManager, utils as cryptoUtils } from '@web5/crypto';\n\nimport type { DidDocument } from './types/did-core.js';\nimport type { DidMetadata, PortableDid } from './types/portable-did.js';\n\nimport { DidError, DidErrorCode } from './did-error.js';\nimport { extractDidFragment, getVerificationMethods } from './utils.js';\n\n/**\n * A `BearerDidSigner` extends the {@link Signer} interface to include specific properties for\n * signing with a Decentralized Identifier (DID). It encapsulates the algorithm and key identifier,\n * which are often needed when signing JWTs, JWSs, JWEs, and other data structures.\n *\n * Typically, the algorithm and key identifier are used to populate the `alg` and `kid` fields of a\n * JWT or JWS header.\n */\nexport interface BearerDidSigner extends Signer {\n  /**\n   * The cryptographic algorithm identifier used for signing operations.\n   *\n   * Typically, this value is used to populate the `alg` field of a JWT or JWS header. The\n   * registered algorithm names are defined in the\n   * {@link https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms | IANA JSON Web Signature and Encryption Algorithms registry}.\n   *\n   * @example\n   * \"ES256\" // ECDSA using P-256 and SHA-256\n   */\n  algorithm: string;\n\n  /**\n   * The unique identifier of the key within the DID document that is used for signing and\n   * verification operations.\n   *\n   * This identifier must be a DID URI with a fragment (e.g., did:method:123#key-0) that references\n   * a specific verification method in the DID document. It allows users of a `BearerDidSigner` to\n   * determine the DID and key that will be used for signing and verification operations.\n   *\n   * @example\n   * \"did:dht:123#key-1\" // A fragment identifier referring to a key in the DID document\n   */\n  keyId: string;\n}\n\n/**\n * Represents a Decentralized Identifier (DID) along with its DID document, key manager, metadata,\n * and convenience functions.\n */\nexport class BearerDid {\n  /** {@inheritDoc Did#uri} */\n  uri: string;\n\n  /**\n   * The DID document associated with this DID.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  document: DidDocument;\n\n  /** {@inheritDoc DidMetadata} */\n  metadata: DidMetadata;\n\n  /**\n   * Key Management System (KMS) used to manage the DIDs keys and sign data.\n   *\n   * Each DID method requires at least one key be present in the provided `keyManager`.\n   */\n  keyManager: CryptoApi;\n\n  constructor({ uri, document, metadata, keyManager }: {\n    uri: string,\n    document: DidDocument,\n    metadata: DidMetadata,\n    keyManager: CryptoApi\n  }) {\n    this.uri = uri;\n    this.document = document;\n    this.metadata = metadata;\n    this.keyManager = keyManager;\n  }\n\n  /**\n   * Converts a `BearerDid` object to a portable format containing the URI and verification methods\n   * associated with the DID.\n   *\n   * This method is useful when you need to represent the key material and metadata associated with\n   * a DID in format that can be used independently of the specific DID method implementation. It\n   * extracts both public and private keys from the DID's key manager and organizes them into a\n   * `PortableDid` structure.\n   *\n   * @remarks\n   * If the DID's key manager does not allow private keys to be exported, the `PortableDid` returned\n   * will not contain a `privateKeys` property. This enables the importing and exporting DIDs that\n   * use the same underlying KMS even if the KMS does not support exporting private keys. Examples\n   * include hardware security modules (HSMs) and cloud-based KMS services like AWS KMS.\n   *\n   * If the DID's key manager does support exporting private keys, the resulting `PortableDid` will\n   * include a `privateKeys` property which contains the same number of entries as there are\n   * verification methods as the DID document, each with its associated private key and the\n   * purpose(s) for which the key can be used (e.g., `authentication`, `assertionMethod`, etc.).\n   *\n   * @example\n   * ```ts\n   * // Assuming `did` is an instance of BearerDid\n   * const portableDid = await did.export();\n   * // portableDid now contains the DID URI, document, metadata, and optionally, private keys.\n   * ```\n   *\n   * @returns A `PortableDid` containing the URI, DID document, metadata, and optionally private\n   *          keys associated with the `BearerDid`.\n   * @throws An error if the DID document does not contain any verification methods or the keys for\n   *         any verification method are missing in the key manager.\n   */\n  public async export(): Promise<PortableDid> {\n    // Verify the DID document contains at least one verification method.\n    if (!(Array.isArray(this.document.verificationMethod) && this.document.verificationMethod.length > 0)) {\n      throw new Error(`DID document for '${this.uri}' is missing verification methods`);\n    }\n\n    // Create a new `PortableDid` object to store the exported data.\n    let portableDid: PortableDid = {\n      uri      : this.uri,\n      document : this.document,\n      metadata : this.metadata\n    };\n\n    // If the BearerDid's key manager supports exporting private keys, add them to the portable DID.\n    if ('exportKey' in this.keyManager && typeof this.keyManager.exportKey === 'function') {\n      const privateKeys: Jwk[] = [];\n      for (let vm of this.document.verificationMethod) {\n        if (!vm.publicKeyJwk) {\n          throw new Error(`Verification method '${vm.id}' does not contain a public key in JWK format`);\n        }\n\n        // Compute the key URI of the verification method's public key.\n        const keyUri = await this.keyManager.getKeyUri({ key: vm.publicKeyJwk });\n\n        // Retrieve the private key from the key manager.\n        const privateKey = await this.keyManager.exportKey({ keyUri }) as Jwk;\n\n        // Add the verification method to the key set.\n        privateKeys.push({ ...privateKey });\n      }\n      portableDid.privateKeys = privateKeys;\n    }\n\n    return portableDid;\n  }\n\n  /**\n   * Return a {@link Signer} that can be used to sign messages, credentials, or arbitrary data.\n   *\n   * If given, the `methodId` parameter is used to select a key from the verification methods\n   * present in the DID Document.\n   *\n   * If `methodID` is not given, the first verification method intended for signing claims is used.\n   *\n   * @param params - The parameters for the `getSigner` operation.\n   * @param params.methodId - ID of the verification method key that will be used for sign and\n   *                          verify operations. Optional.\n   * @returns An instantiated {@link Signer} that can be used to sign and verify data.\n   */\n  public async getSigner(params?: { methodId: string }): Promise<BearerDidSigner> {\n    // Attempt to find a verification method that matches the given method ID, or if not given,\n    // find the first verification method intended for signing claims.\n    const verificationMethod = this.document.verificationMethod?.find(\n      vm => extractDidFragment(vm.id) === (extractDidFragment(params?.methodId) ?? extractDidFragment(this.document.assertionMethod?.[0]))\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    // Compute the expected key URI of the signing key.\n    const keyUri = await this.keyManager.getKeyUri({ key: verificationMethod.publicKeyJwk });\n\n    // Get the public key to be used for verify operations, which also verifies that the key is\n    // present in the key manager's store.\n    const publicKey = await this.keyManager.getPublicKey({ keyUri });\n\n    // Bind the DID's key manager to the signer.\n    const keyManager = this.keyManager;\n\n    // Determine the signing algorithm.\n    const algorithm = cryptoUtils.getJoseSignatureAlgorithmFromPublicKey(publicKey);\n\n    return {\n      algorithm : algorithm,\n      keyId     : verificationMethod.id,\n\n      async sign({ data }: EnclosedSignParams): Promise<Uint8Array> {\n        const signature = await keyManager.sign({ data, keyUri: keyUri! }); // `keyUri` is guaranteed to be defined at this point.\n        return signature;\n      },\n\n      async verify({ data, signature }: EnclosedVerifyParams): Promise<boolean> {\n        const isValid = await keyManager.verify({ data, key: publicKey!, signature }); // `publicKey` is guaranteed to be defined at this point.\n        return isValid;\n      }\n    };\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await BearerDid.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the PortableDid document does not contain any verification methods or the\n   *         keys for any verification method are missing in the key manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Get all verification methods from the given DID document, including embedded methods.\n    const verificationMethods = getVerificationMethods({ didDocument: portableDid.document });\n\n    // Validate that the DID document contains at least one verification method.\n    if (verificationMethods.length === 0) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `At least one verification method is required but 0 were given`);\n    }\n\n    // If given, import the private key material into the key manager.\n    for (let key of portableDid.privateKeys ?? []) {\n      await keyManager.importKey({ key });\n    }\n\n    // Validate that the key material for every verification method in the DID document is present\n    // in the key manager.\n    for (let vm of verificationMethods) {\n      if (!vm.publicKeyJwk) {\n        throw new Error(`Verification method '${vm.id}' does not contain a public key in JWK format`);\n      }\n\n      // Compute the key URI of the verification method's public key.\n      const keyUri = await keyManager.getKeyUri({ key: vm.publicKeyJwk });\n\n      // Verify that the key is present in the key manager. If not, an error is thrown.\n      await keyManager.getPublicKey({ keyUri });\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = new BearerDid({\n      uri      : portableDid.uri,\n      document : portableDid.document,\n      metadata : portableDid.metadata,\n      keyManager\n    });\n\n    return did;\n  }\n}", "import type {\n  CryptoApi,\n  LocalKeyManager,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport type { BearerDid } from '../bearer-did.js';\nimport type { DidMetadata } from '../types/portable-did.js';\nimport type {\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { DidVerificationRelationship } from '../types/did-core.js';\n\n/**\n * Represents options during the creation of a Decentralized Identifier (DID).\n *\n * Implementations of this interface may contain properties and methods that provide specific\n * options or metadata during the DID creation processes following specific DID method\n * specifications.\n */\nexport interface DidCreateOptions<TKms> {\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Options for additional verification methods added to the DID Document during the creation of a\n * new Decentralized Identifier (DID).\n */\nexport interface DidCreateVerificationMethod<TKms> extends Pick<Partial<DidVerificationMethod>, 'controller' | 'id' | 'type'> {\n  /**\n   * The name of the cryptographic algorithm to be used for key generation.\n   *\n   * Examples might include `Ed25519` and `ES256K` but will vary depending on the DID method\n   * specification and the key management system in use.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidCreateVerificationMethod = {\n   *   algorithm: 'Ed25519'\n   * };\n   * ```\n   */\n  algorithm: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Optionally specify the purposes for which a verification method is intended to be used in a DID\n   * document.\n   *\n   * The `purposes` property defines the specific\n   * {@link DidVerificationRelationship | verification relationships} between the DID subject and\n   * the verification method. This enables the verification method to be utilized for distinct\n   * actions such as authentication, assertion, key agreement, capability delegation, and others. It\n   * is important for verifiers to recognize that a verification method must be associated with the\n   * relevant purpose in the DID document to be valid for that specific use case.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidCreateVerificationMethod = {\n   *   algorithm: 'Ed25519',\n   *   controller: 'did:example:1234',\n   *   purposes: ['authentication', 'assertionMethod']\n   * };\n   * ```\n   */\n  purposes?: (DidVerificationRelationship | keyof typeof DidVerificationRelationship)[];\n}\n\n/**\n * Defines the API for a specific DID method. It includes functionalities for creating and resolving\n * DIDs.\n *\n * @typeparam T - The type of the DID instance associated with this method.\n * @typeparam O - The type of the options used for creating the DID.\n */\nexport interface DidMethodApi<\n    TKms extends CryptoApi | undefined = CryptoApi,\n    TDid extends BearerDid = BearerDid,\n    TOptions extends DidCreateOptions<TKms> = DidCreateOptions<TKms>\n  > extends DidMethodResolver {\n  /**\n   * The name of the DID method.\n   *\n   * For example, in the DID `did:example:123456`, \"example\" would be the method name.\n   */\n  methodName: string;\n\n  new (): DidMethod;\n\n  /**\n   * Creates a new DID.\n   *\n   * This function should generate a new DID in accordance with the DID method specification being\n   * implemented, using the provided `keyManager`, and optionally, any provided `options`.\n   *\n   * @param params - The parameters used to create the DID.\n   * @param params.keyManager - Optional. The cryptographic API used for key management.\n   * @param params.options - Optional. The options used for creating the DID.\n   * @returns A promise that resolves to the newly created DID instance.\n   */\n  create(params: {\n    keyManager?: TKms;\n    options?: TOptions;\n  }): Promise<TDid>;\n\n  /**\n   * Given a DID Document, return the verification method that will be used for signing messages and\n   * credentials.\n   *\n   * If given, the `methodId` parameter is used to select the verification method. If not given, a\n   * DID method specific approach is taken to selecting the verification method to return.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns A promise that resolves to the erification method to use for signing.\n   */\n  getSigningMethod(params: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod>;\n}\n\n/**\n * Defines the interface for resolving a DID using a specific DID method.\n *\n * A DID resolver takes a DID URI as input and returns a {@link DidResolutionResult} object.\n *\n * @property {string} methodName - The name of the DID method.\n * @method resolve - Asynchronous method to resolve a DID URI. Takes the DID URI and optional resolution options.\n */\nexport interface DidMethodResolver {\n  /**\n   * The name of the DID method.\n   *\n   * For example, in the DID `did:example:123456`, \"example\" would be the method name.\n   */\n  methodName: string;\n\n  new (): DidMethod;\n\n  /**\n   * Resolves a DID URI.\n   *\n   * This function should resolve the DID URI in accordance with the DID method specification being\n   * implemented, using the provided `options`.\n   *\n   * @param didUri - The DID URI to be resolved.\n   * @param options - Optional. The options used for resolving the DID.\n   * @returns A {@link DidResolutionResult} object containing the DID document and metadata or an error.\n   */\n  resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult>;\n}\n\n/**\n * Represents the result of a Decentralized Identifier (DID) registration operation.\n *\n * This type encapsulates the complete outcome of registering a DID, including the registration\n * metadata, the DID document (if registration is successful), and metadata about the DID document.\n */\nexport interface DidRegistrationResult {\n  /**\n   * The DID document resulting from the registration process, if successful.\n   *\n   * If the registration operation was successful, this MUST contain a DID document\n   * corresponding to the DID. If the registration is unsuccessful, this value MUST be empty.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocument | DID Core Specification, § DID Document}\n   */\n  didDocument: DidDocument | null;\n\n  /**\n   * Metadata about the DID Document.\n   *\n   * This structure contains information about the DID Document like creation and update timestamps,\n   * deactivation status, versioning information, and other details relevant to the DID Document.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#dfn-diddocumentmetadata | DID Core Specification, § DID Document Metadata}\n   */\n  didDocumentMetadata: DidMetadata;\n\n  /**\n   * A metadata structure consisting of values relating to the results of the DID registration\n   * process.\n   *\n   * This structure is REQUIRED, and in the case of an error in the registration process,\n   * this MUST NOT be empty. If the registration is not successful, this structure MUST contain an\n   * `error` property describing the error.\n   */\n  didRegistrationMetadata: DidRegistrationMetadata;\n}\n\n/**\n * Represents metadata related to the result of a DID registration operation.\n *\n * This type includes fields that provide information about the outcome of a DID registration\n * process (e.g., create, update, deactivate), including any errors that occurred.\n *\n * This metadata typically changes between invocations of the `create`, `update`, and `deactivate`\n * functions, as it represents data about the registration process itself.\n */\nexport type DidRegistrationMetadata = {\n  /**\n   * An error code indicating issues encountered during the DID registration process.\n   *\n   * While the DID Core specification does not define a specific set of error codes for the result\n   * returned by the `create`, `update`, or `deactivate` functions, it is recommended to use the\n   * error codes defined in the DID Specification Registries for\n   * {@link https://www.w3.org/TR/did-spec-registries/#error | DID Resolution Metadata }.\n   *\n   * Recommended error codes include:\n   *   - `internalError`: An unexpected error occurred during DID registration process.\n   *   - `invalidDid`: The provided DID is invalid.\n   *   - `invalidDidDocument`: The provided DID document does not conform to valid syntax.\n   *   - `invalidDidDocumentLength`: The byte length of the provided DID document does not match the expected value.\n   *   - `invalidSignature`: Verification of a signature failed.\n   *   - `methodNotSupported`: The DID method specified is not supported.\n   *   - Custom error codes can also be provided as strings.\n   */\n  error?: string;\n\n  // Additional output metadata generated during DID registration.\n  [key: string]: any;\n};\n\n/**\n * Base abstraction for all Decentralized Identifier (DID) method implementations.\n *\n * This base class serves as a foundational structure upon which specific DID methods\n * can be implemented. Subclasses should furnish particular method and data models adherent\n * to various DID methods, taking care to adhere to the\n * {@link https://www.w3.org/TR/did-core/ | W3C DID Core specification} and the\n * respective DID method specifications.\n */\nexport class DidMethod {\n  /**\n   * MUST be implemented by all DID method implementations that extend {@link DidMethod}.\n   *\n   * Given the W3C DID Document of a DID, return the verification method that will be used for\n   * signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, each DID method implementation will select a default\n   * verification method from the DID Document.\n   *\n   * @param _params - The parameters for the `getSigningMethod` operation.\n   * @param _params.didDocument - DID Document to get the verification method from.\n   * @param _params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod(_params: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod | undefined> {\n    throw new Error(`Not implemented: Classes extending DidMethod must implement getSigningMethod()`);\n  }\n\n  /**\n   * MUST be implemented by all DID method implementations that extend {@link DidMethod}.\n   *\n   * Resolves a DID URI to a DID Document.\n   *\n   * @param _didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(_didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    throw new Error(`Not implemented: Classes extending DidMethod must implement resolve()`);\n  }\n}", "import type { Packet, TxtAnswer, TxtData } from '@dnsquery/dns-packet';\nimport type {\n  Jwk,\n  Signer,\n  CryptoApi,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  AsymmetricKeyConverter,\n} from '@web5/crypto';\n\nimport bencode from 'bencode';\nimport { Convert } from '@web5/common';\nimport { computeJwkThumbprint, Ed25519, LocalKeyManager, Secp256k1, Secp256r1 } from '@web5/crypto';\nimport { AUTHORITATIVE_ANSWER, decode as dnsPacketDecode, encode as dnsPacketEncode } from '@dnsquery/dns-packet';\n\nimport type { DidMetadata, PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod, DidRegistrationResult } from './did-method.js';\nimport type {\n  DidService,\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { extractDidFragment } from '../utils.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { DidVerificationRelationship } from '../types/did-core.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Represents a BEP44 message, which is used for storing and retrieving data in the Mainline DHT\n * network.\n *\n * A BEP44 message is used primarily in the context of the DID DHT method for publishing and\n * resolving DID documents in the DHT network. This type encapsulates the data structure required\n * for such operations in accordance with BEP44.\n *\n * @see {@link https://www.bittorrent.org/beps/bep_0044.html | BEP44}\n */\nexport interface Bep44Message {\n  /**\n   * The public key bytes of the Identity Key, which serves as the identifier in the DHT network for\n   * the corresponding BEP44 message.\n   */\n  k: Uint8Array;\n\n  /**\n   * The sequence number of the message, used to ensure the latest version of the data is retrieved\n   * and updated. It's a monotonically increasing number.\n   */\n  seq: number;\n\n  /**\n   * The signature of the message, ensuring the authenticity and integrity of the data. It's\n   * computed over the bencoded sequence number and value.\n   */\n  sig: Uint8Array;\n\n  /**\n   * The actual data being stored or retrieved from the DHT network, typically encoded in a format\n   * suitable for DNS packet representation of a DID Document.\n   */\n  v: Uint8Array;\n}\n\n/**\n * Options for creating a Decentralized Identifier (DID) using the DID DHT method.\n */\nexport interface DidDhtCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify that the DID Subject is also identified by one or more other DIDs or URIs.\n   *\n   * A DID subject can have multiple identifiers for different purposes, or at different times.\n   * The assertion that two or more DIDs (or other types of URI) refer to the same DID subject can\n   * be made using the `alsoKnownAs` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#also-known-as | DID Core Specification, § Also Known As}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   alsoKnownAs: 'did:example:123'\n   * };\n   * ```\n   */\n  alsoKnownAs?: string[];\n\n  /**\n   * Optionally specify which DID (or DIDs) is authorized to make changes to the DID document.\n   *\n   * A DID controller is an entity that is authorized to make changes to a DID document. Typically,\n   * only the DID Subject (i.e., the value of `id` property in the DID document) is authoritative.\n   * However, another DID (or DIDs) can be specified as the DID controller, and when doing so, any\n   * verification methods contained in the DID document for the other DID should be accepted as\n   * authoritative. In other words, proofs created by the controller DID should be considered\n   * equivalent to proofs created by the DID Subject.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#did-controller | DID Core Specification, § DID Controller}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   controller: 'did:example:123'\n   * };\n   * ```\n   */\n  controllers?: string | string[];\n\n  /**\n   * Optional. The URI of a server involved in executing DID method operations. In the context of\n   * DID creation, the endpoint is expected to be a DID DHT Gateway or Pkarr relay. If not\n   * specified, a default gateway node is used.\n   */\n  gatewayUri?: string;\n\n  /**\n   * Optional. Determines whether the created DID should be published to the DHT network.\n   *\n   * If set to `true` or omitted, the DID is publicly discoverable. If `false`, the DID is not\n   * published and cannot be resolved by others. By default, newly created DIDs are published.\n   *\n   * @see {@link https://did-dht.com | DID DHT Method Specification}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   publish: false\n   * };\n   * ```\n   */\n  publish?: boolean;\n\n  /**\n   * Optional. An array of service endpoints associated with the DID.\n   *\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   services: [\n   *     {\n   *       id: 'did:dht:i9xkp8ddcbcg8jwq54ox699wuzxyifsqx4jru45zodqu453ksz6y#dwn',\n   *       type: 'DecentralizedWebNode',\n   *       serviceEndpoint: ['https://example.com/dwn1', 'https://example/dwn2']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  services?: DidService[];\n\n  /**\n   * Optionally specify one or more registered DID DHT types to make the DID discovereable.\n   *\n   * Type indexing is an OPTIONAL feature that enables DIDs to become discoverable. DIDs that wish\n   * to be discoverable and resolveable by type can include one or more types when publishing their\n   * DID document to a DID DHT Gateway.\n   *\n   * The registered DID types are published in the {@link https://did-dht.com/registry/index.html#indexed-types | DID DHT Registry}.\n   */\n  types?: (DidDhtRegisteredDidType | keyof typeof DidDhtRegisteredDidType)[];\n\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   *\n   * By default, a newly created DID DHT document will contain a single Ed25519 verification method,\n   * also known as the {@link https://did-dht.com/#term:identity-key | Identity Key}. Additional\n   * verification methods can be added to the DID document using the `verificationMethods` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   *\n   * @example\n   * ```ts\n   * const did = await DidDht.create({\n   *  options: {\n   *   verificationMethods: [\n   *     {\n   *       algorithm: 'Ed25519',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     },\n   *     {\n   *       algorithm: 'Ed25519',\n   *       id: 'dwn-sig',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * The default DID DHT Gateway or Pkarr Relay server to use when publishing and resolving DID\n * documents.\n */\nconst DEFAULT_GATEWAY_URI = 'https://diddht.tbddev.org';\n\n/**\n * The version of the DID DHT specification that is implemented by this library.\n *\n * When a DID DHT document is published to the DHT network, the version of the specification that\n * was used to create the document is included in the DNS TXT record for the root record. This\n * allows clients to determine whether the DID DHT document is compatible with the client's\n * implementation of the DID DHT specification. The version number is not present in the\n * corresponding DID document.\n *\n * @see {@link https://did-dht.com | DID DHT Method Specification}\n */\nconst DID_DHT_SPECIFICATION_VERSION = 0;\n\n/**\n * The default TTL for DNS records published to the DHT network.\n *\n * The recommended TTL value is 7200 seconds (2 hours) since it matches the default TTL for\n * Mainline DHT records.\n */\nconst DNS_RECORD_TTL = 7200;\n\n/**\n * Character used to separate distinct elements or entries in the DNS packet representation\n * of a DID Document.\n *\n * For example, verification methods, verification relationships, and services are separated by\n * semicolons (`;`) in the root record:\n * ```\n * vm=k1;auth=k1;asm=k2;inv=k3;del=k3;srv=s1\n * ```\n */\nconst PROPERTY_SEPARATOR = ';';\n\n/**\n * Character used to separate distinct values within a single element or entry in the DNS packet\n * representation of a DID Document.\n *\n * For example, multiple key references for the `authentication` verification relationships are\n * separated by commas (`,`):\n * ```\n * auth=0,1,2\n * ```\n */\nconst VALUE_SEPARATOR = ',';\n\n/**\n * Represents an optional extension to a DID Document’s DNS packet representation exposed as a\n * type index.\n *\n * Type indexing is an OPTIONAL feature that enables DIDs to become discoverable. DIDs that wish to\n * be discoverable and resolveable by type can include one or more types when publishing their DID\n * document to a DID DHT Gateway.\n *\n * The registered DID types are published in the {@link https://did-dht.com/registry/index.html#indexed-types | DID DHT Registry}.\n */\nexport enum DidDhtRegisteredDidType {\n  /**\n   * Type 0 is reserved for DIDs that do not wish to associate themselves with a specific type but\n   * wish to make themselves discoverable.\n   */\n  Discoverable = 0,\n\n  /**\n   * Organization\n   * @see {@link https://schema.org/Organization | schema definition}\n   */\n  Organization = 1,\n\n  /**\n   * Government Organization\n   * @see {@link https://schema.org/GovernmentOrganization | schema definition}\n   */\n  Government = 2,\n\n  /**\n   * Corporation\n   * @see {@link https://schema.org/Corporation | schema definition}\n   */\n  Corporation = 3,\n\n  /**\n   * Corporation\n   * @see {@link https://schema.org/Corporation | schema definition}\n   */\n  LocalBusiness = 4,\n\n  /**\n   * Software Package\n   * @see {@link https://schema.org/SoftwareSourceCode | schema definition}\n   */\n  SoftwarePackage = 5,\n\n  /**\n   * Web App\n   * @see {@link https://schema.org/WebApplication | schema definition}\n   */\n  WebApp = 6,\n\n  /**\n   * Financial Institution\n   * @see {@link https://schema.org/FinancialService | schema definition}\n   */\n  FinancialInstitution = 7\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID DHT document.\n *\n * The DID DHT method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption. The registered key types are published in the DID DHT Registry and each is\n * assigned a unique numerical value for use by client and gateway implementations.\n *\n * The registered key types are published in the {@link https://did-dht.com/registry/index.html#key-type-index | DID DHT Registry}.\n */\nexport enum DidDhtRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519   = 0,\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 1,\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 2\n}\n\n/**\n * Maps {@link https://www.w3.org/TR/did-core/#verification-relationships | DID Core Verification Relationship}\n * values to the corresponding record name in the DNS packet representation of a DHT DID document.\n */\nexport enum DidDhtVerificationRelationship {\n  /**\n   * Specifies how the DID subject is expected to be authenticated.\n   */\n  authentication = 'auth',\n\n  /**\n   * Specifies how the DID subject is expected to express claims, such as for issuing Verifiable\n   * Credentials.\n   */\n  assertionMethod = 'asm',\n\n  /**\n   * Specifies a mechanism used by the DID subject to delegate a cryptographic capability to another\n   * party\n   */\n  capabilityDelegation = 'del',\n\n  /**\n   * Specifies a verification method used by the DID subject to invoke a cryptographic capability.\n   */\n  capabilityInvocation = 'inv',\n\n  /**\n   * Specifies how an entity can generate encryption material to communicate confidentially with the\n   * DID subject.\n   */\n  keyAgreement = 'agm'\n}\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID DHT\n * {@link DidDhtRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidDhtRegisteredKeyType.Ed25519,\n  ES256K    : DidDhtRegisteredKeyType.secp256k1,\n  ES256     : DidDhtRegisteredKeyType.secp256r1,\n  'P-256'   : DidDhtRegisteredKeyType.secp256r1,\n  secp256k1 : DidDhtRegisteredKeyType.secp256k1,\n  secp256r1 : DidDhtRegisteredKeyType.secp256r1\n} as const;\n\n/**\n * The `DidDht` class provides an implementation of the `did:dht` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:dht` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method keys or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:dht` to its corresponding DID Document stored in the DHT network.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:dht` method leverages the distributed nature of the Mainline DHT network for\n * decentralized identity management. This method allows DIDs to be resolved without relying on\n * centralized registries or ledgers, enhancing privacy and control for users. The DID Document is\n * stored and retrieved from the DHT network, and the method includes optional mechanisms for\n * discovering DIDs by type.\n *\n * The DID URI in the `did:dht` method includes a method-specific identifier called the Identity Key\n * which corresponds to the DID's entry in the DHT network. The Identity Key required to make\n * changes to the DID Document since Mainline DHT nodes validate the signature of each message\n * before storing the value in the DHT.\n *\n * @see {@link https://did-dht.com | DID DHT Method Specification}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidDht.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidDht.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidDht.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidDht.import(portableDid);\n * ```\n */\nexport class DidDht extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID DHT specification.\n   */\n  public static methodName = 'dht';\n\n  /**\n   * Creates a new DID using the `did:dht` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by z-base-32 encoding the Identity Key public key and prefixing with\n   * `did:dht:`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated which serves as the\n   *   Identity Key.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidDht.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidDht.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidDhtCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that the algorithm for any given verification method is supported by the\n    // DID DHT specification.\n    if (options.verificationMethods?.some(vm => !(vm.algorithm in AlgorithmToKeyTypeMap))) {\n      throw new Error('One or more verification method algorithms are not supported');\n    }\n\n    // Check 2: Validate that the ID for any given verification method is unique.\n    const methodIds = options.verificationMethods?.filter(vm => 'id' in vm).map(vm => vm.id);\n    if (methodIds && methodIds.length !== new Set(methodIds).size) {\n      throw new Error('One or more verification method IDs are not unique');\n    }\n\n    // Check 3: Validate that the required properties for any given services are present.\n    if (options.services?.some(s => !s.id || !s.type || !s.serviceEndpoint)) {\n      throw new Error('One or more services are missing required properties');\n    }\n\n    // Generate random key material for the Identity Key.\n    const identityKeyUri = await keyManager.generateKey({ algorithm: 'Ed25519' });\n    const identityKey = await keyManager.getPublicKey({ keyUri: identityKeyUri });\n\n    // Compute the DID URI from the Identity Key.\n    const didUri = await DidDhtUtils.identityKeyToIdentifier({ identityKey });\n\n    // Begin constructing the DID Document.\n    const document: DidDocument = {\n      id: didUri,\n      ...options.alsoKnownAs && { alsoKnownAs: options.alsoKnownAs },\n      ...options.controllers && { controller: options.controllers }\n    };\n\n    // If the given verification methods do not contain an Identity Key, add one.\n    const verificationMethodsToAdd = [...options.verificationMethods ?? []];\n    if (!verificationMethodsToAdd?.some(vm => vm.id?.split('#').pop() === '0')) {\n      // Add the Identity Key to the beginning of the key set.\n      verificationMethodsToAdd.unshift({\n        algorithm : 'Ed25519' as any,\n        id        : '0',\n        purposes  : ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n      });\n    }\n\n    // Generate random key material for the Identity Key and any additional verification methods.\n    // Add verification methods to the DID document.\n    for (const vm of verificationMethodsToAdd) {\n      // Generate a random key for the verification method, or if its the Identity Key's\n      // verification method (`id` is 0) use the key previously generated.\n      const keyUri = (vm.id && vm.id.split('#').pop() === '0')\n        ? identityKeyUri\n        : await keyManager.generateKey({ algorithm: vm.algorithm });\n\n      const publicKey = await keyManager.getPublicKey({ keyUri });\n\n      // Use the given ID, the key's ID, or the key's thumbprint as the verification method ID.\n      let methodId = vm.id ?? publicKey.kid ?? await computeJwkThumbprint({ jwk: publicKey });\n      methodId = `${didUri}#${extractDidFragment(methodId)}`; // Remove fragment prefix, if any.\n\n      // Initialize the `verificationMethod` array if it does not already exist.\n      document.verificationMethod ??= [];\n\n      // Add the verification method to the DID document.\n      document.verificationMethod.push({\n        id           : methodId,\n        type         : 'JsonWebKey',\n        controller   : vm.controller ?? didUri,\n        publicKeyJwk : publicKey,\n      });\n\n      // Add the verification method to the specified purpose properties of the DID document.\n      for (const purpose of vm.purposes ?? []) {\n        // Initialize the purpose property if it does not already exist.\n        if (!document[purpose]) document[purpose] = [];\n        // Add the verification method to the purpose property.\n        document[purpose]!.push(methodId);\n      }\n    }\n\n    // Add services, if any, to the DID document.\n    options.services?.forEach(service => {\n      document.service ??= [];\n      service.id = `${didUri}#${service.id.split('#').pop()}`; // Remove fragment prefix, if any.\n      document.service.push(service);\n    });\n\n    // Create the BearerDid object, including the registered DID types (if any), and specify that\n    // the DID has not yet been published.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {\n        published: false,\n        ...options.types && { types: options.types }\n      },\n      keyManager\n    });\n\n    // By default, publish the DID document to a DHT Gateway unless explicitly disabled.\n    if (options.publish ?? true) {\n      const registrationResult = await DidDht.publish({ did, gatewayUri: options.gatewayUri });\n      did.metadata = registrationResult.didDocumentMetadata;\n    }\n\n    return did;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID DHT method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidDht.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the PortableDid document does not contain any verification methods, lacks\n   *         an Identity Key, or the keys for any verification method are missing in the key\n   *         manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidDht.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given verification methods contain an Identity Key.\n    if (!did.document.verificationMethod?.some(vm => vm.id?.split('#').pop() === '0')) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain an Identity Key`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:dht` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the Identity Key's verification method with an ID fragment\n   * of '#0' is used.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument, methodId = '#0' }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to find a verification method that matches the given method ID, or if not given,\n    // find the first verification method intended for signing claims.\n    const verificationMethod = didDocument.verificationMethod?.find(\n      vm => extractDidFragment(vm.id) === (extractDidFragment(methodId) ?? extractDidFragment(didDocument.assertionMethod?.[0]))\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Publishes a DID to the DHT, making it publicly discoverable and resolvable.\n   *\n   * This method handles the publication of a DID Document associated with a `did:dht` DID to the\n   * Mainline DHT network. The publication process involves storing the DID Document in Mainline DHT\n   * via a Pkarr relay server.\n   *\n   * @remarks\n   * - This method is typically invoked automatically during the creation of a new DID unless the\n   *   `publish` option is set to `false`.\n   * - For existing, unpublished DIDs, it can be used to publish the DID Document to Mainline DHT.\n   * - The method relies on the specified Pkarr relay server to interface with the DHT network.\n   *\n   * @example\n   * ```ts\n   * // Generate a new DID and keys but explicitly disable publishing.\n   * const did = await DidDht.create({ options: { publish: false } });\n   * // Publish the DID to the DHT.\n   * const registrationResult = await DidDht.publish({ did });\n   * // `registrationResult.didDocumentMetadata.published` is true if the DID was successfully published.\n   * ```\n   *\n   * @param params - The parameters for the `publish` operation.\n   * @param params.did - The `BearerDid` object representing the DID to be published.\n   * @param params.gatewayUri - Optional. The URI of a server involved in executing DID method\n   *                            operations. In the context of publishing, the endpoint is expected\n   *                            to be a DID DHT Gateway or Pkarr Relay. If not specified, a default\n   *                            gateway node is used.\n   * @returns A promise that resolves to a {@link DidRegistrationResult} object that contains\n   *          the result of registering the DID with a DID DHT Gateway or Pkarr relay.\n   */\n  public static async publish({ did, gatewayUri = DEFAULT_GATEWAY_URI }: {\n    did: BearerDid;\n    gatewayUri?: string;\n  }): Promise<DidRegistrationResult> {\n    const registrationResult = await DidDhtDocument.put({ did, gatewayUri });\n\n    return registrationResult;\n  }\n\n  /**\n   * Resolves a `did:dht` identifier to its corresponding DID document.\n   *\n   * This method performs the resolution of a `did:dht` DID, retrieving its DID Document from the\n   * Mainline DHT network. The process involves querying the DHT network via a Pkarr relay server to\n   * retrieve the DID Document that corresponds to the given DID identifier.\n   *\n   * @remarks\n   * - If a `gatewayUri` option is not specified, a default Pkarr relay is used to access the DHT\n   *   network.\n   * - It decodes the DID identifier and retrieves the associated DID Document and metadata.\n   * - In case of resolution failure, appropriate error information is returned.\n   *\n   * @example\n   * ```ts\n   * const resolutionResult = await DidDht.resolve('did:dht:example');\n   * ```\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of\n   *          the resolution.\n   */\n  public static async resolve(didUri: string, options: DidResolutionOptions = {}): Promise<DidResolutionResult> {\n    // To execute the read method operation, use the given gateway URI or a default.\n    const gatewayUri = options?.gatewayUri ?? DEFAULT_GATEWAY_URI;\n\n    try {\n      // Attempt to decode the z-base-32-encoded identifier.\n      await DidDhtUtils.identifierToIdentityKey({ didUri });\n\n      // Attempt to retrieve the DID document and metadata from the DHT network.\n      const { didDocument, didDocumentMetadata } = await DidDhtDocument.get({ didUri, gatewayUri });\n\n      // If the DID document was retrieved successfully, return it.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n        didDocumentMetadata\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n}\n\n/**\n * The `DidDhtDocument` class provides functionality for interacting with the DID document stored in\n * Mainline DHT in support of DID DHT method create, resolve, update, and deactivate operations.\n *\n * This class includes methods for retrieving and publishing DID documents to and from the DHT,\n * using DNS packet encoding and DID DHT Gateway or Pkarr Relay servers.\n */\nexport class DidDhtDocument {\n  /**\n   * Retrieves a DID document and its metadata from the DHT network.\n   *\n   * @param params - The parameters for the get operation.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object containing the DID\n   *          document and its metadata.\n   */\n  public static async get({ didUri, gatewayUri }: {\n    didUri: string;\n    gatewayUri: string;\n  }): Promise<DidResolutionResult> {\n    // Decode the z-base-32 DID identifier to public key as a byte array.\n    const publicKeyBytes = DidDhtUtils.identifierToIdentityKeyBytes({ didUri });\n\n    // Retrieve the signed BEP44 message from a DID DHT Gateway or Pkarr relay.\n    const bep44Message = await DidDhtDocument.pkarrGet({ gatewayUri, publicKeyBytes });\n\n    // Verify the signature of the BEP44 message and parse the value to a DNS packet.\n    const dnsPacket = await DidDhtUtils.parseBep44GetMessage({ bep44Message });\n\n    // Convert the DNS packet to a DID document and metadata.\n    const resolutionResult = await DidDhtDocument.fromDnsPacket({ didUri, dnsPacket });\n\n    // Set the version ID of the DID document metadata to the sequence number of the BEP44 message.\n    resolutionResult.didDocumentMetadata.versionId = bep44Message.seq.toString();\n\n    return resolutionResult;\n  }\n\n  /**\n   * Publishes a DID document to the DHT network.\n   *\n   * @param params - The parameters to use when publishing the DID document to the DHT network.\n   * @param params.did - The DID object whose DID document will be published.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @returns A promise that resolves to a {@link DidRegistrationResult} object that contains\n   *          the result of registering the DID with a DID DHT Gateway or Pkarr relay.\n   */\n  public static async put({ did, gatewayUri }: {\n    did: BearerDid;\n    gatewayUri: string;\n  }): Promise<DidRegistrationResult> {\n    // Convert the DID document and DID metadata (such as DID types) to a DNS packet.\n    const dnsPacket = await DidDhtDocument.toDnsPacket({\n      didDocument : did.document,\n      didMetadata : did.metadata\n    });\n\n    // Create a signed BEP44 put message from the DNS packet.\n    const bep44Message = await DidDhtUtils.createBep44PutMessage({\n      dnsPacket,\n      publicKeyBytes : DidDhtUtils.identifierToIdentityKeyBytes({ didUri: did.uri }),\n      signer         : await did.getSigner({ methodId: '0' })\n    });\n\n    // Publish the DNS packet to the DHT network.\n    const putResult = await DidDhtDocument.pkarrPut({ gatewayUri, bep44Message });\n\n    // Return the result of processing the PUT operation, including the updated DID metadata with\n    // the version ID and the publishing result.\n    return {\n      didDocument         : did.document,\n      didDocumentMetadata : {\n        ...did.metadata,\n        published : putResult,\n        versionId : bep44Message.seq.toString()\n      },\n      didRegistrationMetadata: {}\n    };\n  }\n\n  /**\n   * Retrieves a signed BEP44 message from a DID DHT Gateway or Pkarr Relay server.\n   *\n   * @see {@link https://github.com/Nuhvi/pkarr/blob/main/design/relays.md | Pkarr Relay design}\n   *\n   * @param params\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @param params.publicKeyBytes - The public key bytes of the Identity Key, z-base-32 encoded.\n   * @returns A promise resolving to a BEP44 message containing the signed DNS packet.\n  */\n  private static async pkarrGet({ gatewayUri, publicKeyBytes }: {\n    publicKeyBytes: Uint8Array;\n    gatewayUri: string;\n  }): Promise<Bep44Message> {\n    // The identifier (key in the DHT) is the z-base-32 encoding of the Identity Key.\n    const identifier = Convert.uint8Array(publicKeyBytes).toBase32Z();\n\n    // Concatenate the gateway URI with the identifier to form the full URL.\n    const url = new URL(identifier, gatewayUri).href;\n\n    // Transmit the Get request to the DID DHT Gateway or Pkarr Relay and get the response.\n    let response: Response;\n    try {\n      response = await fetch(url, { method: 'GET' });\n\n      if (!response.ok) {\n        throw new DidError(DidErrorCode.NotFound, `Pkarr record not found for: ${identifier}`);\n      }\n\n    } catch (error: any) {\n      if (error instanceof DidError) throw error;\n      throw new DidError(DidErrorCode.InternalError, `Failed to fetch Pkarr record: ${error.message}`);\n    }\n\n    // Read the Fetch Response stream into a byte array.\n    const messageBytes = await response.arrayBuffer();\n\n    if(!messageBytes) {\n      throw new DidError(DidErrorCode.NotFound, `Pkarr record not found for: ${identifier}`);\n    }\n\n    if (messageBytes.byteLength < 72) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `Pkarr response must be at least 72 bytes but got: ${messageBytes.byteLength}`);\n    }\n\n    if (messageBytes.byteLength > 1072) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `Pkarr response exceeds 1000 byte limit: ${messageBytes.byteLength}`);\n    }\n\n    // Decode the BEP44 message from the byte array.\n    const bep44Message: Bep44Message = {\n      k   : publicKeyBytes,\n      seq : Number(new DataView(messageBytes).getBigUint64(64)),\n      sig : new Uint8Array(messageBytes, 0, 64),\n      v   : new Uint8Array(messageBytes, 72)\n    };\n\n    return bep44Message;\n  }\n\n  /**\n   * Publishes a signed BEP44 message to a DID DHT Gateway or Pkarr Relay server.\n   *\n   * @see {@link https://github.com/Nuhvi/pkarr/blob/main/design/relays.md | Pkarr Relay design}\n   *\n   * @param params - The parameters to use when publishing a signed BEP44 message to a Pkarr relay server.\n   * @param params.gatewayUri - The DID DHT Gateway or Pkarr Relay URI.\n   * @param params.bep44Message - The BEP44 message to be published, containing the signed DNS packet.\n   * @returns A promise resolving to `true` if the message was successfully published, otherwise `false`.\n   */\n  private static async pkarrPut({ gatewayUri, bep44Message }: {\n    bep44Message: Bep44Message;\n    gatewayUri: string;\n  }): Promise<boolean> {\n    // The identifier (key in the DHT) is the z-base-32 encoding of the Identity Key.\n    const identifier = Convert.uint8Array(bep44Message.k).toBase32Z();\n\n    // Concatenate the gateway URI with the identifier to form the full URL.\n    const url = new URL(identifier, gatewayUri).href;\n\n    // Construct the body of the request according to the Pkarr relay specification.\n    const body = new Uint8Array(bep44Message.v.length + 72);\n    body.set(bep44Message.sig, 0);\n    new DataView(body.buffer).setBigUint64(bep44Message.sig.length, BigInt(bep44Message.seq));\n    body.set(bep44Message.v, bep44Message.sig.length + 8);\n\n    // Transmit the Put request to the Pkarr relay and get the response.\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        method  : 'PUT',\n        headers : { 'Content-Type': 'application/octet-stream' },\n        body\n      });\n\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InternalError, `Failed to put Pkarr record: ${error.message}`);\n    }\n\n    // Return `true` if the DHT request was successful, otherwise return `false`.\n    return response.ok;\n  }\n\n  /**\n   * Converts a DNS packet to a DID document according to the DID DHT specification.\n   *\n   * @see {@link https://did-dht.com/#dids-as-dns-records | DID DHT Specification, § DIDs as DNS Records}\n   *\n   * @param params - The parameters to use when converting a DNS packet to a DID document.\n   * @param params.didUri - The DID URI of the DID document.\n   * @param params.dnsPacket - The DNS packet to convert to a DID document.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object containing the DID\n   *          document and its metadata.\n   */\n  public static async fromDnsPacket({ didUri, dnsPacket }: {\n    didUri: string;\n    dnsPacket: Packet;\n  }): Promise<DidResolutionResult> {\n    // Begin constructing the DID Document.\n    const didDocument: DidDocument = { id: didUri };\n\n    // Since the DID document is being retrieved from the DHT, it is considered published.\n    const didDocumentMetadata: DidMetadata = {\n      published: true\n    };\n\n    const idLookup = new Map<string, string>();\n\n    for (const answer of dnsPacket?.answers ?? []) {\n      // DID DHT properties are ONLY present in DNS TXT records.\n      if (answer.type !== 'TXT') continue;\n\n      // Get the DID DHT record identifier (e.g., k0, aka, did, etc.) from the DNS resource name.\n      const dnsRecordId = answer.name.split('.')[0].substring(1);\n\n      switch (true) {\n        // Process an also known as record.\n        case dnsRecordId.startsWith('aka'): {\n          // Decode the DNS TXT record data value to a string.\n          const data = DidDhtUtils.parseTxtDataToString(answer.data);\n\n          // Add the 'alsoKnownAs' property to the DID document.\n          didDocument.alsoKnownAs = data.split(VALUE_SEPARATOR);\n\n          break;\n        }\n\n        // Process a controller record.\n        case dnsRecordId.startsWith('cnt'): {\n          // Decode the DNS TXT record data value to a string.\n          const data = DidDhtUtils.parseTxtDataToString(answer.data);\n\n          // Add the 'controller' property to the DID document.\n          didDocument.controller = data.includes(VALUE_SEPARATOR) ? data.split(VALUE_SEPARATOR) : data;\n\n          break;\n        }\n\n        // Process verification methods.\n        case dnsRecordId.startsWith('k'): {\n          // Get the method ID fragment (id), key type (t), Base64URL-encoded public key (k), and\n          // optionally, controller (c) from the decoded TXT record data.\n          const { id, t, k, c } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Convert the public key from Base64URL format to a byte array.\n          const publicKeyBytes = Convert.base64Url(k).toUint8Array();\n\n          // Use the key type integer to look up the cryptographic curve name.\n          const namedCurve = DidDhtRegisteredKeyType[Number(t)];\n\n          // Convert the public key from a byte array to JWK format.\n          let publicKey = await DidDhtUtils.keyConverter(namedCurve).bytesToPublicKey({ publicKeyBytes });\n\n          // Initialize the `verificationMethod` array if it does not already exist.\n          didDocument.verificationMethod ??= [];\n\n          // Prepend the DID URI to the ID fragment to form the full verification method ID.\n          const methodId = `${didUri}#${id}`;\n\n          // Add the verification method to the DID document.\n          didDocument.verificationMethod.push({\n            id           : methodId,\n            type         : 'JsonWebKey',\n            controller   : c ?? didUri,\n            publicKeyJwk : publicKey,\n          });\n\n          // Add a mapping from the DNS record ID (e.g., 'k0', 'k1', etc.) to the verification\n          // method ID (e.g., 'did:dht:...#0', etc.).\n          idLookup.set(dnsRecordId, methodId);\n\n          break;\n        }\n\n        // Process services.\n        case dnsRecordId.startsWith('s'): {\n          // Get the service ID fragment (id), type (t), service endpoint (se), and optionally,\n          // other properties from the decoded TXT record data.\n          const { id, t, se, ...customProperties } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // The service endpoint can either be a string or an array of strings.\n          const serviceEndpoint = se.includes(VALUE_SEPARATOR) ? se.split(VALUE_SEPARATOR) : se;\n\n          // Convert custom property values to either a string or an array of strings.\n          const serviceProperties = Object.fromEntries(Object.entries(customProperties).map(\n            ([k, v]) => [k, v.includes(VALUE_SEPARATOR) ? v.split(VALUE_SEPARATOR) : v]\n          ));\n\n          // Initialize the `service` array if it does not already exist.\n          didDocument.service ??= [];\n\n          didDocument.service.push({\n            ...serviceProperties,\n            id   : `${didUri}#${id}`,\n            type : t,\n            serviceEndpoint\n          });\n\n          break;\n        }\n\n        // Process DID DHT types.\n        case dnsRecordId.startsWith('typ'): {\n          // Decode the DNS TXT record data value to an object.\n          const { id: types } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Add the DID DHT Registered DID Types represented as numbers to DID metadata.\n          didDocumentMetadata.types = types.split(VALUE_SEPARATOR).map(typeInteger => Number(typeInteger));\n\n          break;\n        }\n\n        // Process root record.\n        case dnsRecordId.startsWith('did'): {\n          // Helper function that maps verification relationship values to verification method IDs.\n          const recordIdsToMethodIds = (data: string): string[] => data\n            .split(VALUE_SEPARATOR)\n            .map(dnsRecordId => idLookup.get(dnsRecordId))\n            .filter((id): id is string => typeof id === 'string');\n\n          // Decode the DNS TXT record data and destructure verification relationship properties.\n          const { auth, asm, del, inv, agm } = DidDhtUtils.parseTxtDataToObject(answer.data);\n\n          // Add the verification relationships, if any, to the DID document.\n          if (auth) didDocument.authentication = recordIdsToMethodIds(auth);\n          if (asm) didDocument.assertionMethod = recordIdsToMethodIds(asm);\n          if (del) didDocument.capabilityDelegation = recordIdsToMethodIds(del);\n          if (inv) didDocument.capabilityInvocation = recordIdsToMethodIds(inv);\n          if (agm) didDocument.keyAgreement = recordIdsToMethodIds(agm);\n\n          break;\n        }\n      }\n    }\n\n    return { didDocument, didDocumentMetadata, didResolutionMetadata: {} };\n  }\n\n  /**\n   * Converts a DID document to a DNS packet according to the DID DHT specification.\n   *\n   * @see {@link https://did-dht.com/#dids-as-dns-records | DID DHT Specification, § DIDs as DNS Records}\n   *\n   * @param params - The parameters to use when converting a DID document to a DNS packet.\n   * @param params.didDocument - The DID document to convert to a DNS packet.\n   * @param params.didMetadata - The DID metadata to include in the DNS packet.\n   * @returns A promise that resolves to a DNS packet.\n   */\n  public static async toDnsPacket({ didDocument, didMetadata }: {\n    didDocument: DidDocument;\n    didMetadata: DidMetadata;\n  }): Promise<Packet> {\n    const dnsAnswerRecords: TxtAnswer[] = [];\n    const idLookup = new Map<string, string>();\n    const serviceIds: string[] = [];\n    const verificationMethodIds: string[] = [];\n\n    // Add DNS TXT records if the DID document contains an `alsoKnownAs` property.\n    if (didDocument.alsoKnownAs) {\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_aka.did.',\n        ttl  : DNS_RECORD_TTL,\n        data : didDocument.alsoKnownAs.join(VALUE_SEPARATOR)\n      });\n    }\n\n    // Add DNS TXT records if the DID document contains a `controller` property.\n    if (didDocument.controller) {\n      const controller = Array.isArray(didDocument.controller)\n        ? didDocument.controller.join(VALUE_SEPARATOR)\n        : didDocument.controller;\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_cnt.did.',\n        ttl  : DNS_RECORD_TTL,\n        data : controller\n      });\n    }\n\n    // Add DNS TXT records for each verification method.\n    for (const [index, vm] of didDocument.verificationMethod?.entries() ?? []) {\n      const dnsRecordId = `k${index}`;\n      verificationMethodIds.push(dnsRecordId);\n      let methodId = vm.id.split('#').pop()!; // Remove fragment prefix, if any.\n      idLookup.set(methodId, dnsRecordId);\n\n      const publicKey = vm.publicKeyJwk;\n\n      if (!(publicKey?.crv && publicKey.crv in AlgorithmToKeyTypeMap)) {\n        throw new DidError(DidErrorCode.InvalidPublicKeyType, `Verification method '${vm.id}' contains an unsupported key type: ${publicKey?.crv ?? 'undefined'}`);\n      }\n\n      // Use the public key's `crv` property to get the DID DHT key type.\n      const keyType = DidDhtRegisteredKeyType[publicKey.crv as keyof typeof DidDhtRegisteredKeyType];\n\n      // Convert the public key from JWK format to a byte array.\n      const publicKeyBytes = await DidDhtUtils.keyConverter(publicKey.crv).publicKeyToBytes({ publicKey });\n\n      // Convert the public key from a byte array to Base64URL format.\n      const publicKeyBase64Url = Convert.uint8Array(publicKeyBytes).toBase64Url();\n\n      // Define the data for the DNS TXT record.\n      const txtData = [`id=${methodId}`, `t=${keyType}`, `k=${publicKeyBase64Url}`];\n\n      // Add the controller property, if set to a value other than the Identity Key (DID Subject).\n      if (vm.controller !== didDocument.id) txtData.push(`c=${vm.controller}`);\n\n      // Add a TXT record for the verification method.\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : `_${dnsRecordId}._did.`,\n        ttl  : DNS_RECORD_TTL,\n        data : txtData.join(PROPERTY_SEPARATOR)\n      });\n    }\n\n    // Add DNS TXT records for each service.\n    didDocument.service?.forEach((service, index) => {\n      const dnsRecordId = `s${index}`;\n      serviceIds.push(dnsRecordId);\n      let { id, type: t, serviceEndpoint: se, ...customProperties } = service;\n      id = extractDidFragment(id)!;\n      se = Array.isArray(se) ? se.join(',') : se;\n\n      // Define the data for the DNS TXT record.\n      const txtData = Object.entries({ id, t, se, ...customProperties }).map(\n        ([key, value]) => `${key}=${value}`\n      );\n\n      // Add a TXT record for the verification method.\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : `_${dnsRecordId}._did.`,\n        ttl  : DNS_RECORD_TTL,\n        data : txtData.join(PROPERTY_SEPARATOR)\n      });\n    });\n\n    // Initialize the root DNS TXT record with the DID DHT specification version.\n    const rootRecord: string[] = [`v=${DID_DHT_SPECIFICATION_VERSION}`];\n\n    // Add verification methods to the root record.\n    if (verificationMethodIds.length) {\n      rootRecord.push(`vm=${verificationMethodIds.join(VALUE_SEPARATOR)}`);\n    }\n\n    // Add verification relationships to the root record.\n    Object.keys(DidVerificationRelationship).forEach(relationship => {\n      // Collect the verification method IDs for the given relationship.\n      const dnsRecordIds = (didDocument[relationship as keyof DidDocument] as any[])\n        ?.map(id => idLookup.get(id.split('#').pop()));\n\n      // If the relationship includes verification methods, add them to the root record.\n      if (dnsRecordIds) {\n        const recordName = DidDhtVerificationRelationship[relationship as keyof typeof DidDhtVerificationRelationship];\n        rootRecord.push(`${recordName}=${dnsRecordIds.join(VALUE_SEPARATOR)}`);\n      }\n    });\n\n    // Add services to the root record.\n    if (serviceIds.length) {\n      rootRecord.push(`svc=${serviceIds.join(VALUE_SEPARATOR)}`);\n    }\n\n    // If defined, add a DNS TXT record for each registered DID type.\n    if (didMetadata.types?.length) {\n      // DID types can be specified as either a string or a number, so we need to normalize the\n      // values to integers.\n      const types = didMetadata.types as (DidDhtRegisteredDidType | keyof typeof DidDhtRegisteredDidType)[];\n      const typeIntegers = types.map(type => typeof type === 'string' ? DidDhtRegisteredDidType[type] : type);\n\n      dnsAnswerRecords.push({\n        type : 'TXT',\n        name : '_typ._did.',\n        ttl  : DNS_RECORD_TTL,\n        data : `id=${typeIntegers.join(VALUE_SEPARATOR)}`\n      });\n    }\n\n    // Add a DNS TXT record for the root record.\n    dnsAnswerRecords.push({\n      type : 'TXT',\n      name : '_did.',\n      ttl  : DNS_RECORD_TTL,\n      data : rootRecord.join(PROPERTY_SEPARATOR)\n    });\n\n    // Per the DID DHT specification, the method-specific identifier must be appended as the\n    // Origin of all records.\n    const [, , identifier] = didDocument.id.split(':');\n    dnsAnswerRecords.forEach(record => record.name += identifier);\n\n    // Create a DNS response packet with the authoritative answer flag set.\n    const dnsPacket: Packet = {\n      id      : 0,\n      type    : 'response',\n      flags   : AUTHORITATIVE_ANSWER,\n      answers : dnsAnswerRecords\n    };\n\n    return dnsPacket;\n  }\n}\n\n/**\n * The `DidDhtUtils` class provides utility functions to support operations in the DID DHT method.\n * This includes functions for creating and parsing BEP44 messages, handling identity keys, and\n * converting between different formats and representations.\n */\nexport class DidDhtUtils {\n  /**\n   * Creates a BEP44 put message, which is used to publish a DID document to the DHT network.\n   *\n   * @param params - The parameters to use when creating the BEP44 put message\n   * @param params.dnsPacket - The DNS packet to encode in the BEP44 message.\n   * @param params.publicKeyBytes - The public key bytes of the Identity Key.\n   * @param params.signer - Signer that can sign and verify data using the Identity Key.\n   * @returns A promise that resolves to a BEP44 put message.\n   */\n  public static async createBep44PutMessage({ dnsPacket, publicKeyBytes, signer }: {\n      dnsPacket: Packet;\n      publicKeyBytes: Uint8Array;\n      signer: Signer;\n    }): Promise<Bep44Message> {\n    // BEP44 requires that the sequence number be a monotoically increasing integer, so we use the\n    // current time in seconds since Unix epoch as a simple solution. Higher precision is not\n    // recommended since DID DHT documents are not expected to change frequently and there are\n    // small differences in system clocks that can cause issues if multiple clients are publishing\n    // updates to the same DID document.\n    const sequenceNumber = Math.ceil(Date.now() / 1000);\n\n    // Encode the DNS packet into a byte array containing a UDP payload.\n    const encodedDnsPacket = dnsPacketEncode(dnsPacket);\n\n    // Encode the sequence and DNS byte array to bencode format.\n    const bencodedData = bencode.encode({ seq: sequenceNumber, v: encodedDnsPacket }).subarray(1, -1);\n\n    if (bencodedData.length > 1000) {\n      throw new DidError(DidErrorCode.InvalidDidDocumentLength, `DNS packet exceeds the 1000 byte maximum size: ${bencodedData.length} bytes`);\n    }\n\n    // Sign the BEP44 message.\n    const signature = await signer.sign({ data: bencodedData });\n\n    return { k: publicKeyBytes, seq: sequenceNumber, sig: signature, v: encodedDnsPacket };\n  }\n\n  /**\n   * Converts a DID URI to a JSON Web Key (JWK) representing the Identity Key.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @returns A promise that resolves to a JWK representing the Identity Key.\n   */\n  public static async identifierToIdentityKey({ didUri }: {\n    didUri: string\n  }): Promise<Jwk> {\n    // Decode the method-specific identifier from z-base-32 to a byte array.\n    let identityKeyBytes = DidDhtUtils.identifierToIdentityKeyBytes({ didUri });\n\n    // Convert the byte array to a JWK.\n    const identityKey = await Ed25519.bytesToPublicKey({ publicKeyBytes: identityKeyBytes });\n\n    return identityKey;\n  }\n\n  /**\n   * Converts a DID URI to the byte array representation of the Identity Key.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.didUri - The DID URI containing the Identity Key.\n   * @returns A byte array representation of the Identity Key.\n   */\n  public static identifierToIdentityKeyBytes({ didUri }: {\n    didUri: string\n  }): Uint8Array {\n    // Parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // Verify that the DID URI is valid.\n    if (!parsedDid) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n\n    // Verify the DID method is supported.\n    if (parsedDid.method !== DidDht.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Decode the method-specific identifier from z-base-32 to a byte array.\n    let identityKeyBytes: Uint8Array | undefined;\n    try {\n      identityKeyBytes = Convert.base32Z(parsedDid.id).toUint8Array();\n    } catch {\n      throw new DidError(DidErrorCode.InvalidPublicKey, `Failed to decode method-specific identifier`);\n    }\n\n    if (identityKeyBytes.length !== 32) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Invalid public key length: ${identityKeyBytes.length}`);\n    }\n\n    return identityKeyBytes;\n  }\n\n  /**\n   * Encodes a DID DHT Identity Key into a DID identifier.\n   *\n   * This method first z-base-32 encodes the Identity Key. The resulting string is prefixed with\n   * `did:dht:` to form the DID identifier.\n   *\n   * @param params - The parameters to use for the conversion.\n   * @param params.identityKey The Identity Key from which the DID identifier is computed.\n   * @returns A promise that resolves to a string containing the DID identifier.\n   */\n  public static async identityKeyToIdentifier({ identityKey }: {\n    identityKey: Jwk\n  }): Promise<string> {\n    // Convert the key from JWK format to a byte array.\n    const publicKeyBytes = await Ed25519.publicKeyToBytes({ publicKey: identityKey });\n\n    // Encode the byte array as a z-base-32 string.\n    const identifier = Convert.uint8Array(publicKeyBytes).toBase32Z();\n\n    return `did:${DidDht.methodName}:${identifier}`;\n  }\n\n  /**\n   * Returns the appropriate key converter for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns An `AsymmetricKeyConverter` for the specified curve.\n   */\n  public static keyConverter(curve: string): AsymmetricKeyConverter {\n    const converters: Record<string, AsymmetricKeyConverter> = {\n      'Ed25519'   : Ed25519,\n      'P-256'     : Secp256r1,\n      'secp256k1' : Secp256k1\n    };\n\n    const converter = converters[curve];\n\n    if (!converter) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return converter;\n  }\n\n  /**\n   * Parses and verifies a BEP44 Get message, converting it to a DNS packet.\n   *\n   * @param params - The parameters to use when verifying and parsing the BEP44 Get response message.\n   * @param params.bep44Message - The BEP44 message to verify and parse.\n   * @returns A promise that resolves to a DNS packet.\n   */\n  public static async parseBep44GetMessage({ bep44Message }: {\n    bep44Message: Bep44Message;\n  }): Promise<Packet> {\n    // Convert the public key byte array to JWK format.\n    const publicKey = await Ed25519.bytesToPublicKey({ publicKeyBytes: bep44Message.k });\n\n    // Encode the sequence and DNS byte array to bencode format.\n    const bencodedData = bencode.encode({ seq: bep44Message.seq, v: bep44Message.v }).subarray(1, -1);\n\n    // Verify the signature of the BEP44 message.\n    const isValid = await Ed25519.verify({\n      key       : publicKey,\n      signature : bep44Message.sig,\n      data      : bencodedData\n    });\n\n    if (!isValid) {\n      throw new DidError(DidErrorCode.InvalidSignature, `Invalid signature for DHT BEP44 message`);\n    }\n\n    return dnsPacketDecode(bep44Message.v);\n  }\n\n  /**\n   * Decodes and parses the data value of a DNS TXT record into a key-value object.\n   *\n   * @param txtData - The data value of a DNS TXT record.\n   * @returns An object containing the key/value pairs of the TXT record data.\n   */\n  public static parseTxtDataToObject(txtData: TxtData): Record<string, string> {\n    return this.parseTxtDataToString(txtData).split(PROPERTY_SEPARATOR).reduce((acc, pair) => {\n      const [key, value] = pair.split('=');\n      acc[key] = value;\n      return acc;\n    }, {} as Record<string, string>);\n  }\n\n  /**\n   * Decodes and parses the data value of a DNS TXT record into a string.\n   *\n   * @param txtData - The data value of a DNS TXT record.\n   * @returns A string representation of the TXT record data.\n   */\n  public static parseTxtDataToString(txtData: TxtData): string {\n    if (typeof txtData === 'string') {\n      return txtData;\n    } else if (txtData instanceof Uint8Array) {\n      return Convert.uint8Array(txtData).toString();\n    } else if (Array.isArray(txtData)) {\n      return txtData.map(item => this.parseTxtDataToString(item)).join('');\n    } else {\n      throw new DidError(DidErrorCode.InternalError, 'Pkarr returned DNS TXT record with invalid data type');\n    }\n  }\n}", "import type { CryptoApi, Jwk, KeyIdentifier, KeyImporterExporter, KmsExportKeyParams, KmsImportKeyParams } from '@web5/crypto';\nimport type {\n  JwkEs256k,\n  IonDocumentModel,\n  IonPublicKeyModel,\n  IonPublicKeyPurpose,\n} from '@decentralized-identity/ion-sdk';\n\nimport { IonDid, IonRequest } from '@decentralized-identity/ion-sdk';\nimport { LocalKeyManager, computeJwkThumbprint } from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod, DidRegistrationResult } from '../methods/did-method.js';\nimport type {\n  DidService,\n  DidDocument,\n  DidResolutionResult,\n  DidResolutionOptions,\n  DidVerificationMethod,\n  DidVerificationRelationship,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidMethod } from '../methods/did-method.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { getVerificationRelationshipsById } from '../utils.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Options for creating a Decentralized Identifier (DID) using the DID ION method.\n */\nexport interface DidIonCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optional. The URI of a server involved in executing DID method operations. In the context of\n   * DID creation, the endpoint is expected to be a Sidetree node. If not specified, a default\n   * gateway node is used.\n   */\n  gatewayUri?: string;\n\n  /**\n   * Optional. Determines whether the created DID should be published to a Sidetree node.\n   *\n   * If set to `true` or omitted, the DID is publicly discoverable. If `false`, the DID is not\n   * published and cannot be resolved by others. By default, newly created DIDs are published.\n   *\n   * @see {@link https://identity.foundation/sidetree/spec/#create | Sidetree Protocol Specification, § Create}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   publish: false\n   * };\n   * ```\n   */\n  publish?: boolean;\n\n  /**\n   * Optional. An array of service endpoints associated with the DID.\n   *\n   * Services are used in DID documents to express ways of communicating with the DID subject or\n   * associated entities. A service can be any type of service the DID subject wants to advertise,\n   * including decentralized identity management services for further discovery, authentication,\n   * authorization, or interaction.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#services | DID Core Specification, § Services}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   services: [\n   *     {\n   *       id: 'dwn',\n   *       type: 'DecentralizedWebNode',\n   *       serviceEndpoint: ['https://example.com/dwn1', 'https://example/dwn2']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  services?: DidService[];\n\n  /**\n   * Optional. An array of verification methods to be included in the DID document.\n   *\n   * By default, a newly created DID ION document will contain a single Ed25519 verification method.\n   * Additional verification methods can be added to the DID document using the\n   * `verificationMethods` property.\n   *\n   * @see {@link https://www.w3.org/TR/did-core/#verification-methods | DID Core Specification, § Verification Methods}\n   *\n   * @example\n   * ```ts\n   * const did = await DidIon.create({\n   *  options: {\n   *   verificationMethods: [\n   *     {\n   *       algorithm: 'Ed25519',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     },\n   *     {\n   *       algorithm: 'Ed25519',\n   *       id: 'dwn-sig',\n   *       purposes: ['authentication', 'assertionMethod']\n   *     }\n   *   ]\n   * };\n   * ```\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Represents the request model for managing DID documents within the ION network, according to the\n * Sidetree protocol specification.\n */\nexport interface DidIonCreateRequest {\n  /** The type of operation to perform, which is always 'create' for a Create Operation. */\n  type: 'create';\n\n  /** Contains properties related to the initial state of the DID document. */\n  suffixData: {\n    /** A hash of the `delta` object, representing the initial changes to the DID document. */\n    deltaHash: string;\n    /** A commitment value used for future recovery operations, hashed for security. */\n    recoveryCommitment: string;\n  };\n\n  /** Details the changes to be applied to the DID document in this operation. */\n  delta: {\n    /** A commitment value used for the next update operation, hashed for security. */\n    updateCommitment: string;\n    /** An array of patch objects specifying the modifications to apply to the DID document. */\n    patches: {\n      /** The type of modification to perform (e.g., adding or removing public keys or service\n       * endpoints). */\n      action: string;\n      /** The document state or partial state to apply with this patch. */\n      document: IonDocumentModel;\n    }[];\n  }\n}\n\n/**\n * Represents a {@link DidVerificationMethod | DID verification method} in the context of DID ION\n * create, update, deactivate, and resolve operations.\n *\n * Unlike the DID Core standard {@link DidVerificationMethod} interface, this type is specific to\n * the ION method operations and only includes the `id`, `publicKeyJwk`, and `purposes` properties:\n * - The `id` property is optional and specifies the identifier fragment of the verification method.\n * - The `publicKeyJwk` property is required and represents the public key in JWK format.\n * - The `purposes` property is required and specifies the purposes for which the verification\n *  method can be used.\n *\n * @example\n * ```ts\n * const verificationMethod: DidIonVerificationMethod = {\n *   id           : 'sig',\n *   publicKeyJwk : {\n *     kty : 'OKP',\n *     crv : 'Ed25519',\n *     x   : 'o40shZrsco-CfEqk6mFsXfcP94ly3Az3gm84PzAUsXo',\n *     kid : 'BDp0xim82GswlxnPV8TPtBdUw80wkGIF8gjFbw1x5iQ',\n *   },\n *   purposes: ['authentication', 'assertionMethod']\n * };\n * ```\n */\nexport interface DidIonVerificationMethod {\n  /**\n   * Optionally specify the identifier fragment of the verification method.\n   *\n   * If not specified, the method's ID will be generated from the key's ID or thumbprint.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   id: 'sig',\n   *   ...\n   * };\n   * ```\n   */\n  id?: string;\n\n  /**\n   * A public key in JWK format.\n   *\n   * A JSON Web Key (JWK) that conforms to {@link https://datatracker.ietf.org/doc/html/rfc7517 | RFC 7517}.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   publicKeyJwk: {\n   *     kty : \"OKP\",\n   *     crv : \"X25519\",\n   *     x   : \"7XdJtNmJ9pV_O_3mxWdn6YjiHJ-HhNkdYQARzVU_mwY\",\n   *     kid : \"xtsuKULPh6VN9fuJMRwj66cDfQyLaxuXHkMlmAe_v6I\"\n   *   },\n   *   ...\n   * };\n   * ```\n   */\n  publicKeyJwk: Jwk;\n\n  /**\n   * Specify the purposes for which a verification method is intended to be used in a DID document.\n   *\n   * The `purposes` property defines the specific\n   * {@link DidVerificationRelationship | verification relationships} between the DID subject and\n   * the verification method. This enables the verification method to be utilized for distinct\n   * actions such as authentication, assertion, key agreement, capability delegation, and others. It\n   * is important for verifiers to recognize that a verification method must be associated with the\n   * relevant purpose in the DID document to be valid for that specific use case.\n   *\n   * @example\n   * ```ts\n   * const verificationMethod: DidIonVerificationMethod = {\n   *   purposes: ['authentication', 'assertionMethod'],\n   *   ...\n   * };\n   * ```\n   */\n  purposes: (DidVerificationRelationship | keyof typeof DidVerificationRelationship)[];\n}\n\n/**\n * `IonPortableDid` interface extends the {@link PortableDid} interface.\n *\n * It represents a Decentralized Identifier (DID) that is portable and can be used across different\n * domains, including the ION specific recovery and update keys.\n */\nexport interface IonPortableDid extends PortableDid {\n  /** The JSON Web Key (JWK) used for recovery purposes. */\n  recoveryKey: Jwk;\n\n  /** The JSON Web Key (JWK) used for updating the DID. */\n  updateKey: Jwk;\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID ION document.\n *\n * The DID ION method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption.\n */\nexport enum DidIonRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519 = 'Ed25519',\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 'secp256k1',\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 'secp256r1',\n\n  /**\n   * X25519: A Diffie-Hellman key exchange algorithm using Curve25519.\n   */\n  X25519 = 'X25519'\n}\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID ION\n * {@link DidIonRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidIonRegisteredKeyType.Ed25519,\n  ES256K    : DidIonRegisteredKeyType.secp256k1,\n  ES256     : DidIonRegisteredKeyType.secp256r1,\n  'P-256'   : DidIonRegisteredKeyType.secp256r1,\n  secp256k1 : DidIonRegisteredKeyType.secp256k1,\n  secp256r1 : DidIonRegisteredKeyType.secp256r1\n} as const;\n\n/**\n * The default node to use as a gateway to the Sidetree newtork when anchoring, updating, and\n * resolving DID documents.\n */\nconst DEFAULT_GATEWAY_URI = 'https://ion.tbd.engineering';\n\n/**\n * The `DidIon` class provides an implementation of the `did:ion` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:ion` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing key in a Key Management System\n *                       (KMS). If supported by the KMS, a DID's key can be exported to a portable\n *                       DID format.\n * - DID Resolution: Resolve a `did:ion` to its corresponding DID Document stored in the Sidetree\n *                   network.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @see {@link https://identity.foundation/sidetree/spec/ | Sidetree Protocol Specification}\n * @see {@link https://github.com/decentralized-identity/ion/blob/master/docs/design.md | ION Design Document}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidIon.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidIon.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidIon.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object for a published DID with existing keys in a KMS\n * const did = await DidIon.fromKeyManager({\n *  didUri: 'did:ion:EiAzB7K-xDIKc1csXo5HX2eNBoemK9feNhL3cKwfukYOug',\n *  keyManager\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidIon.toKeys({ did });\n * ```\n */\n\nexport class DidIon extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID ION specification.\n   */\n  public static methodName = 'ion';\n\n  /**\n   * Creates a new DID using the `did:ion` method formed from a newly generated key.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidIon.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidIon.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidIonCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that the algorithm for any given verification method is supported by the\n    // DID ION specification.\n    if (options.verificationMethods?.some(vm => !(vm.algorithm in AlgorithmToKeyTypeMap))) {\n      throw new Error('One or more verification method algorithms are not supported');\n    }\n\n    // Check 2: Validate that the ID for any given verification method is unique.\n    const methodIds = options.verificationMethods?.filter(vm => 'id' in vm).map(vm => vm.id);\n    if (methodIds && methodIds.length !== new Set(methodIds).size) {\n      throw new Error('One or more verification method IDs are not unique');\n    }\n\n    // Check 3: Validate that the required properties for any given services are present.\n    if (options.services?.some(s => !s.id || !s.type || !s.serviceEndpoint)) {\n      throw new Error('One or more services are missing required properties');\n    }\n\n    // If no verification methods were specified, generate a default Ed25519 verification method.\n    const defaultVerificationMethod: DidCreateVerificationMethod<TKms> = {\n      algorithm : 'Ed25519' as any,\n      purposes  : ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n    };\n\n    const verificationMethodsToAdd: DidIonVerificationMethod[] = [];\n\n    // Generate random key material for additional verification methods, if any.\n    for (const vm of options.verificationMethods ?? [defaultVerificationMethod]) {\n      // Generate a random key for the verification method.\n      const keyUri = await keyManager.generateKey({ algorithm: vm.algorithm });\n      const publicKey = await keyManager.getPublicKey({ keyUri });\n\n      // Add the verification method to the DID document.\n      verificationMethodsToAdd.push({\n        id           : vm.id,\n        publicKeyJwk : publicKey,\n        purposes     : vm.purposes ?? ['authentication', 'assertionMethod', 'capabilityDelegation', 'capabilityInvocation']\n      });\n    }\n\n    // Generate a random key for the ION Recovery Key. Sidetree requires secp256k1 recovery keys.\n    const recoveryKeyUri = await keyManager.generateKey({ algorithm: DidIonRegisteredKeyType.secp256k1 });\n    const recoveryKey = await keyManager.getPublicKey({ keyUri: recoveryKeyUri });\n\n    // Generate a random key for the ION Update Key. Sidetree requires secp256k1 update keys.\n    const updateKeyUri = await keyManager.generateKey({ algorithm: DidIonRegisteredKeyType.secp256k1 });\n    const updateKey = await keyManager.getPublicKey({ keyUri: updateKeyUri });\n\n    // Compute the Long Form DID URI from the keys and services, if any.\n    const longFormDidUri = await DidIonUtils.computeLongFormDidUri({\n      recoveryKey,\n      updateKey,\n      services            : options.services ?? [],\n      verificationMethods : verificationMethodsToAdd\n    });\n\n    // Expand the DID URI string to a DID document.\n    const { didDocument, didResolutionMetadata } = await DidIon.resolve(longFormDidUri, { gatewayUri: options.gatewayUri });\n    if (didDocument === null) {\n      throw new Error(`Unable to resolve DID during creation: ${didResolutionMetadata?.error}`);\n    }\n\n    // Create the BearerDid object, including the \"Short Form\" of the DID URI, the ION update and\n    // recovery keys, and specifying that the DID has not yet been published.\n    const did = new BearerDid({\n      uri      : longFormDidUri,\n      document : didDocument,\n      metadata : {\n        published   : false,\n        canonicalId : longFormDidUri.split(':', 3).join(':'),\n        recoveryKey,\n        updateKey\n      },\n      keyManager\n    });\n\n    // By default, publish the DID document to a Sidetree node unless explicitly disabled.\n    if (options.publish ?? true) {\n      const registrationResult = await DidIon.publish({ did, gatewayUri: options.gatewayUri });\n      did.metadata = registrationResult.didDocumentMetadata;\n    }\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:ion` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the first verification method in the authentication property\n   * in the DID Document is used.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument, methodId }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Get the verification method with either the specified ID or the first assertion method.\n    const verificationMethod = didDocument.verificationMethod?.find(\n      vm => vm.id === (methodId ?? didDocument.assertionMethod?.[0])\n    );\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID ION method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidIon.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the\n   *          provided PortableDid.\n   * @throws An error if the DID document does not contain any verification methods or the keys for\n   *         any verification method are missing in the key manager.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidIon.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    return did;\n  }\n\n  /**\n   * Publishes a DID to a Sidetree node, making it publicly discoverable and resolvable.\n   *\n   * This method handles the publication of a DID Document associated with a `did:ion` DID to a\n   * Sidetree node.\n   *\n   * @remarks\n   * - This method is typically invoked automatically during the creation of a new DID unless the\n   *   `publish` option is set to `false`.\n   * - For existing, unpublished DIDs, it can be used to publish the DID Document to a Sidetree node.\n   * - The method relies on the specified Sidetree node to interface with the network.\n   *\n   * @param params - The parameters for the `publish` operation.\n   * @param params.did - The `BearerDid` object representing the DID to be published.\n   * @param params.gatewayUri - Optional. The URI of a server involved in executing DID\n   *                                    method operations. In the context of publishing, the\n   *                                    endpoint is expected to be a Sidetree node. If not\n   *                                    specified, a default node is used.\n   * @returns A Promise resolving to a boolean indicating whether the publication was successful.\n   *\n   * @example\n   * ```ts\n   * // Generate a new DID and keys but explicitly disable publishing.\n   * const did = await DidIon.create({ options: { publish: false } });\n   * // Publish the DID to the Sidetree network.\n   * const isPublished = await DidIon.publish({ did });\n   * // `isPublished` is true if the DID was successfully published.\n   * ```\n   */\n  public static async publish({ did, gatewayUri = DEFAULT_GATEWAY_URI }: {\n    did: BearerDid;\n    gatewayUri?: string;\n  }): Promise<DidRegistrationResult> {\n    // Construct an ION verification method made up of the id, public key, and purposes from each\n    // verification method in the DID document.\n    const verificationMethods: DidIonVerificationMethod[] = did.document.verificationMethod?.map(\n      vm => ({\n        id           : vm.id,\n        publicKeyJwk : vm.publicKeyJwk!,\n        purposes     : getVerificationRelationshipsById({ didDocument: did.document, methodId: vm.id })\n      })\n    ) ?? [];\n\n    // Create the ION document.\n    const ionDocument = await DidIonUtils.createIonDocument({\n      services: did.document.service ?? [],\n      verificationMethods\n    });\n\n    // Construct the ION Create Operation request.\n    const createOperation = await DidIonUtils.constructCreateRequest({\n      ionDocument,\n      recoveryKey : did.metadata.recoveryKey,\n      updateKey   : did.metadata.updateKey\n    });\n\n    try {\n      // Construct the URL of the SideTree node's operations endpoint.\n      const operationsUrl = DidIonUtils.appendPathToUrl({\n        baseUrl : gatewayUri,\n        path    : `/operations`\n      });\n\n      // Submit the Create Operation to the operations endpoint.\n      const response = await fetch(operationsUrl, {\n        method  : 'POST',\n        mode    : 'cors',\n        headers : { 'Content-Type': 'application/json' },\n        body    : JSON.stringify(createOperation)\n      });\n\n      // Return the result of processing the Create operation, including the updated DID metadata\n      // with the publishing result.\n      return {\n        didDocument         : did.document,\n        didDocumentMetadata : {\n          ...did.metadata,\n          published: response.ok,\n        },\n        didRegistrationMetadata: {}\n      };\n\n    } catch (error: any) {\n      return {\n        didDocument         : null,\n        didDocumentMetadata : {\n          published: false,\n        },\n        didRegistrationMetadata: {\n          error        : DidErrorCode.InternalError,\n          errorMessage : `Failed to publish DID document for: ${did.uri}`\n        }\n      };\n    }\n  }\n\n  /**\n   * Resolves a `did:ion` identifier to its corresponding DID document.\n   *\n   * This method performs the resolution of a `did:ion` DID, retrieving its DID Document from the\n   * Sidetree-based DID overlay network. The process involves querying a Sidetree node to retrieve\n   * the DID Document that corresponds to the given DID identifier.\n   *\n   * @remarks\n   * - If a `gatewayUri` option is not specified, a default node is used to access the Sidetree\n   *   network.\n   * - It decodes the DID identifier and retrieves the associated DID Document and metadata.\n   * - In case of resolution failure, appropriate error information is returned.\n   *\n   * @example\n   * ```ts\n   * const resolutionResult = await DidIon.resolve('did:ion:example');\n   * ```\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, options: DidResolutionOptions = {}): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // If parsing failed, the DID is invalid.\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"ion\", return an error.\n    if (parsedDid.method !== DidIon.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    // To execute the read method operation, use the given gateway URI or a default Sidetree node.\n    const gatewayUri = options?.gatewayUri ?? DEFAULT_GATEWAY_URI;\n\n    try {\n      // Construct the URL to be used in the resolution request.\n      const resolutionUrl = DidIonUtils.appendPathToUrl({\n        baseUrl : gatewayUri,\n        path    : `/identifiers/${didUri}`\n      });\n\n      // Attempt to retrieve the DID document and metadata from the Sidetree node.\n      const response = await fetch(resolutionUrl);\n\n      // If the DID document was not found, return an error.\n      if (!response.ok) {\n        throw new DidError(DidErrorCode.NotFound, `Unable to find DID document for: ${didUri}`);\n      }\n\n      // If the DID document was retrieved successfully, return it.\n      const { didDocument, didDocumentMetadata } = await response.json() as DidResolutionResult;\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        ...didDocument && { didDocument },\n        didDocumentMetadata: {\n          published: didDocumentMetadata?.method?.published,\n          ...didDocumentMetadata\n        }\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n}\n\n/**\n * The `DidIonUtils` class provides utility functions to support operations in the DID ION method.\n */\nexport class DidIonUtils {\n  /**\n   * Appends a specified path to a base URL, ensuring proper formatting of the resulting URL.\n   *\n   * This method is useful for constructing URLs for accessing various endpoints, such as Sidetree\n   * nodes in the ION network. It handles the nuances of URL path concatenation, including the\n   * addition or removal of leading/trailing slashes, to create a well-formed URL.\n   *\n   * @param params - The parameters for URL construction.\n   * @param params.baseUrl - The base URL to which the path will be appended.\n   * @param params.path - The path to append to the base URL.\n   * @returns The fully constructed URL string with the path appended to the base URL.\n   */\n  public static appendPathToUrl({ baseUrl, path }: {\n    baseUrl: string;\n    path: string;\n  }): string {\n    const url = new URL(baseUrl);\n    url.pathname = url.pathname.endsWith('/') ? url.pathname : url.pathname + '/';\n    url.pathname += path.startsWith('/') ? path.substring(1) : path;\n\n    return url.toString();\n  }\n\n  /**\n   * Computes the Long Form DID URI given an ION DID's recovery key, update key, services, and\n   * verification methods.\n   *\n   * @param params - The parameters for computing the Long Form DID URI.\n   * @param params.recoveryKey - The ION Recovery Key.\n   * @param params.updateKey - The ION Update Key.\n   * @param params.services - An array of services associated with the DID.\n   * @param params.verificationMethods - An array of verification methods associated with the DID.\n   * @returns A Promise resolving to the Long Form DID URI.\n   */\n  public static async computeLongFormDidUri({ recoveryKey, updateKey, services, verificationMethods }: {\n    recoveryKey: Jwk;\n    updateKey: Jwk;\n    services: DidService[];\n    verificationMethods: DidIonVerificationMethod[];\n  }): Promise<string> {\n    // Create the ION document.\n    const ionDocument = await DidIonUtils.createIonDocument({ services, verificationMethods });\n\n    // Normalize JWK to onnly include specific members and in lexicographic order.\n    const normalizedRecoveryKey = DidIonUtils.normalizeJwk(recoveryKey);\n    const normalizedUpdateKey = DidIonUtils.normalizeJwk(updateKey);\n\n    // Compute the Long Form DID URI.\n    const longFormDidUri = await IonDid.createLongFormDid({\n      document    : ionDocument,\n      recoveryKey : normalizedRecoveryKey as JwkEs256k,\n      updateKey   : normalizedUpdateKey as JwkEs256k\n    });\n\n    return longFormDidUri;\n  }\n\n  /**\n   * Constructs a Sidetree Create Operation request for a DID document within the ION network.\n   *\n   * This method prepares the necessary payload for submitting a Create Operation to a Sidetree\n   * node, encapsulating the details of the DID document, recovery key, and update key.\n   *\n   * @param params - Parameters required to construct the Create Operation request.\n   * @param params.ionDocument - The DID document model containing public keys and service endpoints.\n   * @param params.recoveryKey - The recovery public key in JWK format.\n   * @param params.updateKey - The update public key in JWK format.\n   * @returns A promise resolving to the ION Create Operation request model, ready for submission to a Sidetree node.\n   */\n  public static async constructCreateRequest({ ionDocument, recoveryKey, updateKey }: {\n    ionDocument: IonDocumentModel,\n    recoveryKey: Jwk,\n    updateKey: Jwk\n  }): Promise<DidIonCreateRequest> {\n    // Create an ION DID create request operation.\n    const createRequest = await IonRequest.createCreateRequest({\n      document    : ionDocument,\n      recoveryKey : DidIonUtils.normalizeJwk(recoveryKey) as JwkEs256k,\n      updateKey   : DidIonUtils.normalizeJwk(updateKey) as JwkEs256k\n    }) as DidIonCreateRequest;\n\n    return createRequest;\n  }\n\n  /**\n   * Assembles an ION document model from provided services and verification methods\n   *\n   * This model serves as the foundation for a DID document in the ION network, facilitating the\n   * creation and management of decentralized identities. It translates service endpoints and\n   * public keys into a format compatible with the Sidetree protocol, ensuring the resulting DID\n   * document adheres to the required specifications for ION DIDs. This method is essential for\n   * constructing the payload needed to register or update DIDs within the ION network.\n   *\n   * @param params - The parameters containing the services and verification methods to include in the ION document.\n   * @param params.services - A list of service endpoints to be included in the DID document, specifying ways to interact with the DID subject.\n   * @param params.verificationMethods - A list of verification methods to be included, detailing the cryptographic keys and their intended uses within the DID document.\n   * @returns A Promise resolving to an `IonDocumentModel`, ready for use in Sidetree operations like DID creation and updates.\n   */\n  public static async createIonDocument({ services, verificationMethods }: {\n    services: DidService[];\n    verificationMethods: DidIonVerificationMethod[]\n  }): Promise<IonDocumentModel> {\n    /**\n     * STEP 1: Convert verification methods to ION SDK format.\n     */\n    const ionPublicKeys: IonPublicKeyModel[] = [];\n\n    for (const vm of verificationMethods) {\n      // Use the given ID, the key's ID, or the key's thumbprint as the verification method ID.\n      let methodId = vm.id ?? vm.publicKeyJwk.kid ?? await computeJwkThumbprint({ jwk: vm.publicKeyJwk });\n      methodId = `${methodId.split('#').pop()}`; // Remove fragment prefix, if any.\n\n      // Convert public key JWK to ION format.\n      const publicKey: IonPublicKeyModel = {\n        id           : methodId,\n        publicKeyJwk : DidIonUtils.normalizeJwk(vm.publicKeyJwk),\n        purposes     : vm.purposes as IonPublicKeyPurpose[],\n        type         : 'JsonWebKey2020'\n      };\n\n      ionPublicKeys.push(publicKey);\n    }\n\n    /**\n     * STEP 2: Convert service entries, if any, to ION SDK format.\n     */\n    const ionServices = services.map(service => ({\n      ...service,\n      id: `${service.id.split('#').pop()}` // Remove fragment prefix, if any.\n    }));\n\n    /**\n     * STEP 3: Format as ION document.\n     */\n    const ionDocumentModel: IonDocumentModel = {\n      publicKeys : ionPublicKeys,\n      services   : ionServices\n    };\n\n    return ionDocumentModel;\n  }\n\n  /**\n   * Normalize the given JWK to include only specific members and in lexicographic order.\n   *\n   * @param jwk - The JWK to normalize.\n   * @returns The normalized JWK.\n   */\n  private static normalizeJwk(jwk: Jwk): Jwk {\n    const keyType = jwk.kty;\n    let normalizedJwk: Jwk;\n\n    if (keyType === 'EC') {\n      normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };\n    } else if (keyType === 'oct') {\n      normalizedJwk = { k: jwk.k, kty: jwk.kty };\n    } else if (keyType === 'OKP') {\n      normalizedJwk = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };\n    } else if (keyType === 'RSA') {\n      normalizedJwk = { e: jwk.e, kty: jwk.kty, n: jwk.n };\n    } else {\n      throw new Error(`Unsupported key type: ${keyType}`);\n    }\n\n    return normalizedJwk;\n  }\n}", "import type {\n  Jwk,\n  CryptoApi,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport { Convert } from '@web5/common';\nimport { LocalKeyManager } from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod } from './did-method.js';\nimport type { DidDocument, DidResolutionOptions, DidResolutionResult, DidVerificationMethod } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Defines the set of options available when creating a new Decentralized Identifier (DID) with the\n * 'did:jwk' method.\n *\n * Either the `algorithm` or `verificationMethods` option can be specified, but not both.\n * - A new key will be generated using the algorithm identifier specified in either the `algorithm`\n *   property or the `verificationMethods` object's `algorithm` property.\n * - If `verificationMethods` is given, it must contain exactly one entry since DID JWK only\n *   supports a single verification method.\n * - If neither is given, the default is to generate a new Ed25519 key.\n *\n * @example\n * ```ts\n * // DID Creation\n *\n * // By default, when no options are given, a new Ed25519 key will be generated.\n * const did = await DidJwk.create();\n *\n * // The algorithm to use for key generation can be specified as a top-level option.\n * const did = await DidJwk.create({\n *   options: { algorithm = 'ES256K' }\n * });\n *\n * // Or, alternatively as a property of the verification method.\n * const did = await DidJwk.create({\n *   options: {\n *     verificationMethods: [{ algorithm = 'ES256K' }]\n *   }\n * });\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidJwk.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidJwk.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidJwk.import(portableDid);\n * ```\n */\nexport interface DidJwkCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify the algorithm to be used for key generation.\n   */\n  algorithm?: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Alternatively, specify the algorithm to be used for key generation of the single verification\n   * method in the DID Document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * The `DidJwk` class provides an implementation of the `did:jwk` DID method.\n *\n * Features:\n * - DID Creation: Create new `did:jwk` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method key set or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:jwk` to its corresponding DID Document.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:jwk` DID method uses a single JSON Web Key (JWK) to generate a DID and does not rely\n * on any external system such as a blockchain or centralized database. This characteristic makes\n * it suitable for use cases where a assertions about a DID Subject can be self-verifiable by\n * third parties.\n *\n * The DID URI is formed by Base64URL-encoding the JWK and prefixing with `did:jwk:`. The DID\n * Document of a `did:jwk` DID contains a single verification method, which is the JWK used\n * to generate the DID. The verification method is identified by the key ID `#0`.\n *\n * @see {@link https://github.com/quartzjer/did-jwk/blob/main/spec.md | DID JWK Specification}\n *\n * @example\n * ```ts\n * // DID Creation\n * const did = await DidJwk.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidJwk.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidJwk.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object from an existing key in a KMS\n * const did = await DidJwk.fromKeyManager({\n *  didUri: 'did:jwk:eyJrIjoiT0tQIiwidCI6IkV1c2UyNTYifQ',\n *  keyManager\n * });\n *\n * // Instantiate a DID object from an existing verification method key\n * const did = await DidJwk.fromKeys({\n *   verificationMethods: [{\n *     publicKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4'\n *     },\n *     privateKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4',\n *       d: 'bdcGE4KzEaekOwoa-ee3gAm1a991WvNj_Eq3WKyqTnE'\n *     }\n *   }]\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidJwk.toKeys({ did });\n *\n * // Reconstruct a DID object from a portable format\n * const did = await DidJwk.fromKeys(portableDid);\n * ```\n */\nexport class DidJwk extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID JWK specification.\n   */\n  public static methodName = 'jwk';\n\n  /**\n   * Creates a new DID using the `did:jwk` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by Base64URL-encoding the JWK and prefixing with `did:jwk:`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   * - The `algorithm` and `verificationMethods` options are mutually exclusive. If both are given,\n   *   an error will be thrown.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidJwk.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidJwk.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Optionally specify a Key Management System (KMS) used to generate\n   *                            keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidJwkCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that `algorithm` or `verificationMethods` options are not both given.\n    if (options.algorithm && options.verificationMethods) {\n      throw new Error(`The 'algorithm' and 'verificationMethods' options are mutually exclusive`);\n    }\n\n    // Check 2: If `verificationMethods` is given, it must contain exactly one entry since DID JWK\n    // only supports a single verification method.\n    if (options.verificationMethods && options.verificationMethods.length !== 1) {\n      throw new Error(`The 'verificationMethods' option must contain exactly one entry`);\n    }\n\n    // Default to Ed25519 key generation if an algorithm is not given.\n    const algorithm = options.algorithm ?? options.verificationMethods?.[0]?.algorithm ?? 'Ed25519';\n\n    // Generate a new key using the specified `algorithm`.\n    const keyUri = await keyManager.generateKey({ algorithm });\n    const publicKey = await keyManager.getPublicKey({ keyUri });\n\n    // Compute the DID identifier from the public key by serializing the JWK to a UTF-8 string and\n    // encoding in Base64URL format.\n    const identifier = Convert.object(publicKey).toBase64Url();\n\n    // Attach the prefix `did:jwk` to form the complete DID URI.\n    const didUri = `did:${DidJwk.methodName}:${identifier}`;\n\n    // Expand the DID URI string to a DID document.\n    const didResolutionResult = await DidJwk.resolve(didUri);\n    const document = didResolutionResult.didDocument as DidDocument;\n\n    // Create the BearerDid object from the generated key material.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {},\n      keyManager\n    });\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:jwk` DID, return the verification method that will be used\n   * for signing messages and credentials. If given, the `methodId` parameter is used to select the\n   * verification method. If not given, the first verification method in the DID Document is used.\n   *\n   * Note that for DID JWK, only one verification method can exist so specifying `methodId` could be\n   * considered redundant or unnecessary. The option is provided for consistency with other DID\n   * method implementations.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to find the verification method in the DID Document.\n    const [ verificationMethod ] = didDocument.verificationMethod ?? [];\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID JWK method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @remarks\n   * The `verificationMethod` array of the DID document must contain exactly one key since the\n   * `did:jwk` method only supports a single verification method.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidJwk.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the provided keys.\n   * @throws An error if the DID document does not contain exactly one verification method.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidJwk.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given DID document contains exactly one verification method.\n    // Note: The non-undefined assertion is necessary because the type system cannot infer that\n    // the `verificationMethod` property is defined -- which is checked by `BearerDid.import()`.\n    if (did.document.verificationMethod!.length !== 1) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain exactly one verification method`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Resolves a `did:jwk` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // Attempt to decode the Base64URL-encoded JWK.\n    let publicKey: Jwk | undefined;\n    try {\n      publicKey = Convert.base64Url(parsedDid!.id).toObject() as Jwk;\n    } catch { /* Consume the error so that a DID resolution error can be returned later. */ }\n\n    // If parsing or decoding failed, the DID is invalid.\n    if (!parsedDid || !publicKey) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"jwk\", return an error.\n    if (parsedDid.method !== DidJwk.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    const didDocument: DidDocument = {\n      '@context': [\n        'https://www.w3.org/ns/did/v1'\n      ],\n      id: parsedDid.uri\n    };\n\n    const keyUri = `${didDocument.id}#0`;\n\n    // Set the Verification Method property.\n    didDocument.verificationMethod = [{\n      id           : keyUri,\n      type         : 'JsonWebKey',\n      controller   : didDocument.id,\n      publicKeyJwk : publicKey\n    }];\n\n    // Set the Verification Relationship properties.\n    didDocument.authentication = [keyUri];\n    didDocument.assertionMethod = [keyUri];\n    didDocument.capabilityInvocation = [keyUri];\n    didDocument.capabilityDelegation = [keyUri];\n    didDocument.keyAgreement = [keyUri];\n\n    // If the JWK contains a `use` property with the value \"sig\" then the `keyAgreement` property\n    // is not included in the DID Document. If the `use` value is \"enc\" then only the `keyAgreement`\n    // property is included in the DID Document.\n    switch (publicKey.use) {\n      case 'sig': {\n        delete didDocument.keyAgreement;\n        break;\n      }\n\n      case 'enc': {\n        delete didDocument.authentication;\n        delete didDocument.assertionMethod;\n        delete didDocument.capabilityInvocation;\n        delete didDocument.capabilityDelegation;\n        break;\n      }\n    }\n\n    return {\n      ...EMPTY_DID_RESOLUTION_RESULT,\n      didDocument,\n    };\n  }\n}", "import type { MulticodecCode, MulticodecDefinition, RequireOnly } from '@web5/common';\nimport type {\n  Jwk,\n  CryptoApi,\n  KeyCompressor,\n  KeyIdentifier,\n  KmsExportKeyParams,\n  KmsImportKeyParams,\n  KeyImporterExporter,\n  AsymmetricKeyConverter,\n  InferKeyGeneratorAlgorithm,\n} from '@web5/crypto';\n\nimport { Multicodec, universalTypeOf } from '@web5/common';\nimport {\n  X25519,\n  Ed25519,\n  Secp256k1,\n  Secp256r1,\n  LocalKeyManager,\n} from '@web5/crypto';\n\nimport type { PortableDid } from '../types/portable-did.js';\nimport type { DidCreateOptions, DidCreateVerificationMethod } from './did-method.js';\nimport type {\n  DidDocument,\n  DidResolutionOptions,\n  DidResolutionResult,\n  DidVerificationMethod,\n} from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { BearerDid } from '../bearer-did.js';\nimport { DidError, DidErrorCode } from '../did-error.js';\nimport { KeyWithMulticodec } from '../types/multibase.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\nimport { getVerificationMethodTypes, keyBytesToMultibaseId, multibaseIdToKeyBytes } from '../utils.js';\n\n/**\n * Defines the set of options available when creating a new Decentralized Identifier (DID) with the\n * 'did:key' method.\n *\n * Either the `algorithm` or `verificationMethods` option can be specified, but not both.\n * - A new key will be generated using the algorithm identifier specified in either the `algorithm`\n *   property or the `verificationMethods` object's `algorithm` property.\n * - If `verificationMethods` is given, it must contain exactly one entry since DID Key only\n *   supports a single verification method.\n * - If neither is given, the default is to generate a new Ed25519 key.\n *\n * @example\n * ```ts\n  * // By default, when no options are given, a new Ed25519 key will be generated.\n * const did = await DidKey.create();\n *\n * // The algorithm to use for key generation can be specified as a top-level option.\n * const did = await DidKey.create({\n *   options: { algorithm = 'secp256k1' }\n * });\n *\n * // Or, alternatively as a property of the verification method.\n * const did = await DidKey.create({\n *   options: {\n *     verificationMethods: [{ algorithm = 'secp256k1' }]\n *   }\n * });\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidKey.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidKey.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Import / Export\n *\n * // Export a BearerDid object to the PortableDid format.\n * const portableDid = await did.export();\n *\n * // Reconstruct a BearerDid object from a PortableDid\n * const did = await DidKey.import(portableDid);\n * ```\n */\nexport interface DidKeyCreateOptions<TKms> extends DidCreateOptions<TKms> {\n  /**\n   * Optionally specify the algorithm to be used for key generation.\n   */\n  algorithm?: TKms extends CryptoApi\n    ? InferKeyGeneratorAlgorithm<TKms>\n    : InferKeyGeneratorAlgorithm<LocalKeyManager>;\n\n  /**\n   * Optionally specify an array of JSON-LD context links for the @context property of the DID\n   * document.\n   *\n   * The @context property provides a JSON-LD processor with the information necessary to interpret\n   * the DID document JSON. The default context URL is 'https://www.w3.org/ns/did/v1'.\n   */\n  defaultContext?: string;\n\n  /**\n   * Optionally enable encryption key derivation during DID creation.\n   *\n   * By default, this option is set to `false`, which means encryption key derivation is not\n   * performed unless explicitly enabled.\n   *\n   * When set to `true`, an `X25519` key will be derived from the `Ed25519` public key used to\n   * create the DID. This feature enables the same DID to be used for encrypted communication, in\n   * addition to signature verification.\n   *\n   * Notes:\n   * - This option is ONLY applicable when the `algorithm` of the DID's public key is `Ed25519`.\n   * - Enabling this introduces specific cryptographic considerations that should be understood\n   *   before using the same key pair for digital signatures and encrypted communication. See the following for more information:\n   */\n  enableEncryptionKeyDerivation?: boolean;\n\n  /**\n   * Optionally enable experimental public key types during DID creation.\n   * By default, this option is set to `false`, which means experimental public key types are not\n   * supported.\n   *\n   * Note: This implementation of the DID Key method does not support any experimental public key\n   * types.\n   */\n  enableExperimentalPublicKeyTypes?: boolean;\n\n  /**\n   * Optionally specify the format of the public key to be used for DID creation.\n   */\n  publicKeyFormat?: keyof typeof DidKeyVerificationMethodType;\n\n  /**\n   * Alternatively, specify the algorithm to be used for key generation of the single verification\n   * method in the DID Document.\n   */\n  verificationMethods?: DidCreateVerificationMethod<TKms>[];\n}\n\n/**\n * Enumerates the types of keys that can be used in a DID Key document.\n *\n * The DID Key method supports various cryptographic key types. These key types are essential for\n * the creation and management of DIDs and their associated cryptographic operations like signing\n * and encryption.\n */\nexport enum DidKeyRegisteredKeyType {\n  /**\n   * Ed25519: A public-key signature system using the EdDSA (Edwards-curve Digital Signature\n   * Algorithm) and Curve25519.\n   */\n  Ed25519 = 'Ed25519',\n\n  /**\n   * secp256k1: A cryptographic curve used for digital signatures in a range of decentralized\n   * systems.\n   */\n  secp256k1 = 'secp256k1',\n\n  /**\n   * secp256r1: Also known as P-256 or prime256v1, this curve is used for cryptographic operations\n   * and is widely supported in various cryptographic libraries and standards.\n   */\n  secp256r1 = 'secp256r1',\n\n  /**\n   * X25519: A Diffie-Hellman key exchange algorithm using Curve25519.\n   */\n  X25519 = 'X25519'\n}\n\n/**\n * Enumerates the verification method types supported by the DID Key method.\n *\n * This enum defines the URIs associated with common verification methods used in DID Documents.\n * These URIs represent cryptographic suites or key types standardized for use across decentralized\n * identifiers (DIDs).\n */\nexport const DidKeyVerificationMethodType = {\n  /** Represents an Ed25519 public key used for digital signatures. */\n  Ed25519VerificationKey2020: 'https://w3id.org/security/suites/ed25519-2020/v1',\n\n  /** Represents a JSON Web Key (JWK) used for digital signatures and key agreement protocols. */\n  JsonWebKey2020: 'https://w3id.org/security/suites/jws-2020/v1',\n\n  /** Represents an X25519 public key used for key agreement protocols. */\n  X25519KeyAgreementKey2020: 'https://w3id.org/security/suites/x25519-2020/v1',\n} as const;\n\n/**\n * Private helper that maps algorithm identifiers to their corresponding DID Key\n * {@link DidKeyRegisteredKeyType | registered key type}.\n */\nconst AlgorithmToKeyTypeMap = {\n  Ed25519   : DidKeyRegisteredKeyType.Ed25519,\n  ES256K    : DidKeyRegisteredKeyType.secp256k1,\n  ES256     : DidKeyRegisteredKeyType.secp256r1,\n  'P-256'   : DidKeyRegisteredKeyType.secp256r1,\n  secp256k1 : DidKeyRegisteredKeyType.secp256k1,\n  secp256r1 : DidKeyRegisteredKeyType.secp256r1,\n  X25519    : DidKeyRegisteredKeyType.X25519\n} as const;\n\n/**\n * The `DidKey` class provides an implementation of the 'did:key' DID method.\n *\n * Features:\n * - DID Creation: Create new `did:key` DIDs.\n * - DID Key Management: Instantiate a DID object from an existing verification method key set or\n *                       or a key in a Key Management System (KMS). If supported by the KMS, a DID's\n *                       key can be exported to a portable DID format.\n * - DID Resolution: Resolve a `did:key` to its corresponding DID Document.\n * - Signature Operations: Sign and verify messages using keys associated with a DID.\n *\n * @remarks\n * The `did:key` DID method uses a single public key to generate a DID and does not rely\n * on any external system such as a blockchain or centralized database. This characteristic makes\n * it suitable for use cases where a assertions about a DID Subject can be self-verifiable by\n * third parties.\n *\n * The method-specific identifier is formed by\n * {@link https://datatracker.ietf.org/doc/html/draft-multiformats-multibase#name-base-58-bitcoin-encoding | Multibase base58-btc}\n * encoding the concatenation of the\n * {@link https://github.com/multiformats/multicodec/blob/master/README.md | Multicodec} identifier\n * for the public key type and the raw public key bytes. To form the DID URI, the method-specific\n * identifier is prefixed with the string 'did:key:'.\n *\n * This method can optionally derive an encryption key from the public key used to create the DID\n * if and only if the public key algorithm is `Ed25519`. This feature enables the same DID to be\n * used for encrypted communication, in addition to signature verification. To enable this\n * feature when calling {@link DidKey.create | `DidKey.create()`}, first specify an `algorithm` of\n * `Ed25519` or provide a `keySet` referencing an `Ed25519` key and then set the\n * `enableEncryptionKeyDerivation` option to `true`.\n *\n * Note:\n * - The authors of the DID Key specification have indicated that use of this method for long-lived\n *   use cases is only recommended when accompanied with high confidence that private keys are\n *   securely protected by software or hardware isolation.\n *\n * @see {@link https://w3c-ccg.github.io/did-method-key/ | DID Key Specification}\n *\n* @example\n * ```ts\n * // DID Creation\n * const did = await DidKey.create();\n *\n * // DID Creation with a KMS\n * const keyManager = new LocalKeyManager();\n * const did = await DidKey.create({ keyManager });\n *\n * // DID Resolution\n * const resolutionResult = await DidKey.resolve({ did: did.uri });\n *\n * // Signature Operations\n * const signer = await did.getSigner();\n * const signature = await signer.sign({ data: new TextEncoder().encode('Message') });\n * const isValid = await signer.verify({ data: new TextEncoder().encode('Message'), signature });\n *\n * // Key Management\n *\n * // Instantiate a DID object from an existing key in a KMS\n * const did = await DidKey.fromKeyManager({\n *  didUri: 'did:key:z6MkpUzNmYVTGpqhStxK8yRKXWCRNm1bGYz8geAg2zmjYHKX',\n *  keyManager\n * });\n *\n * // Instantiate a DID object from an existing verification method key\n * const did = await DidKey.fromKeys({\n *   verificationMethods: [{\n *     publicKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4'\n *     },\n *     privateKeyJwk: {\n *       kty: 'OKP',\n *       crv: 'Ed25519',\n *       x: 'cHs7YMLQ3gCWjkacMURBsnEJBcEsvlsE5DfnsfTNDP4',\n *       d: 'bdcGE4KzEaekOwoa-ee3gAm1a991WvNj_Eq3WKyqTnE'\n *     }\n *   }]\n * });\n *\n * // Convert a DID object to a portable format\n * const portableDid = await DidKey.toKeys({ did });\n *\n * // Reconstruct a DID object from a portable format\n * const did = await DidKey.fromKeys(portableDid);\n * ```\n */\nexport class DidKey extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID Key specification.\n   */\n  public static methodName = 'key';\n\n  /**\n   * Creates a new DID using the `did:key` method formed from a newly generated key.\n   *\n   * @remarks\n   * The DID URI is formed by\n   * {@link https://datatracker.ietf.org/doc/html/draft-multiformats-multibase#name-base-58-bitcoin-encoding | Multibase base58-btc}\n   * encoding the\n   * {@link https://github.com/multiformats/multicodec/blob/master/README.md | Multicodec}-encoded\n   * public key and prefixing with `did:key:`.\n   *\n   * This method can optionally derive an encryption key from the public key used to create the DID\n   * if and only if the public key algorithm is `Ed25519`. This feature enables the same DID to be\n   * used for encrypted communication, in addition to signature verification. To enable this\n   * feature, specify an `algorithm` of `Ed25519` as either a top-level option or in a\n   * `verificationMethod` and set the `enableEncryptionKeyDerivation` option to `true`.\n   *\n   * Notes:\n   * - If no `options` are given, by default a new Ed25519 key will be generated.\n   * - The `algorithm` and `verificationMethods` options are mutually exclusive. If both are given,\n   *   an error will be thrown.\n   *\n   * @example\n   * ```ts\n   * // DID Creation\n   * const did = await DidKey.create();\n   *\n   * // DID Creation with a KMS\n   * const keyManager = new LocalKeyManager();\n   * const did = await DidKey.create({ keyManager });\n   * ```\n   *\n   * @param params - The parameters for the create operation.\n   * @param params.keyManager - Key Management System (KMS) used to generate keys and sign data.\n   * @param params.options - Optional parameters that can be specified when creating a new DID.\n   * @returns A Promise resolving to a {@link BearerDid} object representing the new DID.\n   */\n  public static async create<TKms extends CryptoApi | undefined = undefined>({\n    keyManager = new LocalKeyManager(),\n    options = {}\n  }: {\n    keyManager?: TKms;\n    options?: DidKeyCreateOptions<TKms>;\n  } = {}): Promise<BearerDid> {\n    // Before processing the create operation, validate DID-method-specific requirements to prevent\n    // keys from being generated unnecessarily.\n\n    // Check 1: Validate that `algorithm` or `verificationMethods` options are not both given.\n    if (options.algorithm && options.verificationMethods) {\n      throw new Error(`The 'algorithm' and 'verificationMethods' options are mutually exclusive`);\n    }\n\n    // Check 2: If `verificationMethods` is given, it must contain exactly one entry since DID Key\n    // only supports a single verification method.\n    if (options.verificationMethods && options.verificationMethods.length !== 1) {\n      throw new Error(`The 'verificationMethods' option must contain exactly one entry`);\n    }\n\n    // Default to Ed25519 key generation if an algorithm is not given.\n    const algorithm = options.algorithm ?? options.verificationMethods?.[0]?.algorithm ?? 'Ed25519';\n\n    // Generate a new key using the specified `algorithm`.\n    const keyUri = await keyManager.generateKey({ algorithm });\n    const publicKey = await keyManager.getPublicKey({ keyUri });\n\n    // Compute the DID identifier from the public key by converting the JWK to a multibase-encoded\n    // multicodec value.\n    const identifier = await DidKeyUtils.publicKeyToMultibaseId({ publicKey });\n\n    // Attach the prefix `did:key` to form the complete DID URI.\n    const didUri = `did:${DidKey.methodName}:${identifier}`;\n\n    // Expand the DID URI string to a DID document.\n    const didResolutionResult = await DidKey.resolve(didUri, options);\n    const document = didResolutionResult.didDocument as DidDocument;\n\n    // Create the BearerDid object from the generated key material.\n    const did = new BearerDid({\n      uri      : didUri,\n      document,\n      metadata : {},\n      keyManager\n    });\n\n    return did;\n  }\n\n  /**\n   * Given the W3C DID Document of a `did:key` DID, return the verification method that will be used\n   * for signing messages and credentials. With DID Key, the first verification method in the\n   * authentication property in the DID Document is used.\n   *\n   * Note that for DID Key, only one verification method intended for signing can exist so\n   * specifying `methodId` could be considered redundant or unnecessary. The option is provided for\n   * consistency with other DID method implementations.\n   *\n   * @param params - The parameters for the `getSigningMethod` operation.\n   * @param params.didDocument - DID Document to get the verification method from.\n   * @param params.methodId - ID of the verification method to use for signing.\n   * @returns Verification method to use for signing.\n   */\n  public static async getSigningMethod({ didDocument }: {\n    didDocument: DidDocument;\n    methodId?: string;\n  }): Promise<DidVerificationMethod> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(didDocument.id);\n    if (parsedDid && parsedDid.method !== this.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n\n    // Attempt to ge the first verification method intended for signing claims.\n    const [ methodId ] = didDocument.assertionMethod || [];\n    const verificationMethod = didDocument.verificationMethod?.find(vm => vm.id === methodId);\n\n    if (!(verificationMethod && verificationMethod.publicKeyJwk)) {\n      throw new DidError(DidErrorCode.InternalError, 'A verification method intended for signing could not be determined from the DID Document');\n    }\n\n    return verificationMethod;\n  }\n\n  /**\n   * Instantiates a {@link BearerDid} object for the DID Key method from a given {@link PortableDid}.\n   *\n   * This method allows for the creation of a `BearerDid` object using a previously created DID's\n   * key material, DID document, and metadata.\n   *\n   * @remarks\n   * The `verificationMethod` array of the DID document must contain exactly one key since the\n   * `did:key` method only supports a single verification method.\n   *\n   * @example\n   * ```ts\n   * // Export an existing BearerDid to PortableDid format.\n   * const portableDid = await did.export();\n   * // Reconstruct a BearerDid object from the PortableDid.\n   * const did = await DidKey.import({ portableDid });\n   * ```\n   *\n   * @param params - The parameters for the import operation.\n   * @param params.portableDid - The PortableDid object to import.\n   * @param params.keyManager - Optionally specify an external Key Management System (KMS) used to\n   *                            generate keys and sign data. If not given, a new\n   *                            {@link LocalKeyManager} instance will be created and\n   *                            used.\n   * @returns A Promise resolving to a `BearerDid` object representing the DID formed from the provided keys.\n   * @throws An error if the DID document does not contain exactly one verification method.\n   */\n  public static async import({ portableDid, keyManager = new LocalKeyManager() }: {\n    keyManager?: CryptoApi & KeyImporterExporter<KmsImportKeyParams, KeyIdentifier, KmsExportKeyParams>;\n    portableDid: PortableDid;\n  }): Promise<BearerDid> {\n    // Verify the DID method is supported.\n    const parsedDid = Did.parse(portableDid.uri);\n    if (parsedDid?.method !== DidKey.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported`);\n    }\n\n    // Use the given PortableDid to construct the BearerDid object.\n    const did = await BearerDid.import({ portableDid, keyManager });\n\n    // Validate that the given DID document contains exactly one verification method.\n    // Note: The non-undefined assertion is necessary because the type system cannot infer that\n    // the `verificationMethod` property is defined -- which is checked by `BearerDid.import()`.\n    if (did.document.verificationMethod!.length !== 1) {\n      throw new DidError(DidErrorCode.InvalidDidDocument, `DID document must contain exactly one verification method`);\n    }\n\n    return did;\n  }\n\n  /**\n   * Resolves a `did:key` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param options - Optional parameters for resolving the DID.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    try {\n      // Attempt to expand the DID URI string to a DID document.\n      const didDocument = await DidKey.createDocument({ didUri, options });\n\n      // If the DID document was created successfully, return it.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n      };\n\n    } catch (error: any) {\n      // Rethrow any unexpected errors that are not a `DidError`.\n      if (!(error instanceof DidError)) throw new Error(error);\n\n      // Return a DID Resolution Result with the appropriate error code.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error: error.code,\n          ...error.message && { errorMessage: error.message }\n        }\n      };\n    }\n  }\n\n  /**\n   * Expands a did:key identifier to a DID Document.\n   *\n   * Reference: https://w3c-ccg.github.io/did-method-key/#document-creation-algorithm\n   *\n   * @param options\n   * @returns - A DID dodcument.\n   */\n  private static async createDocument({ didUri, options = {}}: {\n    didUri: string;\n    options?: Exclude<DidKeyCreateOptions<CryptoApi>, 'algorithm' | 'verificationMethods'> | DidResolutionOptions;\n  }): Promise<DidDocument> {\n    const {\n      defaultContext = 'https://www.w3.org/ns/did/v1',\n      enableEncryptionKeyDerivation = false,\n      enableExperimentalPublicKeyTypes = false,\n      publicKeyFormat = 'JsonWebKey2020'\n    } = options;\n\n    /**\n     * 1. Initialize document to an empty object.\n     */\n    const didDocument: DidDocument = { id: '' };\n\n    /**\n     * 2. Using a colon (:) as the delimiter, split the identifier into its\n     * components: a scheme, a method, a version, and a multibaseValue.\n     * If there are only three components set the version to the string\n     * value 1 and use the last value as the multibaseValue.\n     */\n    const parsedDid = Did.parse(didUri);\n    if (!parsedDid) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n    const multibaseValue = parsedDid.id;\n\n    /**\n     * 3. Check the validity of the input identifier.\n     * The scheme MUST be the value did. The method MUST be the value key.\n     * The version MUST be convertible to a positive integer value. The\n     * multibaseValue MUST be a string and begin with the letter z. If any\n     * of these requirements fail, an invalidDid error MUST be raised.\n     */\n    if (parsedDid.method !== DidKey.methodName) {\n      throw new DidError(DidErrorCode.MethodNotSupported, `Method not supported: ${parsedDid.method}`);\n    }\n    if (!DidKey.validateIdentifier(parsedDid)) {\n      throw new DidError(DidErrorCode.InvalidDid, `Invalid DID URI: ${didUri}`);\n    }\n\n    /**\n     * 4. Initialize the signatureVerificationMethod to the result of passing\n     * identifier, multibaseValue, and options to a\n     *  {@link https://w3c-ccg.github.io/did-method-key/#signature-method-creation-algorithm | Signature Method Creation Algorithm}.\n     */\n    const signatureVerificationMethod = await DidKey.createSignatureMethod({\n      didUri,\n      multibaseValue,\n      options: { enableExperimentalPublicKeyTypes, publicKeyFormat }\n    });\n\n    /**\n     * 5. Set document.id to identifier. If document.id is not a valid DID,\n     * an invalidDid error MUST be raised.\n     *\n     * Note: Identifier was already confirmed to be valid in Step 3, so\n     *       skipping the redundant validation.\n     */\n    didDocument.id = parsedDid.uri;\n\n    /**\n     * 6. Initialize the verificationMethod property in document to an array\n     * where the first value is the signatureVerificationMethod.\n     */\n    didDocument.verificationMethod = [signatureVerificationMethod];\n\n    /**\n     * 7. Initialize the authentication, assertionMethod, capabilityInvocation,\n     * and the capabilityDelegation properties in document to an array where\n     * the first item is the value of the id property in\n     * signatureVerificationMethod.\n     */\n    didDocument.authentication = [signatureVerificationMethod.id];\n    didDocument.assertionMethod = [signatureVerificationMethod.id];\n    didDocument.capabilityInvocation = [signatureVerificationMethod.id];\n    didDocument.capabilityDelegation = [signatureVerificationMethod.id];\n\n    /**\n     * 8. If options.enableEncryptionKeyDerivation is set to true:\n     * Add the encryptionVerificationMethod value to the verificationMethod\n     * array. Initialize the keyAgreement property in document to an array\n     * where the first item is the value of the id property in\n     * encryptionVerificationMethod.\n     */\n    if (enableEncryptionKeyDerivation === true) {\n      /**\n       * Although not covered by the did:key method specification, a sensible\n       * default will be taken to use the 'X25519KeyAgreementKey2020'\n       * verification method type if the given publicKeyFormat is\n       * 'Ed25519VerificationKey2020' and 'JsonWebKey2020' otherwise.\n       */\n      const encryptionPublicKeyFormat =\n        (publicKeyFormat === 'Ed25519VerificationKey2020')\n          ? 'X25519KeyAgreementKey2020'\n          : 'JsonWebKey2020';\n\n      /**\n       * 8.1 Initialize the encryptionVerificationMethod to the result of\n       * passing identifier, multibaseValue, and options to an\n     * {@link https://w3c-ccg.github.io/did-method-key/#encryption-method-creation-algorithm | Encryption Method Creation Algorithm}.\n       */\n      const encryptionVerificationMethod = await this.createEncryptionMethod({\n        didUri,\n        multibaseValue,\n        options: { enableExperimentalPublicKeyTypes, publicKeyFormat: encryptionPublicKeyFormat }\n      });\n\n      /**\n       * 8.2 Add the encryptionVerificationMethod value to the\n       * verificationMethod array.\n       */\n      didDocument.verificationMethod.push(encryptionVerificationMethod);\n\n      /**\n       * 8.3. Initialize the keyAgreement property in document to an array\n       * where the first item is the value of the id property in\n       * encryptionVerificationMethod.\n       */\n      didDocument.keyAgreement = [encryptionVerificationMethod.id];\n    }\n\n    /**\n     * 9. Initialize the @context property in document to the result of passing document and options to the Context\n     * Creation algorithm.\n     */\n    // Set contextArray to an array that is initialized to options.defaultContext.\n    const contextArray = [ defaultContext ];\n\n    // For every object in every verification relationship listed in document,\n    // add a string value to the contextArray based on the object type value,\n    // if it doesn't already exist, according to the following table:\n    // {@link https://w3c-ccg.github.io/did-method-key/#context-creation-algorithm | Context Type URL}\n    const verificationMethodTypes = getVerificationMethodTypes({ didDocument });\n    verificationMethodTypes.forEach((typeName: string) => {\n      const typeUrl = DidKeyVerificationMethodType[typeName as keyof typeof DidKeyVerificationMethodType];\n      contextArray.push(typeUrl);\n    });\n    didDocument['@context'] = contextArray;\n\n    /**\n     * 10. Return document.\n     */\n    return didDocument;\n  }\n\n  /**\n   * Decoding a multibase-encoded multicodec value into a verification method\n   * that is suitable for verifying that encrypted information will be\n   * received by the intended recipient.\n   */\n  private static async createEncryptionMethod({ didUri, multibaseValue, options }: {\n    didUri: string;\n    multibaseValue: string;\n    options: Required<Pick<DidKeyCreateOptions<CryptoApi>, 'enableExperimentalPublicKeyTypes' | 'publicKeyFormat'>>;\n  }): Promise<DidVerificationMethod> {\n    const { enableExperimentalPublicKeyTypes, publicKeyFormat } = options;\n\n    /**\n     * 1. Initialize verificationMethod to an empty object.\n     */\n    const verificationMethod: DidVerificationMethod = { id: '', type: '', controller: '' };\n\n    /**\n     * 2. Set multicodecValue and raw publicKeyBytes to the result of passing multibaseValue and\n     * options to a Derive Encryption Key algorithm.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue,\n    } = await DidKey.deriveEncryptionKey({ multibaseValue });\n\n    /**\n     * 3. Ensure the proper key length of raw publicKeyBytes based on the multicodecValue table\n     * provided below:\n     *\n     * Multicodec hexadecimal value: 0xec\n     *\n     * If the byte length of raw publicKeyBytes does not match the expected public key length for\n     * the associated multicodecValue, an invalidPublicKeyLength error MUST be raised.\n     */\n    const actualLength = publicKeyBytes.byteLength;\n    const expectedLength = DidKeyUtils.MULTICODEC_PUBLIC_KEY_LENGTH[multicodecValue];\n    if (actualLength !== expectedLength) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Expected ${actualLength} bytes. Actual: ${expectedLength}`);\n    }\n\n    /**\n     * 4. Create the multibaseValue by concatenating the letter 'z' and the\n     * base58-btc encoding of the concatenation of the multicodecValue and\n     * the raw publicKeyBytes.\n     */\n    const kemMultibaseValue = keyBytesToMultibaseId({\n      keyBytes       : publicKeyBytes,\n      multicodecCode : multicodecValue\n    });\n\n    /**\n     * 5. Set the verificationMethod.id value by concatenating identifier,\n     * a hash character (#), and the multibaseValue. If verificationMethod.id\n     * is not a valid DID URL, an invalidDidUrl error MUST be raised.\n     */\n    verificationMethod.id = `${didUri}#${kemMultibaseValue}`;\n    try {\n      new URL(verificationMethod.id);\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InvalidDidUrl, 'Verification Method ID is not a valid DID URL.');\n    }\n\n    /**\n     * 6. Set the publicKeyFormat value to the options.publicKeyFormat value.\n     * 7. If publicKeyFormat is not known to the implementation, an\n     * unsupportedPublicKeyType error MUST be raised.\n     */\n    if (!(publicKeyFormat in DidKeyVerificationMethodType)) {\n      throw new DidError(DidErrorCode.UnsupportedPublicKeyType, `Unsupported format: ${publicKeyFormat}`);\n    }\n\n    /**\n     * 8. If options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not\n     * Multikey, JsonWebKey2020, or X25519KeyAgreementKey2020, an invalidPublicKeyType error MUST be\n     * raised.\n     */\n    const StandardPublicKeyTypes = ['Multikey', 'JsonWebKey2020', 'X25519KeyAgreementKey2020'];\n    if (enableExperimentalPublicKeyTypes === false\n      && !(StandardPublicKeyTypes.includes(publicKeyFormat))) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Specified '${publicKeyFormat}' without setting enableExperimentalPublicKeyTypes to true.`);\n    }\n\n    /**\n     * 9. Set verificationMethod.type to the publicKeyFormat value.\n     */\n    verificationMethod.type = publicKeyFormat;\n\n    /**\n     * 10. Set verificationMethod.controller to the identifier value.\n     */\n    verificationMethod.controller = didUri;\n\n    /**\n     * 11. If publicKeyFormat is Multikey or X25519KeyAgreementKey2020, set the verificationMethod.publicKeyMultibase\n     * value to multibaseValue.\n     *\n     * Note: This implementation does not currently support the Multikey\n     *       format.\n     */\n    if (publicKeyFormat === 'X25519KeyAgreementKey2020') {\n      verificationMethod.publicKeyMultibase = kemMultibaseValue;\n    }\n\n    /**\n     * 12. If publicKeyFormat is JsonWebKey2020, set the verificationMethod.publicKeyJwk value to\n     * the result of passing multicodecValue and rawPublicKeyBytes to a JWK encoding algorithm.\n     */\n    if (publicKeyFormat === 'JsonWebKey2020') {\n      const { crv } = await DidKeyUtils.multicodecToJwk({ code: multicodecValue });\n      verificationMethod.publicKeyJwk = await DidKeyUtils.keyConverter(crv!).bytesToPublicKey({ publicKeyBytes });\n    }\n\n    /**\n     * 13. Return verificationMethod.\n     */\n    return verificationMethod;\n  }\n\n  /**\n   * Decodes a multibase-encoded multicodec value into a verification method\n   * that is suitable for verifying digital signatures.\n   * @param options - Signature method creation algorithm inputs.\n   * @returns - A verification method.\n   */\n  private static async createSignatureMethod({ didUri, multibaseValue, options }: {\n    didUri: string;\n    multibaseValue: string;\n    options: Required<Pick<DidKeyCreateOptions<CryptoApi>, 'enableExperimentalPublicKeyTypes' | 'publicKeyFormat'>>\n  }): Promise<DidVerificationMethod> {\n    const { enableExperimentalPublicKeyTypes, publicKeyFormat } = options;\n\n    /**\n     * 1. Initialize verificationMethod to an empty object.\n     */\n    const verificationMethod: DidVerificationMethod = { id: '', type: '', controller: '' };\n\n    /**\n     * 2. Set multicodecValue and publicKeyBytes to the result of passing\n     * multibaseValue and options to a Decode Public Key algorithm.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue,\n      multicodecName\n    } = multibaseIdToKeyBytes({ multibaseKeyId: multibaseValue });\n\n    /**\n     * 3. Ensure the proper key length of publicKeyBytes based on the multicodecValue\n     * {@link https://w3c-ccg.github.io/did-method-key/#signature-method-creation-algorithm | table provided}.\n     * If the byte length of rawPublicKeyBytes does not match the expected public key length for the\n     * associated multicodecValue, an invalidPublicKeyLength error MUST be raised.\n     */\n    const actualLength = publicKeyBytes.byteLength;\n    const expectedLength = DidKeyUtils.MULTICODEC_PUBLIC_KEY_LENGTH[multicodecValue];\n    if (actualLength !== expectedLength) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyLength, `Expected ${actualLength} bytes. Actual: ${expectedLength}`);\n    }\n\n    /**\n     * 4. Ensure the publicKeyBytes are a proper encoding of the public key type as specified by\n     * the multicodecValue. If an invalid public key value is detected, an invalidPublicKey error\n     * MUST be raised.\n     */\n    let isValid = false;\n    switch (multicodecName) {\n      case 'secp256k1-pub':\n        isValid = await Secp256k1.validatePublicKey({ publicKeyBytes });\n        break;\n      case 'ed25519-pub':\n        isValid = await Ed25519.validatePublicKey({ publicKeyBytes });\n        break;\n      case 'x25519-pub':\n        // TODO: Validate key once/if X25519.validatePublicKey() is implemented.\n        // isValid = X25519.validatePublicKey({ key: rawPublicKeyBytes})\n        isValid = true;\n        break;\n    }\n    if (!isValid) {\n      throw new DidError(DidErrorCode.InvalidPublicKey, 'Invalid public key detected.');\n    }\n\n    /**\n     * 5. Set the verificationMethod.id value by concatenating identifier, a hash character (#), and\n     * the multibaseValue. If verificationMethod.id is not a valid DID URL, an invalidDidUrl error\n     * MUST be raised.\n     */\n    verificationMethod.id = `${didUri}#${multibaseValue}`;\n    try {\n      new URL(verificationMethod.id);\n    } catch (error: any) {\n      throw new DidError(DidErrorCode.InvalidDidUrl, 'Verification Method ID is not a valid DID URL.');\n    }\n\n    /**\n     * 6. Set the publicKeyFormat value to the options.publicKeyFormat value.\n     * 7. If publicKeyFormat is not known to the implementation, an unsupportedPublicKeyType error\n     * MUST be raised.\n     */\n    if (!(publicKeyFormat in DidKeyVerificationMethodType)) {\n      throw new DidError(DidErrorCode.UnsupportedPublicKeyType, `Unsupported format: ${publicKeyFormat}`);\n    }\n\n    /**\n     * 8. If options.enableExperimentalPublicKeyTypes is set to false and publicKeyFormat is not\n     * Multikey, JsonWebKey2020, or Ed25519VerificationKey2020, an invalidPublicKeyType error MUST\n     * be raised.\n     */\n    const StandardPublicKeyTypes = ['Multikey', 'JsonWebKey2020', 'Ed25519VerificationKey2020'];\n    if (enableExperimentalPublicKeyTypes === false\n      && !(StandardPublicKeyTypes.includes(publicKeyFormat))) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Specified '${publicKeyFormat}' without setting enableExperimentalPublicKeyTypes to true.`);\n    }\n\n    /**\n     * 9. Set verificationMethod.type to the publicKeyFormat value.\n     */\n    verificationMethod.type = publicKeyFormat;\n\n    /**\n     * 10. Set verificationMethod.controller to the identifier value.\n     */\n    verificationMethod.controller = didUri;\n\n    /**\n     * 11. If publicKeyFormat is Multikey or Ed25519VerificationKey2020,\n     * set the verificationMethod.publicKeyMultibase value to multibaseValue.\n     *\n     * Note: This implementation does not currently support the Multikey\n     *       format.\n     */\n    if (publicKeyFormat === 'Ed25519VerificationKey2020') {\n      verificationMethod.publicKeyMultibase = multibaseValue;\n    }\n\n    /**\n     * 12. If publicKeyFormat is JsonWebKey2020, set the verificationMethod.publicKeyJwk value to\n     * the result of passing multicodecValue and rawPublicKeyBytes to a JWK encoding algorithm.\n     */\n    if (publicKeyFormat === 'JsonWebKey2020') {\n      const { crv } = await DidKeyUtils.multicodecToJwk({ code: multicodecValue });\n      verificationMethod.publicKeyJwk = await DidKeyUtils.keyConverter(crv!).bytesToPublicKey({ publicKeyBytes});\n    }\n\n    /**\n     * 13. Return verificationMethod.\n     */\n    return verificationMethod;\n  }\n\n\n  /**\n   * Transform a multibase-encoded multicodec value to public encryption key\n   * components that are suitable for encrypting messages to a receiver. A\n   * mathematical proof elaborating on the safety of performing this operation\n   * is available in:\n   * {@link https://eprint.iacr.org/2021/509.pdf | On using the same key pair for Ed25519 and an X25519 based KEM}\n   */\n  private static async deriveEncryptionKey({ multibaseValue }: {\n    multibaseValue: string\n  }): Promise<RequireOnly<KeyWithMulticodec, 'keyBytes' | 'multicodecCode'>> {\n    /**\n     * 1. Set publicEncryptionKey to an empty object.\n     */\n    let publicEncryptionKey: RequireOnly<KeyWithMulticodec, 'keyBytes' | 'multicodecCode'> = {\n      keyBytes       : new Uint8Array(),\n      multicodecCode : 0\n    };\n\n    /**\n     * 2. Decode multibaseValue using the base58-btc multibase alphabet and\n     * set multicodecValue to the multicodec header for the decoded value.\n     * Implementers are cautioned to ensure that the multicodecValue is set\n     * to the result after performing varint decoding.\n     *\n     * 3. Set the rawPublicKeyBytes to the bytes remaining after the multicodec\n     * header.\n     */\n    const {\n      keyBytes: publicKeyBytes,\n      multicodecCode: multicodecValue\n    } = multibaseIdToKeyBytes({ multibaseKeyId: multibaseValue });\n\n    /**\n     * 4. If the multicodecValue is 0xed (Ed25519 public key), derive a public X25519 encryption key\n     * by using the raw publicKeyBytes and the algorithm defined in\n     * {@link https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-groupcomm | Group OSCORE - Secure Group Communication for CoAP}\n     * for Curve25519 in Section 2.4.2: ECDH with Montgomery Coordinates and set\n     * generatedPublicEncryptionKeyBytes to the result.\n     */\n    if (multicodecValue === 0xed) {\n      const ed25519PublicKey = await DidKeyUtils.keyConverter('Ed25519').bytesToPublicKey({\n        publicKeyBytes\n      });\n      const generatedPublicEncryptionKey = await Ed25519.convertPublicKeyToX25519({\n        publicKey: ed25519PublicKey\n      });\n      const generatedPublicEncryptionKeyBytes = await DidKeyUtils.keyConverter('Ed25519').publicKeyToBytes({\n        publicKey: generatedPublicEncryptionKey\n      });\n\n      /**\n       * 5. Set multicodecValue to 0xec.\n       * 6. Set raw public keyBytes to generatedPublicEncryptionKeyBytes.\n       */\n      publicEncryptionKey = {\n        keyBytes       : generatedPublicEncryptionKeyBytes,\n        multicodecCode : 0xec\n      };\n    }\n\n    /**\n     * 7. Return publicEncryptionKey.\n     */\n    return publicEncryptionKey;\n  }\n\n  /**\n   * Validates the structure and components of a DID URI against the `did:key` method specification.\n   *\n   * @param parsedDid - An object representing the parsed components of a DID URI, including the\n   *                    scheme, method, and method-specific identifier.\n   * @returns `true` if the DID URI meets the `did:key` method's structural requirements, `false` otherwise.\n   *\n   */\n  private static validateIdentifier(parsedDid: Did): boolean {\n    const { method, id: multibaseValue } = parsedDid;\n    const [ scheme ] = parsedDid.uri.split(':', 1);\n\n    /**\n     * Note: The W3C DID specification makes no mention of a version value being part of the DID\n     *       syntax.  Additionally, there does not appear to be any real-world usage of the version\n     *       number. Consequently, this implementation will ignore the version related guidance in\n     *       the did:key specification.\n     */\n    const version = '1';\n\n    return (\n      scheme === 'did' &&\n      method === 'key' &&\n      Number(version) > 0 &&\n      universalTypeOf(multibaseValue) === 'String' &&\n      multibaseValue.startsWith('z')\n    );\n  }\n}\n\n/**\n * The `DidKeyUtils` class provides utility functions to support operations in the DID Key method.\n */\nexport class DidKeyUtils {\n  /**\n   * A mapping from JSON Web Key (JWK) property descriptors to multicodec names.\n   *\n   * This mapping is used to convert keys in JWK (JSON Web Key) format to multicodec format.\n   *\n   * @remarks\n   * The keys of this object are strings that describe the JOSE key type and usage,\n   * such as 'Ed25519:public', 'Ed25519:private', etc. The values are the corresponding multicodec\n   * names used to represent these key types.\n   *\n   * @example\n   * ```ts\n   * const multicodecName = JWK_TO_MULTICODEC['Ed25519:public'];\n   * // Returns 'ed25519-pub', the multicodec name for an Ed25519 public key\n   * ```\n   */\n  private static JWK_TO_MULTICODEC: { [key: string]: string } = {\n    'Ed25519:public'    : 'ed25519-pub',\n    'Ed25519:private'   : 'ed25519-priv',\n    'secp256k1:public'  : 'secp256k1-pub',\n    'secp256k1:private' : 'secp256k1-priv',\n    'X25519:public'     : 'x25519-pub',\n    'X25519:private'    : 'x25519-priv',\n  };\n\n  /**\n   * Defines the expected byte lengths for public keys associated with different cryptographic\n   * algorithms, indexed by their multicodec code values.\n   */\n  public static MULTICODEC_PUBLIC_KEY_LENGTH: Record<number, number> = {\n    // secp256k1-pub - Secp256k1 public key (compressed) - 33 bytes\n    0xe7: 33,\n\n    // x25519-pub - Curve25519 public key - 32 bytes\n    0xec: 32,\n\n    // ed25519-pub - Ed25519 public key - 32 bytes\n    0xed: 32\n  };\n\n  /**\n   * A mapping from multicodec names to their corresponding JOSE (JSON Object Signing and Encryption)\n   * representations. This mapping facilitates the conversion of multicodec key formats to\n   * JWK (JSON Web Key) formats.\n   *\n   * @remarks\n   * The keys of this object are multicodec names, such as 'ed25519-pub', 'ed25519-priv', etc.\n   * The values are objects representing the corresponding JWK properties for that key type.\n   *\n   * @example\n   * ```ts\n   * const joseKey = MULTICODEC_TO_JWK['ed25519-pub'];\n   * // Returns a partial JWK for an Ed25519 public key\n   * ```\n   */\n  private static MULTICODEC_TO_JWK: { [key: string]: Jwk } = {\n    'ed25519-pub'    : { crv: 'Ed25519',   kty: 'OKP', x: '' },\n    'ed25519-priv'   : { crv: 'Ed25519',   kty: 'OKP', x: '',        d: '' },\n    'secp256k1-pub'  : { crv: 'secp256k1', kty: 'EC',  x: '', y: ''},\n    'secp256k1-priv' : { crv: 'secp256k1', kty: 'EC',  x: '', y: '', d: '' },\n    'x25519-pub'     : { crv: 'X25519',    kty: 'OKP', x: '' },\n    'x25519-priv'    : { crv: 'X25519',    kty: 'OKP', x: '',        d: '' },\n  };\n\n  /**\n   * Converts a JWK (JSON Web Key) to a Multicodec code and name.\n   *\n   * @example\n   * ```ts\n   * const jwk: Jwk = { crv: 'Ed25519', kty: 'OKP', x: '...' };\n   * const { code, name } = await DidKeyUtils.jwkToMulticodec({ jwk });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.jwk - The JSON Web Key to be converted.\n   * @returns A promise that resolves to a Multicodec definition.\n   */\n  public static async jwkToMulticodec({ jwk }: {\n    jwk: Jwk\n  }): Promise<MulticodecDefinition<MulticodecCode>> {\n    const params: string[] = [];\n\n    if (jwk.crv) {\n      params.push(jwk.crv);\n      if (jwk.d) {\n        params.push('private');\n      } else {\n        params.push('public');\n      }\n    }\n\n    const lookupKey = params.join(':');\n    const name = DidKeyUtils.JWK_TO_MULTICODEC[lookupKey];\n\n    if (name === undefined) {\n      throw new Error(`Unsupported JWK to Multicodec conversion: '${lookupKey}'`);\n    }\n\n    const code = Multicodec.getCodeFromName({ name });\n\n    return { code, name };\n  }\n\n  /**\n   * Returns the appropriate public key compressor for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns A public key compressor for the specified curve.\n   */\n  public static keyCompressor(\n    curve: string\n  ): KeyCompressor['compressPublicKey'] {\n  // ): ({ publicKeyBytes }: { publicKeyBytes: Uint8Array }) => Promise<Uint8Array> {\n    const compressors = {\n      'P-256'     : Secp256r1.compressPublicKey,\n      'secp256k1' : Secp256k1.compressPublicKey\n    } as Record<string, KeyCompressor['compressPublicKey']>;\n\n    const compressor = compressors[curve];\n\n    if (!compressor) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return compressor;\n  }\n\n  /**\n   * Returns the appropriate key converter for the specified cryptographic curve.\n   *\n   * @param curve - The cryptographic curve to use for the key conversion.\n   * @returns An `AsymmetricKeyConverter` for the specified curve.\n   */\n  public static keyConverter(curve: string): AsymmetricKeyConverter {\n    const converters: Record<string, AsymmetricKeyConverter> = {\n      'Ed25519'   : Ed25519,\n      'P-256'     : Secp256r1,\n      'secp256k1' : Secp256k1,\n      'X25519'    : X25519\n    };\n\n    const converter = converters[curve];\n\n    if (!converter) throw new DidError(DidErrorCode.InvalidPublicKeyType, `Unsupported curve: ${curve}`);\n\n    return converter;\n  }\n\n  /**\n   * Converts a Multicodec code or name to parial JWK (JSON Web Key).\n   *\n   * @example\n   * ```ts\n   * const partialJwk = await DidKeyUtils.multicodecToJwk({ name: 'ed25519-pub' });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.code - Optional Multicodec code to convert.\n   * @param params.name - Optional Multicodec name to convert.\n   * @returns A promise that resolves to a JOSE format key.\n   */\n  public static async multicodecToJwk({ code, name }: {\n    code?: MulticodecCode,\n    name?: string\n  }): Promise<Jwk> {\n    // Either code or name must be specified, but not both.\n    if (!(name ? !code : code)) {\n      throw new Error(`Either 'name' or 'code' must be defined, but not both.`);\n    }\n\n    // If name is undefined, lookup by code.\n    name = (name === undefined ) ? Multicodec.getNameFromCode({ code: code! }) : name;\n\n    const lookupKey = name;\n    const jose = DidKeyUtils.MULTICODEC_TO_JWK[lookupKey];\n\n    if (jose === undefined) {\n      throw new Error(`Unsupported Multicodec to JWK conversion`);\n    }\n\n    return { ...jose };\n  }\n\n  /**\n   * Converts a public key in JWK (JSON Web Key) format to a multibase identifier.\n   *\n   * @remarks\n   * Note: All secp public keys are converted to compressed point encoding\n   *       before the multibase identifier is computed.\n   *\n   * Per {@link https://github.com/multiformats/multicodec/blob/master/table.csv | Multicodec table}:\n   *    Public keys for Elliptic Curve cryptography algorithms (e.g., secp256k1,\n   *    secp256k1r1, secp384r1, etc.) are always represented with compressed point\n   *    encoding (e.g., secp256k1-pub, p256-pub, p384-pub, etc.).\n   *\n   * Per {@link https://datatracker.ietf.org/doc/html/rfc8812#name-jose-and-cose-secp256k1-cur | RFC 8812}:\n   *    \"As a compressed point encoding representation is not defined for JWK\n   *    elliptic curve points, the uncompressed point encoding defined there\n   *    MUST be used. The x and y values represented MUST both be exactly\n   *    256 bits, with any leading zeros preserved.\"\n   *\n   * @example\n   * ```ts\n   * const publicKey = { crv: 'Ed25519', kty: 'OKP', x: '...' };\n   * const multibaseId = await DidKeyUtils.publicKeyToMultibaseId({ publicKey });\n   * ```\n   *\n   * @param params - The parameters for the conversion.\n   * @param params.publicKey - The public key in JWK format.\n   * @returns A promise that resolves to the multibase identifier.\n   */\n  public static async publicKeyToMultibaseId({ publicKey }: {\n    publicKey: Jwk\n  }): Promise<string> {\n    if (!(publicKey?.crv && publicKey.crv in AlgorithmToKeyTypeMap)) {\n      throw new DidError(DidErrorCode.InvalidPublicKeyType, `Public key contains an unsupported key type: ${publicKey?.crv ?? 'undefined'}`);\n    }\n\n    // Convert the public key from JWK format to a byte array.\n    let publicKeyBytes = await DidKeyUtils.keyConverter(publicKey.crv).publicKeyToBytes({ publicKey });\n\n    // Compress the public key if it is an elliptic curve key.\n    if (/^(secp256k1|P-256|P-384|P-521)$/.test(publicKey.crv)) {\n      publicKeyBytes = await DidKeyUtils.keyCompressor(publicKey.crv)({ publicKeyBytes });\n    }\n\n    // Convert the JSON Web Key (JWK) parameters to a Multicodec name.\n    const { name: multicodecName } = await DidKeyUtils.jwkToMulticodec({ jwk: publicKey });\n\n    // Compute the multibase identifier based on the provided key.\n    const multibaseId = keyBytesToMultibaseId({\n      keyBytes: publicKeyBytes,\n      multicodecName\n    });\n\n    return multibaseId;\n  }\n}", "import type { DidDocument, DidResolutionOptions, DidResolutionResult } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidMethod } from './did-method.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * The `DidWeb` class provides an implementation of the `did:web` DID method.\n *\n * Features:\n * - DID Resolution: Resolve a `did:web` to its corresponding DID Document.\n *\n * @remarks\n * The `did:web` method uses a web domain's existing reputation and aims to integrate decentralized\n * identities with the existing web infrastructure to drive adoption. It leverages familiar web\n * security models and domain ownership to provide accessible, interoperable digital identity\n * management.\n *\n * @see {@link https://w3c-ccg.github.io/did-method-web/ | DID Web Specification}\n *\n * @example\n * ```ts\n * // DID Resolution\n * const resolutionResult = await DidWeb.resolve({ did: did.uri });\n * ```\n */\nexport class DidWeb extends DidMethod {\n\n  /**\n   * Name of the DID method, as defined in the DID Web specification.\n   */\n  public static methodName = 'web';\n\n  /**\n   * Resolves a `did:web` identifier to a DID Document.\n   *\n   * @param didUri - The DID to be resolved.\n   * @param _options - Optional parameters for resolving the DID. Unused by this DID method.\n   * @returns A Promise resolving to a {@link DidResolutionResult} object representing the result of the resolution.\n   */\n  public static async resolve(didUri: string, _options?: DidResolutionOptions): Promise<DidResolutionResult> {\n    // Attempt to parse the DID URI.\n    const parsedDid = Did.parse(didUri);\n\n    // If parsing failed, the DID is invalid.\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' }\n      };\n    }\n\n    // If the DID method is not \"web\", return an error.\n    if (parsedDid.method !== DidWeb.methodName) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'methodNotSupported' }\n      };\n    }\n\n    // Replace \":\" with \"/\" in the identifier and prepend \"https://\" to obtain the fully qualified\n    // domain name and optional path.\n    let baseUrl = `https://${parsedDid.id.replace(/:/g, '/')}`;\n\n    // If the domain contains a percent encoded port value, decode the colon.\n    baseUrl = decodeURIComponent(baseUrl);\n\n    // Append the expected location of the DID document depending on whether a path was specified.\n    const didDocumentUrl = parsedDid.id.includes(':') ?\n      `${baseUrl}/did.json` :\n      `${baseUrl}/.well-known/did.json`;\n\n    try {\n      // Perform an HTTP GET request to obtain the DID document.\n      const response = await fetch(didDocumentUrl);\n\n      // If the response status code is not 200, return an error.\n      if (!response.ok) throw new Error('HTTP error status code returned');\n\n      // Parse the DID document.\n      const didDocument = await response.json() as DidDocument;\n\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didDocument,\n      };\n\n    } catch (error: any) {\n      // If the DID document could not be retrieved, return an error.\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: { error: 'notFound' }\n      };\n    }\n  }\n}", "import type { AbstractLevel } from 'abstract-level';\n\nimport ms from 'ms';\nimport { Level } from 'level';\n\nimport type { DidResolutionResult } from '../types/did-core.js';\nimport type { DidResolverCache } from '../types/did-resolution.js';\n\n/**\n * Configuration parameters for creating a LevelDB-based cache for DID resolution results.\n *\n * Allows customization of the underlying database instance, storage location, and cache\n * time-to-live (TTL) settings.\n */\nexport type DidResolverCacheLevelParams = {\n  /**\n   * Optional. An instance of `AbstractLevel` to use as the database. If not provided, a new\n   * LevelDB instance will be created at the specified `location`.\n   */\n  db?: AbstractLevel<string | Buffer | Uint8Array, string, string>;\n\n  /**\n   * Optional. The file system path or IndexedDB name where the LevelDB store will be created.\n   * Defaults to 'DATA/DID_RESOLVERCACHE' if not specified.\n   */\n  location?: string;\n\n  /**\n   * Optional. The time-to-live for cache entries, expressed as a string (e.g., '1h', '15m').\n   * Determines how long a cache entry should remain valid before being considered expired. Defaults\n   * to '15m' if not specified.\n   */\n  ttl?: string;\n}\n\n/**\n * Encapsulates a DID resolution result along with its expiration information for caching purposes.\n *\n * This type is used internally by the `DidResolverCacheLevel` to store DID resolution results\n * with an associated time-to-live (TTL) value. The TTL is represented in milliseconds and\n * determines when the cached entry is considered expired and eligible for removal.\n */\ntype CacheWrapper = {\n  /**\n   * The expiration time of the cache entry in milliseconds since the Unix epoch.\n   *\n   * This value is used to calculate whether the cached entry is still valid or has expired.\n   */\n  ttlMillis: number;\n\n  /**\n   * The DID resolution result being cached.\n   *\n   * This object contains the resolved DID document and associated metadata.\n   */\n  value: DidResolutionResult;\n}\n\n/**\n * A Level-based cache implementation for storing and retrieving DID resolution results.\n *\n * This cache uses LevelDB for storage, allowing data persistence across process restarts or\n * browser refreshes. It's suitable for both Node.js and browser environments.\n *\n * @remarks\n * The LevelDB cache keeps data in memory for fast access and also writes to the filesystem in\n * Node.js or indexedDB in browsers. Time-to-live (TTL) for cache entries is configurable.\n *\n * @example\n * ```\n * const cache = new DidResolverCacheLevel({ ttl: '15m' });\n * ```\n */\nexport class DidResolverCacheLevel implements DidResolverCache {\n  /** The underlying LevelDB store used for caching. */\n  private cache: AbstractLevel<string | Buffer | Uint8Array, string, string>;\n\n  /** The time-to-live for cache entries in milliseconds. */\n  private ttl: number;\n\n  constructor({\n    db,\n    location = 'DATA/DID_RESOLVERCACHE',\n    ttl = '15m'\n  }: DidResolverCacheLevelParams = {}) {\n    this.cache = db ?? new Level<string, string>(location);\n    this.ttl = ms(ttl);\n  }\n\n  /**\n   * Retrieves a DID resolution result from the cache.\n   *\n   * If the cached item has exceeded its TTL, it's scheduled for deletion and undefined is returned.\n   *\n   * @param did - The DID string used as the key for retrieving the cached result.\n   * @returns The cached DID resolution result or undefined if not found or expired.\n   */\n  async get(did: string): Promise<DidResolutionResult | void> {\n    try {\n      const str = await this.cache.get(did);\n      const cacheWrapper: CacheWrapper = JSON.parse(str);\n\n      if (Date.now() >= cacheWrapper.ttlMillis) {\n        // defer deletion to be called in the next tick of the js event loop\n        this.cache.nextTick(() => this.cache.del(did));\n\n        return;\n      } else {\n        return cacheWrapper.value;\n      }\n\n    } catch(error: any) {\n      // Don't throw when a key wasn't found.\n      if (error.notFound) {\n        return;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Stores a DID resolution result in the cache with a TTL.\n   *\n   * @param did - The DID string used as the key for storing the result.\n   * @param value - The DID resolution result to be cached.\n   * @returns A promise that resolves when the operation is complete.\n   */\n  set(did: string, value: DidResolutionResult): Promise<void> {\n    const cacheWrapper: CacheWrapper = { ttlMillis: Date.now() + this.ttl, value };\n    const str = JSON.stringify(cacheWrapper);\n\n    return this.cache.put(did, str);\n  }\n\n  /**\n   * Deletes a DID resolution result from the cache.\n   *\n   * @param did - The DID string used as the key for deletion.\n   * @returns A promise that resolves when the operation is complete.\n   */\n  delete(did: string): Promise<void> {\n    return this.cache.del(did);\n  }\n\n  /**\n   * Clears all entries from the cache.\n   *\n   * @returns A promise that resolves when the operation is complete.\n   */\n  clear(): Promise<void> {\n    return this.cache.clear();\n  }\n\n  /**\n   * Closes the underlying LevelDB store.\n   *\n   * @returns A promise that resolves when the store is closed.\n   */\n  close(): Promise<void> {\n    return this.cache.close();\n  }\n}", "import type { DidResolutionResult } from '../types/did-core.js';\nimport type { DidResolverCache } from '../types/did-resolution.js';\n\n/**\n * No-op cache that is used as the default cache for did-resolver.\n *\n * The motivation behind using a no-op cache as the default stems from the desire to maximize the\n * potential for this library to be used in as many JS runtimes as possible.\n */\nexport const DidResolverCacheNoop: DidResolverCache = {\n  get: function (_key: string): Promise<DidResolutionResult> {\n    return null as any;\n  },\n  set: function (_key: string, _value: DidResolutionResult): Promise<void> {\n    return null as any;\n  },\n  delete: function (_key: string): Promise<void> {\n    return null as any;\n  },\n  clear: function (): Promise<void> {\n    return null as any;\n  },\n  close: function (): Promise<void> {\n    return null as any;\n  }\n};", "import type { DidMethodResolver } from '../methods/did-method.js';\nimport type { DidResolver, DidResolverCache, DidUrlDereferencer } from '../types/did-resolution.js';\nimport type { DidDereferencingOptions, DidDereferencingResult, DidResolutionOptions, DidResolutionResult, DidResource } from '../types/did-core.js';\n\nimport { Did } from '../did.js';\nimport { DidErrorCode } from '../did-error.js';\nimport { DidResolverCacheNoop } from './resolver-cache-noop.js';\nimport { EMPTY_DID_RESOLUTION_RESULT } from '../types/did-resolution.js';\n\n/**\n * Parameters for configuring the `UniversalResolver` class, which is responsible for resolving\n * decentralized identifiers (DIDs) to their corresponding DID documents.\n *\n * This type specifies the essential components required by the `UniversalResolver` to perform\n * DID resolution and dereferencing. It includes an array of `DidMethodResolver` instances,\n * each capable of resolving DIDs for a specific method, and optionally, a cache for storing\n * resolved DID documents to improve resolution efficiency.\n */\nexport type UniversalResolverParams = {\n  /**\n   * An array of `DidMethodResolver` instances.\n   *\n   * Each resolver in this array is designed to handle a specific DID method, enabling the\n   * `DidResolver` to support multiple DID methods simultaneously.\n   */\n  didResolvers: DidMethodResolver[];\n\n  /**\n   * An optional `DidResolverCache` instance used for caching resolved DID documents.\n   *\n   * Providing a cache implementation can significantly enhance resolution performance by avoiding\n   * redundant resolutions for previously resolved DIDs. If omitted, a no-operation cache is used,\n   * which effectively disables caching.\n   */\n  cache?: DidResolverCache;\n}\n\n/**\n * The `DidResolver` class provides mechanisms for resolving Decentralized Identifiers (DIDs) to\n * their corresponding DID documents.\n *\n * The class is designed to handle various DID methods by utilizing an array of `DidMethodResolver`\n * instances, each responsible for a specific DID method.\n *\n * Providing a cache implementation can significantly enhance resolution performance by avoiding\n * redundant resolutions for previously resolved DIDs. If omitted, a no-operation cache is used,\n * which effectively disables caching.\n *\n * Usage:\n * - Construct the `DidResolver` with an array of `DidMethodResolver` instances and an optional cache.\n * - Use `resolve` to resolve a DID to its DID Resolution Result.\n * - Use `dereference` to extract specific resources from a DID URL, like service endpoints or verification methods.\n *\n * @example\n * ```ts\n * const resolver = new DidResolver({\n *   didResolvers: [<array of DidMethodResolver instances>],\n *   cache: new DidResolverCacheNoop()\n * });\n *\n * const resolutionResult = await resolver.resolve('did:example:123456');\n * const dereferenceResult = await resolver.dereference({ didUri: 'did:example:123456#key-1' });\n * ```\n */\nexport class UniversalResolver implements DidResolver, DidUrlDereferencer {\n  /**\n   * A cache for storing resolved DID documents.\n   */\n  private cache: DidResolverCache;\n\n  /**\n   * A map to store method resolvers against method names.\n   */\n  private didResolvers: Map<string, DidMethodResolver> = new Map();\n\n  /**\n   * Constructs a new `DidResolver`.\n   *\n   * @param params - The parameters for constructing the `DidResolver`.\n   */\n  constructor({ cache, didResolvers }: UniversalResolverParams) {\n    this.cache = cache || DidResolverCacheNoop;\n\n    for (const resolver of didResolvers) {\n      this.didResolvers.set(resolver.methodName, resolver);\n    }\n  }\n\n  /**\n   * Resolves a DID to a DID Resolution Result.\n   *\n   * If the DID Resolution Result is present in the cache, it returns the cached result. Otherwise,\n   * it uses the appropriate method resolver to resolve the DID, stores the resolution result in the\n   * cache, and returns the resolultion result.\n   *\n   * @param didUri - The DID or DID URL to resolve.\n   * @returns A promise that resolves to the DID Resolution Result.\n   */\n  public async resolve(didUri: string, options?: DidResolutionOptions): Promise<DidResolutionResult> {\n\n    const parsedDid = Did.parse(didUri);\n    if (!parsedDid) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error        : DidErrorCode.InvalidDid,\n          errorMessage : `Invalid DID URI: ${didUri}`\n        }\n      };\n    }\n\n    const resolver = this.didResolvers.get(parsedDid.method);\n    if (!resolver) {\n      return {\n        ...EMPTY_DID_RESOLUTION_RESULT,\n        didResolutionMetadata: {\n          error        : DidErrorCode.MethodNotSupported,\n          errorMessage : `Method not supported: ${parsedDid.method}`\n        }\n      };\n    }\n\n    const cachedResolutionResult = await this.cache.get(parsedDid.uri);\n\n    if (cachedResolutionResult) {\n      return cachedResolutionResult;\n    } else {\n      const resolutionResult = await resolver.resolve(parsedDid.uri, options);\n\n      await this.cache.set(parsedDid.uri, resolutionResult);\n\n      return resolutionResult;\n    }\n  }\n\n  /**\n   * Dereferences a DID (Decentralized Identifier) URL to a corresponding DID resource.\n   *\n   * This method interprets the DID URL's components, which include the DID method, method-specific\n   * identifier, path, query, and fragment, and retrieves the related resource as per the DID Core\n   * specifications.\n   *\n   * The dereferencing process involves resolving the DID contained in the DID URL to a DID document,\n   * and then extracting the specific part of the document identified by the fragment in the DID URL.\n   * If no fragment is specified, the entire DID document is returned.\n   *\n   * This method supports resolution of different components within a DID document such as service\n   * endpoints and verification methods, based on their IDs. It accommodates both full and\n   * DID URLs as specified in the DID Core specification.\n   *\n   * More information on DID URL dereferencing can be found in the\n   * {@link https://www.w3.org/TR/did-core/#did-url-dereferencing | DID Core specification}.\n   *\n   * TODO: This is a partial implementation and does not fully implement DID URL dereferencing. (https://github.com/TBD54566975/web5-js/issues/387)\n   *\n   * @param didUrl - The DID URL string to dereference.\n   * @param [_options] - Input options to the dereference function. Optional.\n   * @returns a {@link DidDereferencingResult}\n   */\n  async dereference(\n    didUrl: string,\n    _options?: DidDereferencingOptions\n  ): Promise<DidDereferencingResult> {\n\n    // Validate the given `didUrl` confirms to the DID URL syntax.\n    const parsedDidUrl = Did.parse(didUrl);\n\n    if (!parsedDidUrl) {\n      return {\n        dereferencingMetadata : { error: DidErrorCode.InvalidDidUrl },\n        contentStream         : null,\n        contentMetadata       : {}\n      };\n    }\n\n    // Obtain the DID document for the input DID by executing DID resolution.\n    const { didDocument, didResolutionMetadata, didDocumentMetadata } = await this.resolve(parsedDidUrl.uri);\n\n    if (!didDocument) {\n      return {\n        dereferencingMetadata : { error: didResolutionMetadata.error },\n        contentStream         : null,\n        contentMetadata       : {}\n      };\n    }\n\n    // Return the entire DID Document if no query or fragment is present on the DID URL.\n    if (!parsedDidUrl.fragment || parsedDidUrl.query) {\n      return {\n        dereferencingMetadata : { contentType: 'application/did+json' },\n        contentStream         : didDocument,\n        contentMetadata       : didDocumentMetadata\n      };\n    }\n\n    const { service = [], verificationMethod = [] } = didDocument;\n\n    // Create a set of possible id matches. The DID spec allows for an id to be the entire\n    // did#fragment or just #fragment.\n    // @see {@link }https://www.w3.org/TR/did-core/#relative-did-urls | Section 3.2.2, Relative DID URLs}.\n    // Using a Set for fast string comparison since some DID methods have long identifiers.\n    const idSet = new Set([didUrl, parsedDidUrl.fragment, `#${parsedDidUrl.fragment}`]);\n\n    let didResource: DidResource | undefined;\n\n    // Find the first matching verification method in the DID document.\n    for (let vm of verificationMethod) {\n      if (idSet.has(vm.id)) {\n        didResource = vm;\n        break;\n      }\n    }\n\n    // Find the first matching service in the DID document.\n    for (let svc of service) {\n      if (idSet.has(svc.id)) {\n        didResource = svc;\n        break;\n      }\n    }\n\n    if (didResource) {\n      return {\n        dereferencingMetadata : { contentType: 'application/did+json' },\n        contentStream         : didResource,\n        contentMetadata       : didResolutionMetadata\n      };\n    } else {\n      return {\n        dereferencingMetadata : { error: DidErrorCode.NotFound },\n        contentStream         : null,\n        contentMetadata       : {},\n      };\n    }\n  }\n}", "import {\n  TypeID,\n  typeid\n} from \"./chunk-FOHWUNKU.mjs\";\nimport \"./chunk-4WQUCFGE.mjs\";\nimport \"./chunk-5QL2QZCM.mjs\";\nimport \"./chunk-R5Q6Z3GN.mjs\";\nexport {\n  TypeID,\n  typeid\n};\n//# sourceMappingURL=index.mjs.map", "/* eslint-disable no-bitwise */\nconst alphabet: string = \"0123456789abcdefghjkmnpqrstvwxyz\";\n\n// Decoding table\nconst dec: Uint8Array = new Uint8Array([\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,\n  0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,\n  0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,\n  0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,\n  0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n]);\n\nexport function encode(src: Uint8Array): string {\n  const dst: string[] = new Array(26).fill(\"\");\n\n  if (src.length !== 16) {\n    throw new Error(\"Invalid length\");\n  }\n\n  // 10 byte timestamp\n  dst[0] = alphabet[(src[0] & 224) >> 5];\n  dst[1] = alphabet[src[0] & 31];\n  dst[2] = alphabet[(src[1] & 248) >> 3];\n  dst[3] = alphabet[((src[1] & 7) << 2) | ((src[2] & 192) >> 6)];\n  dst[4] = alphabet[(src[2] & 62) >> 1];\n  dst[5] = alphabet[((src[2] & 1) << 4) | ((src[3] & 240) >> 4)];\n  dst[6] = alphabet[((src[3] & 15) << 1) | ((src[4] & 128) >> 7)];\n  dst[7] = alphabet[(src[4] & 124) >> 2];\n  dst[8] = alphabet[((src[4] & 3) << 3) | ((src[5] & 224) >> 5)];\n  dst[9] = alphabet[src[5] & 31];\n\n  // 16 bytes of randomness\n  dst[10] = alphabet[(src[6] & 248) >> 3];\n  dst[11] = alphabet[((src[6] & 7) << 2) | ((src[7] & 192) >> 6)];\n  dst[12] = alphabet[(src[7] & 62) >> 1];\n  dst[13] = alphabet[((src[7] & 1) << 4) | ((src[8] & 240) >> 4)];\n  dst[14] = alphabet[((src[8] & 15) << 1) | ((src[9] & 128) >> 7)];\n  dst[15] = alphabet[(src[9] & 124) >> 2];\n  dst[16] = alphabet[((src[9] & 3) << 3) | ((src[10] & 224) >> 5)];\n  dst[17] = alphabet[src[10] & 31];\n  dst[18] = alphabet[(src[11] & 248) >> 3];\n  dst[19] = alphabet[((src[11] & 7) << 2) | ((src[12] & 192) >> 6)];\n  dst[20] = alphabet[(src[12] & 62) >> 1];\n  dst[21] = alphabet[((src[12] & 1) << 4) | ((src[13] & 240) >> 4)];\n  dst[22] = alphabet[((src[13] & 15) << 1) | ((src[14] & 128) >> 7)];\n  dst[23] = alphabet[(src[14] & 124) >> 2];\n  dst[24] = alphabet[((src[14] & 3) << 3) | ((src[15] & 224) >> 5)];\n  dst[25] = alphabet[src[15] & 31];\n\n  return dst.join(\"\");\n}\n\nexport function decode(s: string): Uint8Array {\n  if (s.length !== 26) {\n    throw new Error(\"Invalid length\");\n  }\n\n  const encoder = new TextEncoder();\n  const v: Uint8Array = encoder.encode(s);\n\n  // Check if all the characters are part of the expected base32 character set.\n  if (\n    dec[v[0]] === 0xFF ||\n    dec[v[1]] === 0xFF ||\n    dec[v[2]] === 0xFF ||\n    dec[v[3]] === 0xFF ||\n    dec[v[4]] === 0xFF ||\n    dec[v[5]] === 0xFF ||\n    dec[v[6]] === 0xFF ||\n    dec[v[7]] === 0xFF ||\n    dec[v[8]] === 0xFF ||\n    dec[v[9]] === 0xFF ||\n    dec[v[10]] === 0xFF ||\n    dec[v[11]] === 0xFF ||\n    dec[v[12]] === 0xFF ||\n    dec[v[13]] === 0xFF ||\n    dec[v[14]] === 0xFF ||\n    dec[v[15]] === 0xFF ||\n    dec[v[16]] === 0xFF ||\n    dec[v[17]] === 0xFF ||\n    dec[v[18]] === 0xFF ||\n    dec[v[19]] === 0xFF ||\n    dec[v[20]] === 0xFF ||\n    dec[v[21]] === 0xFF ||\n    dec[v[22]] === 0xFF ||\n    dec[v[23]] === 0xFF ||\n    dec[v[24]] === 0xFF ||\n    dec[v[25]] === 0xFF) {\n    throw new Error(\"Invalid base32 character\");\n  }\n\n  const id = new Uint8Array(16);\n\n  // 6 bytes timestamp (48 bits)\n  id[0] = (dec[v[0]] << 5) | dec[v[1]];\n  id[1] = (dec[v[2]] << 3) | (dec[v[3]] >> 2);\n  id[2] = ((dec[v[3]] & 3) << 6) | (dec[v[4]] << 1) | (dec[v[5]] >> 4);\n  id[3] = ((dec[v[5]] & 15) << 4) | (dec[v[6]] >> 1);\n  id[4] = ((dec[v[6]] & 1) << 7) | (dec[v[7]] << 2) | (dec[v[8]] >> 3);\n  id[5] = ((dec[v[8]] & 7) << 5) | dec[v[9]];\n\n  // 10 bytes of entropy (80 bits)\n  id[6] = (dec[v[10]] << 3) | (dec[v[11]] >> 2);\n  id[7] = ((dec[v[11]] & 3) << 6) | (dec[v[12]] << 1) | (dec[v[13]] >> 4);\n  id[8] = ((dec[v[13]] & 15) << 4) | (dec[v[14]] >> 1);\n  id[9] = ((dec[v[14]] & 1) << 7) | (dec[v[15]] << 2) | (dec[v[16]] >> 3);\n  id[10] = ((dec[v[16]] & 7) << 5) | dec[v[17]];\n  id[11] = (dec[v[18]] << 3) | (dec[v[19]] >> 2);\n  id[12] = ((dec[v[19]] & 3) << 6) | (dec[v[20]] << 1) | (dec[v[21]] >> 4);\n  id[13] = ((dec[v[21]] & 15) << 4) | (dec[v[22]] >> 1);\n  id[14] = ((dec[v[22]] & 1) << 7) | (dec[v[23]] << 2) | (dec[v[24]] >> 3);\n  id[15] = ((dec[v[24]] & 7) << 5) | dec[v[25]];\n\n  return id;\n}", "/* eslint-disable no-bitwise */\nexport function parseUUID(uuid: string) {\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Block 1\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = (v >>> 16) & 0xff;\n  arr[2] = (v >>> 8) & 0xff;\n  arr[3] = v & 0xff;\n\n  // Block 2\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Block 3\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Block 4\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Block 5\n  arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff;\n  arr[11] = (v / 0x100000000) & 0xff;\n  arr[12] = (v >>> 24) & 0xff;\n  arr[13] = (v >>> 16) & 0xff;\n  arr[14] = (v >>> 8) & 0xff;\n  arr[15] = v & 0xff;\n\n  return arr;\n}", "var __pow = Math.pow;\n\nexport {\n  __pow\n};\n//# sourceMappingURL=chunk-R5Q6Z3GN.mjs.map", "/**\n * uuidv7: An experimental implementation of the proposed UUID Version 7\n *\n * @license Apache-2.0\n * @copyright 2021-2023 LiosK\n * @packageDocumentation\n */\nconst DIGITS = \"0123456789abcdef\";\n/** Represents a UUID as a 16-byte byte array. */\nexport class UUID {\n    /** @param bytes - The 16-byte byte array representation. */\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.length !== 16) {\n            throw new TypeError(\"not 128-bit length\");\n        }\n    }\n    /**\n     * Builds a byte array from UUIDv7 field values.\n     *\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\n     * @param randA - A 12-bit `rand_a` field value.\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\n     */\n    static fromFieldsV7(unixTsMs, randA, randBHi, randBLo) {\n        if (!Number.isInteger(unixTsMs) ||\n            !Number.isInteger(randA) ||\n            !Number.isInteger(randBHi) ||\n            !Number.isInteger(randBLo) ||\n            unixTsMs < 0 ||\n            randA < 0 ||\n            randBHi < 0 ||\n            randBLo < 0 ||\n            unixTsMs > 281474976710655 ||\n            randA > 0xfff ||\n            randBHi > 1073741823 ||\n            randBLo > 4294967295) {\n            throw new RangeError(\"invalid field value\");\n        }\n        const bytes = new Uint8Array(16);\n        bytes[0] = unixTsMs / 2 ** 40;\n        bytes[1] = unixTsMs / 2 ** 32;\n        bytes[2] = unixTsMs / 2 ** 24;\n        bytes[3] = unixTsMs / 2 ** 16;\n        bytes[4] = unixTsMs / 2 ** 8;\n        bytes[5] = unixTsMs;\n        bytes[6] = 0x70 | (randA >>> 8);\n        bytes[7] = randA;\n        bytes[8] = 0x80 | (randBHi >>> 24);\n        bytes[9] = randBHi >>> 16;\n        bytes[10] = randBHi >>> 8;\n        bytes[11] = randBHi;\n        bytes[12] = randBLo >>> 24;\n        bytes[13] = randBLo >>> 16;\n        bytes[14] = randBLo >>> 8;\n        bytes[15] = randBLo;\n        return new UUID(bytes);\n    }\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\n    toString() {\n        let text = \"\";\n        for (let i = 0; i < this.bytes.length; i++) {\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\n                text += \"-\";\n            }\n        }\n        return text;\n    }\n    /** Creates an object from `this`. */\n    clone() {\n        return new UUID(this.bytes.slice(0));\n    }\n    /** Returns true if `this` is equivalent to `other`. */\n    equals(other) {\n        return this.compareTo(other) === 0;\n    }\n    /**\n     * Returns a negative integer, zero, or positive integer if `this` is less\n     * than, equal to, or greater than `other`, respectively.\n     */\n    compareTo(other) {\n        for (let i = 0; i < 16; i++) {\n            const diff = this.bytes[i] - other.bytes[i];\n            if (diff !== 0) {\n                return Math.sign(diff);\n            }\n        }\n        return 0;\n    }\n}\n/** Encapsulates the monotonic counter state. */\nclass V7Generator {\n    constructor() {\n        this.timestamp = 0;\n        this.counter = 0;\n        this.random = new DefaultRandom();\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method resets the generator and returns a new\n     * UUID based on the current timestamp.\n     */\n    generate() {\n        const value = this.generateOrAbort();\n        if (value !== undefined) {\n            return value;\n        }\n        else {\n            // reset state and resume\n            this.timestamp = 0;\n            return this.generateOrAbort();\n        }\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method aborts and returns `undefined`.\n     */\n    generateOrAbort() {\n        const MAX_COUNTER = 4398046511103;\n        const ROLLBACK_ALLOWANCE = 10000; // 10 seconds\n        const ts = Date.now();\n        if (ts > this.timestamp) {\n            this.timestamp = ts;\n            this.resetCounter();\n        }\n        else if (ts + ROLLBACK_ALLOWANCE > this.timestamp) {\n            // go on with previous timestamp if new one is not much smaller\n            this.counter++;\n            if (this.counter > MAX_COUNTER) {\n                // increment timestamp at counter overflow\n                this.timestamp++;\n                this.resetCounter();\n            }\n        }\n        else {\n            // abort if clock went backwards to unbearable extent\n            return undefined;\n        }\n        return UUID.fromFieldsV7(this.timestamp, Math.trunc(this.counter / 2 ** 30), this.counter & (2 ** 30 - 1), this.random.nextUint32());\n    }\n    /** Initializes the counter at a 42-bit random integer. */\n    resetCounter() {\n        this.counter =\n            this.random.nextUint32() * 0x400 + (this.random.nextUint32() & 0x3ff);\n    }\n}\n/** Stores `crypto.getRandomValues()` available in the environment. */\nlet getRandomValues = (buffer) => {\n    // fall back on Math.random() unless the flag is set to true\n    if (typeof UUIDV7_DENY_WEAK_RNG !== \"undefined\" && UUIDV7_DENY_WEAK_RNG) {\n        throw new Error(\"no cryptographically strong RNG available\");\n    }\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] =\n            Math.trunc(Math.random() * 65536) * 65536 +\n                Math.trunc(Math.random() * 65536);\n    }\n    return buffer;\n};\n// detect Web Crypto API\nif (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\n    getRandomValues = (buffer) => crypto.getRandomValues(buffer);\n}\n/**\n * Wraps `crypto.getRandomValues()` and compatibles to enable buffering; this\n * uses a small buffer by default to avoid unbearable throughput decline in some\n * environments as well as the waste of time and space for unused values.\n */\nclass DefaultRandom {\n    constructor() {\n        this.buffer = new Uint32Array(8);\n        this.cursor = 99;\n    }\n    nextUint32() {\n        if (this.cursor >= this.buffer.length) {\n            getRandomValues(this.buffer);\n            this.cursor = 0;\n        }\n        return this.buffer[this.cursor++];\n    }\n}\nlet defaultGenerator;\n/**\n * Generates a UUIDv7 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv7 = () => uuidv7obj().toString();\n/** Generates a UUIDv7 object. */\nexport const uuidv7obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generate();\n/**\n * Generates a UUIDv4 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv4 = () => uuidv4obj().toString();\n/** Generates a UUIDv4 object. */\nexport const uuidv4obj = () => {\n    const bytes = getRandomValues(new Uint8Array(16));\n    bytes[6] = 0x40 | (bytes[6] >>> 4);\n    bytes[8] = 0x80 | (bytes[8] >>> 2);\n    return new UUID(bytes);\n};\n", "import { uuidv7obj, UUID } from \"uuidv7\";\nimport { parseUUID } from \"./parse_uuid\";\nimport { encode, decode } from \"./base32\";\n\nfunction isValidPrefix(str: string): boolean {\n  if (str.length > 63) {\n    return false;\n  }\n\n  let code; let i; let len;\n\n  for (i = 0, len = str.length; i < len; i += 1) {\n    code = str.charCodeAt(i);\n    if (!(code > 96 && code < 123)) { // lower alpha (a-z)\n      return false;\n    }\n  }\n  return true;\n};\n\nexport class TypeID<const T extends string> {\n  constructor(private prefix: T, private suffix: string = \"\") {\n    if (!isValidPrefix(prefix)) {\n      throw new Error(\"Invalid prefix. Must be at most 63 ascii letters [a-z]\");\n    }\n    this.prefix = prefix;\n\n    if (suffix) {\n      this.suffix = suffix;\n    } else {\n      const uuid = uuidv7obj();\n      this.suffix = encode(uuid.bytes);\n    }\n\n    if (this.suffix.length !== 26) {\n      throw new Error(`Invalid length. Suffix should have 26 characters, got ${suffix.length}`);\n    }\n\n    if (this.suffix[0] > \"7\") {\n      throw new Error(\"Invalid suffix. First character must be in the range [0-7]\");\n    }\n\n    // Validate the suffix by decoding it. If it's invalid, an error will be thrown.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const unused = decode(this.suffix);\n  }\n\n  public getType(): T {\n    return this.prefix;\n  }\n\n  public getSuffix(): string {\n    return this.suffix;\n  }\n\n  public asType<const U extends string>(prefix: U): TypeID<U> {\n    const self = this as unknown as TypeID<U>;\n    if (self.prefix !== prefix) {\n      throw new Error(`Cannot convert TypeID of type ${self.prefix} to type ${prefix}`);\n    }\n    return self;\n  }\n\n  public toUUIDBytes(): Uint8Array {\n    return decode(this.suffix);\n  }\n\n  public toUUID(): string {\n    const uuid = new UUID(this.toUUIDBytes());\n    return uuid.toString();\n  }\n\n  public toString(): string {\n    if (this.prefix === \"\") {\n      return this.suffix;\n    }\n    return `${this.prefix}_${this.suffix}`;\n  }\n\n  static fromString<const T extends string>(str: string): TypeID<T> {\n    const parts = str.split(\"_\");\n    if (parts.length === 1) {\n      return new TypeID<T>(\"\" as T, parts[0]);\n    }\n    if (parts.length === 2) {\n      if (parts[0] === \"\") {\n        throw new Error(`Invalid TypeID. Prefix cannot be empty when there's a separator: ${str}`);\n      }\n      return new TypeID<T>(parts[0] as T, parts[1]);\n    }\n    throw new Error(`Invalid TypeID string: ${str}`);\n  }\n\n  static fromUUIDBytes<const T extends string>(prefix: T, bytes: Uint8Array): TypeID<T> {\n    const suffix = encode(bytes);\n    return new TypeID(prefix, suffix);\n  }\n\n  static fromUUID<const T extends string>(prefix: T, uuid: string): TypeID<T> {\n    const suffix = encode(parseUUID(uuid));\n    return new TypeID(prefix, suffix);\n  }\n}\n\nexport function typeid<T extends string>(): TypeID<''>;\nexport function typeid<T extends string>(prefix: T): TypeID<T>;\nexport function typeid<T extends string>(prefix: T, suffix: string): TypeID<T>;\nexport function typeid<T extends string>(prefix: T = \"\" as T, suffix: string = \"\"): TypeID<T> {\n  return new TypeID(prefix, suffix);\n}\n", "export * from './jwt.js';\nexport * from './presentation-exchange.js';\nexport * from './verifiable-credential.js';\nexport * from './verifiable-presentation.js';\nexport * as utils from './utils.js';", "import { BearerDid } from '@web5/dids';\nimport type {\n  JwtPayload,\n  JwtHeaderParams,\n  JwkParamsEcPublic,\n  JwkParamsOkpPublic,\n} from '@web5/crypto';\n\nimport { Convert } from '@web5/common';\nimport { LocalKeyManager as CryptoApi  } from '@web5/crypto';\nimport { DidDht, DidIon, DidKey, DidJwk, DidWeb, UniversalResolver, utils as didUtils } from '@web5/dids';\n\nconst crypto = new CryptoApi();\n\n/**\n * Represents the result of parsing a JWT (JSON Web Token).\n */\nexport type JwtParseResult = {\n  /**\n   * The decoded part of the JWT, which includes the verified results.\n   * This contains the JWT's payload and other data that has been\n   * validated against the JWT's signature to ensure its integrity and authenticity.\n   */\n  decoded: JwtVerifyResult\n\n  /**\n   * The encoded components of the JWT, including the header, payload,\n   * and signature, each as a separate string. These are the raw, encoded\n   * parts of the JWT as they were received or transmitted.\n   */\n  encoded: {\n    /** The encoded header of the JWT. */\n    header: string,\n    /** The encoded payload of the JWT. */\n    payload: string,\n    /** The encoded signature of the JWT. */\n    signature: string,\n  }\n}\n\n/**\n * Result of verifying a JWT.\n */\nexport interface JwtVerifyResult {\n  /** JWT Protected Header */\n  header: JwtHeaderParams;\n\n  /** JWT Claims Set */\n  payload: JwtPayload;\n}\n\n/**\n * Parameters for parsing a JWT.\n * used in {@link Jwt.parse}\n */\nexport type ParseJwtOptions = {\n  /** The JWT string to parse. */\n  jwt: string\n}\n\n/**\n * Parameters for signing a JWT.\n */\nexport type SignJwtOptions = {\n  /** The DID of the signer. */\n  signerDid: BearerDid\n  /** The payload to sign. */\n  payload: JwtPayload\n}\n\n/**\n * Parameters for verifying a JWT.\n */\nexport type VerifyJwtOptions = {\n  /** The JWT string to verify. */\n  jwt: string\n}\n\n/**\n * Class for handling Compact JSON Web Tokens (JWTs).\n * This class provides methods to create, verify, and decode JWTs using various cryptographic algorithms.\n * More information on JWTs can be found [here](https://datatracker.ietf.org/doc/html/rfc7519)\n */\nexport class Jwt {\n  /**\n   * DID Resolver instance for resolving decentralized identifiers.\n   */\n  static didResolver: UniversalResolver = new UniversalResolver({ didResolvers: [DidDht, DidIon, DidKey, DidJwk, DidWeb] });\n\n  /**\n   * Creates a signed JWT.\n   *\n   * @example\n   * ```ts\n   * const jwt = await Jwt.sign({ signerDid: myDid, payload: myPayload });\n   * ```\n   *\n   * @param options - Parameters for JWT creation including signer DID and payload.\n   * @returns The compact JWT as a string.\n   */\n  static async sign(options: SignJwtOptions): Promise<string> {\n    const { signerDid, payload } = options;\n    const signer = await signerDid.getSigner();\n\n    let vmId = signer.keyId;\n    if (vmId.charAt(0) === '#') {\n      vmId = `${signerDid.uri}${vmId}`;\n    }\n\n    const header: JwtHeaderParams = {\n      typ : 'JWT',\n      alg : signer.algorithm,\n      kid : vmId,\n    };\n\n    const base64UrlEncodedHeader = Convert.object(header).toBase64Url();\n    const base64UrlEncodedPayload = Convert.object(payload).toBase64Url();\n\n    const toSign = `${base64UrlEncodedHeader}.${base64UrlEncodedPayload}`;\n    const toSignBytes = Convert.string(toSign).toUint8Array();\n\n    const signatureBytes = await signer.sign({ data: toSignBytes });\n\n    const base64UrlEncodedSignature = Convert.uint8Array(signatureBytes).toBase64Url();\n\n    return `${toSign}.${base64UrlEncodedSignature}`;\n  }\n\n  /**\n   * Verifies a JWT.\n   *\n   * @example\n   * ```ts\n   * const verifiedJwt = await Jwt.verify({ jwt: myJwt });\n   * ```\n   *\n   * @param options - Parameters for JWT verification\n   * @returns Verified JWT information including signer DID, header, and payload.\n   */\n  static async verify(options: VerifyJwtOptions): Promise<JwtVerifyResult> {\n    const { decoded: decodedJwt, encoded: encodedJwt } = Jwt.parse({ jwt: options.jwt });\n\n    if (decodedJwt.payload.exp && Math.floor(Date.now() / 1000) > decodedJwt.payload.exp) {\n      throw new Error(`Verification failed: JWT is expired`);\n    }\n\n    // TODO: should really be looking for verificationMethod with authentication verification relationship\n    const dereferenceResult = await Jwt.didResolver.dereference(decodedJwt.header.kid!);\n    if (dereferenceResult.dereferencingMetadata.error) {\n      throw new Error(`Failed to resolve ${decodedJwt.header.kid}`);\n    }\n\n    const verificationMethod = dereferenceResult.contentStream;\n    if (!verificationMethod || !didUtils.isDidVerificationMethod(verificationMethod)) { // ensure that appropriate verification method was found\n      throw new Error('Verification failed: Expected kid in JWT header to dereference a DID Document Verification Method');\n    }\n\n    // will be used to verify signature\n    const publicKeyJwk = verificationMethod.publicKeyJwk as JwkParamsEcPublic | JwkParamsOkpPublic;\n    if (!publicKeyJwk) { // ensure that Verification Method includes public key as a JWK.\n      throw new Error('Verification failed: Expected kid in JWT header to dereference to a DID Document Verification Method with publicKeyJwk');\n    }\n\n    if(publicKeyJwk.alg && (publicKeyJwk.alg !== decodedJwt.header.alg)) {\n      throw new Error('Verification failed: Expected alg in JWT header to match DID Document Verification Method alg');\n    }\n\n    const signedData = `${encodedJwt.header}.${encodedJwt.payload}`;\n    const signedDataBytes = Convert.string(signedData).toUint8Array();\n\n    const signatureBytes = Convert.base64Url(encodedJwt.signature).toUint8Array();\n\n    const isSignatureValid = await crypto.verify({\n      key       : publicKeyJwk,\n      signature : signatureBytes,\n      data      : signedDataBytes,\n    });\n\n    if (!isSignatureValid) {\n      throw new Error('Signature verification failed: Integrity mismatch');\n    }\n\n    return decodedJwt;\n  }\n\n  /**\n   * Parses a JWT without verifying its signature.\n   *\n   * @example\n   * ```ts\n   * const { encoded: encodedJwt, decoded: decodedJwt } = Jwt.parse({ jwt: myJwt });\n   * ```\n   *\n   * @param options - Parameters for JWT decoding, including the JWT string.\n   * @returns both encoded and decoded JWT parts\n   */\n  static parse(options: ParseJwtOptions): JwtParseResult {\n    const splitJwt = options.jwt.split('.');\n    if (splitJwt.length !== 3) {\n      throw new Error(`Verification failed: Malformed JWT. expected 3 parts. got ${splitJwt.length}`);\n    }\n\n    const [base64urlEncodedJwtHeader, base64urlEncodedJwtPayload, base64urlEncodedSignature] = splitJwt;\n    let jwtHeader: JwtHeaderParams;\n    let jwtPayload: JwtPayload;\n\n    try {\n      jwtHeader = Convert.base64Url(base64urlEncodedJwtHeader).toObject() as JwtHeaderParams;\n    } catch(e) {\n      throw new Error('Verification failed: Malformed JWT. Invalid base64url encoding for JWT header');\n    }\n\n    if (!jwtHeader.typ || jwtHeader.typ !== 'JWT') {\n      throw new Error('Verification failed: Expected JWT header to contain typ property set to JWT');\n    }\n\n    if (!jwtHeader.alg || !jwtHeader.kid) { // ensure that JWT header has required properties\n      throw new Error('Verification failed: Expected JWT header to contain alg and kid');\n    }\n\n    // TODO: validate optional payload fields: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\n    try {\n      jwtPayload = Convert.base64Url(base64urlEncodedJwtPayload).toObject() as JwtPayload;\n    } catch(e) {\n      throw new Error('Verification failed: Malformed JWT. Invalid base64url encoding for JWT payload');\n    }\n\n    return {\n      decoded: {\n        header  : jwtHeader,\n        payload : jwtPayload,\n      },\n      encoded: {\n        header    : base64urlEncodedJwtHeader,\n        payload   : base64urlEncodedJwtPayload,\n        signature : base64urlEncodedSignature\n      }\n    };\n  }\n}", "import type { IPresentation, PresentationSubmission } from '@sphereon/ssi-types';\nimport type { PresentationDefinitionV2 as PexPresDefV2 } from '@sphereon/pex-models';\nimport type {\n  SelectResults,\n  EvaluationResults,\n  PresentationResult,\n  Validated as PexValidated,\n} from '@sphereon/pex';\n\nimport { PEX } from '@sphereon/pex';\n\n/** The Presentation Definition V2 as defined in the PEX models. */\nexport interface PresentationDefinitionV2 extends PexPresDefV2 { }\n\n/** The validated object as defined in the PEX models. */\nexport type Validated = PexValidated;\n\n/**\n * The Presentation Exchange (PEX) Library implements the functionality described in the DIF Presentation Exchange specification\n */\nexport class PresentationExchange {\n  /** The Presentation Exchange (PEX) instance. */\n  private static pex: PEX = new PEX();\n\n  /**\n   * Selects credentials that satisfy a given presentation definition.\n   *\n   * @param params - The parameters for the credential selection.\n   * @param params.vcJwts  The list of Verifiable Credentials to select from.\n   * @param params.presentationDefinition The Presentation Definition to match against.\n   * @returns {string[]} selectedVcJwts A list of Verifiable Credentials that satisfy the Presentation Definition.\n   */\n\n  public static selectCredentials({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): string[] {\n    this.resetPex();\n    const selectResults: SelectResults = this.pex.selectFrom(presentationDefinition, vcJwts);\n\n    // If errors exist in the results object the credentials provided didn't satisfy the requirements in the Presentation Definition\n    if(selectResults.errors?.length !== 0) {\n      return [];\n    }\n\n    return Array.from(new Set(selectResults.verifiableCredential as string[] ?? []));\n  }\n\n  /**\n   * Validates if a list of VC JWTs satisfies the given presentation definition.\n   *\n   * @param params - The parameters for the satisfaction check.\n   * @param params.vcJwts - An array of VC JWTs as strings.\n   * @param params.presentationDefinition - The criteria to validate against.\n   * @throws Error if the evaluation results in warnings or errors.\n   */\n  public static satisfiesPresentationDefinition({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): void {\n    this.resetPex();\n    const evaluationResults: EvaluationResults = this.pex.evaluateCredentials(presentationDefinition, vcJwts);\n    if (evaluationResults.warnings?.length) {\n      console.warn('Warnings were generated during the evaluation process: ' + JSON.stringify(evaluationResults.warnings));\n    }\n\n    if (evaluationResults.areRequiredCredentialsPresent.toString() !== 'info' || evaluationResults.errors?.length) {\n      let errorMessage = 'Failed to create Verifiable Presentation JWT due to: ';\n      if(evaluationResults.areRequiredCredentialsPresent) {\n        errorMessage += 'Required Credentials Not Present: ' + JSON.stringify(evaluationResults.areRequiredCredentialsPresent);\n      }\n\n      if (evaluationResults.errors?.length) {\n        errorMessage += 'Errors: ' + JSON.stringify(evaluationResults.errors);\n      }\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Creates a presentation from a list of Verifiable Credentials that satisfy a given presentation definition.\n   * This function initializes the Presentation Exchange (PEX) process, validates the presentation definition,\n   * evaluates the credentials against the definition, and finally constructs the presentation result if the\n   * evaluation is successful.\n   *\n   * @param params - The parameters for the presentation creation.\n   * @param params.vcJwts The list of Verifiable Credentials (VCs) in JWT format to be evaluated.\n   * @param params.presentationDefinition The Presentation Definition V2 to match the VCs against.\n   * @returns {PresentationResult} The result of the presentation creation process, containing a presentation submission\n   *                               that satisfies the presentation definition criteria.\n   * @throws {Error} If the evaluation results in warnings or errors, or if the required credentials are not present,\n   *                 an error is thrown with a descriptive message.\n   */\n  public static createPresentationFromCredentials({ vcJwts, presentationDefinition }: {\n    vcJwts: string[],\n    presentationDefinition: PresentationDefinitionV2\n  }): PresentationResult {\n    this.resetPex();\n\n    const pdValidated: Validated = PEX.validateDefinition(presentationDefinition);\n    isValid(pdValidated);\n\n    const evaluationResults: EvaluationResults = this.pex.evaluateCredentials(presentationDefinition, vcJwts);\n\n    if (evaluationResults.warnings?.length) {\n      console.warn('Warnings were generated during the evaluation process: ' + JSON.stringify(evaluationResults.warnings));\n    }\n\n    if (evaluationResults.areRequiredCredentialsPresent.toString() !== 'info' || evaluationResults.errors?.length) {\n      let errorMessage = 'Failed to create Verifiable Presentation JWT due to: ';\n      if(evaluationResults.areRequiredCredentialsPresent) {\n        errorMessage += 'Required Credentials Not Present: ' + JSON.stringify(evaluationResults.areRequiredCredentialsPresent);\n      }\n\n      if (evaluationResults.errors?.length) {\n        errorMessage += 'Errors: ' + JSON.stringify(evaluationResults.errors);\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    const presentationResult: PresentationResult = this.pex.presentationFrom(presentationDefinition, vcJwts);\n\n    const submissionValidated: Validated = PEX.validateSubmission(presentationResult.presentationSubmission);\n    isValid(submissionValidated);\n\n    return presentationResult;\n  }\n\n  /**\n   * This method validates whether an object is usable as a presentation definition or not.\n   *\n   * @param {PresentationDefinitionV2} presentationDefinition: presentationDefinition to be validated.\n   * @returns {Validated} the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation definition\n   */\n  public static validateDefinition({ presentationDefinition }: {\n    presentationDefinition: PresentationDefinitionV2\n  }): Validated {\n    return PEX.validateDefinition(presentationDefinition);\n  }\n\n  /**\n   * This method validates whether an object is usable as a presentation submission or not.\n   *\n   * @param {PresentationSubmission} presentationSubmission the object to be validated.\n   * @returns {Validated} the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation submission\n   */\n  public static validateSubmission({ presentationSubmission }: {\n    presentationSubmission: PresentationSubmission\n  }): Validated {\n    return PEX.validateSubmission(presentationSubmission);\n  }\n\n  /**\n   * Evaluates a presentation against a presentation definition.\n   *\n   * @returns {EvaluationResults} The result of the evaluation process.\n   */\n  public static evaluatePresentation({ presentationDefinition, presentation }: {\n    presentationDefinition: PresentationDefinitionV2,\n    presentation: IPresentation\n  }): EvaluationResults {\n    this.resetPex();\n    return this.pex.evaluatePresentation(presentationDefinition, presentation);\n  }\n\n  /** Resets the PEX instance. */\n  private static resetPex() {\n    this.pex = new PEX();\n  }\n}\n\nfunction isValid(validated: Validated) {\n  let errorMessage = 'Failed to pass validation check due to: ';\n  if (Array.isArray(validated)) {\n    if (!validated.every(item => item.status === 'info')) {\n      errorMessage += 'Validation Errors: ' + JSON.stringify(validated);\n      throw new Error(errorMessage);\n    }\n  } else {\n    if (validated.status !== 'info') {\n      errorMessage += 'Validation Errors: ' + JSON.stringify(validated);\n      throw new Error(errorMessage);\n    }\n  }\n}", "import type {\n  ICredentialContextType,\n  ICredentialSubject\n} from '@sphereon/ssi-types';\n\nimport {\n  DEFAULT_VC_CONTEXT,\n  DEFAULT_VC_TYPE,\n  VerifiableCredential\n} from './verifiable-credential.js';\n\nimport { isValidRFC3339Timestamp, isValidXmlSchema112Timestamp } from './utils.js';\nimport { DEFAULT_VP_TYPE } from './verifiable-presentation.js';\n\nexport class SsiValidator {\n  static validateCredentialPayload(vc: VerifiableCredential): void {\n    this.validateContext(vc.vcDataModel['@context']);\n    this.validateVcType(vc.type);\n    this.validateCredentialSubject(vc.vcDataModel.credentialSubject);\n    if (vc.vcDataModel.issuanceDate) this.validateTimestamp(vc.vcDataModel.issuanceDate);\n    if (vc.vcDataModel.expirationDate) this.validateTimestamp(vc.vcDataModel.expirationDate);\n  }\n\n  static validateContext(value: ICredentialContextType | ICredentialContextType[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VC_CONTEXT) === -1) {\n      throw new Error(`@context is missing default context \"${DEFAULT_VC_CONTEXT}\"`);\n    }\n  }\n\n  static validateVcType(value: string | string[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VC_TYPE) === -1) {\n      throw new Error(`type is missing default \"${DEFAULT_VC_TYPE}\"`);\n    }\n  }\n\n  static validateVpType(value: string | string[]): void {\n    const input = this.asArray(value);\n    if (input.length < 1 || input.indexOf(DEFAULT_VP_TYPE) === -1) {\n      throw new Error(`type is missing default \"${DEFAULT_VP_TYPE}\"`);\n    }\n  }\n\n  static validateCredentialSubject(value: ICredentialSubject | ICredentialSubject[]): void {\n    if (Object.keys(value).length === 0) {\n      throw new Error(`credentialSubject must not be empty`);\n    }\n  }\n\n  static validateTimestamp(timestamp: string) {\n    if(!isValidXmlSchema112Timestamp(timestamp) && !isValidRFC3339Timestamp(timestamp)){\n      throw new Error(`timestamp is not valid xml schema 112 timestamp`);\n    }\n  }\n\n  static asArray(arg: any | any[]): any[] {\n    return Array.isArray(arg) ? arg : [arg];\n  }\n}", "/**\n * Retrieves the current timestamp in XML Schema 1.1.2 date-time format.\n *\n * This function omits the milliseconds part from the ISO 8601 timestamp, returning a date-time\n * string in the format \"yyyy-MM-ddTHH:mm:ssZ\".\n *\n * @example\n * ```ts\n * const currentTimestamp = getCurrentXmlSchema112Timestamp(); // \"2023-08-23T12:34:56Z\"\n * ```\n *\n * @returns The current timestamp in XML Schema 1.1.2 format.\n */\nexport function getCurrentXmlSchema112Timestamp(): string {\n  // Omit the milliseconds part from toISOString() output\n  return new Date().toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Converts a UNIX timestamp to an XML Schema 1.1.2 compliant date-time string, omitting milliseconds.\n *\n * This function takes a UNIX timestamp (number of seconds since the UNIX epoch) as input and converts it\n * to a date-time string formatted according to XML Schema 1.1.2 specifications, specifically omitting\n * the milliseconds component from the standard ISO 8601 format. This is useful for generating\n * timestamps for verifiable credentials and other applications requiring precision to the second\n * without the need for millisecond granularity.\n *\n * @param timestampInSeconds The UNIX timestamp to convert, measured in seconds.\n * @example\n * ```ts\n * const issuanceDate = getXmlSchema112Timestamp(1633036800); // \"2021-10-01T00:00:00Z\"\n * ```\n *\n * @returns A date-time string in the format \"yyyy-MM-ddTHH:mm:ssZ\", compliant with XML Schema 1.1.2, based on the provided UNIX timestamp.\n */\nexport function getXmlSchema112Timestamp(timestampInSeconds: number): string {\n  const date = new Date(timestampInSeconds * 1000);\n\n  // Format the date to an ISO string and then remove milliseconds\n  return date.toISOString().replace(/\\.\\d{3}/, '');\n}\n\n/**\n * Calculates a future timestamp in XML Schema 1.1.2 date-time format based on a given number of\n * seconds.\n *\n * This function takes a number of seconds and adds it to the current timestamp, returning a\n * date-time string in the format \"yyyy-MM-ddTHH:mm:ssZ\" without milliseconds.\n *\n * @example\n * ```ts\n * const futureTimestamp = getFutureXmlSchema112Timestamp(60); // \"2023-08-23T12:35:56Z\"\n * ```\n *\n * @param secondsInFuture - The number of seconds to project into the future.\n * @returns The future timestamp in XML Schema 1.1.2 format.\n */\nexport function getFutureXmlSchema112Timestamp(secondsInFuture: number): string {\n  const futureDate = new Date(Date.now() + secondsInFuture * 1000);\n  return futureDate.toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Validates a timestamp string against the XML Schema 1.1.2 date-time format.\n *\n * This function checks whether the provided timestamp string conforms to the\n * format \"yyyy-MM-ddTHH:mm:ssZ\", without milliseconds, as defined in XML Schema 1.1.2.\n *\n * @example\n * ```ts\n * const isValid = isValidXmlSchema112Timestamp('2023-08-23T12:34:56Z'); // true\n * ```\n *\n * @param timestamp - The timestamp string to validate.\n * @returns `true` if the timestamp is valid, `false` otherwise.\n */\nexport function isValidXmlSchema112Timestamp(timestamp: string): boolean {\n  // Format: yyyy-MM-ddTHH:mm:ssZ\n  const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\n  if (!regex.test(timestamp)) {\n    return false;\n  }\n\n  const date = new Date(timestamp);\n\n  return !isNaN(date.getTime());\n}\n\n/**\n * Validates a timestamp string against the RFC 3339 format.\n *\n * This function checks whether the provided timestamp string conforms to the\n * RFC 3339 standard, which includes full date and time representations with\n * optional fractional seconds and a timezone offset. The format allows for\n * both 'Z' (indicating UTC) and numeric timezone offsets (e.g., \"-07:00\", \"+05:30\").\n * This validation ensures that the timestamp is not only correctly formatted\n * but also represents a valid date and time.\n *\n * @param timestamp - The timestamp string to validate.\n * @returns `true` if the timestamp is valid and conforms to RFC 3339, `false` otherwise.\n */\nexport function isValidRFC3339Timestamp(timestamp: string): boolean {\n  // RFC 3339 format: yyyy-MM-ddTHH:mm:ss[.fractional-seconds]Z or yyyy-MM-ddTHH:mm:ss[.fractional-seconds]±HH:mm\n  // This regex matches both 'Z' for UTC and timezone offsets like '-07:00'\n  const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})$/;\n  if (!regex.test(timestamp)) {\n    return false;\n  }\n\n  // Parsing the timestamp to a Date object to check validity\n  const date = new Date(timestamp);\n\n  // Checking if the date is an actual date\n  return !isNaN(date.getTime());\n}", "import * as queryString from './base.js';\n\nexport default queryString;\n", "import decodeComponent from 'decode-uri-component';\nimport splitOnFirst from 'split-on-first';\nimport {includeKeys} from 'filter-obj';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replace(/\\+/g, ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tvalue[key2] = parseValue(value2, options);\n\t\t\t}\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tresult[key] = Boolean(value) && typeof value === 'object' && !Array.isArray(value) ? keysSorter(value) : value;\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {encode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',', ...options};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n", "const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nexport default function decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n", "export default function splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n", "export function includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n", "export {};\n"],
  "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;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;AAChC,CAAC;AAEM,SAASC,QAAO,KAAyB;AAC9C,QAAM,MAAgB,IAAI,MAAM,EAAE,EAAE,KAAK,EAAE;AAE3C,MAAI,IAAI,WAAW,IAAI;AACrB,UAAM,IAAI,MAAM,gBAAgB;EAClC;AAGA,MAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,EAAE;AAC7B,MAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,OAAO,CAAC;AACpC,MAAI,CAAC,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAI,UAAW,IAAI,CAAC,IAAI,OAAO,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,EAAE;AAG7B,MAAI,EAAE,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACtC,MAAI,EAAE,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,EAAE,IAAI,UAAU,IAAI,CAAC,IAAI,OAAO,CAAC;AACrC,MAAI,EAAE,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,EAAE,IAAI,UAAW,IAAI,CAAC,IAAI,OAAO,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC/D,MAAI,EAAE,IAAI,UAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACtC,MAAI,EAAE,IAAI,UAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAC/D,MAAI,EAAE,IAAI,SAAS,IAAI,EAAE,IAAI,EAAE;AAC/B,MAAI,EAAE,IAAI,UAAU,IAAI,EAAE,IAAI,QAAQ,CAAC;AACvC,MAAI,EAAE,IAAI,UAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAI,UAAU,IAAI,EAAE,IAAI,OAAO,CAAC;AACtC,MAAI,EAAE,IAAI,UAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAI,UAAW,IAAI,EAAE,IAAI,OAAO,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AACjE,MAAI,EAAE,IAAI,UAAU,IAAI,EAAE,IAAI,QAAQ,CAAC;AACvC,MAAI,EAAE,IAAI,UAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAI,SAAS,IAAI,EAAE,IAAI,EAAE;AAE/B,SAAO,IAAI,KAAK,EAAE;AACpB;AAEO,SAASC,QAAO,GAAuB;AAC5C,MAAI,EAAE,WAAW,IAAI;AACnB,UAAM,IAAI,MAAM,gBAAgB;EAClC;AAEA,QAAM,UAAU,IAAI,YAAY;AAChC,QAAM,IAAgB,QAAQ,OAAO,CAAC;AAGtC,MACE,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,CAAC,CAAC,MAAM,OACd,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,OACf,IAAI,EAAE,EAAE,CAAC,MAAM,KAAM;AACrB,UAAM,IAAI,MAAM,0BAA0B;EAC5C;AAEA,QAAM,KAAK,IAAI,WAAW,EAAE;AAG5B,KAAG,CAAC,IAAK,IAAI,EAAE,CAAC,CAAC,KAAK,IAAK,IAAI,EAAE,CAAC,CAAC;AACnC,KAAG,CAAC,IAAK,IAAI,EAAE,CAAC,CAAC,KAAK,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK;AACzC,KAAG,CAAC,KAAM,IAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK;AAClE,KAAG,CAAC,KAAM,IAAI,EAAE,CAAC,CAAC,IAAI,OAAO,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK;AAChD,KAAG,CAAC,KAAM,IAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK,IAAM,IAAI,EAAE,CAAC,CAAC,KAAK;AAClE,KAAG,CAAC,KAAM,IAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAK,IAAI,EAAE,CAAC,CAAC;AAGzC,KAAG,CAAC,IAAK,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AAC3C,KAAG,CAAC,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AACrE,KAAG,CAAC,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AAClD,KAAG,CAAC,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AACrE,KAAG,EAAE,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAK,IAAI,EAAE,EAAE,CAAC;AAC5C,KAAG,EAAE,IAAK,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AAC5C,KAAG,EAAE,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AACtE,KAAG,EAAE,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,OAAO,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AACnD,KAAG,EAAE,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK,IAAM,IAAI,EAAE,EAAE,CAAC,KAAK;AACtE,KAAG,EAAE,KAAM,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAK,IAAI,EAAE,EAAE,CAAC;AAE5C,SAAO;AACT;;;;ACtIO,SAAS,UAAU,MAAc;AACtC,MAAI;AACJ,QAAM,MAAM,IAAI,WAAW,EAAE;AAG7B,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO;AAClD,MAAI,CAAC,IAAK,MAAM,KAAM;AACtB,MAAI,CAAC,IAAK,MAAM,IAAK;AACrB,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO;AACnD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,EAAE,KAAM,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAiB;AACrE,MAAI,EAAE,IAAK,IAAI,aAAe;AAC9B,MAAI,EAAE,IAAK,MAAM,KAAM;AACvB,MAAI,EAAE,IAAK,MAAM,KAAM;AACvB,MAAI,EAAE,IAAK,MAAM,IAAK;AACtB,MAAI,EAAE,IAAI,IAAI;AAEd,SAAO;AACT;;;AChCA,IAAAC,eAAA;AAAA,IAAI,QAAQ,KAAK;;;ACOjB,IAAM,SAAS;AAER,IAAM,OAAN,MAAW;;EAEd,YAAY,OAAO;AACf,SAAK,QAAQ;AACb,QAAI,MAAM,WAAW,IAAI;AACrB,YAAM,IAAI,UAAU,oBAAoB;IAC5C;EACJ;;;;;;;;;EASA,OAAO,aAAa,UAAU,OAAO,SAAS,SAAS;AACnD,QAAI,CAAC,OAAO,UAAU,QAAQ,KAC1B,CAAC,OAAO,UAAU,KAAK,KACvB,CAAC,OAAO,UAAU,OAAO,KACzB,CAAC,OAAO,UAAU,OAAO,KACzB,WAAW,KACX,QAAQ,KACR,UAAU,KACV,UAAU,KACV,WAAW,mBACX,QAAQ,QACR,UAAU,cACV,UAAU,YAAY;AACtB,YAAM,IAAI,WAAW,qBAAqB;IAC9C;AACA,UAAM,QAAQ,IAAI,WAAW,EAAE;AAC/B,UAAM,CAAC,IAAI,WAAW,MAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAW,MAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAW,MAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAW,MAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAW,MAAA,GAAK,CAAA;AAC3B,UAAM,CAAC,IAAI;AACX,UAAM,CAAC,IAAI,MAAQ,UAAU;AAC7B,UAAM,CAAC,IAAI;AACX,UAAM,CAAC,IAAI,MAAQ,YAAY;AAC/B,UAAM,CAAC,IAAI,YAAY;AACvB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI;AACZ,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI;AACZ,WAAO,IAAI,KAAK,KAAK;EACzB;;EAEA,WAAW;AACP,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,cAAQ,OAAO,OAAO,KAAK,MAAM,CAAC,MAAM,CAAC;AACzC,cAAQ,OAAO,OAAO,KAAK,MAAM,CAAC,IAAI,EAAG;AACzC,UAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG;AAC1C,gBAAQ;MACZ;IACJ;AACA,WAAO;EACX;;EAEA,QAAQ;AACJ,WAAO,IAAI,KAAK,KAAK,MAAM,MAAM,CAAC,CAAC;EACvC;;EAEA,OAAO,OAAO;AACV,WAAO,KAAK,UAAU,KAAK,MAAM;EACrC;;;;;EAKA,UAAU,OAAO;AACb,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,YAAM,OAAO,KAAK,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC;AAC1C,UAAI,SAAS,GAAG;AACZ,eAAO,KAAK,KAAK,IAAI;MACzB;IACJ;AACA,WAAO;EACX;AACJ;AAEA,IAAM,cAAN,MAAkB;EACd,cAAc;AACV,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,SAAS,IAAI,cAAc;EACpC;;;;;;;;;;;EAWA,WAAW;AACP,UAAM,QAAQ,KAAK,gBAAgB;AACnC,QAAI,UAAU,QAAW;AACrB,aAAO;IACX,OACK;AAED,WAAK,YAAY;AACjB,aAAO,KAAK,gBAAgB;IAChC;EACJ;;;;;;;;;;EAUA,kBAAkB;AACd,UAAM,cAAc;AACpB,UAAM,qBAAqB;AAC3B,UAAM,KAAK,KAAK,IAAI;AACpB,QAAI,KAAK,KAAK,WAAW;AACrB,WAAK,YAAY;AACjB,WAAK,aAAa;IACtB,WACS,KAAK,qBAAqB,KAAK,WAAW;AAE/C,WAAK;AACL,UAAI,KAAK,UAAU,aAAa;AAE5B,aAAK;AACL,aAAK,aAAa;MACtB;IACJ,OACK;AAED,aAAO;IACX;AACA,WAAO,KAAK,aAAa,KAAK,WAAW,KAAK,MAAM,KAAK,UAAU,MAAA,GAAK,EAAA,CAAE,GAAG,KAAK,UAAW,MAAA,GAAK,EAAA,IAAK,GAAI,KAAK,OAAO,WAAW,CAAC;EACvI;;EAEA,eAAe;AACX,SAAK,UACD,KAAK,OAAO,WAAW,IAAI,QAAS,KAAK,OAAO,WAAW,IAAI;EACvE;AACJ;AAEA,IAAI,kBAAkB,CAAC,WAAW;AAE9B,MAAI,OAAO,yBAAyB,eAAe,sBAAsB;AACrE,UAAM,IAAI,MAAM,2CAA2C;EAC/D;AACA,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,WAAO,CAAC,IACJ,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,QAChC,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK;EAC5C;AACA,SAAO;AACX;AAEA,IAAI,OAAO,WAAW,eAAe,OAAO,iBAAiB;AACzD,oBAAkB,CAAC,WAAW,OAAO,gBAAgB,MAAM;AAC/D;AAMA,IAAM,gBAAN,MAAoB;EAChB,cAAc;AACV,SAAK,SAAS,IAAI,YAAY,CAAC;AAC/B,SAAK,SAAS;EAClB;EACA,aAAa;AACT,QAAI,KAAK,UAAU,KAAK,OAAO,QAAQ;AACnC,sBAAgB,KAAK,MAAM;AAC3B,WAAK,SAAS;IAClB;AACA,WAAO,KAAK,OAAO,KAAK,QAAQ;EACpC;AACJ;AACA,IAAI;AASG,IAAM,YAAY,OAAO,qBAAqB,mBAAmB,IAAI,YAAY,IAAI,SAAS;ACvMrG,SAAS,cAAc,KAAsB;AAC3C,MAAI,IAAI,SAAS,IAAI;AACnB,WAAO;EACT;AAEA,MAAI;AAAM,MAAI;AAAG,MAAI;AAErB,OAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK,GAAG;AAC7C,WAAO,IAAI,WAAW,CAAC;AACvB,QAAI,EAAE,OAAO,MAAM,OAAO,MAAM;AAC9B,aAAO;IACT;EACF;AACA,SAAO;AACT;AAEO,IAAM,SAAN,MAAqC;EAC1C,YAAoB,QAAmB,SAAiB,IAAI;AAAxC,SAAA,SAAA;AAAmB,SAAA,SAAA;AACrC,QAAI,CAAC,cAAc,MAAM,GAAG;AAC1B,YAAM,IAAI,MAAM,wDAAwD;IAC1E;AACA,SAAK,SAAS;AAEd,QAAI,QAAQ;AACV,WAAK,SAAS;IAChB,OAAO;AACL,YAAM,OAAO,UAAU;AACvB,WAAK,SAASC,QAAO,KAAK,KAAK;IACjC;AAEA,QAAI,KAAK,OAAO,WAAW,IAAI;AAC7B,YAAM,IAAI,MAAM,yDAAyD,OAAO,MAAA,EAAQ;IAC1F;AAEA,QAAI,KAAK,OAAO,CAAC,IAAI,KAAK;AACxB,YAAM,IAAI,MAAM,4DAA4D;IAC9E;AAIA,UAAM,SAASC,QAAO,KAAK,MAAM;EACnC;EAEO,UAAa;AAClB,WAAO,KAAK;EACd;EAEO,YAAoB;AACzB,WAAO,KAAK;EACd;EAEO,OAA+B,QAAsB;AAC1D,UAAM,OAAO;AACb,QAAI,KAAK,WAAW,QAAQ;AAC1B,YAAM,IAAI,MAAM,iCAAiC,KAAK,MAAA,YAAkB,MAAA,EAAQ;IAClF;AACA,WAAO;EACT;EAEO,cAA0B;AAC/B,WAAOA,QAAO,KAAK,MAAM;EAC3B;EAEO,SAAiB;AACtB,UAAM,OAAO,IAAI,KAAK,KAAK,YAAY,CAAC;AACxC,WAAO,KAAK,SAAS;EACvB;EAEO,WAAmB;AACxB,QAAI,KAAK,WAAW,IAAI;AACtB,aAAO,KAAK;IACd;AACA,WAAO,GAAG,KAAK,MAAA,IAAU,KAAK,MAAA;EAChC;EAEA,OAAO,WAAmC,KAAwB;AAChE,UAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,QAAI,MAAM,WAAW,GAAG;AACtB,aAAO,IAAI,OAAU,IAAS,MAAM,CAAC,CAAC;IACxC;AACA,QAAI,MAAM,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,MAAM,IAAI;AACnB,cAAM,IAAI,MAAM,oEAAoE,GAAA,EAAK;MAC3F;AACA,aAAO,IAAI,OAAU,MAAM,CAAC,GAAQ,MAAM,CAAC,CAAC;IAC9C;AACA,UAAM,IAAI,MAAM,0BAA0B,GAAA,EAAK;EACjD;EAEA,OAAO,cAAsC,QAAW,OAA8B;AACpF,UAAM,SAASD,QAAO,KAAK;AAC3B,WAAO,IAAI,OAAO,QAAQ,MAAM;EAClC;EAEA,OAAO,SAAiC,QAAW,MAAyB;AAC1E,UAAM,SAASA,QAAO,UAAU,IAAI,CAAC;AACrC,WAAO,IAAI,OAAO,QAAQ,MAAM;EAClC;AACF;AAKO,SAAS,OAAyB,SAAY,IAAS,SAAiB,IAAe;AAC5F,SAAO,IAAI,OAAO,QAAQ,MAAM;AAClC;;;AC7GA,IAAAE,gBAAA;;;ACEA,IAAAC,gBAAA;;;ACFA,IAAAC,eAAA;sBAAqB;;;;;;ACgErB,IAAAC,eAAA;AAeM,SAAU,mBAAmB,iBAAgC;AACjE,SAAO,gBAAgB,eAAe,KAAK,gBAAgB,eAAe,gBAAgB,OAAO;AACnG;AA+BM,SAAU,gBAAgB,KAAQ;AACtC,MAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AAC3C,WAAO;;AAGT,SAAO,OAAO,IAAI,OAAO,aAAa,MAAM;AAC9C;AAiFM,SAAU,gBAAgB,OAAc;AAE5C,QAAM,aAAa,OAAO,UAAU,SAAS,KAAK,KAAK;AAEvD,QAAM,QAAQ,WAAW,MAAM,kBAAkB;AAEjD,QAAM,CAAC,GAAG,IAAI,IAAI;AAElB,SAAO;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA,IAAM,cAAc,IAAI,YAAW;AACnC,IAAM,cAAc,IAAI,YAAW;AAE7B,IAAO,UAAP,MAAO,SAAO;EAIlB,YAAY,MAAW,QAAc;AACnC,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;EAEA,OAAO,YAAY,MAAiB;AAClC,WAAO,IAAI,SAAQ,MAAM,aAAa;EACxC;EAEA,OAAO,cAAc,MAAwB;AAC3C,QAAI,CAAC,gBAAgB,IAAI,GAAG;AAC1B,YAAM,IAAI,UAAU,sCAAsC;;AAE5D,WAAO,IAAI,SAAQ,MAAM,eAAe;EAC1C;EAEA,OAAO,QAAQ,MAAY;AACzB,WAAO,IAAI,SAAQ,MAAM,SAAS;EACpC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;;;;;;;EAQA,OAAO,aAAa,MAAkB;AACpC,WAAO,IAAI,SAAQ,MAAM,cAAc;EACzC;EAEA,OAAO,IAAI,MAAY;AACrB,QAAI,OAAO,SAAS,UAAU;AAC5B,YAAM,IAAI,UAAU,6BAA6B;;AAEnD,QAAI,KAAK,SAAS,MAAM,GAAG;AACzB,YAAM,IAAI,UAAU,mDAAmD;;AAEzE,WAAO,IAAI,SAAQ,MAAM,KAAK;EAChC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;EAEA,OAAO,OAAO,MAAyB;AACrC,WAAO,IAAI,SAAQ,MAAM,QAAQ;EACnC;EAEA,OAAO,OAAO,MAAY;AACxB,WAAO,IAAI,SAAQ,MAAM,QAAQ;EACnC;EAEA,OAAO,WAAW,MAAgB;AAChC,WAAO,IAAI,SAAQ,MAAM,YAAY;EACvC;EAEA,gBAAa;AACX,YAAQ,KAAK,QAAQ;MAEnB,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI,EAAE;;MAGzC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI,EAAE;;MAGzC,KAAK,gBAAgB;AACnB,cAAM,WAAW,gBAAgB,KAAK,IAAI;AAC1C,YAAI,aAAa,eAAe;AAE9B,iBAAO,KAAK;mBACH,YAAY,OAAO,KAAK,IAAI,GAAG;AAExC,cAAI,mBAAmB,KAAK,IAAI,GAAG;AAEjC,mBAAO,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,YAAY,KAAK,KAAK,aAAa,KAAK,KAAK,UAAU;iBAC1F;AAEL,mBAAO,KAAK,KAAK;;eAEd;AACL,gBAAM,IAAI,UAAU,GAAG,KAAK,MAAM,8DAA8D;;;MAIpG,KAAK,OAAO;AACV,eAAO,KAAK,aAAY,EAAG;;MAG7B,KAAK,UAAU;AACb,eAAO,KAAK,aAAY,EAAG;;MAG7B,KAAK,cAAc;AACjB,eAAO,KAAK,KAAK;;MAGnB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,mCAAmC;;EAE3F;EAEM,qBAAkB;;AACtB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AACpB,gBAAM,OAAO,MAAM,KAAK,YAAW;AACnC,iBAAO,MAAM,KAAK,YAAW;;QAG/B;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,mCAAmC;;IAExG,CAAC;;EAED,YAAS;AACP,YAAQ,KAAK,QAAQ;MAEnB,KAAK,cAAc;AACjB,eAAO,QAAQ,WAAW,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,+BAA+B;;EAEvF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,IAAI,WAAW,KAAK,IAAI;AACpC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,aAAa;AAChB,eAAO,KAAK,KAAK,UAAU,CAAC;;MAG9B,KAAK,cAAc;AACjB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,IAAI,WAAW,KAAK,IAAI;AACpC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,gBAAgB;AACnB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,UAAU;AACb,cAAM,SAAS,KAAK,UAAU,KAAK,IAAI;AACvC,cAAM,MAAM,YAAY,OAAO,MAAM;AACrC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,UAAU;AACb,cAAM,MAAM,YAAY,OAAO,KAAK,IAAI;AACxC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,cAAc;AACjB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEM,cAAW;;;AACf,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,gBAAM,SAAS,CAAA;;AAGf,qBAA0B,KAAA,MAAA,KAAA,cAAC,KAAK,IAA2B,GAAA,IAAA,KAAA,MAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,CAAA,IAAA,KAAA,MAAE;AAAnC,mBAAA,GAAA;AAAA,mBAAA;AAAf,oBAAM,QAAK;AAEpB,qBAAO,KAAK,KAAK;;;;;;;;;;;;;AAKnB,gBAAM,OAAO,IAAI,KAAK,MAAM;AAE5B,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,4BAA4B;;;;EAIjG,QAAK;AAEH,UAAM,QAAQ,MAAM,KAAK,EAAE,QAAQ,IAAG,GAAI,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAEnF,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,SAAQ,WAAW,GAAG,EAAE,MAAK;;MAGtC,KAAK,aAAa;AAChB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,SAAQ,WAAW,GAAG,EAAE,MAAK;;MAGtC,KAAK,cAAc;AACjB,YAAI,MAAM;AACV,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACzC,iBAAO,MAAM,KAAK,KAAK,CAAC,CAAC;;AAE3B,eAAO;;MAGT;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,2BAA2B;;EAEnF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MACnB,KAAK,aAAa;AAChB,eAAO,IAAI,KAAK,IAAI;;MAGtB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEA,WAAQ;AACN,YAAQ,KAAK,QAAQ;MAEnB,KAAK,aAAa;AAChB,cAAM,MAAM,UAAU,WAAW,KAAK,IAAI;AAC1C,cAAM,OAAO,YAAY,OAAO,GAAG;AACnC,eAAO,KAAK,MAAM,IAAI;;MAGxB,KAAK,UAAU;AACb,eAAO,KAAK,MAAM,KAAK,IAAI;;MAG7B,KAAK,cAAc;AACjB,cAAM,OAAO,YAAY,OAAO,KAAK,IAAI;AACzC,eAAO,KAAK,MAAM,IAAI;;MAGxB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,8BAA8B;;EAEtF;EAEM,gBAAa;;AACjB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,gBAAM,OAAO,MAAM,KAAK,cAAa;AAIrC,gBAAM,OAAO,KAAK,MAAM,IAAI;AAI5B,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,8BAA8B;;IAEnG,CAAC;;EAED,WAAQ;AACN,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,eAAO,YAAY,OAAO,KAAK,IAAI;;MAGrC,KAAK,aAAa;AAChB,cAAM,MAAM,UAAU,WAAW,KAAK,IAAI;AAC1C,eAAO,YAAY,OAAO,GAAG;;MAG/B,KAAK,UAAU;AACb,eAAO,KAAK,UAAU,KAAK,IAAI;;MAGjC,KAAK,cAAc;AACjB,eAAO,YAAY,OAAO,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,8BAA8B;;EAEtF;EAEM,gBAAa;;;AACjB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,cAAI,MAAM;;AAGV,qBAA0B,KAAA,MAAA,KAAA,cAAC,KAAK,IAA2B,GAAA,IAAA,KAAA,MAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,CAAA,IAAA,KAAA,MAAE;AAAnC,mBAAA,GAAA;AAAA,mBAAA;AAAf,oBAAM,QAAK;AAEpB,kBAAI,OAAO,UAAU;AACnB,uBAAO;;AAKP,uBAAO,YAAY,OAAO,OAAO,EAAE,QAAQ,KAAI,CAAE;;;;;;;;;;;;;AAKrD,iBAAO,YAAY,OAAO,QAAW,EAAE,QAAQ,MAAK,CAAE;AAGtD,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,8BAA8B;;;;EAInG,eAAY;AACV,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAGlB,eAAO,IAAI,WAAW,KAAK,IAAI;;MAGjC,KAAK,WAAW;AACd,eAAO,QAAQ,WAAW,KAAK,IAAI;;MAGrC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC,KAAK,gBAAgB;AACnB,cAAM,WAAW,gBAAgB,KAAK,IAAI;AAC1C,YAAI,aAAa,cAAc;AAG7B,iBAAO,KAAK;mBACH,aAAa,eAAe;AAGrC,iBAAO,IAAI,WAAW,KAAK,IAAI;mBACtB,YAAY,OAAO,KAAK,IAAI,GAAG;AAExC,iBAAO,IAAI,WAAW,KAAK,KAAK,QAAQ,KAAK,KAAK,YAAY,KAAK,KAAK,UAAU;eAC7E;AACL,gBAAM,IAAI,UAAU,GAAG,KAAK,MAAM,8DAA8D;;;MAIpG,KAAK,OAAO;AACV,cAAM,MAAM,IAAI,WAAW,KAAK,KAAK,SAAS,CAAC;AAC/C,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC5C,gBAAM,YAAY,SAAS,KAAK,KAAK,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE;AAC5D,cAAI,MAAM,SAAS,GAAG;AACpB,kBAAM,IAAI,UAAU,0CAA0C;;AAEhE,cAAI,IAAI,CAAC,IAAI;;AAEf,eAAO;;MAGT,KAAK,UAAU;AACb,cAAM,SAAS,KAAK,UAAU,KAAK,IAAI;AACvC,eAAO,YAAY,OAAO,MAAM;;MAGlC,KAAK,UAAU;AACb,eAAO,YAAY,OAAO,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,kCAAkC;;EAE1F;EAEM,oBAAiB;;AACrB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AACpB,gBAAM,cAAc,MAAM,KAAK,mBAAkB;AACjD,iBAAO,IAAI,WAAW,WAAW;;QAGnC;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,kCAAkC;;IAEvG,CAAC;;;;;AC1bH,IAAAC,eAAA;AA6BM,IAAO,aAAP,MAAO,YAAU;;;;;;;;;;EAoBd,OAAO,UAAU,SAIvB;;AACC,QAAI,EAAE,MAAM,MAAM,KAAI,IAAK;AAE3B,QAAI,EAAE,OAAO,CAAC,OAAO,OAAO;AAC1B,YAAM,IAAI,MAAM,wDAAwD;;AAI1E,WAAO,YAAW,WAAW,IAAI,IAAK,IAAI,OAAO,YAAW,WAAW,IAAI,IAAK;AAGhF,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,4BAA2B,KAAA,QAAQ,UAAI,QAAA,OAAA,SAAA,KAAI,QAAQ,IAAI,EAAE;;AAI3E,UAAM,eAAe,eAAO,eAAe,IAAI;AAC/C,UAAM,iBAAiB,IAAI,WAAW,eAAe,KAAK,UAAU;AACpE,mBAAe,IAAI,MAAM,YAAY;AAGrC,mBAAO,SAAS,MAAM,cAAc;AAEpC,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,aAAY,IAAK;AACzB,UAAM,CAAC,MAAM,CAAC,IAAI,eAAO,OAAO,YAAY;AAE5C,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,KAAI,IAAK;AAGjB,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,KAAI,IAAK;AAGjB,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO;EACT;;;;;;EAOO,OAAO,cAAc,OAA2C;AACrE,gBAAW,WAAW,IAAI,MAAM,MAAM,MAAM,IAAI;AAChD,gBAAW,WAAW,IAAI,MAAM,MAAM,MAAM,IAAI;EAClD;;;;;;;EAQO,OAAO,aAAa,SAE1B;AACC,UAAM,EAAE,aAAY,IAAK;AACzB,UAAM,CAAC,MAAM,cAAc,IAAI,eAAO,OAAO,YAAY;AAGzD,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO,EAAE,MAAM,MAAM,aAAa,MAAM,cAAc,GAAG,KAAI;EAC/D;;AArIO,WAAA,aAAa,oBAAI,IAAG;AAKpB,WAAA,aAAa,oBAAI,IAAG;AAoI7B,WAAW,cAAc,EAAE,MAAM,KAAM,MAAM,cAAa,CAAE;AAC5D,WAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,eAAc,CAAE;AAC/D,WAAW,cAAc,EAAE,MAAM,KAAM,MAAM,aAAY,CAAE;AAC3D,WAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,cAAa,CAAE;AAC9D,WAAW,cAAc,EAAE,MAAM,KAAM,MAAM,gBAAe,CAAE;AAC9D,WAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,iBAAgB,CAAE;;;AC/KjE,IAAAC,gBAAA;AAkCM,SAAU,0BAA0B,KAA4B;AACpE,SAAO,KAAK,GAAG,EAAE,QAAQ,SAAM;AAC7B,QAAI,IAAI,GAAG,MAAM,QAAW;AAC1B,aAAO,IAAI,GAAG;eACL,OAAO,IAAI,GAAG,MAAO,UAAU;AACxC,gCAA0B,IAAI,GAAG,CAA4B;;EAEjE,CAAC;AACH;;;;ACxCA,mBAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DhB,IAAO,cAAP,MAAkB;EAAxB,cAAA;AAIU,SAAA,QAAmB,oBAAI,IAAG;EAoEpC;;;;;;EA7DQ,QAAK;;AACT,WAAK,MAAM,MAAK;IAClB,CAAC;;;;;;EAMK,QAAK;;IAEX,CAAC;;;;;;;;EAQK,OAAO,IAAK;;AAChB,aAAO,KAAK,MAAM,OAAO,EAAE;IAC7B,CAAC;;;;;;;;EAQK,IAAI,IAAK;;AACb,aAAO,KAAK,MAAM,IAAI,EAAE;IAC1B,CAAC;;;;;;;;EAQK,IAAI,IAAK;;AACb,aAAO,KAAK,MAAM,IAAI,EAAE;IAC1B,CAAC;;;;;;;EAOK,OAAI;;AACR,aAAO,MAAM,KAAK,KAAK,MAAM,OAAM,CAAE;IACvC,CAAC;;;;;;;;;EASK,IAAI,IAAO,KAAM;;AACrB,WAAK,MAAM,IAAI,IAAI,GAAG;IACxB,CAAC;;;;;;;;;ACnIH,6BAAyB;AAIzB,IAAAC,0BAAyB;;;ACNzB,IAAAC,gBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBM,IAAO,SAAP,MAAa;;;;;;;;;;;;;;;;;;;;EAoBV,OAAa,OAAO,EAAE,KAAI,GAEhC;;AACC,YAAM,OAAO,OAAO,IAAI;AAExB,aAAO;IACT,CAAC;;;;;AC7CH,IAAAC,gBAAA;AAGM,IAAgB,kBAAhB,MAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuB/B,IAAO,gBAAP,cAA6B,gBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BnC,OAAO,EAAE,WAAW,KAAI,GAAoB;;AACvD,cAAQ,WAAW;QAEjB,KAAK,WAAW;AACd,gBAAM,OAAO,MAAM,OAAO,OAAO,EAAE,KAAI,CAAE;AACzC,iBAAO;;;IAIb,CAAC;;;;;;;;;;;;;;AC/DH,IAAAC,gBAAA;AAUM,SAAU,aAAa,KAA2B;AAOtD,QAAM,cAAc,CAACC,SAAuD;AAC1E,QAAIA,SAAQ,QAAQ,OAAOA,SAAQ,YAAY,CAAC,MAAM,QAAQA,IAAG,GAAG;AAClE,YAAM,aAAa,OAAO,KAAKA,IAAG,EAAE,KAAI;AACxC,YAAMC,aAAoC,CAAA;AAC1C,iBAAW,OAAO,YAAY;AAE5B,QAAAA,WAAU,GAAG,IAAI,YAAYD,KAAI,GAAG,CAAC;;AAEvC,aAAOC;;AAET,WAAOD;EACT;AAGA,QAAM,YAAY,YAAY,GAAG;AACjC,SAAO,KAAK,UAAU,SAAS;AACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBO,IAAM,qBAAqB;AA4c5B,SAAgB,qBAAqB,EAAE,IAAG,GAE/C;;AAIC,UAAM,UAAU,IAAI;AACpB,QAAI;AACJ,QAAI,YAAY,MAAM;AACpB,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,IAAI,EAAC;eACvD,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,IAAG;eAC/B,YAAY,OAAO;AAC5B,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;eAC7C,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;WAC7C;AACL,YAAM,IAAI,MAAM,yBAAyB,OAAO,EAAE;;AAEpD,8BAA0B,aAAa;AAIvC,UAAM,gBAAgB,aAAa,aAAa;AAKhD,UAAM,YAAY,QAAQ,OAAO,aAAa,EAAE,aAAY;AAC5D,UAAM,SAAS,MAAM,OAAO,OAAO,EAAE,MAAM,UAAS,CAAE;AAGtD,UAAM,aAAa,QAAQ,WAAW,MAAM,EAAE,YAAW;AAEzD,WAAO;EACT,CAAC;;AAQK,SAAU,eAAe,KAAY;AACzC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO,OAAO,OAAO;AAAM,WAAO;AACxE,MAAI,IAAI,QAAQ;AAAM,WAAO;AAC7B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAU,cAAc,KAAY;AACxC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO;AAAM,WAAO;AAC1D,MAAI,OAAO;AAAK,WAAO;AACvB,MAAI,IAAI,QAAQ;AAAM,WAAO;AAC7B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAsBM,SAAU,gBAAgB,KAAY;AAC1C,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO,OAAO,OAAO;AAAM,WAAO;AACxE,MAAI,IAAI,QAAQ;AAAO,WAAO;AAC9B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAU,eAAe,KAAY;AACzC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,OAAO;AAAK,WAAO;AACvB,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO;AAAM,WAAO;AAC1D,MAAI,IAAI,QAAQ;AAAO,WAAO;AAC9B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAU,aAAa,KAAY;AACvC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAE5C,QAAM,MAAO,IAAwB;AAErC,UAAQ,KAAK;IACX,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO,OAAO;IAChB,KAAK;AACH,aAAO,OAAO;IAChB;AACE,aAAO;;AAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1hBM,IAAO,YAAP,MAAO,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkDb,OAAa,sBAAsB,EAAE,UAAS,GAEpD;;AAEC,YAAM,kBAAkB,UAAU,UAAU,YAAY,SAAS;AAEjE,UAAI,gBAAgB,SAAQ,GAAI;AAE9B,cAAM,0BAA0B,gBAAgB,WAAU;AAG1D,cAAM,oBAAoB,wBAAwB,kBAAiB;AAEnE,eAAO;aAEF;AAEL,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,eAAc,CAAE;AAGxE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,IAAI;IAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG9E,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,6BAA6B,EAAE,aAAY,GAE9D;;AAGC,YAAM,kBAAkB,UAAU,UAAU,QAAQ,YAAY;AAIhE,YAAM,mBAAmB,gBAAgB,kBAAiB;AAE1D,aAAQ;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,oBAAoB,EAAE,eAAc,GAEvD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,KAAK;IAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,UAAU,MAAM,iBAAgB;AAGxD,YAAM,aAAa,MAAM,WAAU,kBAAkB,EAAE,gBAAe,CAAE;AAGxE,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAE,eAAe,GAAG,KAAK,IAAI,QAAQ,cAAc;AACrD,cAAM,IAAI,MAAM,6DAA6D;;AAI/E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAAS,OAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAAC,eAAe,UAAU,GAAG;AAC/B,cAAM,IAAI,MAAM,4DAA4D;;AAI9E,YAAM,kBAAkB,QAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,EAAE,cAAc,SAAS,KAAK,UAAU,IAAI;AAC9C,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,SAAS,IAAI,WAAW,CAAC,CAAI,CAAC;AACpC,YAAM,IAAI,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AACrD,YAAM,IAAI,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAGrD,YAAM,iBAAiB,IAAI,WAAW,CAAC,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,oGAAoG;;AAItH,YAAM,mBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACtF,YAAM,kBAAkB,MAAM,WAAU,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAGlF,YAAM,eAAe,UAAU,gBAAgB,kBAAkB,iBAAiB,IAAI;AAItF,aAAO,aAAa,MAAM,CAAC;IAC7B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,KAAK,EAAE,MAAM,IAAG,GACxB;;AAGV,YAAM,kBAAkB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG7E,YAAM,SAAS,OAAO,IAAI;AAI1B,YAAM,kBAAkB,UAAU,KAAK,QAAQ,eAAe;AAG9D,YAAM,YAAY,gBAAgB,kBAAiB;AAEnD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,mBAAmB,EAAE,gBAAe,GAEvD;;AACC,aAAO,UAAU,MAAM,kBAAkB,eAAe;IAC1D,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,WAAU,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAG1E,YAAM,SAAS,OAAO,IAAI;AAO1B,YAAME,WAAU,UAAU,OAAO,WAAW,QAAQ,gBAAgB,EAAE,MAAM,MAAK,CAAE;AAEnF,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCO,OAAa,cAAc,EAAE,SAAQ,GAE5C;;AAEC,UAAI,SAAS,eAAe,IAAI;AAC9B,mBAAW,UAAU,aAAa,QAAQ;;AAI5C,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,QAAQ;AAGxD,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AACrC,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AAErC,aAAO,EAAE,GAAG,EAAC;IACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvwBG,IAAO,YAAP,MAAO,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkDb,OAAa,sBAAsB,EAAE,UAAS,GAEpD;;AAEC,YAAM,kBAAkB,UAAU,UAAU,YAAY,SAAS;AAEjE,UAAI,gBAAgB,SAAQ,GAAI;AAE9B,cAAM,0BAA0B,gBAAgB,WAAU;AAG1D,cAAM,oBAAoB,wBAAwB,kBAAiB;AAEnE,eAAO;aAEF;AAEL,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,eAAc,CAAE;AAGxE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,IAAI;IAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG9E,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAM,QAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,6BAA6B,EAAE,aAAY,GAE9D;;AAGC,YAAM,kBAAkB,UAAU,UAAU,QAAQ,YAAY;AAIhE,YAAM,mBAAmB,gBAAgB,kBAAiB;AAE1D,aAAQ;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,oBAAoB,EAAE,eAAc,GAEvD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,KAAK;IAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,UAAU,MAAM,iBAAgB;AAGxD,YAAM,aAAa,MAAM,WAAU,kBAAkB,EAAE,gBAAe,CAAE;AAGxE,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAE,eAAe,GAAG,KAAK,IAAI,QAAQ,UAAU;AACjD,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAAC,eAAe,UAAU,GAAG;AAC/B,cAAM,IAAI,MAAM,4DAA4D;;AAI9E,YAAM,kBAAkB,QAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,EAAE,cAAc,SAAS,KAAK,UAAU,IAAI;AAC9C,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,SAAS,IAAI,WAAW,CAAC,CAAI,CAAC;AACpC,YAAM,IAAI,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AACrD,YAAM,IAAI,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAGrD,YAAM,iBAAiB,IAAI,WAAW,CAAC,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,oGAAoG;;AAItH,YAAM,mBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACtF,YAAM,kBAAkB,MAAM,WAAU,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAGlF,YAAM,eAAe,UAAU,gBAAgB,kBAAkB,iBAAiB,IAAI;AAItF,aAAO,aAAa,MAAM,CAAC;IAC7B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,KAAK,EAAE,MAAM,IAAG,GACxB;;AAGV,YAAM,kBAAkB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG7E,YAAM,SAAS,OAAO,IAAI;AAI1B,YAAM,kBAAkB,UAAU,KAAK,QAAQ,eAAe;AAG9D,YAAM,YAAY,gBAAgB,kBAAiB;AAEnD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,mBAAmB,EAAE,gBAAe,GAEvD;;AACC,aAAO,UAAU,MAAM,kBAAkB,eAAe;IAC1D,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,WAAU,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAG1E,YAAM,SAAS,OAAO,IAAI;AAO1B,YAAMC,WAAU,UAAU,OAAO,WAAW,QAAQ,gBAAgB,EAAE,MAAM,MAAK,CAAE;AAEnF,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCO,OAAa,cAAc,EAAE,SAAQ,GAE5C;;AAEC,UAAI,SAAS,eAAe,IAAI;AAC9B,mBAAW,UAAU,aAAa,QAAQ;;AAI5C,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,QAAQ;AAGxD,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AACrC,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AAErC,aAAO,EAAE,GAAG,EAAC;IACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3yBG,IAAO,iBAAP,cAA8B,gBAAe;;;;;;;;;;;;;;;;;;;;;EAwBpC,iBAAiB,EAAE,IAAG,GACX;;AAEtB,UAAI,CAAC,eAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,gBAAM,YAAY,MAAM,UAAU,iBAAiB,EAAE,IAAG,CAAE;AAC1D,oBAAU,MAAM;AAChB,iBAAO;;QAGT,KAAK,SAAS;AACZ,gBAAM,YAAY,MAAM,UAAU,iBAAiB,EAAE,IAAG,CAAE;AAC1D,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;EAgBY,YAAY,EAAE,UAAS,GACZ;;AAEtB,cAAQ,WAAW;QAEjB,KAAK;QACL,KAAK,aAAa;AAChB,gBAAM,aAAa,MAAM,UAAU,YAAW;AAC9C,qBAAW,MAAM;AACjB,iBAAO;;QAGT,KAAK;QACL,KAAK,aAAa;AAChB,gBAAM,aAAa,MAAM,UAAU,YAAW;AAC9C,qBAAW,MAAM;AACjB,iBAAO;;;IAGb,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BY,aAAa,EAAE,IAAG,GACX;;AAElB,UAAI,CAAC,eAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,gBAAM,YAAY,MAAM,UAAU,aAAa,EAAE,IAAG,CAAE;AACtD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,KAAK,SAAS;AACZ,gBAAM,YAAY,MAAM,UAAU,aAAa,EAAE,IAAG,CAAE;AACtD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BY,KAAK,EAAE,KAAK,KAAI,GACjB;;AAEV,UAAI,CAAC,eAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,iBAAO,MAAM,UAAU,KAAK,EAAE,KAAK,KAAI,CAAE;;QAG3C,KAAK,SAAS;AACZ,iBAAO,MAAM,UAAU,KAAK,EAAE,KAAK,KAAI,CAAE;;QAG3C,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BY,OAAO,EAAE,KAAK,WAAW,KAAI,GAC5B;;AAEZ,UAAI,CAAC,cAAc,GAAG;AAAG,cAAM,IAAI,UAAU,kEAAkE;AAE/G,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,iBAAO,MAAM,UAAU,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGxD,KAAK,SAAS;AACZ,iBAAO,MAAM,UAAU,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGxD,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClNG,IAAO,UAAP,MAAO,SAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BX,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,iBAAkB,QAAQ,aAAa,eAAe;AAG5D,YAAM,aAAkB;QACtB,KAAM;QACN,GAAM,QAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,KAAM;QACN,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;EAuBM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,SAAQ,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG5E,YAAM,iBAAkB,QAAQ,aAAa,eAAe;AAG5D,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,0BAA0B,EAAE,WAAU,GAEzD;;AAEC,YAAM,yBAAyB,MAAM,SAAQ,kBAAkB,EAAE,WAAU,CAAE;AAG7E,YAAM,wBAAwB,wBAAwB,sBAAsB;AAG5E,YAAM,uBAAuB,OAAO,aAAa,qBAAqB;AAGtE,YAAM,mBAAwB;QAC5B,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,qBAAqB,EAAE,YAAW;QAC3D,GAAM,QAAQ,WAAW,oBAAoB,EAAE,YAAW;;AAI5D,uBAAiB,MAAM,MAAM,qBAAqB,EAAE,KAAK,iBAAgB,CAAE;AAE3E,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,yBAAyB,EAAE,UAAS,GAEvD;;AAEC,YAAM,wBAAwB,MAAM,SAAQ,iBAAiB,EAAE,UAAS,CAAE;AAG1E,YAAMC,WAAU,MAAM,SAAQ,kBAAkB,EAAE,gBAAgB,sBAAqB,CAAE;AACzF,UAAI,CAACA,UAAS;AACZ,cAAM,IAAI,MAAM,8BAA8B;;AAIhD,YAAM,uBAAuB,uBAAuB,qBAAqB;AAGzE,YAAM,kBAAuB;QAC3B,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,oBAAoB,EAAE,YAAW;;AAI5D,sBAAgB,MAAM,MAAM,qBAAqB,EAAE,KAAK,gBAAe,CAAE;AAEzE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,QAAQ,MAAM,iBAAgB;AAGtD,YAAM,aAAa,MAAM,SAAQ,kBAAkB,EAAE,gBAAe,CAAE;AAGtE,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAE,gBAAgB,GAAG,KAAK,IAAI,QAAQ,YAAY;AACpD,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;EAwBF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAAC,gBAAgB,UAAU,GAAG;AAChC,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,kBAAkB,QAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;EAqBM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,CAAC,eAAe,SAAS,GAAG;AAC9B,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,YAAM,iBAAiB,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAElE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,KAAK,EAAE,KAAK,KAAI,GACxB;;AAGV,YAAM,kBAAkB,MAAM,SAAQ,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG3E,YAAM,YAAY,QAAQ,KAAK,MAAM,eAAe;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,QAAQ,cAAc,QAAQ,cAAc;AAG1D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,SAAQ,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAGxE,YAAMD,WAAU,QAAQ,OAAO,WAAW,MAAM,cAAc;AAE9D,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7fG,IAAO,iBAAP,cAA8B,gBAAe;;;;;;;;;;;;;;;;;;;;;EAwBpC,iBAAiB,EAAE,IAAG,GACX;;AAEtB,UAAI,CAAC,gBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,gBAAM,YAAY,MAAM,QAAQ,iBAAiB,EAAE,IAAG,CAAE;AACxD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;EAgBK,YAAY,EAAE,UAAS,GACL;;AAEtB,cAAQ,WAAW;QAEjB,KAAK,WAAW;AACd,gBAAM,aAAa,MAAM,QAAQ,YAAW;AAC5C,qBAAW,MAAM;AACjB,iBAAO;;;IAGb,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BY,aAAa,EAAE,IAAG,GACX;;AAElB,UAAI,CAAC,gBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,gBAAM,YAAY,MAAM,QAAQ,aAAa,EAAE,IAAG,CAAE;AACpD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BY,KAAK,EAAE,KAAK,KAAI,GACjB;;AAEV,UAAI,CAAC,gBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,iBAAO,MAAM,QAAQ,KAAK,EAAE,KAAK,KAAI,CAAE;;QAGzC,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BY,OAAO,EAAE,KAAK,WAAW,KAAI,GAC5B;;AAEZ,UAAI,CAAC,eAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,iBAAO,MAAM,QAAQ,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGtD,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MH,IAAM,sBAAsB;EAC1B,WAAW;IACT,gBAAiB;IACjB,OAAiB,CAAC,SAAS;;EAE7B,aAAa;IACX,gBAAiB;IACjB,OAAiB,CAAC,UAAU,WAAW;;EAEzC,aAAa;IACX,gBAAiB;IACjB,OAAiB,CAAC,SAAS,WAAW;;EAExC,WAAW;IACT,gBAAiB;IACjB,OAAiB,CAAC,SAAS;;;AA0DzB,IAAO,kBAAP,MAAsB;EAsB1B,YAAY,QAA8B;;AAZlC,SAAA,sBAAuF,oBAAI,IAAG;AAapG,SAAK,aAAY,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,cAAQ,QAAA,OAAA,SAAA,KAAI,IAAI,YAAW;EACtD;;;;;;;;;;;;;;;;;;;;;;;;;;EA2Ba,OAAO,EAAE,WAAW,KAAI,GACR;;AAG3B,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,OAAO,MAAM,OAAO,OAAO,EAAE,WAAW,KAAI,CAAE;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;EAqBY,UAAU,EAAE,OAAM,GACX;;AAGlB,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAEtD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;EAkBY,YAAY,EAAE,UAAS,GACF;;AAGhC,YAAM,eAAe,KAAK,aAAa,EAAE,UAAS,CAAE;AAGpD,YAAM,MAAM,MAAM,aAAa,YAAY,EAAE,UAAS,CAAE;AAExD,WAAI,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,SAAQ,QAAW;AAC1B,cAAM,IAAI,MAAM,mDAAmD;;AAIrE,YAAM,SAAS,GAAG,kBAAkB,GAAG,IAAI,GAAG;AAG9C,YAAM,KAAK,UAAU,IAAI,QAAQ,GAAG;AAEpC,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BY,UAAU,EAAE,IAAG,GACR;;AAGlB,YAAM,gBAAgB,MAAM,qBAAqB,EAAE,KAAK,IAAG,CAAE;AAG7D,YAAM,SAAS,GAAG,kBAAkB,GAAG,aAAa;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;EAkBY,aAAa,EAAE,OAAM,GACX;;AAGrB,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAGtD,YAAM,YAAY,KAAK,iBAAiB,EAAE,KAAK,WAAU,CAAE;AAG3D,YAAM,eAAe,KAAK,aAAa,EAAE,UAAS,CAAE;AAGpD,YAAM,YAAY,MAAM,aAAa,aAAa,EAAE,KAAK,WAAU,CAAE;AAErE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BY,UAAU,EAAE,IAAG,GACR;;;AAElB,UAAI,CAAC,aAAa,GAAG;AAAG,cAAM,IAAI,UAAU,4DAA4D;AAGxG,YAAM,aAAa,gBAAgB,GAAG;AAGtC,OAAA,KAAA,WAAW,SAAG,QAAA,OAAA,SAAA,KAAd,WAAW,MAAQ,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAGjE,YAAM,SAAS,MAAM,KAAK,UAAU,EAAE,KAAK,WAAU,CAAE;AAGvD,YAAM,KAAK,UAAU,IAAI,QAAQ,UAAU;AAE3C,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BI,KAAK,EAAE,QAAQ,KAAI,GACjB;;AAGb,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAGtD,YAAM,YAAY,KAAK,iBAAiB,EAAE,KAAK,WAAU,CAAE;AAG3D,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,YAAY,OAAO,KAAK,EAAE,MAAM,KAAK,WAAU,CAAE;AAEvD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BY,OAAO,EAAE,KAAK,WAAW,KAAI,GACzB;;AAGf,YAAM,YAAY,KAAK,iBAAiB,EAAE,IAAG,CAAE;AAG/C,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,mBAAmB,OAAO,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;EAsBO,aAAa,EAAE,UAAS,GAE/B;;AAEC,UAAM,2BAA0B,KAAA,oBAAoB,SAAS,OAAC,QAAA,OAAA,SAAA,SAAA,GAAG,gBAAgB;AACjF,QAAI,CAAC,yBAAyB;AAC5B,YAAM,IAAI,MAAM,4BAA4B,SAAS,EAAE;;AAIzD,QAAI,CAAC,KAAK,oBAAoB,IAAI,uBAAuB,GAAG;AAE1D,WAAK,oBAAoB,IAAI,yBAAyB,IAAI,wBAAuB,CAAE;;AAIrF,WAAO,KAAK,oBAAoB,IAAI,uBAAuB;EAC7D;;;;;;;;;;;;;;;;;;;;;EAsBQ,iBAAiB,EAAE,IAAG,GAE7B;AACC,UAAM,cAAc,IAAI;AACxB,UAAM,cAAc,IAAI;AAExB,eAAW,WAAW,qBAAqB;AACzC,YAAM,gBAAgB,oBAAoB,OAA6B;AACvE,UAAI,eAAe,cAAc,MAAM,SAAS,WAAW,GAAG;AAC5D,eAAO;iBACE,eAAe,cAAc,MAAM,SAAS,WAAW,GAAG;AACnE,eAAO;;;AAIX,UAAM,IAAI,MAAM,8DAA8D,WAAW,SAAS,WAAW,EAAE;EACjH;;;;;;;;;;;;;;;;EAiBc,cAAc,EAAE,OAAM,GAEnC;;AAEC,YAAM,aAAa,MAAM,KAAK,UAAU,IAAI,MAAM;AAElD,UAAI,CAAC,YAAY;AACf,cAAM,IAAI,MAAM,kBAAkB,MAAM,EAAE;;AAG5C,aAAO;IACT,CAAC;;;;;ACxhBH;;;;;;qBAAAE;EAAA;;IAAAC,gBAAA;AAmBM,SAAU,sBAAsB,QAGrC;AACC,MAAI,CAAC,UAAU,OAAO,aAAa,UAAa,OAAO,aAAa,QAAW;AAC7E,UAAM,IAAI,UAAU,iEAAiE;;AAEvF,QAAM,EAAE,UAAU,SAAQ,IAAK;AAC/B,MAAI,EAAE,YAAY,WAAW;AAC3B,UAAM,IAAI,UAAU,gCAAgC,QAAQ,GAAG;;AAEnE;AAkBM,SAAU,mBAAmB,QAElC;AACC,MAAI,CAAC,UAAU,OAAO,aAAa,UAAa,OAAO,sBAAsB,QAAW;AACtF,UAAM,IAAI,UAAU,wEAAwE;;AAE9F,QAAM,EAAE,UAAU,kBAAiB,IAAK;AACxC,MACG,MAAM,QAAQ,iBAAiB,KAAK,CAAC,kBAAkB,SAAS,QAAQ,KACxE,6BAA6B,OAAO,CAAC,kBAAkB,IAAI,QAAQ,KACnE,6BAA6B,OAAO,CAAC,kBAAkB,IAAI,QAAQ,GACpE;AACA,UAAM,kBAAkB,MAAM,KAAM,6BAA6B,MAAO,kBAAkB,KAAI,IAAK,iBAAiB,EAAE,KAAK,IAAI;AAC/H,UAAM,IAAI,UAAU,kBAAkB,QAAQ,sBAAsB,eAAe,GAAG;;AAE1F;AA2BM,SAAU,uCAAuC,WAAc;AACnE,QAAM,uBAA+C;IACnD,WAAc;IACd,SAAc;IACd,SAAc;IACd,SAAc;IACd,aAAc;;AAKhB,MAAI,UAAU,OAAO,OAAO,OAAO,oBAAoB,EAAE,SAAS,UAAU,GAAG,GAAG;AAChF,WAAO,UAAU;;AAInB,MAAI,UAAU,OAAO,OAAO,KAAK,oBAAoB,EAAE,SAAS,UAAU,GAAG,GAAG;AAC9E,WAAO,qBAAqB,UAAU,GAAG;;AAG3C,QAAM,IAAI,MACR,8DAA8D,UAAU,GAAG,SAAS,UAAU,GAAG,6BACtE,OAAO,OAAO,oBAAoB,EAAE,KAAK,IAAI,CAAC,6BAC9C,OAAO,KAAK,oBAAoB,EAAE,KAAK,IAAI,CAAC,GAAG;AAE9E;AA6BM,SAAU,uBAAoB;AAClC,MAAI,WAAW,UAAU,WAAW,OAAO,QAAQ;AACjD,WAAO;SACF;AACL,WAAO;;AAEX;AAsBM,SAAUC,aAAY,aAAmB;AAC7C,SAAO,YAAiB,WAAW;AACrC;AA2BM,SAAU,aAAU;AACxB,QAAM,OAAOC,QAAO,WAAU;AAE9B,SAAO;AACT;;;;;;;;;;;;;;;AC/MA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+CM,IAAO,SAAP,MAAO,QAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BV,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,iBAAkB,OAAO,aAAa,eAAe;AAG3D,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,QAAO,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG3E,YAAM,iBAAiB,OAAO,aAAa,eAAe;AAG1D,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAM,QAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,OAAO,MAAM,iBAAgB;AAGrD,YAAM,aAAa,MAAM,QAAO,kBAAkB,EAAE,gBAAe,CAAE;AAGrE,iBAAW,MAAM,MAAM,qBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAE,gBAAgB,GAAG,KAAK,IAAI,QAAQ,WAAW;AACnD,cAAM,IAAI,MAAM,wDAAwD;;AAI1E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAAC,gBAAgB,UAAU,GAAG;AAChC,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,YAAM,kBAAkB,QAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,CAAC,eAAe,SAAS,GAAG;AAC9B,cAAM,IAAI,MAAM,yDAAyD;;AAI3E,YAAM,iBAAiB,QAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAElE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,iGAAiG;;AAInH,YAAM,mBAAmB,MAAM,QAAO,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACnF,YAAM,kBAAkB,MAAM,QAAO,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAG/E,YAAM,eAAe,OAAO,gBAAgB,kBAAkB,eAAe;AAE7E,aAAO;IACT,CAAC;;;;;;;;;;;ACjZH,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;AC+gBA,IAAAC,gBAAA;AAWA,IAAY;CAAZ,SAAYC,8BAA2B;AAOrC,EAAAA,6BAAA,gBAAA,IAAA;AASA,EAAAA,6BAAA,iBAAA,IAAA;AAQA,EAAAA,6BAAA,cAAA,IAAA;AAQA,EAAAA,6BAAA,sBAAA,IAAA;AAQA,EAAAA,6BAAA,sBAAA,IAAA;AACF,GAzCY,gCAAA,8BAA2B,CAAA,EAAA;;;ACxcvC,IAAAC,gBAAA;AAKO,IAAM,8BAAmD;EAC9D,YAAwB;EACxB,uBAAwB,CAAA;EACxB,aAAwB;EACxB,qBAAwB,CAAA;;;;AC3F1B,IAAAC,gBAAA;AAiBM,IAAO,MAAP,MAAO,KAAG;;;;;;;;;;;;EAyFd,YAAY,EAAE,QAAQ,IAAI,MAAM,OAAO,UAAU,OAAM,GAOtD;AACC,SAAK,MAAM,OAAO,MAAM,IAAI,EAAE;AAC9B,SAAK,SAAS;AACd,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,SAAS;EAChB;;;;;;;;;;;;;;;;;;;EAoBA,OAAO,MAAM,QAAc;AAEzB,QAAI,CAAC;AAAQ,aAAO;AAGpB,UAAM,QAAQ,KAAI,gBAAgB,KAAK,MAAM;AAG7C,QAAI,CAAC,SAAS,CAAC,MAAM;AAAQ,aAAO;AAGpC,UAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,SAAQ,IAAK,MAAM;AAGpD,UAAM,MAAW;MACf,KAAK,OAAO,MAAM,IAAI,EAAE;MACxB;MACA;;AAIF,QAAI;AAAM,UAAI,OAAO;AAGrB,QAAI;AAAO,UAAI,QAAQ,MAAM,MAAM,CAAC;AAGpC,QAAI;AAAU,UAAI,WAAW,SAAS,MAAM,CAAC;AAG7C,QAAI,OAAO;AACT,YAAM,eAAe,CAAA;AAErB,YAAM,aAAa,MAAM,MAAM,CAAC,EAAE,MAAM,GAAG;AAC3C,iBAAW,QAAQ,YAAY;AAE7B,cAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,GAAG;AACnC,qBAAa,GAAG,IAAI;;AAEtB,UAAI,SAAS;;AAGf,WAAO;EACT;;AArKgB,IAAA,iBAAiB;AAEjB,IAAA,sBAAsB;AAEtB,IAAA,kBAAkB,qBAAqB,IAAI,mBAAmB;AAE9D,IAAA,oBAAoB,OAAO,IAAI,eAAe,QAAQ,IAAI,eAAe;AAEzE,IAAA,eAAe;AAEf,IAAA,gBAAgB;AAEhB,IAAA,mBAAmB;AAEnB,IAAA,kBAAkB,IAAI,OACpC,kBAAkB,IAAI,cAAc,WAAW,IAAI,iBAAiB,YAAY,IAAI,YAAY,aAAa,IAAI,aAAa,gBAAgB,IAAI,gBAAgB,IAAI;;;AClC1K,IAAAC,gBAAA;AAGM,IAAO,WAAP,MAAO,kBAAiB,MAAK;;;;;;;EAOjC,YAAmB,MAAoBC,UAAe;AACpD,UAAMA,QAAO;AADI,SAAA,OAAA;AAEjB,SAAK,OAAO;AAIZ,WAAO,eAAe,MAAM,WAAW,SAAS;AAIhD,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,SAAQ;;EAE1C;;AAMF,IAAY;CAAZ,SAAYC,eAAY;AAEtB,EAAAA,cAAA,YAAA,IAAA;AAGA,EAAAA,cAAA,oBAAA,IAAA;AAGA,EAAAA,cAAA,eAAA,IAAA;AAGA,EAAAA,cAAA,oBAAA,IAAA;AAGA,EAAAA,cAAA,0BAAA,IAAA;AAGA,EAAAA,cAAA,eAAA,IAAA;AAGA,EAAAA,cAAA,kBAAA,IAAA;AAGA,EAAAA,cAAA,wBAAA,IAAA;AAGA,EAAAA,cAAA,sBAAA,IAAA;AAGA,EAAAA,cAAA,kBAAA,IAAA;AAGA,EAAAA,cAAA,UAAA,IAAA;AAMA,EAAAA,cAAA,4BAAA,IAAA;AAGA,EAAAA,cAAA,0BAAA,IAAA;AACF,GA1CY,iBAAA,eAAY,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgDlB,SAAU,mBAAmB,OAAc;AAC/C,MAAI,OAAO,UAAU;AAAU,WAAO;AACtC,MAAI,MAAM,WAAW;AAAG,WAAO;AAC/B,SAAO,MAAM,MAAM,GAAG,EAAE,IAAG;AAC7B;AAsBM,SAAU,YAAY,EAAE,aAAa,IAAI,KAAI,GAIlD;;AACC,UAAO,MAAA,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,aAAU;AAC5C,QAAI,MAAM,QAAQ,OAAO;AAAI,aAAO;AACpC,QAAI,QAAQ,QAAQ,SAAS;AAAM,aAAO;AAC1C,WAAO;EACT,CAAC,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;AACR;AA+BM,SAAgB,2BAA2B,EAAE,aAAa,cAAc,mBAAkB,GAI/F;;AAEC,UAAM,sBAAsB,uBAAuB,EAAE,YAAW,CAAE;AAElE,aAAS,UAAU,qBAAqB;AACtC,UAAI,gBAAgB,OAAO,cAAc;AACvC,cAAM,sBAAsB,MAAM,qBAAqB,EAAE,KAAK,aAAY,CAAE;AAC5E,YAAI,yBAAwB,MAAM,qBAAqB,EAAE,KAAK,OAAO,aAAY,CAAE,IAAG;AACpF,iBAAO;;iBAEA,sBAAsB,OAAO,oBAAoB;AAC1D,YAAI,uBAAuB,OAAO,oBAAoB;AACpD,iBAAO;;;;AAKb,WAAO;EACT,CAAC;;AAwBK,SAAU,uBAAuB,EAAE,YAAW,GAEnD;;AACC,MAAI,CAAC;AAAa,UAAM,IAAI,UAAU,2CAA2C;AAEjF,QAAM,sBAA+C,CAAA;AAGrD,sBAAoB,KAAK,IAAG,MAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,uBAAuB,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AAGjG,SAAO,KAAK,2BAA2B,EAAE,QAAQ,CAAC,iBAAgB;;AAChE,wBAAoB,KAClB,IAAGC,OAAAC,MAAC,YAAY,YAAiC,OAAwC,QAAAA,QAAA,SAAA,SAAAA,IACrF,OAAO,uBAAuB,OAAC,QAAAD,QAAA,SAAAA,MAAI,CAAA,CAAE;EAE7C,CAAC;AAED,SAAO;AACT;AA8CM,SAAU,2BAA2B,EAAE,YAAW,GAEvD;AAEC,QAAM,sBAAsB,uBAAuB,EAAE,YAAW,CAAE;AAGlE,QAAM,QAAQ,oBAAoB,IAAI,YAAU,OAAO,IAAI;AAE3D,SAAO,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAC3B;AAqCM,SAAU,iCAAiC,EAAE,aAAa,SAAQ,GAGvE;AACC,QAAM,gBAA+C,CAAA;AAErD,SAAO,KAAK,2BAA2B,EAAE,QAAQ,CAAC,iBAAgB;AAChE,QAAI,MAAM,QAAQ,YAAY,YAAiC,CAAC,GAAG;AACjE,YAAM,sBAAsB,YAAY,YAAiC;AAEzE,YAAM,mBAAmB,mBAAmB,QAAQ;AAIpD,YAAM,mBAAmB,oBAAoB,KAAK,YAAS;AACzD,cAAM,qBAAqB,mBAAmB,MAAM,MAAM;AAC1D,cAAM,wBAAwB,wBAAwB,MAAM,KAAK,mBAAmB,OAAO,EAAE,MAAM;AACnG,eAAO,sBAAsB;MAC/B,CAAC;AAED,UAAI,kBAAkB;AACpB,sBAAc,KAAK,YAA2C;;;EAGpE,CAAC;AAED,SAAO;AACT;AA2BM,SAAU,aAAa,KAAY;AAEvC,MAAI,CAAC,OAAO,OAAO,QAAQ,YAAY,QAAQ;AAAM,WAAO;AAG5D,SAAO,QAAQ,OAAO,UAAU,OAAO,qBAAqB;AAC9D;AAkDM,SAAU,gBAAgB,KAAY;AAE1C,MAAI,CAAC,aAAa,GAAG;AAAG,WAAO;AAG/B,MAAI,IAAI,SAAS;AAAwB,WAAO;AAGhD,MAAI,EAAE,SAAS,OAAO,SAAS;AAAM,WAAO;AAG5C,QAAM,wBAAwB,CAAC,SAC7B,OAAO,SAAS,YAAY,MAAM,QAAQ,IAAI,KAAK,KAAK,MAAM,UAAQ,OAAO,SAAS,QAAQ;AAChG,SAAQ,sBAAsB,IAAI,GAAG,KAAO,sBAAsB,IAAI,GAAG;AAC3E;AA2BM,SAAU,wBAAwB,KAAY;AAElD,MAAI,CAAC,OAAO,OAAO,QAAQ,YAAY,QAAQ;AAAM,WAAO;AAG5D,MAAI,EAAE,QAAQ,OAAO,UAAU,OAAO,gBAAgB;AAAM,WAAO;AAEnE,MAAI,OAAO,IAAI,OAAO;AAAU,WAAO;AACvC,MAAI,OAAO,IAAI,SAAS;AAAU,WAAO;AACzC,MAAI,OAAO,IAAI,eAAe;AAAU,WAAO;AAE/C,SAAO;AACT;AAoBM,SAAU,sBAAsB,EAAE,UAAU,gBAAgB,eAAc,GACpC;AAE1C,QAAM,cAAc,WAAW,UAAU;IACvC,MAAO;IACP,MAAO;IACP,MAAO;GACR;AACD,QAAM,iBAAiB,QAAQ,WAAW,WAAW,EAAE,YAAW;AAClE,QAAM,iBAAiB,QAAQ,UAAU,cAAc,EAAE,YAAW;AAEpE,SAAO;AACT;AAsBM,SAAU,sBAAsB,EAAE,eAAc,GAErD;AACC,MAAI;AACF,UAAM,iBAAiB,QAAQ,UAAU,cAAc,EAAE,YAAW;AACpE,UAAM,cAAc,QAAQ,UAAU,cAAc,EAAE,aAAY;AAClE,UAAM,EAAE,MAAM,MAAM,KAAI,IAAK,WAAW,aAAa,EAAE,cAAc,YAAW,CAAE;AAElF,WAAO,EAAE,UAAU,MAAM,gBAAgB,MAAM,gBAAgB,KAAI;WAC5D,OAAY;AACnB,UAAM,IAAI,SAAS,aAAa,YAAY,iCAAiC,cAAc,EAAE;;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxdM,IAAO,YAAP,MAAO,WAAS;EAqBpB,YAAY,EAAE,KAAK,UAAU,UAAU,YAAAE,YAAU,GAKhD;AACC,SAAK,MAAM;AACX,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,aAAaA;EACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCa,SAAM;;AAEjB,UAAI,EAAE,MAAM,QAAQ,KAAK,SAAS,kBAAkB,KAAK,KAAK,SAAS,mBAAmB,SAAS,IAAI;AACrG,cAAM,IAAI,MAAM,qBAAqB,KAAK,GAAG,mCAAmC;;AAIlF,UAAI,cAA2B;QAC7B,KAAW,KAAK;QAChB,UAAW,KAAK;QAChB,UAAW,KAAK;;AAIlB,UAAI,eAAe,KAAK,cAAc,OAAO,KAAK,WAAW,cAAc,YAAY;AACrF,cAAM,cAAqB,CAAA;AAC3B,iBAAS,MAAM,KAAK,SAAS,oBAAoB;AAC/C,cAAI,CAAC,GAAG,cAAc;AACpB,kBAAM,IAAI,MAAM,wBAAwB,GAAG,EAAE,+CAA+C;;AAI9F,gBAAM,SAAS,MAAM,KAAK,WAAW,UAAU,EAAE,KAAK,GAAG,aAAY,CAAE;AAGvE,gBAAM,aAAa,MAAM,KAAK,WAAW,UAAU,EAAE,OAAM,CAAE;AAG7D,sBAAY,KAAI,OAAA,OAAA,CAAA,GAAM,UAAU,CAAA;;AAElC,oBAAY,cAAc;;AAG5B,aAAO;IACT,CAAC;;;;;;;;;;;;;;;EAeY,UAAU,QAA6B;;;AAGlD,YAAM,sBAAqB,KAAA,KAAK,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAC3D,QAAK;AAAA,YAAAC,KAAA;AAAC,eAAA,mBAAmB,GAAG,EAAE,QAAOA,MAAA,mBAAmB,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,QAAQ,OAAC,QAAAA,QAAA,SAAAA,MAAI,oBAAmB,KAAA,KAAK,SAAS,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,CAAC;MAAE,CAAA;AAGtI,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAI,SAAS,aAAa,eAAe,0FAA0F;;AAI3I,YAAM,SAAS,MAAM,KAAK,WAAW,UAAU,EAAE,KAAK,mBAAmB,aAAY,CAAE;AAIvF,YAAM,YAAY,MAAM,KAAK,WAAW,aAAa,EAAE,OAAM,CAAE;AAG/D,YAAMD,cAAa,KAAK;AAGxB,YAAM,YAAY,cAAY,uCAAuC,SAAS;AAE9E,aAAO;QACL;QACA,OAAY,mBAAmB;QAEzB,KAAK,EAAE,KAAI,GAAsB;;AACrC,kBAAM,YAAY,MAAMA,YAAW,KAAK,EAAE,MAAM,OAAe,CAAE;AACjE,mBAAO;UACT,CAAC;;QAEK,OAAO,EAAE,MAAM,UAAS,GAAwB;;AACpD,kBAAME,WAAU,MAAMF,YAAW,OAAO,EAAE,MAAM,KAAK,WAAY,UAAS,CAAE;AAC5E,mBAAOE;UACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BE,OAAa,OAAO,EAAE,aAAa,YAAAF,cAAa,IAAI,gBAAe,EAAE,GAG3E;;;AAEC,YAAM,sBAAsB,uBAAuB,EAAE,aAAa,YAAY,SAAQ,CAAE;AAGxF,UAAI,oBAAoB,WAAW,GAAG;AACpC,cAAM,IAAI,SAAS,aAAa,oBAAoB,+DAA+D;;AAIrH,eAAS,QAAO,KAAA,YAAY,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAC7C,cAAMA,YAAW,UAAU,EAAE,IAAG,CAAE;;AAKpC,eAAS,MAAM,qBAAqB;AAClC,YAAI,CAAC,GAAG,cAAc;AACpB,gBAAM,IAAI,MAAM,wBAAwB,GAAG,EAAE,+CAA+C;;AAI9F,cAAM,SAAS,MAAMA,YAAW,UAAU,EAAE,KAAK,GAAG,aAAY,CAAE;AAGlE,cAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;;AAI1C,YAAM,MAAM,IAAI,WAAU;QACxB,KAAW,YAAY;QACvB,UAAW,YAAY;QACvB,UAAW,YAAY;QACvB,YAAAA;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCL,IAAO,YAAP,MAAgB;;;;;;;;;;;;;;EAcb,OAAa,iBAAiB,SAGpC;;AACC,YAAM,IAAI,MAAM,gFAAgF;IAClG,CAAC;;;;;;;;;;;EAWM,OAAa,QAAQ,SAAiB,UAA+B;;AAC1E,YAAM,IAAI,MAAM,uEAAuE;IACzF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DH,IAAM,sBAAsB;AAa5B,IAAM,gCAAgC;AAQtC,IAAM,iBAAiB;AAYvB,IAAM,qBAAqB;AAY3B,IAAM,kBAAkB;AAYxB,IAAY;CAAZ,SAAYG,0BAAuB;AAKjC,EAAAA,yBAAAA,yBAAA,cAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,cAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,YAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,aAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,eAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,iBAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,QAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,sBAAA,IAAA,CAAA,IAAA;AACF,GAhDY,4BAAA,0BAAuB,CAAA,EAAA;AA4DnC,IAAY;CAAZ,SAAYC,0BAAuB;AAKjC,EAAAA,yBAAAA,yBAAA,SAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,WAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,WAAA,IAAA,CAAA,IAAA;AACF,GAlBY,4BAAA,0BAAuB,CAAA,EAAA;AAwBnC,IAAY;CAAZ,SAAYC,iCAA8B;AAIxC,EAAAA,gCAAA,gBAAA,IAAA;AAMA,EAAAA,gCAAA,iBAAA,IAAA;AAMA,EAAAA,gCAAA,sBAAA,IAAA;AAKA,EAAAA,gCAAA,sBAAA,IAAA;AAMA,EAAAA,gCAAA,cAAA,IAAA;AACF,GA5BY,mCAAA,iCAA8B,CAAA,EAAA;AAkC1C,IAAM,wBAAwB;EAC5B,SAAY,wBAAwB;EACpC,QAAY,wBAAwB;EACpC,OAAY,wBAAwB;EACpC,SAAY,wBAAwB;EACpC,WAAY,wBAAwB;EACpC,WAAY,wBAAwB;;AAsDhC,IAAO,SAAP,MAAO,gBAAe,UAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAI,gBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAMJ,WAAI,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,EAAE,GAAG,aAAa,sBAAsB,GAAG;AACrF,cAAM,IAAI,MAAM,8DAA8D;;AAIhF,YAAM,aAAY,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,QAAM,QAAQ,EAAE,EAAE,IAAI,QAAM,GAAG,EAAE;AACvF,UAAI,aAAa,UAAU,WAAW,IAAI,IAAI,SAAS,EAAE,MAAM;AAC7D,cAAM,IAAI,MAAM,oDAAoD;;AAItE,WAAI,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,OAAK,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,eAAe,GAAG;AACvE,cAAM,IAAI,MAAM,sDAAsD;;AAIxE,YAAM,iBAAiB,MAAMA,YAAW,YAAY,EAAE,WAAW,UAAS,CAAE;AAC5E,YAAM,cAAc,MAAMA,YAAW,aAAa,EAAE,QAAQ,eAAc,CAAE;AAG5E,YAAM,SAAS,MAAM,YAAY,wBAAwB,EAAE,YAAW,CAAE;AAGxE,YAAM,WAAQ,OAAA,OAAA,OAAA,OAAA,EACZ,IAAI,OAAM,GACP,QAAQ,eAAe,EAAE,aAAa,QAAQ,YAAW,CAAE,GAC3D,QAAQ,eAAe,EAAE,YAAY,QAAQ,YAAW,CAAE;AAI/D,YAAM,2BAA2B,CAAC,IAAG,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AACtE,UAAI,EAAC,6BAAwB,QAAxB,6BAAwB,SAAA,SAAxB,yBAA0B,KAAK,QAAK;AAAA,YAAAC;AAAC,iBAAAA,MAAA,GAAG,QAAE,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,GAAG,EAAE,IAAG,OAAO;MAAG,CAAA,IAAG;AAE1E,iCAAyB,QAAQ;UAC/B,WAAY;UACZ,IAAY;UACZ,UAAY,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;SACjG;;AAKH,iBAAW,MAAM,0BAA0B;AAGzC,cAAM,SAAU,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG,EAAE,IAAG,MAAO,MAChD,iBACA,MAAMD,YAAW,YAAY,EAAE,WAAW,GAAG,UAAS,CAAE;AAE5D,cAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAG1D,YAAI,YAAW,MAAA,KAAA,GAAG,QAAE,QAAA,OAAA,SAAA,KAAI,UAAU,SAAG,QAAA,OAAA,SAAA,KAAI,MAAM,qBAAqB,EAAE,KAAK,UAAS,CAAE;AACtF,mBAAW,GAAG,MAAM,IAAI,mBAAmB,QAAQ,CAAC;AAGpD,SAAA,KAAA,SAAS,wBAAkB,QAAA,OAAA,SAAA,KAA3B,SAAS,qBAAuB,CAAA;AAGhC,iBAAS,mBAAmB,KAAK;UAC/B,IAAe;UACf,MAAe;UACf,aAAe,KAAA,GAAG,gBAAU,QAAA,OAAA,SAAA,KAAI;UAChC,cAAe;SAChB;AAGD,mBAAW,YAAW,KAAA,GAAG,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAEvC,cAAI,CAAC,SAAS,OAAO;AAAG,qBAAS,OAAO,IAAI,CAAA;AAE5C,mBAAS,OAAO,EAAG,KAAK,QAAQ;;;AAKpC,OAAA,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ,aAAU;;AAClC,SAAAC,MAAA,SAAS,aAAO,QAAAA,QAAA,SAAAA,MAAhB,SAAS,UAAY,CAAA;AACrB,gBAAQ,KAAK,GAAG,MAAM,IAAI,QAAQ,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE;AACrD,iBAAS,QAAQ,KAAK,OAAO;MAC/B,CAAC;AAID,YAAM,MAAM,IAAI,UAAU;QACxB,KAAW;QACX;QACA,UAAQ,OAAA,OAAA,EACN,WAAW,MAAK,GACb,QAAQ,SAAS,EAAE,OAAO,QAAQ,MAAK,CAAE;QAE9C,YAAAD;OACD;AAGD,WAAI,KAAA,QAAQ,aAAO,QAAA,OAAA,SAAA,KAAI,MAAM;AAC3B,cAAM,qBAAqB,MAAM,QAAO,QAAQ,EAAE,KAAK,YAAY,QAAQ,WAAU,CAAE;AACvF,YAAI,WAAW,mBAAmB;;AAGpC,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BF,OAAa,OAAO,EAAE,aAAa,YAAAA,cAAa,IAAI,gBAAe,EAAE,GAG3E;;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAI,SAAS,aAAa,oBAAoB,sBAAsB;;AAG5E,YAAM,MAAM,MAAM,UAAU,OAAO,EAAE,aAAa,YAAAA,YAAU,CAAE;AAG9D,UAAI,GAAC,KAAA,IAAI,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAK;AAAA,YAAAC;AAAC,iBAAAA,MAAA,GAAG,QAAE,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,GAAG,EAAE,IAAG,OAAO;MAAG,CAAA,IAAG;AACjF,cAAM,IAAI,SAAS,aAAa,oBAAoB,2CAA2C;;AAGjG,aAAO;;;;;;;;;;;;;;EAcF,OAAa,iBAAiB,EAAE,aAAa,WAAW,KAAI,GAGlE;;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAKjG,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KACzD,QAAK;AAAA,YAAAA,KAAA;AAAC,eAAA,mBAAmB,GAAG,EAAE,QAAOA,MAAA,mBAAmB,QAAQ,OAAC,QAAAA,QAAA,SAAAA,MAAI,oBAAmB,KAAA,YAAY,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,CAAC;MAAE,CAAA;AAG5H,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAI,SAAS,aAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCF,OAAa,QAAQ,EAAE,KAAK,aAAa,oBAAmB,GAGlE;;AACC,YAAM,qBAAqB,MAAM,eAAe,IAAI,EAAE,KAAK,WAAU,CAAE;AAEvE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,QAAQ,QAAgB,UAAgC,CAAA,GAAE;;;AAE5E,YAAM,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAU,QAAA,OAAA,SAAA,KAAI;AAE1C,UAAI;AAEF,cAAM,YAAY,wBAAwB,EAAE,OAAM,CAAE;AAGpD,cAAM,EAAE,aAAa,oBAAmB,IAAK,MAAM,eAAe,IAAI,EAAE,QAAQ,WAAU,CAAE;AAG5F,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA;UAC9B;UACA;QAAmB,CAAA;eAGd,OAAY;AAEnB,YAAI,EAAE,iBAAiB;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;;;;AA1T7C,OAAA,aAAa;AAwUvB,IAAO,iBAAP,MAAO,gBAAc;;;;;;;;;;EAUlB,OAAa,IAAI,EAAE,QAAQ,WAAU,GAG3C;;AAEC,YAAM,iBAAiB,YAAY,6BAA6B,EAAE,OAAM,CAAE;AAG1E,YAAM,eAAe,MAAM,gBAAe,SAAS,EAAE,YAAY,eAAc,CAAE;AAGjF,YAAM,YAAY,MAAM,YAAY,qBAAqB,EAAE,aAAY,CAAE;AAGzE,YAAM,mBAAmB,MAAM,gBAAe,cAAc,EAAE,QAAQ,UAAS,CAAE;AAGjF,uBAAiB,oBAAoB,YAAY,aAAa,IAAI,SAAQ;AAE1E,aAAO;IACT,CAAC;;;;;;;;;;;EAWM,OAAa,IAAI,EAAE,KAAK,WAAU,GAGxC;;AAEC,YAAM,YAAY,MAAM,gBAAe,YAAY;QACjD,aAAc,IAAI;QAClB,aAAc,IAAI;OACnB;AAGD,YAAM,eAAe,MAAM,YAAY,sBAAsB;QAC3D;QACA,gBAAiB,YAAY,6BAA6B,EAAE,QAAQ,IAAI,IAAG,CAAE;QAC7E,QAAiB,MAAM,IAAI,UAAU,EAAE,UAAU,IAAG,CAAE;OACvD;AAGD,YAAM,YAAY,MAAM,gBAAe,SAAS,EAAE,YAAY,aAAY,CAAE;AAI5E,aAAO;QACL,aAAsB,IAAI;QAC1B,qBAAmB,OAAA,OAAA,OAAA,OAAA,CAAA,GACd,IAAI,QAAQ,GAAA,EACf,WAAY,WACZ,WAAY,aAAa,IAAI,SAAQ,EAAE,CAAA;QAEzC,yBAAyB,CAAA;;IAE7B,CAAC;;;;;;;;;;;;EAYO,OAAa,SAAS,EAAE,YAAY,eAAc,GAGzD;;AAEC,YAAM,aAAa,QAAQ,WAAW,cAAc,EAAE,UAAS;AAG/D,YAAM,MAAM,IAAI,IAAI,YAAY,UAAU,EAAE;AAG5C,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK,EAAE,QAAQ,MAAK,CAAE;AAE7C,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAI,SAAS,aAAa,UAAU,+BAA+B,UAAU,EAAE;;eAGhF,OAAY;AACnB,YAAI,iBAAiB;AAAU,gBAAM;AACrC,cAAM,IAAI,SAAS,aAAa,eAAe,iCAAiC,MAAM,OAAO,EAAE;;AAIjG,YAAM,eAAe,MAAM,SAAS,YAAW;AAE/C,UAAG,CAAC,cAAc;AAChB,cAAM,IAAI,SAAS,aAAa,UAAU,+BAA+B,UAAU,EAAE;;AAGvF,UAAI,aAAa,aAAa,IAAI;AAChC,cAAM,IAAI,SAAS,aAAa,0BAA0B,qDAAqD,aAAa,UAAU,EAAE;;AAG1I,UAAI,aAAa,aAAa,MAAM;AAClC,cAAM,IAAI,SAAS,aAAa,0BAA0B,2CAA2C,aAAa,UAAU,EAAE;;AAIhI,YAAM,eAA6B;QACjC,GAAM;QACN,KAAM,OAAO,IAAI,SAAS,YAAY,EAAE,aAAa,EAAE,CAAC;QACxD,KAAM,IAAI,WAAW,cAAc,GAAG,EAAE;QACxC,GAAM,IAAI,WAAW,cAAc,EAAE;;AAGvC,aAAO;IACT,CAAC;;;;;;;;;;;;EAYO,OAAa,SAAS,EAAE,YAAY,aAAY,GAGvD;;AAEC,YAAM,aAAa,QAAQ,WAAW,aAAa,CAAC,EAAE,UAAS;AAG/D,YAAM,MAAM,IAAI,IAAI,YAAY,UAAU,EAAE;AAG5C,YAAM,OAAO,IAAI,WAAW,aAAa,EAAE,SAAS,EAAE;AACtD,WAAK,IAAI,aAAa,KAAK,CAAC;AAC5B,UAAI,SAAS,KAAK,MAAM,EAAE,aAAa,aAAa,IAAI,QAAQ,OAAO,aAAa,GAAG,CAAC;AACxF,WAAK,IAAI,aAAa,GAAG,aAAa,IAAI,SAAS,CAAC;AAGpD,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK;UAC1B,QAAU;UACV,SAAU,EAAE,gBAAgB,2BAA0B;UACtD;SACD;eAEM,OAAY;AACnB,cAAM,IAAI,SAAS,aAAa,eAAe,+BAA+B,MAAM,OAAO,EAAE;;AAI/F,aAAO,SAAS;IAClB,CAAC;;;;;;;;;;;;;EAaM,OAAa,cAAc,EAAE,QAAQ,UAAS,GAGpD;;;AAEC,YAAM,cAA2B,EAAE,IAAI,OAAM;AAG7C,YAAM,sBAAmC;QACvC,WAAW;;AAGb,YAAM,WAAW,oBAAI,IAAG;AAExB,iBAAW,WAAU,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAE7C,YAAI,OAAO,SAAS;AAAO;AAG3B,cAAM,cAAc,OAAO,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC;AAEzD,gBAAQ,MAAM;UAEZ,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,OAAO,YAAY,qBAAqB,OAAO,IAAI;AAGzD,wBAAY,cAAc,KAAK,MAAM,eAAe;AAEpD;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,OAAO,YAAY,qBAAqB,OAAO,IAAI;AAGzD,wBAAY,aAAa,KAAK,SAAS,eAAe,IAAI,KAAK,MAAM,eAAe,IAAI;AAExF;;UAIF,KAAK,YAAY,WAAW,GAAG,GAAG;AAGhC,kBAAM,EAAE,IAAI,GAAG,GAAG,EAAC,IAAK,YAAY,qBAAqB,OAAO,IAAI;AAGpE,kBAAM,iBAAiB,QAAQ,UAAU,CAAC,EAAE,aAAY;AAGxD,kBAAM,aAAa,wBAAwB,OAAO,CAAC,CAAC;AAGpD,gBAAI,YAAY,MAAM,YAAY,aAAa,UAAU,EAAE,iBAAiB,EAAE,eAAc,CAAE;AAG9F,aAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,KAA9B,YAAY,qBAAuB,CAAA;AAGnC,kBAAM,WAAW,GAAG,MAAM,IAAI,EAAE;AAGhC,wBAAY,mBAAmB,KAAK;cAClC,IAAe;cACf,MAAe;cACf,YAAe,MAAC,QAAD,MAAC,SAAD,IAAK;cACpB,cAAe;aAChB;AAID,qBAAS,IAAI,aAAa,QAAQ;AAElC;;UAIF,KAAK,YAAY,WAAW,GAAG,GAAG;AAGhC,kBAAM,KAAqC,YAAY,qBAAqB,OAAO,IAAI,GAAjF,EAAE,IAAI,GAAG,GAAE,IAAA,IAAK,mBAAgBC,QAAA,IAAhC,CAAA,MAAA,KAAA,IAAA,CAAkC;AAGxC,kBAAM,kBAAkB,GAAG,SAAS,eAAe,IAAI,GAAG,MAAM,eAAe,IAAI;AAGnF,kBAAM,oBAAoB,OAAO,YAAY,OAAO,QAAQ,gBAAgB,EAAE,IAC5E,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,eAAe,IAAI,EAAE,MAAM,eAAe,IAAI,CAAC,CAAC,CAC5E;AAGD,aAAA,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,KAAnB,YAAY,UAAY,CAAA;AAExB,wBAAY,QAAQ,KAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACnB,iBAAiB,GAAA,EACpB,IAAO,GAAG,MAAM,IAAI,EAAE,IACtB,MAAO,GACP,gBAAe,CAAA,CAAA;AAGjB;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,EAAE,IAAI,MAAK,IAAK,YAAY,qBAAqB,OAAO,IAAI;AAGlE,gCAAoB,QAAQ,MAAM,MAAM,eAAe,EAAE,IAAI,iBAAe,OAAO,WAAW,CAAC;AAE/F;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,uBAAuB,CAAC,SAA2B,KACtD,MAAM,eAAe,EACrB,IAAI,CAAAC,iBAAe,SAAS,IAAIA,YAAW,CAAC,EAC5C,OAAO,CAAC,OAAqB,OAAO,OAAO,QAAQ;AAGtD,kBAAM,EAAE,MAAM,KAAK,KAAK,KAAK,IAAG,IAAK,YAAY,qBAAqB,OAAO,IAAI;AAGjF,gBAAI;AAAM,0BAAY,iBAAiB,qBAAqB,IAAI;AAChE,gBAAI;AAAK,0BAAY,kBAAkB,qBAAqB,GAAG;AAC/D,gBAAI;AAAK,0BAAY,uBAAuB,qBAAqB,GAAG;AACpE,gBAAI;AAAK,0BAAY,uBAAuB,qBAAqB,GAAG;AACpE,gBAAI;AAAK,0BAAY,eAAe,qBAAqB,GAAG;AAE5D;;;;AAKN,aAAO,EAAE,aAAa,qBAAqB,uBAAuB,CAAA,EAAE;;;;;;;;;;;;;EAa/D,OAAa,YAAY,EAAE,aAAa,YAAW,GAGzD;;;AACC,YAAM,mBAAgC,CAAA;AACtC,YAAM,WAAW,oBAAI,IAAG;AACxB,YAAM,aAAuB,CAAA;AAC7B,YAAM,wBAAkC,CAAA;AAGxC,UAAI,YAAY,aAAa;AAC3B,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAO;UACP,MAAO,YAAY,YAAY,KAAK,eAAe;SACpD;;AAIH,UAAI,YAAY,YAAY;AAC1B,cAAM,aAAa,MAAM,QAAQ,YAAY,UAAU,IACnD,YAAY,WAAW,KAAK,eAAe,IAC3C,YAAY;AAChB,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAO;UACP,MAAO;SACR;;AAIH,iBAAW,CAAC,OAAO,EAAE,MAAK,MAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,QAAO,OAAE,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AACzE,cAAM,cAAc,IAAI,KAAK;AAC7B,8BAAsB,KAAK,WAAW;AACtC,YAAI,WAAW,GAAG,GAAG,MAAM,GAAG,EAAE,IAAG;AACnC,iBAAS,IAAI,UAAU,WAAW;AAElC,cAAM,YAAY,GAAG;AAErB,YAAI,GAAE,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,QAAO,UAAU,OAAO,wBAAwB;AAC/D,gBAAM,IAAI,SAAS,aAAa,sBAAsB,wBAAwB,GAAG,EAAE,wCAAuC,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAG,QAAA,OAAA,SAAA,KAAI,WAAW,EAAE;;AAI3J,cAAM,UAAU,wBAAwB,UAAU,GAA2C;AAG7F,cAAM,iBAAiB,MAAM,YAAY,aAAa,UAAU,GAAG,EAAE,iBAAiB,EAAE,UAAS,CAAE;AAGnG,cAAM,qBAAqB,QAAQ,WAAW,cAAc,EAAE,YAAW;AAGzE,cAAM,UAAU,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,IAAI,KAAK,kBAAkB,EAAE;AAG5E,YAAI,GAAG,eAAe,YAAY;AAAI,kBAAQ,KAAK,KAAK,GAAG,UAAU,EAAE;AAGvE,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO,IAAI,WAAW;UACtB,KAAO;UACP,MAAO,QAAQ,KAAK,kBAAkB;SACvC;;AAIH,OAAA,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ,CAAC,SAAS,UAAS;AAC9C,cAAM,cAAc,IAAI,KAAK;AAC7B,mBAAW,KAAK,WAAW;AAC3B,YAAI,EAAE,IAAI,MAAM,GAAG,iBAAiB,GAAE,IAA0B,SAArB,mBAAgBD,QAAK,SAA5D,CAAA,MAAA,QAAA,iBAAA,CAAyD;AAC7D,aAAK,mBAAmB,EAAE;AAC1B,aAAK,MAAM,QAAQ,EAAE,IAAI,GAAG,KAAK,GAAG,IAAI;AAGxC,cAAM,UAAU,OAAO,QAAO,OAAA,OAAA,EAAG,IAAI,GAAG,GAAE,GAAK,gBAAgB,CAAA,EAAI,IACjE,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AAIrC,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO,IAAI,WAAW;UACtB,KAAO;UACP,MAAO,QAAQ,KAAK,kBAAkB;SACvC;MACH,CAAC;AAGD,YAAM,aAAuB,CAAC,KAAK,6BAA6B,EAAE;AAGlE,UAAI,sBAAsB,QAAQ;AAChC,mBAAW,KAAK,MAAM,sBAAsB,KAAK,eAAe,CAAC,EAAE;;AAIrE,aAAO,KAAK,2BAA2B,EAAE,QAAQ,kBAAe;;AAE9D,cAAM,gBAAeD,MAAC,YAAY,YAAiC,OAAW,QAAAA,QAAA,SAAA,SAAAA,IAC1E,IAAI,QAAM,SAAS,IAAI,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE,CAAC;AAG/C,YAAI,cAAc;AAChB,gBAAM,aAAa,+BAA+B,YAA2D;AAC7G,qBAAW,KAAK,GAAG,UAAU,IAAI,aAAa,KAAK,eAAe,CAAC,EAAE;;MAEzE,CAAC;AAGD,UAAI,WAAW,QAAQ;AACrB,mBAAW,KAAK,OAAO,WAAW,KAAK,eAAe,CAAC,EAAE;;AAI3D,WAAI,KAAA,YAAY,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AAG7B,cAAM,QAAQ,YAAY;AAC1B,cAAM,eAAe,MAAM,IAAI,UAAQ,OAAO,SAAS,WAAW,wBAAwB,IAAI,IAAI,IAAI;AAEtG,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAO;UACP,MAAO,MAAM,aAAa,KAAK,eAAe,CAAC;SAChD;;AAIH,uBAAiB,KAAK;QACpB,MAAO;QACP,MAAO;QACP,KAAO;QACP,MAAO,WAAW,KAAK,kBAAkB;OAC1C;AAID,YAAM,CAAC,EAAC,EAAG,UAAU,IAAI,YAAY,GAAG,MAAM,GAAG;AACjD,uBAAiB,QAAQ,YAAU,OAAO,QAAQ,UAAU;AAG5D,YAAM,YAAoB;QACxB,IAAU;QACV,MAAU;QACV,OAAU;QACV,SAAU;;AAGZ,aAAO;;;;AASL,IAAO,cAAP,MAAO,aAAW;;;;;;;;;;EAUf,OAAa,sBAAsB,EAAE,WAAW,gBAAgB,OAAM,GAI1E;;AAMD,YAAM,iBAAiB,KAAK,KAAK,KAAK,IAAG,IAAK,GAAI;AAGlD,YAAM,mBAAmB,OAAgB,SAAS;AAGlD,YAAM,eAAe,gBAAQ,OAAO,EAAE,KAAK,gBAAgB,GAAG,iBAAgB,CAAE,EAAE,SAAS,GAAG,EAAE;AAEhG,UAAI,aAAa,SAAS,KAAM;AAC9B,cAAM,IAAI,SAAS,aAAa,0BAA0B,kDAAkD,aAAa,MAAM,QAAQ;;AAIzI,YAAM,YAAY,MAAM,OAAO,KAAK,EAAE,MAAM,aAAY,CAAE;AAE1D,aAAO,EAAE,GAAG,gBAAgB,KAAK,gBAAgB,KAAK,WAAW,GAAG,iBAAgB;IACtF,CAAC;;;;;;;;;EASM,OAAa,wBAAwB,EAAE,OAAM,GAEnD;;AAEC,UAAI,mBAAmB,aAAY,6BAA6B,EAAE,OAAM,CAAE;AAG1E,YAAM,cAAc,MAAM,QAAQ,iBAAiB,EAAE,gBAAgB,iBAAgB,CAAE;AAEvF,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAO,6BAA6B,EAAE,OAAM,GAElD;AAEC,UAAM,YAAY,IAAI,MAAM,MAAM;AAGlC,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,SAAS,aAAa,YAAY,oBAAoB,MAAM,EAAE;;AAI1E,QAAI,UAAU,WAAW,OAAO,YAAY;AAC1C,YAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,QAAI;AACJ,QAAI;AACF,yBAAmB,QAAQ,QAAQ,UAAU,EAAE,EAAE,aAAY;aAC7D,IAAM;AACN,YAAM,IAAI,SAAS,aAAa,kBAAkB,6CAA6C;;AAGjG,QAAI,iBAAiB,WAAW,IAAI;AAClC,YAAM,IAAI,SAAS,aAAa,wBAAwB,8BAA8B,iBAAiB,MAAM,EAAE;;AAGjH,WAAO;EACT;;;;;;;;;;;EAYO,OAAa,wBAAwB,EAAE,YAAW,GAExD;;AAEC,YAAM,iBAAiB,MAAM,QAAQ,iBAAiB,EAAE,WAAW,YAAW,CAAE;AAGhF,YAAM,aAAa,QAAQ,WAAW,cAAc,EAAE,UAAS;AAE/D,aAAO,OAAO,OAAO,UAAU,IAAI,UAAU;IAC/C,CAAC;;;;;;;;EAQM,OAAO,aAAa,OAAa;AACtC,UAAM,aAAqD;MACzD,WAAc;MACd,SAAc;MACd,aAAc;;AAGhB,UAAM,YAAY,WAAW,KAAK;AAElC,QAAI,CAAC;AAAW,YAAM,IAAI,SAAS,aAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEnG,WAAO;EACT;;;;;;;;EASO,OAAa,qBAAqB,EAAE,aAAY,GAEtD;;AAEC,YAAM,YAAY,MAAM,QAAQ,iBAAiB,EAAE,gBAAgB,aAAa,EAAC,CAAE;AAGnF,YAAM,eAAe,gBAAQ,OAAO,EAAE,KAAK,aAAa,KAAK,GAAG,aAAa,EAAC,CAAE,EAAE,SAAS,GAAG,EAAE;AAGhG,YAAMG,WAAU,MAAM,QAAQ,OAAO;QACnC,KAAY;QACZ,WAAY,aAAa;QACzB,MAAY;OACb;AAED,UAAI,CAACA,UAAS;AACZ,cAAM,IAAI,SAAS,aAAa,kBAAkB,yCAAyC;;AAG7F,aAAO,OAAgB,aAAa,CAAC;IACvC,CAAC;;;;;;;;EAQM,OAAO,qBAAqB,SAAgB;AACjD,WAAO,KAAK,qBAAqB,OAAO,EAAE,MAAM,kBAAkB,EAAE,OAAO,CAAC,KAAK,SAAQ;AACvF,YAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,GAAG;AACnC,UAAI,GAAG,IAAI;AACX,aAAO;IACT,GAAG,CAAA,CAA4B;EACjC;;;;;;;EAQO,OAAO,qBAAqB,SAAgB;AACjD,QAAI,OAAO,YAAY,UAAU;AAC/B,aAAO;eACE,mBAAmB,YAAY;AACxC,aAAO,QAAQ,WAAW,OAAO,EAAE,SAAQ;eAClC,MAAM,QAAQ,OAAO,GAAG;AACjC,aAAO,QAAQ,IAAI,UAAQ,KAAK,qBAAqB,IAAI,CAAC,EAAE,KAAK,EAAE;WAC9D;AACL,YAAM,IAAI,SAAS,aAAa,eAAe,sDAAsD;;EAEzG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjtCF,IAAY;CAAZ,SAAYC,0BAAuB;AAKjC,EAAAA,yBAAA,SAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAKA,EAAAA,yBAAA,QAAA,IAAA;AACF,GAvBY,4BAAA,0BAAuB,CAAA,EAAA;AA6BnC,IAAMC,yBAAwB;EAC5B,SAAY,wBAAwB;EACpC,QAAY,wBAAwB;EACpC,OAAY,wBAAwB;EACpC,SAAY,wBAAwB;EACpC,WAAY,wBAAwB;EACpC,WAAY,wBAAwB;;AAOtC,IAAMC,uBAAsB;AA+CtB,IAAO,SAAP,MAAO,gBAAe,UAAS;;;;;;;;;;;;;;;;;;;;;;;EA6B5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAI,gBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAMJ,WAAI,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,EAAE,GAAG,aAAaF,uBAAsB,GAAG;AACrF,cAAM,IAAI,MAAM,8DAA8D;;AAIhF,YAAM,aAAY,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,QAAM,QAAQ,EAAE,EAAE,IAAI,QAAM,GAAG,EAAE;AACvF,UAAI,aAAa,UAAU,WAAW,IAAI,IAAI,SAAS,EAAE,MAAM;AAC7D,cAAM,IAAI,MAAM,oDAAoD;;AAItE,WAAI,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,OAAK,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,eAAe,GAAG;AACvE,cAAM,IAAI,MAAM,sDAAsD;;AAIxE,YAAM,4BAA+D;QACnE,WAAY;QACZ,UAAY,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;;AAGlG,YAAM,2BAAuD,CAAA;AAG7D,iBAAW,OAAM,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,CAAC,yBAAyB,GAAG;AAE3E,cAAM,SAAS,MAAME,YAAW,YAAY,EAAE,WAAW,GAAG,UAAS,CAAE;AACvE,cAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAG1D,iCAAyB,KAAK;UAC5B,IAAe,GAAG;UAClB,cAAe;UACf,WAAe,KAAA,GAAG,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;SACnH;;AAIH,YAAM,iBAAiB,MAAMA,YAAW,YAAY,EAAE,WAAW,wBAAwB,UAAS,CAAE;AACpG,YAAM,cAAc,MAAMA,YAAW,aAAa,EAAE,QAAQ,eAAc,CAAE;AAG5E,YAAM,eAAe,MAAMA,YAAW,YAAY,EAAE,WAAW,wBAAwB,UAAS,CAAE;AAClG,YAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,QAAQ,aAAY,CAAE;AAGxE,YAAM,iBAAiB,MAAM,YAAY,sBAAsB;QAC7D;QACA;QACA,WAAsB,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAA;QAC1C,qBAAsB;OACvB;AAGD,YAAM,EAAE,aAAa,sBAAqB,IAAK,MAAM,QAAO,QAAQ,gBAAgB,EAAE,YAAY,QAAQ,WAAU,CAAE;AACtH,UAAI,gBAAgB,MAAM;AACxB,cAAM,IAAI,MAAM,0CAA0C,0BAAqB,QAArB,0BAAqB,SAAA,SAArB,sBAAuB,KAAK,EAAE;;AAK1F,YAAM,MAAM,IAAI,UAAU;QACxB,KAAW;QACX,UAAW;QACX,UAAW;UACT,WAAc;UACd,aAAc,eAAe,MAAM,KAAK,CAAC,EAAE,KAAK,GAAG;UACnD;UACA;;QAEF,YAAAA;OACD;AAGD,WAAI,KAAA,QAAQ,aAAO,QAAA,OAAA,SAAA,KAAI,MAAM;AAC3B,cAAM,qBAAqB,MAAM,QAAO,QAAQ,EAAE,KAAK,YAAY,QAAQ,WAAU,CAAE;AACvF,YAAI,WAAW,mBAAmB;;AAGpC,aAAO;;;;;;;;;;;;;;EAcF,OAAa,iBAAiB,EAAE,aAAa,SAAQ,GAG3D;;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KACzD,QAAK;AAAA,YAAAC;AAAC,eAAA,GAAG,QAAQ,aAAQ,QAAR,aAAQ,SAAR,YAAYA,MAAA,YAAY,qBAAe,QAAAA,QAAA,SAAA,SAAAA,IAAG,CAAC;MAAE,CAAA;AAGhE,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAI,SAAS,aAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BF,OAAa,OAAO,EAAE,aAAa,YAAAD,cAAa,IAAI,gBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAI,SAAS,aAAa,oBAAoB,sBAAsB;;AAG5E,YAAM,MAAM,MAAM,UAAU,OAAO,EAAE,aAAa,YAAAA,YAAU,CAAE;AAE9D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BM,OAAa,QAAQ,EAAE,KAAK,aAAaD,qBAAmB,GAGlE;;;AAGC,YAAM,uBAAkD,MAAA,KAAA,IAAI,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,IACvF,SAAO;QACL,IAAe,GAAG;QAClB,cAAe,GAAG;QAClB,UAAe,iCAAiC,EAAE,aAAa,IAAI,UAAU,UAAU,GAAG,GAAE,CAAE;QAC9F,OACH,QAAA,OAAA,SAAA,KAAI,CAAA;AAGL,YAAM,cAAc,MAAM,YAAY,kBAAkB;QACtD,WAAU,KAAA,IAAI,SAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA;QAClC;OACD;AAGD,YAAM,kBAAkB,MAAM,YAAY,uBAAuB;QAC/D;QACA,aAAc,IAAI,SAAS;QAC3B,WAAc,IAAI,SAAS;OAC5B;AAED,UAAI;AAEF,cAAM,gBAAgB,YAAY,gBAAgB;UAChD,SAAU;UACV,MAAU;SACX;AAGD,cAAM,WAAW,MAAM,MAAM,eAAe;UAC1C,QAAU;UACV,MAAU;UACV,SAAU,EAAE,gBAAgB,mBAAkB;UAC9C,MAAU,KAAK,UAAU,eAAe;SACzC;AAID,eAAO;UACL,aAAsB,IAAI;UAC1B,qBAAmB,OAAA,OAAA,OAAA,OAAA,CAAA,GACd,IAAI,QAAQ,GAAA,EACf,WAAW,SAAS,GAAE,CAAA;UAExB,yBAAyB,CAAA;;eAGpB,OAAY;AACnB,eAAO;UACL,aAAsB;UACtB,qBAAsB;YACpB,WAAW;;UAEb,yBAAyB;YACvB,OAAe,aAAa;YAC5B,cAAe,uCAAuC,IAAI,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4B9D,OAAa,QAAQ,QAAgB,UAAgC,CAAA,GAAE;;;AAE5E,YAAM,YAAY,IAAI,MAAM,MAAM;AAGlC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAK1D,YAAM,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAU,QAAA,OAAA,SAAA,KAAIA;AAE1C,UAAI;AAEF,cAAM,gBAAgB,YAAY,gBAAgB;UAChD,SAAU;UACV,MAAU,gBAAgB,MAAM;SACjC;AAGD,cAAM,WAAW,MAAM,MAAM,aAAa;AAG1C,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAI,SAAS,aAAa,UAAU,oCAAoC,MAAM,EAAE;;AAIxF,cAAM,EAAE,aAAa,oBAAmB,IAAK,MAAM,SAAS,KAAI;AAChE,eAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAC3B,eAAe,EAAE,YAAW,CAAE,GAAA,EACjC,qBAAmB,OAAA,OAAA,EACjB,YAAW,KAAA,wBAAmB,QAAnB,wBAAmB,SAAA,SAAnB,oBAAqB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,GAC9C,mBAAmB,EAAA,CAAA;eAInB,OAAY;AAEnB,YAAI,EAAE,iBAAiB;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;;;;AA/W7C,OAAA,aAAa;AAyXvB,IAAO,cAAP,MAAO,aAAW;;;;;;;;;;;;;EAaf,OAAO,gBAAgB,EAAE,SAAS,KAAI,GAG5C;AACC,UAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,QAAI,WAAW,IAAI,SAAS,SAAS,GAAG,IAAI,IAAI,WAAW,IAAI,WAAW;AAC1E,QAAI,YAAY,KAAK,WAAW,GAAG,IAAI,KAAK,UAAU,CAAC,IAAI;AAE3D,WAAO,IAAI,SAAQ;EACrB;;;;;;;;;;;;EAaO,OAAa,sBAAsB,EAAE,aAAa,WAAW,UAAU,oBAAmB,GAKhG;;AAEC,YAAM,cAAc,MAAM,aAAY,kBAAkB,EAAE,UAAU,oBAAmB,CAAE;AAGzF,YAAM,wBAAwB,aAAY,aAAa,WAAW;AAClE,YAAM,sBAAsB,aAAY,aAAa,SAAS;AAG9D,YAAM,iBAAiB,MAAM,OAAO,kBAAkB;QACpD,UAAc;QACd,aAAc;QACd,WAAc;OACf;AAED,aAAO;IACT,CAAC;;;;;;;;;;;;;;EAcM,OAAa,uBAAuB,EAAE,aAAa,aAAa,UAAS,GAI/E;;AAEC,YAAM,gBAAgB,MAAM,WAAW,oBAAoB;QACzD,UAAc;QACd,aAAc,aAAY,aAAa,WAAW;QAClD,WAAc,aAAY,aAAa,SAAS;OACjD;AAED,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;EAgBM,OAAa,kBAAkB,EAAE,UAAU,oBAAmB,GAGpE;;;AAIC,YAAM,gBAAqC,CAAA;AAE3C,iBAAW,MAAM,qBAAqB;AAEpC,YAAI,YAAW,MAAA,KAAA,GAAG,QAAE,QAAA,OAAA,SAAA,KAAI,GAAG,aAAa,SAAG,QAAA,OAAA,SAAA,KAAI,MAAM,qBAAqB,EAAE,KAAK,GAAG,aAAY,CAAE;AAClG,mBAAW,GAAG,SAAS,MAAM,GAAG,EAAE,IAAG,CAAE;AAGvC,cAAM,YAA+B;UACnC,IAAe;UACf,cAAe,aAAY,aAAa,GAAG,YAAY;UACvD,UAAe,GAAG;UAClB,MAAe;;AAGjB,sBAAc,KAAK,SAAS;;AAM9B,YAAM,cAAc,SAAS,IAAI,aAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACvC,OAAO,GAAA;QACV,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE;;QAClC;AAKF,YAAM,mBAAqC;QACzC,YAAa;QACb,UAAa;;AAGf,aAAO;;;;;;;;;EASD,OAAO,aAAa,KAAQ;AAClC,UAAM,UAAU,IAAI;AACpB,QAAI;AAEJ,QAAI,YAAY,MAAM;AACpB,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,IAAI,EAAC;eACvD,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,IAAG;eAC/B,YAAY,OAAO;AAC5B,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;eAC7C,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;WAC7C;AACL,YAAM,IAAI,MAAM,yBAAyB,OAAO,EAAE;;AAGpD,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACptBI,IAAO,SAAP,MAAO,gBAAe,UAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC5B,OAAa,OAAuD,EACzE,YAAAG,cAAa,IAAI,gBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAKJ,UAAI,QAAQ,aAAa,QAAQ,qBAAqB;AACpD,cAAM,IAAI,MAAM,0EAA0E;;AAK5F,UAAI,QAAQ,uBAAuB,QAAQ,oBAAoB,WAAW,GAAG;AAC3E,cAAM,IAAI,MAAM,iEAAiE;;AAInF,YAAM,aAAY,MAAA,KAAA,QAAQ,eAAS,QAAA,OAAA,SAAA,MAAI,MAAA,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,eAAS,QAAA,OAAA,SAAA,KAAI;AAGtF,YAAM,SAAS,MAAMA,YAAW,YAAY,EAAE,UAAS,CAAE;AACzD,YAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAI1D,YAAM,aAAa,QAAQ,OAAO,SAAS,EAAE,YAAW;AAGxD,YAAM,SAAS,OAAO,QAAO,UAAU,IAAI,UAAU;AAGrD,YAAM,sBAAsB,MAAM,QAAO,QAAQ,MAAM;AACvD,YAAM,WAAW,oBAAoB;AAGrC,YAAM,MAAM,IAAI,UAAU;QACxB,KAAW;QACX;QACA,UAAW,CAAA;QACX,YAAAA;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;EAiBF,OAAa,iBAAiB,EAAE,YAAW,GAGjD;;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,CAAE,kBAAkB,KAAK,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,KAAI,CAAA;AAEjE,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAI,SAAS,aAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BF,OAAa,OAAO,EAAE,aAAa,YAAAA,cAAa,IAAI,gBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAI,SAAS,aAAa,oBAAoB,sBAAsB;;AAI5E,YAAM,MAAM,MAAM,UAAU,OAAO,EAAE,aAAa,YAAAA,YAAU,CAAE;AAK9D,UAAI,IAAI,SAAS,mBAAoB,WAAW,GAAG;AACjD,cAAM,IAAI,SAAS,aAAa,oBAAoB,2DAA2D;;AAGjH,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAa,QAAQ,QAAgB,UAA+B;;AAEzE,YAAM,YAAY,IAAI,MAAM,MAAM;AAGlC,UAAI;AACJ,UAAI;AACF,oBAAY,QAAQ,UAAU,UAAW,EAAE,EAAE,SAAQ;eACgC,IAA/E;MAA+E;AAGvF,UAAI,CAAC,aAAa,CAAC,WAAW;AAC5B,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAI1D,YAAM,cAA2B;QAC/B,YAAY;UACV;;QAEF,IAAI,UAAU;;AAGhB,YAAM,SAAS,GAAG,YAAY,EAAE;AAGhC,kBAAY,qBAAqB,CAAC;QAChC,IAAe;QACf,MAAe;QACf,YAAe,YAAY;QAC3B,cAAe;OAChB;AAGD,kBAAY,iBAAiB,CAAC,MAAM;AACpC,kBAAY,kBAAkB,CAAC,MAAM;AACrC,kBAAY,uBAAuB,CAAC,MAAM;AAC1C,kBAAY,uBAAuB,CAAC,MAAM;AAC1C,kBAAY,eAAe,CAAC,MAAM;AAKlC,cAAQ,UAAU,KAAK;QACrB,KAAK,OAAO;AACV,iBAAO,YAAY;AACnB;;QAGF,KAAK,OAAO;AACV,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB;;;AAIJ,aAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,YAAW,CAAA;IAEf,CAAC;;;AAlPa,OAAA,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACf7B,IAAY;CAAZ,SAAYC,0BAAuB;AAKjC,EAAAA,yBAAA,SAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAKA,EAAAA,yBAAA,QAAA,IAAA;AACF,GAvBY,4BAAA,0BAAuB,CAAA,EAAA;AAgC5B,IAAM,+BAA+B;;EAE1C,4BAA4B;;EAG5B,gBAAgB;;EAGhB,2BAA2B;;AAO7B,IAAMC,yBAAwB;EAC5B,SAAY,wBAAwB;EACpC,QAAY,wBAAwB;EACpC,OAAY,wBAAwB;EACpC,SAAY,wBAAwB;EACpC,WAAY,wBAAwB;EACpC,WAAY,wBAAwB;EACpC,QAAY,wBAAwB;;AA0FhC,IAAO,SAAP,MAAO,gBAAe,UAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2C5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAI,gBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAKJ,UAAI,QAAQ,aAAa,QAAQ,qBAAqB;AACpD,cAAM,IAAI,MAAM,0EAA0E;;AAK5F,UAAI,QAAQ,uBAAuB,QAAQ,oBAAoB,WAAW,GAAG;AAC3E,cAAM,IAAI,MAAM,iEAAiE;;AAInF,YAAM,aAAY,MAAA,KAAA,QAAQ,eAAS,QAAA,OAAA,SAAA,MAAI,MAAA,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,eAAS,QAAA,OAAA,SAAA,KAAI;AAGtF,YAAM,SAAS,MAAMA,YAAW,YAAY,EAAE,UAAS,CAAE;AACzD,YAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAI1D,YAAM,aAAa,MAAM,YAAY,uBAAuB,EAAE,UAAS,CAAE;AAGzE,YAAM,SAAS,OAAO,QAAO,UAAU,IAAI,UAAU;AAGrD,YAAM,sBAAsB,MAAM,QAAO,QAAQ,QAAQ,OAAO;AAChE,YAAM,WAAW,oBAAoB;AAGrC,YAAM,MAAM,IAAI,UAAU;QACxB,KAAW;QACX;QACA,UAAW,CAAA;QACX,YAAAA;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;EAiBF,OAAa,iBAAiB,EAAE,YAAW,GAGjD;;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,CAAE,QAAQ,IAAK,YAAY,mBAAmB,CAAA;AACpD,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,GAAG,OAAO,QAAQ;AAExF,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAI,SAAS,aAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BF,OAAa,OAAO,EAAE,aAAa,YAAAA,cAAa,IAAI,gBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAY,IAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAI,SAAS,aAAa,oBAAoB,sBAAsB;;AAI5E,YAAM,MAAM,MAAM,UAAU,OAAO,EAAE,aAAa,YAAAA,YAAU,CAAE;AAK9D,UAAI,IAAI,SAAS,mBAAoB,WAAW,GAAG;AACjD,cAAM,IAAI,SAAS,aAAa,oBAAoB,2DAA2D;;AAGjH,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAa,QAAQ,QAAgB,SAA8B;;AACxE,UAAI;AAEF,cAAM,cAAc,MAAM,QAAO,eAAe,EAAE,QAAQ,QAAO,CAAE;AAGnE,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,YAAW,CAAA;eAGN,OAAY;AAEnB,YAAI,EAAE,iBAAiB;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;IAI3D,CAAC;;;;;;;;;;EAUO,OAAa,eAAe,EAAE,QAAQ,UAAU,CAAA,EAAE,GAGzD;;AACC,YAAM,EACJ,iBAAiB,gCACjB,gCAAgC,OAChC,mCAAmC,OACnC,kBAAkB,iBAAgB,IAChC;AAKJ,YAAM,cAA2B,EAAE,IAAI,GAAE;AAQzC,YAAM,YAAY,IAAI,MAAM,MAAM;AAClC,UAAI,CAAC,WAAW;AACd,cAAM,IAAI,SAAS,aAAa,YAAY,oBAAoB,MAAM,EAAE;;AAE1E,YAAM,iBAAiB,UAAU;AASjC,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,cAAM,IAAI,SAAS,aAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAEjG,UAAI,CAAC,QAAO,mBAAmB,SAAS,GAAG;AACzC,cAAM,IAAI,SAAS,aAAa,YAAY,oBAAoB,MAAM,EAAE;;AAQ1E,YAAM,8BAA8B,MAAM,QAAO,sBAAsB;QACrE;QACA;QACA,SAAS,EAAE,kCAAkC,gBAAe;OAC7D;AASD,kBAAY,KAAK,UAAU;AAM3B,kBAAY,qBAAqB,CAAC,2BAA2B;AAQ7D,kBAAY,iBAAiB,CAAC,4BAA4B,EAAE;AAC5D,kBAAY,kBAAkB,CAAC,4BAA4B,EAAE;AAC7D,kBAAY,uBAAuB,CAAC,4BAA4B,EAAE;AAClE,kBAAY,uBAAuB,CAAC,4BAA4B,EAAE;AASlE,UAAI,kCAAkC,MAAM;AAO1C,cAAM,4BACH,oBAAoB,+BACjB,8BACA;AAON,cAAM,+BAA+B,MAAM,KAAK,uBAAuB;UACrE;UACA;UACA,SAAS,EAAE,kCAAkC,iBAAiB,0BAAyB;SACxF;AAMD,oBAAY,mBAAmB,KAAK,4BAA4B;AAOhE,oBAAY,eAAe,CAAC,6BAA6B,EAAE;;AAQ7D,YAAM,eAAe,CAAE,cAAc;AAMrC,YAAM,0BAA0B,2BAA2B,EAAE,YAAW,CAAE;AAC1E,8BAAwB,QAAQ,CAAC,aAAoB;AACnD,cAAM,UAAU,6BAA6B,QAAqD;AAClG,qBAAa,KAAK,OAAO;MAC3B,CAAC;AACD,kBAAY,UAAU,IAAI;AAK1B,aAAO;IACT,CAAC;;;;;;;EAOO,OAAa,uBAAuB,EAAE,QAAQ,gBAAgB,QAAO,GAI5E;;AACC,YAAM,EAAE,kCAAkC,gBAAe,IAAK;AAK9D,YAAM,qBAA4C,EAAE,IAAI,IAAI,MAAM,IAAI,YAAY,GAAE;AAMpF,YAAM,EACJ,UAAU,gBACV,gBAAgB,gBAAe,IAC7B,MAAM,QAAO,oBAAoB,EAAE,eAAc,CAAE;AAWvD,YAAM,eAAe,eAAe;AACpC,YAAM,iBAAiB,YAAY,6BAA6B,eAAe;AAC/E,UAAI,iBAAiB,gBAAgB;AACnC,cAAM,IAAI,SAAS,aAAa,wBAAwB,YAAY,YAAY,mBAAmB,cAAc,EAAE;;AAQrH,YAAM,oBAAoB,sBAAsB;QAC9C,UAAiB;QACjB,gBAAiB;OAClB;AAOD,yBAAmB,KAAK,GAAG,MAAM,IAAI,iBAAiB;AACtD,UAAI;AACF,YAAI,IAAI,mBAAmB,EAAE;eACtB,OAAY;AACnB,cAAM,IAAI,SAAS,aAAa,eAAe,gDAAgD;;AAQjG,UAAI,EAAE,mBAAmB,+BAA+B;AACtD,cAAM,IAAI,SAAS,aAAa,0BAA0B,uBAAuB,eAAe,EAAE;;AAQpG,YAAM,yBAAyB,CAAC,YAAY,kBAAkB,2BAA2B;AACzF,UAAI,qCAAqC,SACpC,CAAE,uBAAuB,SAAS,eAAe,GAAI;AACxD,cAAM,IAAI,SAAS,aAAa,sBAAsB,cAAc,eAAe,6DAA6D;;AAMlJ,yBAAmB,OAAO;AAK1B,yBAAmB,aAAa;AAShC,UAAI,oBAAoB,6BAA6B;AACnD,2BAAmB,qBAAqB;;AAO1C,UAAI,oBAAoB,kBAAkB;AACxC,cAAM,EAAE,IAAG,IAAK,MAAM,YAAY,gBAAgB,EAAE,MAAM,gBAAe,CAAE;AAC3E,2BAAmB,eAAe,MAAM,YAAY,aAAa,GAAI,EAAE,iBAAiB,EAAE,eAAc,CAAE;;AAM5G,aAAO;IACT,CAAC;;;;;;;;EAQO,OAAa,sBAAsB,EAAE,QAAQ,gBAAgB,QAAO,GAI3E;;AACC,YAAM,EAAE,kCAAkC,gBAAe,IAAK;AAK9D,YAAM,qBAA4C,EAAE,IAAI,IAAI,MAAM,IAAI,YAAY,GAAE;AAMpF,YAAM,EACJ,UAAU,gBACV,gBAAgB,iBAChB,eAAc,IACZ,sBAAsB,EAAE,gBAAgB,eAAc,CAAE;AAQ5D,YAAM,eAAe,eAAe;AACpC,YAAM,iBAAiB,YAAY,6BAA6B,eAAe;AAC/E,UAAI,iBAAiB,gBAAgB;AACnC,cAAM,IAAI,SAAS,aAAa,wBAAwB,YAAY,YAAY,mBAAmB,cAAc,EAAE;;AAQrH,UAAIC,WAAU;AACd,cAAQ,gBAAgB;QACtB,KAAK;AACH,UAAAA,WAAU,MAAM,UAAU,kBAAkB,EAAE,eAAc,CAAE;AAC9D;QACF,KAAK;AACH,UAAAA,WAAU,MAAM,QAAQ,kBAAkB,EAAE,eAAc,CAAE;AAC5D;QACF,KAAK;AAGH,UAAAA,WAAU;AACV;;AAEJ,UAAI,CAACA,UAAS;AACZ,cAAM,IAAI,SAAS,aAAa,kBAAkB,8BAA8B;;AAQlF,yBAAmB,KAAK,GAAG,MAAM,IAAI,cAAc;AACnD,UAAI;AACF,YAAI,IAAI,mBAAmB,EAAE;eACtB,OAAY;AACnB,cAAM,IAAI,SAAS,aAAa,eAAe,gDAAgD;;AAQjG,UAAI,EAAE,mBAAmB,+BAA+B;AACtD,cAAM,IAAI,SAAS,aAAa,0BAA0B,uBAAuB,eAAe,EAAE;;AAQpG,YAAM,yBAAyB,CAAC,YAAY,kBAAkB,4BAA4B;AAC1F,UAAI,qCAAqC,SACpC,CAAE,uBAAuB,SAAS,eAAe,GAAI;AACxD,cAAM,IAAI,SAAS,aAAa,sBAAsB,cAAc,eAAe,6DAA6D;;AAMlJ,yBAAmB,OAAO;AAK1B,yBAAmB,aAAa;AAShC,UAAI,oBAAoB,8BAA8B;AACpD,2BAAmB,qBAAqB;;AAO1C,UAAI,oBAAoB,kBAAkB;AACxC,cAAM,EAAE,IAAG,IAAK,MAAM,YAAY,gBAAgB,EAAE,MAAM,gBAAe,CAAE;AAC3E,2BAAmB,eAAe,MAAM,YAAY,aAAa,GAAI,EAAE,iBAAiB,EAAE,eAAc,CAAC;;AAM3G,aAAO;IACT,CAAC;;;;;;;;;EAUO,OAAa,oBAAoB,EAAE,eAAc,GAExD;;AAIC,UAAI,sBAAqF;QACvF,UAAiB,IAAI,WAAU;QAC/B,gBAAiB;;AAYnB,YAAM,EACJ,UAAU,gBACV,gBAAgB,gBAAe,IAC7B,sBAAsB,EAAE,gBAAgB,eAAc,CAAE;AAS5D,UAAI,oBAAoB,KAAM;AAC5B,cAAM,mBAAmB,MAAM,YAAY,aAAa,SAAS,EAAE,iBAAiB;UAClF;SACD;AACD,cAAM,+BAA+B,MAAM,QAAQ,yBAAyB;UAC1E,WAAW;SACZ;AACD,cAAM,oCAAoC,MAAM,YAAY,aAAa,SAAS,EAAE,iBAAiB;UACnG,WAAW;SACZ;AAMD,8BAAsB;UACpB,UAAiB;UACjB,gBAAiB;;;AAOrB,aAAO;IACT,CAAC;;;;;;;;;;EAUO,OAAO,mBAAmB,WAAc;AAC9C,UAAM,EAAE,QAAQ,IAAI,eAAc,IAAK;AACvC,UAAM,CAAE,MAAM,IAAK,UAAU,IAAI,MAAM,KAAK,CAAC;AAQ7C,UAAM,UAAU;AAEhB,WACE,WAAW,SACX,WAAW,SACX,OAAO,OAAO,IAAI,KAClB,gBAAgB,cAAc,MAAM,YACpC,eAAe,WAAW,GAAG;EAEjC;;AAjsBc,OAAA,aAAa;AAusBvB,IAAO,cAAP,MAAO,aAAW;;;;;;;;;;;;;;EA8Ef,OAAa,gBAAgB,EAAE,IAAG,GAExC;;AACC,YAAM,SAAmB,CAAA;AAEzB,UAAI,IAAI,KAAK;AACX,eAAO,KAAK,IAAI,GAAG;AACnB,YAAI,IAAI,GAAG;AACT,iBAAO,KAAK,SAAS;eAChB;AACL,iBAAO,KAAK,QAAQ;;;AAIxB,YAAM,YAAY,OAAO,KAAK,GAAG;AACjC,YAAM,OAAO,aAAY,kBAAkB,SAAS;AAEpD,UAAI,SAAS,QAAW;AACtB,cAAM,IAAI,MAAM,8CAA8C,SAAS,GAAG;;AAG5E,YAAM,OAAO,WAAW,gBAAgB,EAAE,KAAI,CAAE;AAEhD,aAAO,EAAE,MAAM,KAAI;IACrB,CAAC;;;;;;;;EAQM,OAAO,cACZ,OAAa;AAGb,UAAM,cAAc;MAClB,SAAc,UAAU;MACxB,aAAc,UAAU;;AAG1B,UAAM,aAAa,YAAY,KAAK;AAEpC,QAAI,CAAC;AAAY,YAAM,IAAI,SAAS,aAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEpG,WAAO;EACT;;;;;;;EAQO,OAAO,aAAa,OAAa;AACtC,UAAM,aAAqD;MACzD,WAAc;MACd,SAAc;MACd,aAAc;MACd,UAAc;;AAGhB,UAAM,YAAY,WAAW,KAAK;AAElC,QAAI,CAAC;AAAW,YAAM,IAAI,SAAS,aAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEnG,WAAO;EACT;;;;;;;;;;;;;;EAeO,OAAa,gBAAgB,EAAE,MAAM,KAAI,GAG/C;;AAEC,UAAI,EAAE,OAAO,CAAC,OAAO,OAAO;AAC1B,cAAM,IAAI,MAAM,wDAAwD;;AAI1E,aAAQ,SAAS,SAAc,WAAW,gBAAgB,EAAE,KAAW,CAAE,IAAI;AAE7E,YAAM,YAAY;AAClB,YAAM,OAAO,aAAY,kBAAkB,SAAS;AAEpD,UAAI,SAAS,QAAW;AACtB,cAAM,IAAI,MAAM,0CAA0C;;AAG5D,aAAA,OAAA,OAAA,CAAA,GAAY,IAAI;IAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BM,OAAa,uBAAuB,EAAE,UAAS,GAErD;;;AACC,UAAI,GAAE,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,QAAO,UAAU,OAAOF,yBAAwB;AAC/D,cAAM,IAAI,SAAS,aAAa,sBAAsB,iDAAgD,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAG,QAAA,OAAA,SAAA,KAAI,WAAW,EAAE;;AAIvI,UAAI,iBAAiB,MAAM,aAAY,aAAa,UAAU,GAAG,EAAE,iBAAiB,EAAE,UAAS,CAAE;AAGjG,UAAI,kCAAkC,KAAK,UAAU,GAAG,GAAG;AACzD,yBAAiB,MAAM,aAAY,cAAc,UAAU,GAAG,EAAE,EAAE,eAAc,CAAE;;AAIpF,YAAM,EAAE,MAAM,eAAc,IAAK,MAAM,aAAY,gBAAgB,EAAE,KAAK,UAAS,CAAE;AAGrF,YAAM,cAAc,sBAAsB;QACxC,UAAU;QACV;OACD;AAED,aAAO;;;;AAzNM,YAAA,oBAA+C;EAC5D,kBAAsB;EACtB,mBAAsB;EACtB,oBAAsB;EACtB,qBAAsB;EACtB,iBAAsB;EACtB,kBAAsB;;AAOV,YAAA,+BAAuD;;EAEnE,KAAM;;EAGN,KAAM;;EAGN,KAAM;;AAkBO,YAAA,oBAA4C;EACzD,eAAmB,EAAE,KAAK,WAAa,KAAK,OAAO,GAAG,GAAE;EACxD,gBAAmB,EAAE,KAAK,WAAa,KAAK,OAAO,GAAG,IAAW,GAAG,GAAE;EACtE,iBAAmB,EAAE,KAAK,aAAa,KAAK,MAAO,GAAG,IAAI,GAAG,GAAE;EAC/D,kBAAmB,EAAE,KAAK,aAAa,KAAK,MAAO,GAAG,IAAI,GAAG,IAAI,GAAG,GAAE;EACtE,cAAmB,EAAE,KAAK,UAAa,KAAK,OAAO,GAAG,GAAE;EACxD,eAAmB,EAAE,KAAK,UAAa,KAAK,OAAO,GAAG,IAAW,GAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvhCpE,IAAO,SAAP,MAAO,gBAAe,UAAS;;;;;;;;EAc5B,OAAa,QAAQ,QAAgB,UAA+B;;AAEzE,YAAM,YAAY,IAAI,MAAM,MAAM;AAGlC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAM1D,UAAI,UAAU,WAAW,UAAU,GAAG,QAAQ,MAAM,GAAG,CAAC;AAGxD,gBAAU,mBAAmB,OAAO;AAGpC,YAAM,iBAAiB,UAAU,GAAG,SAAS,GAAG,IAC9C,GAAG,OAAO,cACV,GAAG,OAAO;AAEZ,UAAI;AAEF,cAAM,WAAW,MAAM,MAAM,cAAc;AAG3C,YAAI,CAAC,SAAS;AAAI,gBAAM,IAAI,MAAM,iCAAiC;AAGnE,cAAM,cAAc,MAAM,SAAS,KAAI;AAEvC,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,YAAW,CAAA;eAGN,OAAY;AAEnB,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,WAAU,EAAE,CAAA;;IAGlD,CAAC;;;AA/Da,OAAA,aAAa;;;;AC7B7B,gBAAe;AACf,IAAAG,gBAAsB;;;ACAtB,IAAAC,gBAAA;AAMO,IAAM,uBAAyC;EACpD,KAAK,SAAU,MAAY;AACzB,WAAO;EACT;EACA,KAAK,SAAU,MAAc,QAA2B;AACtD,WAAO;EACT;EACA,QAAQ,SAAU,MAAY;AAC5B,WAAO;EACT;EACA,OAAO,WAAA;AACL,WAAO;EACT;EACA,OAAO,WAAA;AACL,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwCI,IAAO,oBAAP,MAAwB;;;;;;EAgB5B,YAAY,EAAE,OAAO,aAAY,GAA2B;AAPpD,SAAA,eAA+C,oBAAI,IAAG;AAQ5D,SAAK,QAAQ,SAAS;AAEtB,eAAW,YAAY,cAAc;AACnC,WAAK,aAAa,IAAI,SAAS,YAAY,QAAQ;;EAEvD;;;;;;;;;;;EAYa,QAAQ,QAAgB,SAA8B;;AAEjE,YAAM,YAAY,IAAI,MAAM,MAAM;AAClC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB;UACrB,OAAe,aAAa;UAC5B,cAAe,oBAAoB,MAAM;UAC1C,CAAA;;AAIL,YAAM,WAAW,KAAK,aAAa,IAAI,UAAU,MAAM;AACvD,UAAI,CAAC,UAAU;AACb,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,2BAA2B,GAAA,EAC9B,uBAAuB;UACrB,OAAe,aAAa;UAC5B,cAAe,yBAAyB,UAAU,MAAM;UACzD,CAAA;;AAIL,YAAM,yBAAyB,MAAM,KAAK,MAAM,IAAI,UAAU,GAAG;AAEjE,UAAI,wBAAwB;AAC1B,eAAO;aACF;AACL,cAAM,mBAAmB,MAAM,SAAS,QAAQ,UAAU,KAAK,OAAO;AAEtE,cAAM,KAAK,MAAM,IAAI,UAAU,KAAK,gBAAgB;AAEpD,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BK,YACJ,QACA,UAAkC;;AAIlC,YAAM,eAAe,IAAI,MAAM,MAAM;AAErC,UAAI,CAAC,cAAc;AACjB,eAAO;UACL,uBAAwB,EAAE,OAAO,aAAa,cAAa;UAC3D,eAAwB;UACxB,iBAAwB,CAAA;;;AAK5B,YAAM,EAAE,aAAa,uBAAuB,oBAAmB,IAAK,MAAM,KAAK,QAAQ,aAAa,GAAG;AAEvG,UAAI,CAAC,aAAa;AAChB,eAAO;UACL,uBAAwB,EAAE,OAAO,sBAAsB,MAAK;UAC5D,eAAwB;UACxB,iBAAwB,CAAA;;;AAK5B,UAAI,CAAC,aAAa,YAAY,aAAa,OAAO;AAChD,eAAO;UACL,uBAAwB,EAAE,aAAa,uBAAsB;UAC7D,eAAwB;UACxB,iBAAwB;;;AAI5B,YAAM,EAAE,UAAU,CAAA,GAAI,qBAAqB,CAAA,EAAE,IAAK;AAMlD,YAAM,QAAQ,oBAAI,IAAI,CAAC,QAAQ,aAAa,UAAU,IAAI,aAAa,QAAQ,EAAE,CAAC;AAElF,UAAI;AAGJ,eAAS,MAAM,oBAAoB;AACjC,YAAI,MAAM,IAAI,GAAG,EAAE,GAAG;AACpB,wBAAc;AACd;;;AAKJ,eAAS,OAAO,SAAS;AACvB,YAAI,MAAM,IAAI,IAAI,EAAE,GAAG;AACrB,wBAAc;AACd;;;AAIJ,UAAI,aAAa;AACf,eAAO;UACL,uBAAwB,EAAE,aAAa,uBAAsB;UAC7D,eAAwB;UACxB,iBAAwB;;aAErB;AACL,eAAO;UACL,uBAAwB,EAAE,OAAO,aAAa,SAAQ;UACtD,eAAwB;UACxB,iBAAwB,CAAA;;;IAG9B,CAAC;;;;;AhBpOI,IAAM,cAAc,IAAI,kBAAkB;AAAA,EAC7C,cAAc,CAAC,QAAQ,QAAQ,MAAM;AACzC,CAAC;AAOD,eAAsB,WAAW,KAAK;AAClC,QAAM,EAAE,uBAAuB,YAAY,IAAI,MAAM,YAAY,QAAQ,GAAG;AAC5E,MAAI,sBAAsB,OAAO;AAC7B,UAAM,IAAI,MAAM,0BAA0B,GAAG,YAAY,sBAAsB,KAAK,EAAE;AAAA,EAC1F;AAEA,SAAO;AACX;AAOO,SAAS,qBAAqB,aAAa;AAC9C,SAAO,CAAC,CAAC,eAAe,QAAQ,eAAe,UAAU,eAAe,gBAAgB;AAC5F;;;A1B3BA,0BAAyB;AACzB,IAAM,aAAa,IAAI,gBAAgB;AAKhC,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhB,OAAO,OAAO,SAAS;AAEnB,UAAM,oBAAgB,oBAAAC,SAAa,OAAO;AAC1C,UAAM,qBAAqB,QAAQ,OAAO,aAAa,EAAE,aAAa;AACtE,WAAO,OAAO,kBAAkB;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,KAAK,MAAM;AACpB,UAAM,EAAE,KAAK,SAAS,SAAS,IAAI;AACnC,UAAM,SAAS,MAAM,IAAI,UAAU;AACnC,QAAI,uBAAuB,OAAO;AAClC,QAAI,qBAAqB,WAAW,GAAG,GAAG;AACtC,6BAAuB,GAAG,IAAI,GAAG,GAAG,oBAAoB;AAAA,IAC5D;AACA,UAAM,YAAY,EAAE,KAAK,OAAO,WAAW,KAAK,qBAAqB;AACrE,UAAM,4BAA4B,QAAQ,OAAO,SAAS,EAAE,YAAY;AACxE,UAAM,6BAA6B,QAAQ,WAAW,OAAO,EAAE,YAAY;AAC3E,UAAM,SAAS,GAAG,yBAAyB,IAAI,0BAA0B;AACzE,UAAM,cAAc,QAAQ,OAAO,MAAM,EAAE,aAAa;AACxD,UAAM,iBAAiB,MAAM,OAAO,KAAK,EAAE,MAAM,YAAY,CAAC;AAC9D,UAAM,4BAA4B,QAAQ,WAAW,cAAc,EAAE,YAAY;AACjF,QAAI,UAAU;AAEV,aAAO,GAAG,yBAAyB,KAAK,yBAAyB;AAAA,IACrE,OACK;AACD,aAAO,GAAG,yBAAyB,IAAI,0BAA0B,IAAI,yBAAyB;AAAA,IAClG;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,OAAO,MAAM;AACtB,UAAM,EAAE,WAAW,gBAAgB,IAAI;AACvC,QAAI,CAAC,WAAW;AACZ,YAAM,IAAI,MAAM,qEAAqE;AAAA,IACzF;AACA,UAAM,WAAW,UAAU,MAAM,GAAG;AACpC,QAAI,SAAS,WAAW,GAAG;AACvB,YAAM,IAAI,MAAM,yEAAyE;AAAA,IAC7F;AACA,QAAI,CAAC,2BAA2B,4BAA4B,yBAAyB,IAAI;AACzF,QAAI,iBAAiB;AACjB,UAAI,2BAA2B,WAAW,GAAG;AACzC,cAAM,IAAI,MAAM,yEAAyE;AAAA,MAC7F;AACA,mCAA6B,QAAQ,WAAW,eAAe,EAAE,YAAY;AAAA,IACjF;AACA,UAAM,YAAY,QAAQ,UAAU,yBAAyB,EAAE,SAAS;AACxE,QAAI,CAAC,UAAU,OAAO,CAAC,UAAU,KAAK;AAClC,YAAM,IAAI,MAAM,2EAA2E;AAAA,IAC/F;AACA,UAAM,oBAAoB,MAAM,YAAY,YAAY,UAAU,GAAG;AACrE,UAAM,qBAAqB,kBAAkB;AAC7C,QAAI,CAAC,qBAAqB,kBAAkB,GAAG;AAC3C,YAAM,IAAI,MAAM,gHAAgH;AAAA,IACpI;AAEA,UAAM,eAAe,mBAAmB;AACxC,QAAI,CAAC,cAAc;AACf,YAAM,IAAI,MAAM,kIAAkI;AAAA,IACtJ;AACA,UAAM,aAAa,GAAG,yBAAyB,IAAI,0BAA0B;AAC7E,UAAM,kBAAkB,QAAQ,OAAO,UAAU,EAAE,aAAa;AAChE,UAAM,iBAAiB,QAAQ,UAAU,yBAAyB,EAAE,aAAa;AACjF,UAAM,UAAU,MAAM,WAAW,OAAO,EAAE,KAAK,cAAc,MAAM,iBAAiB,WAAW,eAAe,CAAC;AAC/G,QAAI,CAAC,SAAS;AACV,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACvE;AACA,UAAM,CAAC,GAAG,IAAI,UAAU,IAAI,MAAM,GAAG;AACrC,WAAO;AAAA,EACX;AACJ;;;A2CpGA,IAAAC,gBAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,gBAAA;AAoGA,mBAAiC;AAnG1B,IAAM,QAAQ;AAErB,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAyD;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACpN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAG,SAAS,YAAc,SAAS,YAAa;AAChD,qBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,WAAW,QAAW;AAC3B,gBAAM,SAAS;AACf,cAAI,OAAO,KAAK,WAAW,UAAU;AACjC,uBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC/K,mBAAO;AAAA,UACX;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,YAAY,QAAW;AAC5B,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,YAAY,WAAW;AACnC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,YAAY,YAAY,6BAA6B,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AACnL,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,cAAc;AAE3B,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAwD;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,EAAE,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,IAAI;AACjQ,eAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,WAAO;AAAA,EACX;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,WAAW;AACxB,IAAM,WAAW,EAAE,WAAW,2CAA2C,OAAO,0CAA0C,QAAQ,UAAU,cAAc,EAAE,wBAAwB,OAAO,eAAe,EAAE,QAAQ,UAAU,eAAe,8CAA8C,GAAG,SAAS,EAAE,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,gBAAgB,EAAE,QAAQ,UAAU,eAAe,gCAAgC,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,mDAAmD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,mDAAmD,GAAG,WAAW,EAAE,QAAQ,SAAS,SAAS,EAAE,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,QAAQ,EAAE,QAAQ,UAAU,eAAe,qEAAqE,GAAG,QAAQ,EAAE,QAAQ,UAAU,eAAe,0DAA0D,GAAG,eAAe,EAAE,QAAQ,UAAU,eAAe,iIAAmI,GAAG,SAAS,EAAE,QAAQ,UAAU,eAAe,iHAAiH,GAAG,0BAA0B,EAAE,QAAQ,0CAA0C,eAAe,oGAAoG,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,sDAAsD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,yDAAyD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,uJAAuJ,EAAE,GAAG,YAAY,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,YAAY,CAAC,gBAAgB,SAAS,EAAE,GAAG,UAAU,EAAE,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,gBAAgB,EAAE,QAAQ,UAAU,eAAe,gCAAgC,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,mDAAmD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,mDAAmD,GAAG,WAAW,EAAE,QAAQ,SAAS,SAAS,EAAE,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,QAAQ,EAAE,QAAQ,UAAU,eAAe,qEAAqE,GAAG,QAAQ,EAAE,QAAQ,UAAU,eAAe,0DAA0D,GAAG,eAAe,EAAE,QAAQ,UAAU,eAAe,iIAAmI,GAAG,SAAS,EAAE,QAAQ,UAAU,eAAe,iHAAiH,GAAG,0BAA0B,EAAE,QAAQ,0CAA0C,eAAe,oGAAoG,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,sDAAsD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,yDAAyD,GAAG,OAAO,EAAE,QAAQ,+CAA+C,eAAe,sJAAsJ,GAAG,2BAA2B,EAAE,QAAQ,UAAU,eAAe,2GAA2G,WAAW,EAAE,EAAE,GAAG,YAAY,CAAC,QAAQ,yBAAyB,EAAE,EAAE,EAAE,GAAG,YAAY,CAAC,gBAAgB,SAAS,EAAE,GAAG,2BAA2B,EAAE,QAAQ,UAAU,eAAe,yFAAyF,GAAG,kBAAkB,EAAE,QAAQ,UAAU,eAAe,wGAAwG,EAAE,GAAG,YAAY,CAAC,eAAe,SAAS,UAAU,yBAAyB,EAAE;AAE5hJ,IAAM,WAAW,IAAI,OAAO,4BAA4B,GAAG;AAC3D,IAAM,UAAU,EAAE,WAAW,2CAA2C,OAAO,2CAA2C,SAAS,2BAA2B,eAAe,EAAE,eAAe,EAAE,QAAQ,SAAS,YAAY,GAAG,SAAS,EAAE,QAAQ,IAAI,EAAE,GAAG,sBAAsB,EAAE,QAAQ,WAAW,WAAW,EAAE,GAAG,8BAA8B,EAAE,SAAS,CAAC,EAAE,QAAQ,mCAAmC,GAAG,EAAE,WAAW,EAAE,CAAC,EAAE,GAAG,eAAe,EAAE,QAAQ,CAAC,SAAS,WAAW,WAAW,QAAQ,UAAU,UAAU,QAAQ,EAAE,GAAG,eAAe,EAAE,QAAQ,SAAS,SAAS,EAAE,QAAQ,SAAS,GAAG,eAAe,MAAM,WAAW,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,UAAU,SAAS,GAAG,cAAc,EAAE,OAAO,EAAE,QAAQ,UAAU,UAAU,gBAAgB,GAAG,WAAW,EAAE,QAAQ,UAAU,UAAU,MAAM,GAAG,QAAQ,EAAE,QAAQ,UAAU,UAAU,gBAAgB,GAAG,YAAY,EAAE,QAAQ,SAAS,GAAG,SAAS,EAAE,QAAQ,SAAS,GAAG,eAAe,EAAE,QAAQ,SAAS,GAAG,WAAW,MAAM,YAAY,EAAE,QAAQ,WAAW,WAAW,MAAM,GAAG,YAAY,EAAE,QAAQ,SAAS,SAAS,KAAK,GAAG,cAAc,EAAE,QAAQ,UAAU,oBAAoB,EAAE,GAAG,WAAW,EAAE,QAAQ,SAAS,GAAG,oBAAoB,EAAE,QAAQ,SAAS,GAAG,WAAW,EAAE,QAAQ,SAAS,GAAG,oBAAoB,EAAE,QAAQ,SAAS,GAAG,aAAa,EAAE,QAAQ,mCAAmC,GAAG,aAAa,EAAE,QAAQ,2CAA2C,GAAG,WAAW,EAAE,QAAQ,UAAU,UAAU,QAAQ,GAAG,mBAAmB,EAAE,QAAQ,IAAI,GAAG,SAAS,EAAE,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG,EAAE,QAAQ,4BAA4B,CAAC,GAAG,WAAW,KAAK,GAAG,YAAY,EAAE,QAAQ,mCAAmC,GAAG,YAAY,EAAE,QAAQ,2CAA2C,GAAG,eAAe,EAAE,QAAQ,WAAW,WAAW,MAAM,GAAG,YAAY,EAAE,QAAQ,IAAI,GAAG,iBAAiB,EAAE,QAAQ,mCAAmC,GAAG,iBAAiB,EAAE,QAAQ,2CAA2C,GAAG,YAAY,EAAE,QAAQ,4BAA4B,GAAG,wBAAwB,EAAE,QAAQ,IAAI,GAAG,eAAe,EAAE,QAAQ,UAAU,wBAAwB,EAAE,QAAQ,IAAI,GAAG,WAAW,CAAC,EAAE,GAAG,cAAc,EAAE,QAAQ,UAAU,wBAAwB,EAAE,QAAQ,IAAI,GAAG,WAAW,CAAC,EAAE,GAAG,qBAAqB,EAAE,QAAQ,UAAU,wBAAwB,EAAE,QAAQ,IAAI,GAAG,iBAAiB,EAAE,UAAU,QAAQ,GAAG,WAAW,CAAC,EAAE,GAAG,gBAAgB,EAAE,QAAQ,UAAU,wBAAwB,EAAE,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG,EAAE,QAAQ,4BAA4B,CAAC,EAAE,EAAE,GAAG,iBAAiB,EAAE,QAAQ,IAAI,GAAG,SAAS,MAAM,QAAQ,EAAE,QAAQ,SAAS,SAAS,MAAM,YAAY,GAAG,eAAe,KAAK,GAAG,QAAQ,EAAE,SAAS,CAAC,EAAE,QAAQ,4BAA4B,GAAG,EAAE,QAAQ,SAAS,SAAS,EAAE,QAAQ,4BAA4B,GAAG,YAAY,GAAG,eAAe,KAAK,CAAC,EAAE,GAAG,UAAU,EAAE,QAAQ,SAAS,GAAG,oBAAoB,EAAE,QAAQ,SAAS,GAAG,mBAAmB,EAAE,QAAQ,SAAS,GAAG,MAAM,EAAE,QAAQ,IAAI,GAAG,QAAQ,EAAE,QAAQ,IAAI,GAAG,QAAQ,EAAE,QAAQ,IAAI,GAAG,SAAS,EAAE,QAAQ,4BAA4B,GAAG,SAAS,EAAE,QAAQ,4BAA4B,GAAG,SAAS,EAAE,QAAQ,4BAA4B,GAAG,OAAO,EAAE,QAAQ,IAAI,EAAE,GAAG,WAAW,KAAK;AAG7lG,IAAM,UAAU,EAAE,QAAQ,CAAC,SAAS,WAAW,WAAW,QAAQ,UAAU,UAAU,QAAQ,EAAE;AAEhG,SAAS,UAAU,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,QAAM,SAAS;AAAQ,MAAI,EAAI,OAAO,QAAQ,aAAc,EAAE,OAAO,MAAM,CAAC,MAAM,IAAI,MAAQ,SAAS,IAAI,IAAK;AACxP,cAAU,SAAS,CAAC,EAAE,cAAc,YAAY,yCAAyC,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AACnK,WAAO;AAAA,EACX;AAAE,MAAI,WAAW,QAAQ;AACrB,QAAK,OAAO,QAAQ,YAAc,SAAS,IAAI,GAAI;AAC/C,UAAI,OAAO,KAAK,MAAM,IAAI,GAAG;AACzB,kBAAU,SAAS,CAAC,EAAE,cAAc,YAAY,4CAA4C,SAAS,WAAW,QAAQ,EAAE,YAAY,MAAM,OAAO,EAAE,GAAG,SAAS,eAAe,CAAC;AACjL,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAE,YAAU,SAAS;AAAS,SAAO,WAAW;AAAG;AAEnD,IAAM,QAAQ,EAAE,UAAU,UAAU;AACpC,SAAS,UAAU,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAC1J,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,UAAI,KAAK,SAAS,GAAG;AACjB,kBAAU,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,OAAO,EAAE,GAAG,SAAS,mCAAmC,CAAC;AACtJ,eAAO;AAAA,MACX,OACK;AACD,YAAI,SAAS;AACb,cAAM,OAAO,KAAK;AAClB,iBAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,gBAAM,SAAS;AACf,cAAI,CAAE,MAAM,SAAS,KAAK,EAAE,GAAG,EAAE,cAAc,eAAe,MAAM,IAAI,YAAY,MAAM,oBAAoB,IAAI,SAAS,CAAC,GAAI;AAC5H,sBAAU,YAAY,OAAO,MAAM,SAAS,SAAS,QAAQ,OAAO,MAAM,SAAS,MAAM;AACzF,qBAAS,QAAQ;AAAA,UACrB;AACA,cAAI,SAAS,WAAW;AACxB,cAAI,CAAC,QAAQ;AACT;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,gBAAU,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AAChI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,YAAU,SAAS;AAAS,SAAO,WAAW;AAAG;AAEnD,SAAS,UAAU,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA6D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAK,EAAE,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,MAAQ,OAAO,SAAS,WAAY;AACtS,cAAU,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,KAAK,GAAG,SAAS,yBAAyB,CAAC;AAC9I,WAAO;AAAA,EACX;AAAE,MAAI,WAAW,GAAG;AAChB,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI,KAAK,QAAQ,QAAW;AACxB,cAAM,SAAS;AACf,YAAI,WAAW,QAAQ;AACnB,cAAI,WAAW,QAAQ;AACnB,gBAAI,EAAE,OAAO,KAAK,QAAQ,WAAW;AACjC,wBAAU,SAAS,CAAC,EAAE,cAAc,eAAe,QAAQ,YAAY,2BAA2B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC1K,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,SAAS,WAAW;AAAA,MAC5B,OACK;AACD,YAAI,SAAS;AAAA,MACjB;AACA,UAAI,QAAQ;AACR,YAAI,KAAK,YAAY,QAAW;AAC5B,gBAAM,SAAS;AACf,cAAI,WAAW,QAAQ;AACnB,gBAAI,WAAW,QAAQ;AACnB,kBAAI,EAAE,OAAO,KAAK,YAAY,WAAW;AACrC,0BAAU,SAAS,CAAC,EAAE,cAAc,eAAe,YAAY,YAAY,+BAA+B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClL,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,SAAS,QAAW;AACzB,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,WAAW,QAAQ;AACnB,oBAAI,EAAE,OAAO,KAAK,SAAS,WAAW;AAClC,4BAAU,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC5K,yBAAO;AAAA,gBACX;AAAA,cACJ;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,aAAa,QAAW;AAC7B,oBAAM,SAAS;AACf,kBAAI,OAAO,KAAK,aAAa,UAAU;AACnC,0BAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpL,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,UAAU,QAAW;AAC1B,sBAAM,SAAS;AACf,oBAAI,OAAO,KAAK,UAAU,UAAU;AAChC,4BAAU,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2BAA2B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC5K,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,gBAAgB,QAAW;AAChC,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,8BAAU,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACxL,2BAAO;AAAA,kBACX;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,aAAa,QAAW;AAC7B,0BAAM,UAAU;AAChB,wBAAI,OAAO,KAAK,aAAa,WAAW;AACpC,gCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,8BAA8B,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AACpL,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,KAAK,aAAa,QAAW;AAC7B,4BAAM,UAAU;AAChB,0BAAI,WAAW,SAAS;AACpB,4BAAI,CAAE,MAAM,QAAQ,KAAK,QAAQ,GAAI;AACjC,oCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,8BAA8B,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AAChL,iCAAO;AAAA,wBACX;AAAA,sBACJ;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,KAAK,eAAe,QAAW;AAC/B,4BAAI,QAAQ,KAAK;AACjB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAK,OAAO,SAAS,YAAc,SAAS,KAAK,GAAI;AACjD,gCAAI,SAAS,KAAK,MAAM,KAAK,GAAG;AAC5B,wCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,4CAA4C,SAAS,oBAAoB,QAAQ,EAAE,YAAY,KAAK,OAAO,EAAE,GAAG,SAAS,cAAc,CAAC;AACtN,qCAAO;AAAA,4BACX;AAAA,0BACJ,OACK;AACD,sCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACtL,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,KAAK,YAAY,QAAW;AAC5B,8BAAI,QAAQ,KAAK;AACjB,gCAAM,UAAU;AAChB,8BAAI,EAAG,OAAO,SAAS,YAAc,SAAS,KAAK,IAAK;AACpD,sCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,YAAY,YAAY,6BAA6B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChL,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,KAAK,qBAAqB,QAAW;AACrC,gCAAI,SAAS,KAAK;AAClB,kCAAM,UAAU;AAChB,gCAAI,EAAG,OAAO,UAAU,YAAc,SAAS,MAAM,IAAK;AACtD,wCAAU,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,YAAY,sCAAsC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClM,qCAAO;AAAA,4BACX;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AACA,8BAAI,QAAQ;AACR,gCAAI,KAAK,YAAY,QAAW;AAC5B,kCAAI,SAAS,KAAK;AAClB,oCAAM,UAAU;AAChB,kCAAI,EAAG,OAAO,UAAU,YAAc,SAAS,MAAM,IAAK;AACtD,0CAAU,SAAS,CAAC,EAAE,cAAc,eAAe,YAAY,YAAY,6BAA6B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChL,uCAAO;AAAA,8BACX;AACA,kCAAI,SAAS,YAAY;AAAA,4BAC7B,OACK;AACD,kCAAI,SAAS;AAAA,4BACjB;AACA,gCAAI,QAAQ;AACR,kCAAI,KAAK,qBAAqB,QAAW;AACrC,oCAAI,SAAS,KAAK;AAClB,sCAAM,UAAU;AAChB,oCAAI,EAAG,OAAO,UAAU,YAAc,SAAS,MAAM,IAAK;AACtD,4CAAU,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,YAAY,sCAAsC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClM,yCAAO;AAAA,gCACX;AACA,oCAAI,SAAS,YAAY;AAAA,8BAC7B,OACK;AACD,oCAAI,SAAS;AAAA,8BACjB;AACA,kCAAI,QAAQ;AACR,oCAAI,KAAK,cAAc,QAAW;AAC9B,sCAAI,SAAS,KAAK;AAClB,wCAAM,UAAU;AAChB,wCAAM,UAAU;AAChB,sCAAI,EAAI,OAAO,UAAU,aAAc,EAAE,SAAS,MAAM,CAAC,MAAM,MAAM,MAAQ,SAAS,MAAM,IAAK;AAC7F,8CAAU,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,yCAAyC,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AAChM,2CAAO;AAAA,kCACX;AACA,sCAAI,WAAW,SAAS;AACpB,wCAAK,OAAO,UAAU,YAAc,SAAS,MAAM,GAAI;AACnD,0CAAI,SAAS,KAAK,MAAM,MAAM,GAAG;AAC7B,kDAAU,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,4CAA4C,SAAS,WAAW,QAAQ,EAAE,YAAY,MAAM,OAAO,EAAE,GAAG,SAAS,eAAe,CAAC;AAC9M,+CAAO;AAAA,sCACX;AAAA,oCACJ;AAAA,kCACJ;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AACA,oCAAI,QAAQ;AACR,sCAAI,KAAK,cAAc,QAAW;AAC9B,0CAAM,UAAU;AAChB,wCAAI,CAAE,UAAU,KAAK,WAAW,EAAE,cAAc,eAAe,cAAc,YAAY,MAAM,oBAAoB,aAAa,SAAS,CAAC,GAAI;AAC1I,gDAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,+CAAS,QAAQ;AAAA,oCACrB;AACA,wCAAI,SAAS,YAAY;AAAA,kCAC7B,OACK;AACD,wCAAI,SAAS;AAAA,kCACjB;AACA,sCAAI,QAAQ;AACR,wCAAI,KAAK,YAAY,QAAW;AAC5B,4CAAM,UAAU;AAChB,0CAAI,WAAW,SAAS;AACpB,4CAAI,WAAW,SAAS;AACpB,8CAAI,EAAE,OAAO,KAAK,YAAY,WAAW;AACrC,sDAAU,SAAS,CAAC,EAAE,cAAc,eAAe,YAAY,YAAY,6BAA6B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChL,mDAAO;AAAA,0CACX;AAAA,wCACJ;AAAA,sCACJ;AACA,0CAAI,SAAS,YAAY;AAAA,oCAC7B,OACK;AACD,0CAAI,SAAS;AAAA,oCACjB;AACA,wCAAI,QAAQ;AACR,0CAAI,KAAK,oBAAoB,QAAW;AACpC,8CAAM,UAAU;AAChB,4CAAI,CAAE,UAAU,KAAK,iBAAiB,EAAE,cAAc,eAAe,oBAAoB,YAAY,MAAM,oBAAoB,mBAAmB,SAAS,CAAC,GAAI;AAC5J,oDAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,mDAAS,QAAQ;AAAA,wCACrB;AACA,4CAAI,SAAS,YAAY;AAAA,sCAC7B,OACK;AACD,4CAAI,SAAS;AAAA,sCACjB;AACA,0CAAI,QAAQ;AACR,4CAAI,KAAK,UAAU,QAAW;AAC1B,8CAAI,SAAS,KAAK;AAClB,gDAAM,UAAU;AAChB,gDAAM,UAAU;AAChB,8CAAI,SAAS;AACb,gDAAM,UAAU;AAChB,8CAAI,CAAE,UAAU,QAAQ,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC1H,sDAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,qDAAS,QAAQ;AAAA,0CACrB;AACA,8CAAI,UAAU,YAAY;AAC1B,mDAAS,UAAU;AACnB,8CAAI,CAAC,QAAQ;AACT,kDAAM,UAAU;AAChB,gDAAI,CAAE,UAAU,QAAQ,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC1H,wDAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,uDAAS,QAAQ;AAAA,4CACrB;AACA,gDAAI,UAAU,YAAY;AAC1B,qDAAS,UAAU;AAAA,0CACvB;AACA,8CAAI,CAAC,QAAQ;AACT,kDAAM,OAAO,EAAE,cAAc,eAAe,UAAU,YAAY,4BAA4B,SAAS,SAAS,QAAQ,CAAC,GAAG,SAAS,+BAA+B;AACpK,gDAAI,YAAY,MAAM;AAClB,wDAAU,CAAC,IAAI;AAAA,4CACnB,OACK;AACD,sDAAQ,KAAK,IAAI;AAAA,4CACrB;AACA;AACA,sDAAU,SAAS;AACnB,mDAAO;AAAA,0CACX,OACK;AACD,qDAAS;AACT,gDAAI,YAAY,MAAM;AAClB,kDAAI,SAAS;AACT,wDAAQ,SAAS;AAAA,8CACrB,OACK;AACD,0DAAU;AAAA,8CACd;AAAA,4CACJ;AAAA,0CACJ;AACA,8CAAI,SAAS,YAAY;AAAA,wCAC7B,OACK;AACD,8CAAI,SAAS;AAAA,wCACjB;AACA,4CAAI,QAAQ;AACR,8CAAI,KAAK,aAAa,QAAW;AAC7B,gDAAI,SAAS,KAAK;AAClB,kDAAM,UAAU;AAChB,kDAAM,UAAU;AAChB,gDAAI,EAAI,OAAO,UAAU,aAAc,EAAE,SAAS,MAAM,CAAC,MAAM,MAAM,MAAQ,SAAS,MAAM,IAAK;AAC7F,wDAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,yCAAyC,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AAC/L,qDAAO;AAAA,4CACX;AACA,gDAAI,WAAW,SAAS;AACpB,kDAAK,OAAO,UAAU,YAAc,SAAS,MAAM,GAAI;AACnD,oDAAI,SAAS,KAAK,MAAM,MAAM,GAAG;AAC7B,4DAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,4CAA4C,SAAS,WAAW,QAAQ,EAAE,YAAY,MAAM,OAAO,EAAE,GAAG,SAAS,eAAe,CAAC;AAC7M,yDAAO;AAAA,gDACX;AAAA,8CACJ;AAAA,4CACJ;AACA,gDAAI,SAAS,YAAY;AAAA,0CAC7B,OACK;AACD,gDAAI,SAAS;AAAA,0CACjB;AACA,8CAAI,QAAQ;AACR,gDAAI,KAAK,aAAa,QAAW;AAC7B,oDAAM,UAAU;AAChB,kDAAI,CAAE,UAAU,KAAK,UAAU,EAAE,cAAc,eAAe,aAAa,YAAY,MAAM,oBAAoB,YAAY,SAAS,CAAC,GAAI;AACvI,0DAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,yDAAS,QAAQ;AAAA,8CACrB;AACA,kDAAI,SAAS,YAAY;AAAA,4CAC7B,OACK;AACD,kDAAI,SAAS;AAAA,4CACjB;AACA,gDAAI,QAAQ;AACR,kDAAI,KAAK,gBAAgB,QAAW;AAChC,sDAAM,UAAU;AAChB,oDAAI,OAAO,KAAK,gBAAgB,WAAW;AACvC,4DAAU,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AAC1L,yDAAO;AAAA,gDACX;AACA,oDAAI,SAAS,YAAY;AAAA,8CAC7B,OACK;AACD,oDAAI,SAAS;AAAA,8CACjB;AACA,kDAAI,QAAQ;AACR,oDAAI,KAAK,aAAa,QAAW;AAC7B,wDAAM,UAAU;AAChB,sDAAI,CAAE,UAAU,KAAK,UAAU,EAAE,cAAc,eAAe,aAAa,YAAY,MAAM,oBAAoB,YAAY,SAAS,CAAC,GAAI;AACvI,8DAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,6DAAS,QAAQ;AAAA,kDACrB;AACA,sDAAI,SAAS,YAAY;AAAA,gDAC7B,OACK;AACD,sDAAI,SAAS;AAAA,gDACjB;AACA,oDAAI,QAAQ;AACR,sDAAI,KAAK,kBAAkB,QAAW;AAClC,wDAAI,SAAS,KAAK;AAClB,0DAAM,UAAU;AAChB,0DAAM,UAAU;AAChB,wDAAI,EAAI,OAAO,UAAU,aAAc,EAAE,SAAS,MAAM,CAAC,MAAM,MAAM,MAAQ,SAAS,MAAM,IAAK;AAC7F,gEAAU,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,yCAAyC,SAAS,QAAQ,QAAQ,EAAE,MAAM,UAAU,GAAG,SAAS,kBAAkB,CAAC;AACpM,6DAAO;AAAA,oDACX;AACA,wDAAI,WAAW,SAAS;AACpB,0DAAK,OAAO,UAAU,YAAc,SAAS,MAAM,GAAI;AACnD,4DAAI,SAAS,KAAK,MAAM,MAAM,GAAG;AAC7B,oEAAU,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,4CAA4C,SAAS,WAAW,QAAQ,EAAE,YAAY,MAAM,OAAO,EAAE,GAAG,SAAS,eAAe,CAAC;AAClN,iEAAO;AAAA,wDACX;AAAA,sDACJ;AAAA,oDACJ;AACA,wDAAI,SAAS,YAAY;AAAA,kDAC7B,OACK;AACD,wDAAI,SAAS;AAAA,kDACjB;AACA,sDAAI,QAAQ;AACR,wDAAI,KAAK,kBAAkB,QAAW;AAClC,4DAAM,UAAU;AAChB,0DAAI,CAAE,UAAU,KAAK,eAAe,EAAE,cAAc,eAAe,kBAAkB,YAAY,MAAM,oBAAoB,iBAAiB,SAAS,CAAC,GAAI;AACtJ,kEAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,iEAAS,QAAQ;AAAA,sDACrB;AACA,0DAAI,SAAS,YAAY;AAAA,oDAC7B,OACK;AACD,0DAAI,SAAS;AAAA,oDACjB;AACA,wDAAI,QAAQ;AACR,0DAAI,KAAK,aAAa,QAAW;AAC7B,4DAAI,SAAS,KAAK;AAClB,8DAAM,UAAU;AAChB,8DAAM,UAAU;AAChB,4DAAI,WAAW,SAAS;AACpB,8DAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,gEAAI,SAAS;AACb,kEAAM,OAAO,OAAO;AACpB,qEAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,oEAAM,UAAU;AAChB,kEAAI,OAAO,OAAO,EAAE,MAAM,UAAU;AAChC,0EAAU,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,IAAI,YAAY,wCAAwC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClM,uEAAO;AAAA,8DACX;AACA,kEAAI,SAAS,YAAY;AACzB,kEAAI,CAAC,QAAQ;AACT;AAAA,8DACJ;AAAA,4DACJ;AACA,gEAAI,QAAQ;AACR,kEAAI,KAAK,OAAO;AAChB,kEAAI;AACJ,kEAAI,KAAK,GAAG;AACR,sEAAM,WAAW,CAAC;AAClB,uEAAO,QAAO;AACV,sEAAI,QAAQ,OAAO,EAAE;AACrB,sEAAI,OAAO,UAAU,UAAU;AAC3B;AAAA,kEACJ;AACA,sEAAI,OAAO,SAAS,KAAK,KAAK,UAAU;AACpC,yEAAK,SAAS,KAAK;AACnB,8EAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,yCAAyC,SAAS,eAAe,QAAQ,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,6CAA6C,KAAK,UAAU,KAAK,kBAAkB,CAAC;AACpQ,2EAAO;AACP;AAAA,kEACJ;AACA,2EAAS,KAAK,IAAI;AAAA,gEACtB;AAAA,8DACJ;AAAA,4DACJ;AAAA,0DACJ,OACK;AACD,sEAAU,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AACpL,mEAAO;AAAA,0DACX;AAAA,wDACJ;AACA,4DAAI,SAAS,YAAY;AAAA,sDAC7B,OACK;AACD,4DAAI,SAAS;AAAA,sDACjB;AACA,0DAAI,QAAQ;AACR,4DAAI,KAAK,yBAAyB,QAAW;AACzC,gEAAM,UAAU;AAChB,8DAAI,CAAE,UAAU,KAAK,sBAAsB,EAAE,cAAc,eAAe,yBAAyB,YAAY,MAAM,oBAAoB,wBAAwB,SAAS,CAAC,GAAI;AAC3K,sEAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,qEAAS,QAAQ;AAAA,0DACrB;AACA,8DAAI,SAAS,YAAY;AAAA,wDAC7B,OACK;AACD,8DAAI,SAAS;AAAA,wDACjB;AACA,4DAAI,QAAQ;AACR,8DAAI,KAAK,gBAAgB,QAAW;AAChC,gEAAI,SAAS,KAAK;AAClB,kEAAM,UAAU;AAChB,gEAAI,WAAW,SAAS;AACpB,kEAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,2EAAW,QAAQ,QAAQ;AACvB,wEAAM,UAAU;AAChB,sEAAI,CAAE,UAAU,OAAO,IAAI,GAAG,EAAE,cAAc,eAAe,kBAAkB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,QAAQ,oBAAoB,MAAM,SAAS,CAAC,GAAI;AACtL,8EAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,6EAAS,QAAQ;AAAA,kEACrB;AACA,sEAAI,SAAS,YAAY;AACzB,sEAAI,CAAC,QAAQ;AACT;AAAA,kEACJ;AAAA,gEACJ;AAAA,8DACJ,OACK;AACD,0EAAU,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACxL,uEAAO;AAAA,8DACX;AAAA,4DACJ;AACA,gEAAI,SAAS,YAAY;AAAA,0DAC7B,OACK;AACD,gEAAI,SAAS;AAAA,0DACjB;AACA,8DAAI,QAAQ;AACR,gEAAI,KAAK,eAAe,QAAW;AAC/B,kEAAI,SAAS,KAAK;AAClB,oEAAM,UAAU;AAChB,kEAAI,WAAW,SAAS;AACpB,oEAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,6EAAW,QAAQ,QAAQ;AACvB,0EAAM,UAAU;AAChB,wEAAI,CAAE,UAAU,OAAO,IAAI,GAAG,EAAE,cAAc,eAAe,iBAAiB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,QAAQ,oBAAoB,MAAM,SAAS,CAAC,GAAI;AACrL,gFAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,+EAAS,QAAQ;AAAA,oEACrB;AACA,wEAAI,SAAS,YAAY;AACzB,wEAAI,CAAC,QAAQ;AACT;AAAA,oEACJ;AAAA,kEACJ;AAAA,gEACJ,OACK;AACD,4EAAU,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACtL,yEAAO;AAAA,gEACX;AAAA,8DACJ;AACA,kEAAI,SAAS,YAAY;AAAA,4DAC7B,OACK;AACD,kEAAI,SAAS;AAAA,4DACjB;AACA,gEAAI,QAAQ;AACR,kEAAI,KAAK,sBAAsB,QAAW;AACtC,oEAAI,SAAS,KAAK;AAClB,sEAAM,UAAU;AAChB,oEAAI,WAAW,SAAS;AACpB,sEAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,+EAAW,QAAQ,QAAQ;AACvB,4EAAM,UAAU;AAChB,0EAAI,UAAU,YAAY;AAC1B,0EAAI,CAAC,SAAS;AACV,8EAAM,OAAO,EAAE,cAAc,eAAe,sBAAsB,YAAY,gDAAgD,SAAS,iBAAiB,QAAQ,EAAE,cAAc,KAAK,GAAG,SAAS,8BAA8B;AAC/N,4EAAI,YAAY,MAAM;AAClB,oFAAU,CAAC,IAAI;AAAA,wEACnB,OACK;AACD,kFAAQ,KAAK,IAAI;AAAA,wEACrB;AACA;AACA,kFAAU,SAAS;AACnB,+EAAO;AACP;AAAA,sEACJ;AAAA,oEACJ;AACA,wEAAI,SAAS;AACT,iFAAW,QAAQ,QAAQ;AACvB,8EAAM,UAAU;AAChB,4EAAI,CAAE,UAAU,OAAO,IAAI,GAAG,EAAE,cAAc,eAAe,wBAAwB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,QAAQ,oBAAoB,MAAM,SAAS,CAAC,GAAI;AAC5L,oFAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,mFAAS,QAAQ;AAAA,wEACrB;AACA,4EAAI,UAAU,YAAY;AAC1B,4EAAI,CAAC,SAAS;AACV;AAAA,wEACJ;AAAA,sEACJ;AAAA,oEACJ;AAAA,kEACJ,OACK;AACD,8EAAU,SAAS,CAAC,EAAE,cAAc,eAAe,sBAAsB,YAAY,uCAAuC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpM,2EAAO;AAAA,kEACX;AAAA,gEACJ;AACA,oEAAI,SAAS,YAAY;AAAA,8DAC7B,OACK;AACD,oEAAI,SAAS;AAAA,8DACjB;AACA,kEAAI,QAAQ;AACR,oEAAI,KAAK,iBAAiB,QAAW;AACjC,sEAAI,SAAS,KAAK;AAClB,wEAAM,UAAU;AAChB,sEAAI,WAAW,SAAS;AACpB,wEAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,iFAAW,QAAQ,QAAQ;AACvB,4EAAI,SAAS,OAAO,IAAI;AACxB,8EAAM,UAAU;AAChB,8EAAM,UAAU;AAChB,4EAAI,UAAU;AACd,8EAAM,UAAU;AAChB,4EAAI,CAAE,UAAU,QAAQ,EAAE,cAAc,eAAe,mBAAmB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,QAAQ,oBAAoB,MAAM,SAAS,CAAC,GAAI;AACjL,oFAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,mFAAS,QAAQ;AAAA,wEACrB;AACA,4EAAI,UAAU,YAAY;AAC1B,kFAAU,WAAW;AACrB,4EAAI,CAAC,SAAS;AACV,gFAAM,UAAU;AAChB,gFAAM,UAAU;AAChB,8EAAI,WAAW,SAAS;AACpB,gFAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,kFAAI,UAAU;AACd,oFAAM,OAAO,OAAO;AACpB,uFAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,sFAAM,UAAU;AAChB,oFAAI,OAAO,OAAO,EAAE,MAAM,UAAU;AAChC,wFAAM,OAAO,EAAE,cAAc,eAAe,mBAAmB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,IAAI,MAAM,IAAI,YAAY,wCAAwC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB;AACpP,sFAAI,YAAY,MAAM;AAClB,8FAAU,CAAC,IAAI;AAAA,kFACnB,OACK;AACD,4FAAQ,KAAK,IAAI;AAAA,kFACrB;AACA;AAAA,gFACJ;AACA,oFAAI,UAAU,YAAY;AAC1B,oFAAI,CAAC,SAAS;AACV;AAAA,gFACJ;AAAA,8EACJ;AACA,kFAAI,SAAS;AACT,oFAAI,KAAK,OAAO;AAChB,oFAAI;AACJ,oFAAI,KAAK,GAAG;AACR,wFAAM,WAAW,CAAC;AAClB,yFAAO,QAAO;AACV,wFAAI,QAAQ,OAAO,EAAE;AACrB,wFAAI,OAAO,UAAU,UAAU;AAC3B;AAAA,oFACJ;AACA,wFAAI,OAAO,SAAS,KAAK,KAAK,UAAU;AACpC,2FAAK,SAAS,KAAK;AACnB,4FAAM,OAAO,EAAE,cAAc,eAAe,mBAAmB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,yCAAyC,SAAS,eAAe,QAAQ,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,6CAA6C,KAAK,UAAU,KAAK,kBAAkB;AACjT,0FAAI,YAAY,MAAM;AAClB,kGAAU,CAAC,IAAI;AAAA,sFACnB,OACK;AACD,gGAAQ,KAAK,IAAI;AAAA,sFACrB;AACA;AACA;AAAA,oFACJ;AACA,6FAAS,KAAK,IAAI;AAAA,kFACtB;AAAA,gFACJ;AAAA,8EACJ;AAAA,4EACJ,OACK;AACD,oFAAM,OAAO,EAAE,cAAc,eAAe,mBAAmB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB;AACjO,kFAAI,YAAY,MAAM;AAClB,0FAAU,CAAC,IAAI;AAAA,8EACnB,OACK;AACD,wFAAQ,KAAK,IAAI;AAAA,8EACrB;AACA;AAAA,4EACJ;AAAA,0EACJ;AACA,8EAAI,UAAU,YAAY;AAC1B,oFAAU,WAAW;AAAA,wEACzB;AACA,4EAAI,CAAC,SAAS;AACV,gFAAM,OAAO,EAAE,cAAc,eAAe,mBAAmB,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI,GAAG,YAAY,wDAAwD,SAAS,SAAS,QAAQ,CAAC,GAAG,SAAS,+BAA+B;AACxP,8EAAI,YAAY,MAAM;AAClB,sFAAU,CAAC,IAAI;AAAA,0EACnB,OACK;AACD,oFAAQ,KAAK,IAAI;AAAA,0EACrB;AACA;AACA,oFAAU,SAAS;AACnB,iFAAO;AAAA,wEACX,OACK;AACD,mFAAS;AACT,8EAAI,YAAY,MAAM;AAClB,gFAAI,SAAS;AACT,sFAAQ,SAAS;AAAA,4EACrB,OACK;AACD,wFAAU;AAAA,4EACd;AAAA,0EACJ;AAAA,wEACJ;AACA,4EAAI,UAAU,YAAY;AAC1B,4EAAI,CAAC,SAAS;AACV;AAAA,wEACJ;AAAA,sEACJ;AAAA,oEACJ,OACK;AACD,gFAAU,SAAS,CAAC,EAAE,cAAc,eAAe,iBAAiB,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC1L,6EAAO;AAAA,oEACX;AAAA,kEACJ;AACA,sEAAI,SAAS,YAAY;AAAA,gEAC7B,OACK;AACD,sEAAI,SAAS;AAAA,gEACjB;AACA,oEAAI,QAAQ;AACR,sEAAI,KAAK,kBAAkB,QAAW;AAClC,0EAAM,UAAU;AAChB,wEAAI,CAAE,UAAU,KAAK,eAAe,EAAE,cAAc,eAAe,kBAAkB,YAAY,MAAM,oBAAoB,iBAAiB,SAAS,CAAC,GAAI;AACtJ,gFAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,+EAAS,QAAQ;AAAA,oEACrB;AACA,wEAAI,SAAS,YAAY;AAAA,kEAC7B,OACK;AACD,wEAAI,SAAS;AAAA,kEACjB;AACA,sEAAI,QAAQ;AACR,wEAAI,KAAK,SAAS,QAAW;AACzB,0EAAI,SAAS,KAAK;AAClB,4EAAM,UAAU;AAChB,0EAAI,WAAW,SAAS;AACpB,4EAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,8EAAI,OAAO,SAAS,GAAG;AACnB,sFAAU,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,8BAA8B,SAAS,YAAY,QAAQ,EAAE,OAAO,EAAE,GAAG,SAAS,mCAAmC,CAAC;AAC9L,mFAAO;AAAA,0EACX,OACK;AACD,gFAAI,KAAK,OAAO;AAChB,gFAAI;AACJ,gFAAI,KAAK,GAAG;AACR;AAAQ,uFAAO,QAAO;AAClB,uFAAK,KAAK,IAAI,QAAO;AACjB,4FAAI,aAAAC,SAAM,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC,GAAG;AAC/B,gGAAU,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,iCAAiC,SAAS,eAAe,QAAQ,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,6CAA6C,KAAK,UAAU,KAAK,kBAAkB,CAAC;AACxP,6FAAO;AACP,4FAAM;AAAA,oFACV;AAAA,kFACJ;AAAA,gFACJ;AAAA,4EACJ;AAAA,0EACJ;AAAA,wEACJ,OACK;AACD,oFAAU,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AACxK,iFAAO;AAAA,wEACX;AAAA,sEACJ;AACA,0EAAI,SAAS,YAAY;AAAA,oEAC7B,OACK;AACD,0EAAI,SAAS;AAAA,oEACjB;AACA,wEAAI,QAAQ;AACR,0EAAI,KAAK,SAAS,QAAW;AACzB,4EAAI,SAAS,KAAK;AAClB,8EAAM,UAAU;AAChB,8EAAM,UAAU;AAChB,4EAAI,UAAU;AACd,8EAAM,UAAU;AAChB,4EAAI,EAAQ,WAAW,WAAa,WAAW,aAAgB,WAAW,aAAgB,WAAW,UAAa,WAAW,YAAe,WAAW,YAAe,WAAW,WAAY;AACzL,gFAAM,OAAO,EAAE,cAAc,eAAe,SAAS,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,eAAe,QAAQ,KAAK,GAAG,SAAS,6CAA6C;AACnN,8EAAI,YAAY,MAAM;AAClB,sFAAU,CAAC,IAAI;AAAA,0EACnB,OACK;AACD,oFAAQ,KAAK,IAAI;AAAA,0EACrB;AACA;AAAA,wEACJ;AACA,4EAAI,UAAU,YAAY;AAC1B,kFAAU,WAAW;AACrB,4EAAI,CAAC,SAAS;AACV,gFAAM,UAAU;AAChB,8EAAI,WAAW,SAAS;AACpB,gFAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,kFAAI,OAAO,SAAS,GAAG;AACnB,sFAAM,OAAO,EAAE,cAAc,eAAe,SAAS,YAAY,sCAAsC,SAAS,YAAY,QAAQ,EAAE,OAAO,EAAE,GAAG,SAAS,mCAAmC;AAC9L,oFAAI,YAAY,MAAM;AAClB,4FAAU,CAAC,IAAI;AAAA,gFACnB,OACK;AACD,0FAAQ,KAAK,IAAI;AAAA,gFACrB;AACA;AAAA,8EACJ,OACK;AACD,oFAAI,UAAU;AACd,sFAAM,OAAO,OAAO;AACpB,yFAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,sFAAI,SAAS,OAAO,EAAE;AACtB,wFAAM,UAAU;AAChB,sFAAI,EAAQ,WAAW,WAAa,WAAW,aAAgB,WAAW,aAAgB,WAAW,UAAa,WAAW,YAAe,WAAW,YAAe,WAAW,WAAY;AACzL,0FAAM,OAAO,EAAE,cAAc,eAAe,WAAW,IAAI,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,eAAe,QAAQ,KAAK,GAAG,SAAS,6CAA6C;AACzN,wFAAI,YAAY,MAAM;AAClB,gGAAU,CAAC,IAAI;AAAA,oFACnB,OACK;AACD,8FAAQ,KAAK,IAAI;AAAA,oFACrB;AACA;AAAA,kFACJ;AACA,sFAAI,UAAU,YAAY;AAC1B,sFAAI,CAAC,SAAS;AACV;AAAA,kFACJ;AAAA,gFACJ;AACA,oFAAI,SAAS;AACT,sFAAI,KAAK,OAAO;AAChB,sFAAI;AACJ,sFAAI,KAAK,GAAG;AACR;AAAQ,6FAAO,QAAO;AAClB,6FAAK,KAAK,IAAI,QAAO;AACjB,kGAAI,aAAAA,SAAM,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC,GAAG;AAC/B,kGAAM,OAAO,EAAE,cAAc,eAAe,SAAS,YAAY,yCAAyC,SAAS,eAAe,QAAQ,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,6CAA6C,KAAK,UAAU,KAAK,kBAAkB;AACxP,gGAAI,YAAY,MAAM;AAClB,wGAAU,CAAC,IAAI;AAAA,4FACnB,OACK;AACD,sGAAQ,KAAK,IAAI;AAAA,4FACrB;AACA;AACA,kGAAM;AAAA,0FACV;AAAA,wFACJ;AAAA,sFACJ;AAAA,kFACJ;AAAA,gFACJ;AAAA,8EACJ;AAAA,4EACJ,OACK;AACD,oFAAM,QAAQ,EAAE,cAAc,eAAe,SAAS,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB;AACzK,kFAAI,YAAY,MAAM;AAClB,0FAAU,CAAC,KAAK;AAAA,8EACpB,OACK;AACD,wFAAQ,KAAK,KAAK;AAAA,8EACtB;AACA;AAAA,4EACJ;AAAA,0EACJ;AACA,8EAAI,UAAU,YAAY;AAC1B,oFAAU,WAAW;AAAA,wEACzB;AACA,4EAAI,CAAC,SAAS;AACV,gFAAM,QAAQ,EAAE,cAAc,eAAe,SAAS,YAAY,2BAA2B,SAAS,SAAS,QAAQ,CAAC,GAAG,SAAS,+BAA+B;AACnK,8EAAI,YAAY,MAAM;AAClB,sFAAU,CAAC,KAAK;AAAA,0EACpB,OACK;AACD,oFAAQ,KAAK,KAAK;AAAA,0EACtB;AACA;AACA,oFAAU,SAAS;AACnB,iFAAO;AAAA,wEACX,OACK;AACD,mFAAS;AACT,8EAAI,YAAY,MAAM;AAClB,gFAAI,SAAS;AACT,sFAAQ,SAAS;AAAA,4EACrB,OACK;AACD,wFAAU;AAAA,4EACd;AAAA,0EACJ;AAAA,wEACJ;AACA,4EAAI,SAAS,YAAY;AAAA,sEAC7B,OACK;AACD,4EAAI,SAAS;AAAA,sEACjB;AACA,0EAAI,QAAQ;AACR,4EAAI,KAAK,WAAW,QAAW;AAC3B,gFAAM,UAAU;AAChB,8EAAI,OAAO,KAAK,WAAW,UAAU;AACjC,sFAAU,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9K,mFAAO;AAAA,0EACX;AACA,8EAAI,SAAS,YAAY;AAAA,wEAC7B,OACK;AACD,8EAAI,SAAS;AAAA,wEACjB;AACA,4EAAI,QAAQ;AACR,8EAAI,KAAK,qBAAqB,QAAW;AACrC,kFAAM,UAAU;AAChB,gFAAI,OAAO,KAAK,qBAAqB,UAAU;AAC3C,wFAAU,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,YAAY,sCAAsC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClM,qFAAO;AAAA,4EACX;AACA,gFAAI,SAAS,YAAY;AAAA,0EAC7B,OACK;AACD,gFAAI,SAAS;AAAA,0EACjB;AACA,8EAAI,QAAQ;AACR,gFAAI,KAAK,oBAAoB,QAAW;AACpC,oFAAM,UAAU;AAChB,kFAAI,OAAO,KAAK,oBAAoB,UAAU;AAC1C,0FAAU,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,YAAY,qCAAqC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChM,uFAAO;AAAA,8EACX;AACA,kFAAI,SAAS,YAAY;AAAA,4EAC7B,OACK;AACD,kFAAI,SAAS;AAAA,4EACjB;AACA,gFAAI,QAAQ;AACR,kFAAI,KAAK,OAAO,QAAW;AACvB,sFAAM,UAAU;AAChB,oFAAI,CAAE,UAAU,KAAK,IAAI,EAAE,cAAc,eAAe,OAAO,YAAY,MAAM,oBAAoB,MAAM,SAAS,CAAC,GAAI;AACrH,4FAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,2FAAS,QAAQ;AAAA,gFACrB;AACA,oFAAI,SAAS,YAAY;AAAA,8EAC7B,OACK;AACD,oFAAI,SAAS;AAAA,8EACjB;AACA,kFAAI,QAAQ;AACR,oFAAI,KAAK,SAAS,QAAW;AACzB,wFAAM,UAAU;AAChB,sFAAI,CAAE,UAAU,KAAK,MAAM,EAAE,cAAc,eAAe,SAAS,YAAY,MAAM,oBAAoB,QAAQ,SAAS,CAAC,GAAI;AAC3H,8FAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,6FAAS,QAAQ;AAAA,kFACrB;AACA,sFAAI,SAAS,YAAY;AAAA,gFAC7B,OACK;AACD,sFAAI,SAAS;AAAA,gFACjB;AACA,oFAAI,QAAQ;AACR,sFAAI,KAAK,SAAS,QAAW;AACzB,0FAAM,UAAU;AAChB,wFAAI,CAAE,UAAU,KAAK,MAAM,EAAE,cAAc,eAAe,SAAS,YAAY,MAAM,oBAAoB,QAAQ,SAAS,CAAC,GAAI;AAC3H,gGAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,+FAAS,QAAQ;AAAA,oFACrB;AACA,wFAAI,SAAS,YAAY;AAAA,kFAC7B,OACK;AACD,wFAAI,SAAS;AAAA,kFACjB;AACA,sFAAI,QAAQ;AACR,wFAAI,KAAK,UAAU,QAAW;AAC1B,4FAAM,UAAU;AAChB,0FAAI,CAAE,UAAU,KAAK,OAAO,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC9H,kGAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,iGAAS,QAAQ;AAAA,sFACrB;AACA,0FAAI,SAAS,YAAY;AAAA,oFAC7B,OACK;AACD,0FAAI,SAAS;AAAA,oFACjB;AACA,wFAAI,QAAQ;AACR,0FAAI,KAAK,UAAU,QAAW;AAC1B,8FAAM,WAAW;AACjB,4FAAI,CAAE,UAAU,KAAK,OAAO,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC9H,oGAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,mGAAS,QAAQ;AAAA,wFACrB;AACA,4FAAI,SAAS,aAAa;AAAA,sFAC9B,OACK;AACD,4FAAI,SAAS;AAAA,sFACjB;AACA,0FAAI,QAAQ;AACR,4FAAI,KAAK,UAAU,QAAW;AAC1B,gGAAM,WAAW;AACjB,8FAAI,CAAE,UAAU,KAAK,OAAO,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC9H,sGAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,qGAAS,QAAQ;AAAA,0FACrB;AACA,8FAAI,SAAS,aAAa;AAAA,wFAC9B,OACK;AACD,8FAAI,SAAS;AAAA,wFACjB;AACA,4FAAI,QAAQ;AACR,8FAAI,KAAK,QAAQ,QAAW;AACxB,kGAAM,WAAW;AACjB,gGAAI,CAAE,UAAU,KAAK,KAAK,EAAE,cAAc,eAAe,QAAQ,YAAY,MAAM,oBAAoB,OAAO,SAAS,CAAC,GAAI;AACxH,wGAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,uGAAS,QAAQ;AAAA,4FACrB;AACA,gGAAI,SAAS,aAAa;AAAA,0FAC9B,OACK;AACD,gGAAI,SAAS;AAAA,0FACjB;AAAA,wFACJ;AAAA,sFACJ;AAAA,oFACJ;AAAA,kFACJ;AAAA,gFACJ;AAAA,8EACJ;AAAA,4EACJ;AAAA,0EACJ;AAAA,wEACJ;AAAA,sEACJ;AAAA,oEACJ;AAAA,kEACJ;AAAA,gEACJ;AAAA,8DACJ;AAAA,4DACJ;AAAA,0DACJ;AAAA,wDACJ;AAAA,sDACJ;AAAA,oDACJ;AAAA,kDACJ;AAAA,gDACJ;AAAA,8CACJ;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAE,YAAU,SAAS;AAAS,SAAO,WAAW;AAAG;AACnD,IAAM,QAAQ,OAAO,UAAU;AAC/B,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA4D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACvN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAQ,KAAK,gBAAgB,WAAe,WAAW,kBAAqB,KAAK,UAAU,WAAe,WAAW,YAAgB,KAAK,WAAW,WAAe,WAAW,aAAiB,KAAK,4BAA4B,WAAe,WAAW,4BAA6B;AACpR,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,YAAI,KAAK,yBAAyB,QAAW;AACzC,cAAI,SAAS;AACb,qBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,yBAAyB,YAAY,kDAAkD,SAAS,gBAAgB,QAAQ,CAAC,GAAG,SAAS,0BAA0B,CAAC;AACpN,iBAAO;AAAA,QACX,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,gBAAgB,QAAW;AAChC,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACzL,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,UAAU,QAAW;AAC1B,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,sBAAI;AACJ,sBAAM,MAAM,iBAAiB,WAAe,WAAW,mBAAsB,MAAM,YAAY,WAAe,WAAW,YAAa;AAClI,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,+BAA+B,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AAChO,2BAAO;AAAA,kBACX,OACK;AACD,0BAAM,SAAS;AACf,+BAAW,QAAQ,OAAO;AACtB,0BAAI,EAAK,SAAS,kBAAoB,SAAS,SAAY,SAAS,SAAY,SAAS,YAAa;AAClG,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2CAA2C,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAC5O,+BAAO;AACP;AAAA,sBACJ;AAAA,oBACJ;AACA,wBAAI,WAAW,QAAQ;AACnB,0BAAI,MAAM,iBAAiB,QAAW;AAClC,8BAAM,SAAS;AACf,4BAAI,OAAO,MAAM,iBAAiB,UAAU;AACxC,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,uBAAuB,YAAY,mDAAmD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClN,iCAAO;AAAA,wBACX;AACA,4BAAI,SAAS,WAAW;AAAA,sBAC5B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,MAAM,QAAQ,QAAW;AACzB,8BAAI,QAAQ,MAAM;AAClB,gCAAM,SAAS;AACf,gCAAM,SAAS;AACf,8BAAI,WAAW,QAAQ;AACnB,gCAAI,OAAO,UAAU,UAAU;AAC3B,kCAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,2CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AAChR,uCAAO;AAAA,8BACX;AAAA,4BACJ,OACK;AACD,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC1M,qCAAO;AAAA,4BACX;AAAA,0BACJ;AACA,8BAAI,SAAS,WAAW;AAAA,wBAC5B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,QAAQ,QAAW;AACzB,gCAAI,QAAQ,MAAM;AAClB,kCAAM,UAAU;AAChB,kCAAM,UAAU;AAChB,gCAAI,WAAW,SAAS;AACpB,kCAAI,OAAO,UAAU,UAAU;AAC3B,oCAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,6CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AAChR,yCAAO;AAAA,gCACX;AAAA,8BACJ,OACK;AACD,2CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC1M,uCAAO;AAAA,8BACX;AAAA,4BACJ;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AACA,8BAAI,QAAQ;AACR,gCAAI,MAAM,YAAY,QAAW;AAC7B,kCAAI,QAAQ,MAAM;AAClB,oCAAM,UAAU;AAChB,kCAAI,WAAW,SAAS;AACpB,oCAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,sCAAI,SAAS;AACb,wCAAM,OAAO,MAAM;AACnB,2CAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,wCAAI,QAAQ,MAAM,EAAE;AACpB,0CAAM,UAAU;AAChB,wCAAI,WAAW,SAAS;AACpB,0CAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,4CAAI;AACJ,4CAAK,MAAM,SAAS,WAAe,WAAW,SAAS;AACnD,qDAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,IAAI,YAAY,wDAAwD,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACvQ,iDAAO;AAAA,wCACX,OACK;AACD,gDAAM,UAAU;AAChB,qDAAW,QAAQ,OAAO;AACtB,gDAAI,EAAS,SAAS,UAAY,SAAS,UAAa,SAAS,iBAAoB,SAAS,WAAc,SAAS,4BAA+B,SAAS,SAAY,SAAS,SAAY,SAAS,QAAS;AAC5M,yDAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,IAAI,YAAY,oEAAoE,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AACnR,qDAAO;AACP;AAAA,4CACJ;AAAA,0CACJ;AACA,8CAAI,YAAY,QAAQ;AACpB,gDAAI,MAAM,SAAS,QAAW;AAC1B,oDAAM,UAAU;AAChB,kDAAI,OAAO,MAAM,SAAS,UAAU;AAChC,2DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,SAAS,YAAY,oEAAoE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9O,uDAAO;AAAA,8CACX;AACA,kDAAI,SAAS,YAAY;AAAA,4CAC7B,OACK;AACD,kDAAI,SAAS;AAAA,4CACjB;AACA,gDAAI,QAAQ;AACR,kDAAI,MAAM,SAAS,QAAW;AAC1B,sDAAM,UAAU;AAChB,oDAAI,OAAO,MAAM,SAAS,UAAU;AAChC,6DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,SAAS,YAAY,oEAAoE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9O,yDAAO;AAAA,gDACX;AACA,oDAAI,SAAS,YAAY;AAAA,8CAC7B,OACK;AACD,oDAAI,SAAS;AAAA,8CACjB;AACA,kDAAI,QAAQ;AACR,oDAAI,MAAM,gBAAgB,QAAW;AACjC,wDAAM,UAAU;AAChB,sDAAI,OAAO,MAAM,gBAAgB,UAAU;AACvC,+DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,gBAAgB,YAAY,2EAA2E,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC5P,2DAAO;AAAA,kDACX;AACA,sDAAI,SAAS,YAAY;AAAA,gDAC7B,OACK;AACD,sDAAI,SAAS;AAAA,gDACjB;AACA,oDAAI,QAAQ;AACR,sDAAI,MAAM,UAAU,QAAW;AAC3B,0DAAM,UAAU;AAChB,wDAAI,OAAO,MAAM,UAAU,UAAU;AACjC,iEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,UAAU,YAAY,qEAAqE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChP,6DAAO;AAAA,oDACX;AACA,wDAAI,SAAS,YAAY;AAAA,kDAC7B,OACK;AACD,wDAAI,SAAS;AAAA,kDACjB;AACA,sDAAI,QAAQ;AACR,wDAAI,MAAM,2BAA2B,QAAW;AAC5C,4DAAM,UAAU;AAChB,0DAAI,CAAE,UAAU,MAAM,wBAAwB,EAAE,cAAc,eAAe,oBAAoB,KAAK,2BAA2B,YAAY,OAAO,oBAAoB,0BAA0B,SAAS,CAAC,GAAI;AAC5M,kEAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,iEAAS,QAAQ;AAAA,sDACrB;AACA,0DAAI,SAAS,YAAY;AAAA,oDAC7B,OACK;AACD,0DAAI,SAAS;AAAA,oDACjB;AACA,wDAAI,QAAQ;AACR,0DAAI,MAAM,QAAQ,QAAW;AACzB,4DAAI,SAAS,MAAM;AACnB,8DAAM,UAAU;AAChB,8DAAM,UAAU;AAChB,4DAAI,WAAW,SAAS;AACpB,8DAAI,OAAO,WAAW,UAAU;AAC5B,gEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,yEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACnS,qEAAO;AAAA,4DACX;AAAA,0DACJ,OACK;AACD,uEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7N,mEAAO;AAAA,0DACX;AAAA,wDACJ;AACA,4DAAI,SAAS,YAAY;AAAA,sDAC7B,OACK;AACD,4DAAI,SAAS;AAAA,sDACjB;AACA,0DAAI,QAAQ;AACR,4DAAI,MAAM,QAAQ,QAAW;AACzB,8DAAI,SAAS,MAAM;AACnB,gEAAM,UAAU;AAChB,gEAAM,UAAU;AAChB,8DAAI,WAAW,SAAS;AACpB,gEAAI,OAAO,WAAW,UAAU;AAC5B,kEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,2EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACnS,uEAAO;AAAA,8DACX;AAAA,4DACJ,OACK;AACD,yEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7N,qEAAO;AAAA,4DACX;AAAA,0DACJ;AACA,8DAAI,SAAS,YAAY;AAAA,wDAC7B,OACK;AACD,8DAAI,SAAS;AAAA,wDACjB;AACA,4DAAI,QAAQ;AACR,8DAAI,MAAM,QAAQ,QAAW;AACzB,gEAAI,SAAS,MAAM;AACnB,kEAAM,UAAU;AAChB,kEAAM,UAAU;AAChB,gEAAI,WAAW,SAAS;AACpB,kEAAI,OAAO,WAAW,UAAU;AAC5B,oEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,6EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACnS,yEAAO;AAAA,gEACX;AAAA,8DACJ,OACK;AACD,2EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7N,uEAAO;AAAA,8DACX;AAAA,4DACJ;AACA,gEAAI,SAAS,YAAY;AAAA,0DAC7B,OACK;AACD,gEAAI,SAAS;AAAA,0DACjB;AAAA,wDACJ;AAAA,sDACJ;AAAA,oDACJ;AAAA,kDACJ;AAAA,gDACJ;AAAA,8CACJ;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ,OACK;AACD,mDAAW,SAAS,CAAC,EAAE,cAAc,eAAe,oBAAoB,IAAI,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpN,+CAAO;AAAA,sCACX;AAAA,oCACJ;AACA,wCAAI,SAAS,YAAY;AACzB,wCAAI,CAAC,QAAQ;AACT;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ,OACK;AACD,6CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,8CAA8C,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AACtM,yCAAO;AAAA,gCACX;AAAA,8BACJ;AACA,kCAAI,SAAS,YAAY;AAAA,4BAC7B,OACK;AACD,kCAAI,SAAS;AAAA,4BACjB;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2BAA2B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7K,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,WAAW,QAAW;AAC3B,oBAAI,SAAS,KAAK;AAClB,sBAAM,UAAU;AAChB,oBAAI,WAAW,SAAS;AACpB,sBAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,wBAAI;AACJ,wBAAM,OAAO,iBAAiB,WAAe,WAAW,mBAAsB,OAAO,YAAY,WAAe,WAAW,YAAa;AACpI,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,gCAAgC,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AAClO,6BAAO;AAAA,oBACX,OACK;AACD,4BAAM,UAAU;AAChB,iCAAW,QAAQ,QAAQ;AACvB,4BAAI,EAAK,SAAS,kBAAoB,SAAS,SAAY,SAAS,SAAY,SAAS,YAAa;AAClG,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4CAA4C,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAC9O,iCAAO;AACP;AAAA,wBACJ;AAAA,sBACJ;AACA,0BAAI,YAAY,QAAQ;AACpB,4BAAI,OAAO,iBAAiB,QAAW;AACnC,gCAAM,UAAU;AAChB,8BAAI,OAAO,OAAO,iBAAiB,UAAU;AACzC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,wBAAwB,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpN,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,OAAO,QAAQ,QAAW;AAC1B,gCAAI,SAAS,OAAO;AACpB,kCAAM,UAAU;AAChB,kCAAM,UAAU;AAChB,gCAAI,WAAW,SAAS;AACpB,kCAAI,OAAO,WAAW,UAAU;AAC5B,oCAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,6CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACjR,yCAAO;AAAA,gCACX;AAAA,8BACJ,OACK;AACD,2CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3M,uCAAO;AAAA,8BACX;AAAA,4BACJ;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AACA,8BAAI,QAAQ;AACR,gCAAI,OAAO,QAAQ,QAAW;AAC1B,kCAAI,SAAS,OAAO;AACpB,oCAAM,UAAU;AAChB,oCAAM,UAAU;AAChB,kCAAI,WAAW,SAAS;AACpB,oCAAI,OAAO,WAAW,UAAU;AAC5B,sCAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,+CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACjR,2CAAO;AAAA,kCACX;AAAA,gCACJ,OACK;AACD,6CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3M,yCAAO;AAAA,gCACX;AAAA,8BACJ;AACA,kCAAI,SAAS,YAAY;AAAA,4BAC7B,OACK;AACD,kCAAI,SAAS;AAAA,4BACjB;AACA,gCAAI,QAAQ;AACR,kCAAI,OAAO,YAAY,QAAW;AAC9B,oCAAI,SAAS,OAAO;AACpB,sCAAM,UAAU;AAChB,oCAAI,WAAW,SAAS;AACpB,sCAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,wCAAI,UAAU;AACd,0CAAM,OAAO,OAAO;AACpB,6CAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,0CAAI,SAAS,OAAO,EAAE;AACtB,4CAAM,UAAU;AAChB,0CAAI,WAAW,SAAS;AACpB,4CAAI,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC/D,8CAAI;AACJ,8CAAM,OAAO,SAAS,WAAe,WAAW,WAAc,OAAO,4BAA4B,WAAe,WAAW,4BAA6B;AACpJ,uDAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,IAAI,YAAY,yDAAyD,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACzQ,mDAAO;AAAA,0CACX,OACK;AACD,kDAAM,UAAU;AAChB,uDAAW,QAAQ,QAAQ;AACvB,kDAAI,CAAE,MAAM,KAAK,SAAS,WAAW,OAAO,WAAW,QAAQ,MAAM,YAAY,IAAI,GAAI;AACrF,2DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,IAAI,YAAY,qEAAqE,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AACrR,uDAAO;AACP;AAAA,8CACJ;AAAA,4CACJ;AACA,gDAAI,YAAY,QAAQ;AACpB,kDAAI,OAAO,SAAS,QAAW;AAC3B,sDAAM,UAAU;AAChB,oDAAI,OAAO,OAAO,SAAS,UAAU;AACjC,6DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,SAAS,YAAY,qEAAqE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChP,yDAAO;AAAA,gDACX;AACA,oDAAI,UAAU,YAAY;AAAA,8CAC9B,OACK;AACD,oDAAI,UAAU;AAAA,8CAClB;AACA,kDAAI,SAAS;AACT,oDAAI,OAAO,SAAS,QAAW;AAC3B,wDAAM,UAAU;AAChB,sDAAI,OAAO,OAAO,SAAS,UAAU;AACjC,+DAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,SAAS,YAAY,qEAAqE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChP,2DAAO;AAAA,kDACX;AACA,sDAAI,UAAU,YAAY;AAAA,gDAC9B,OACK;AACD,sDAAI,UAAU;AAAA,gDAClB;AACA,oDAAI,SAAS;AACT,sDAAI,OAAO,gBAAgB,QAAW;AAClC,0DAAM,UAAU;AAChB,wDAAI,OAAO,OAAO,gBAAgB,UAAU;AACxC,iEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,gBAAgB,YAAY,4EAA4E,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9P,6DAAO;AAAA,oDACX;AACA,wDAAI,UAAU,YAAY;AAAA,kDAC9B,OACK;AACD,wDAAI,UAAU;AAAA,kDAClB;AACA,sDAAI,SAAS;AACT,wDAAI,OAAO,UAAU,QAAW;AAC5B,4DAAM,UAAU;AAChB,0DAAI,OAAO,OAAO,UAAU,UAAU;AAClC,mEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,UAAU,YAAY,sEAAsE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClP,+DAAO;AAAA,sDACX;AACA,0DAAI,UAAU,YAAY;AAAA,oDAC9B,OACK;AACD,0DAAI,UAAU;AAAA,oDAClB;AACA,wDAAI,SAAS;AACT,0DAAI,OAAO,2BAA2B,QAAW;AAC7C,8DAAM,UAAU;AAChB,4DAAI,CAAE,UAAU,OAAO,wBAAwB,EAAE,cAAc,eAAe,qBAAqB,KAAK,2BAA2B,YAAY,QAAQ,oBAAoB,0BAA0B,SAAS,CAAC,GAAI;AAC/M,oEAAU,YAAY,OAAO,UAAU,SAAS,QAAQ,OAAO,UAAU,MAAM;AAC/E,mEAAS,QAAQ;AAAA,wDACrB;AACA,4DAAI,UAAU,YAAY;AAAA,sDAC9B,OACK;AACD,4DAAI,UAAU;AAAA,sDAClB;AACA,0DAAI,SAAS;AACT,4DAAI,OAAO,QAAQ,QAAW;AAC1B,8DAAI,SAAS,OAAO;AACpB,gEAAM,UAAU;AAChB,gEAAM,UAAU;AAChB,8DAAI,WAAW,SAAS;AACpB,gEAAI,OAAO,WAAW,UAAU;AAC5B,kEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,2EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACpS,uEAAO;AAAA,8DACX;AAAA,4DACJ,OACK;AACD,yEAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9N,qEAAO;AAAA,4DACX;AAAA,0DACJ;AACA,8DAAI,UAAU,YAAY;AAAA,wDAC9B,OACK;AACD,8DAAI,UAAU;AAAA,wDAClB;AACA,4DAAI,SAAS;AACT,8DAAI,OAAO,QAAQ,QAAW;AAC1B,gEAAI,SAAS,OAAO;AACpB,kEAAM,UAAU;AAChB,kEAAM,UAAU;AAChB,gEAAI,WAAW,SAAS;AACpB,kEAAI,OAAO,WAAW,UAAU;AAC5B,oEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,6EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACpS,yEAAO;AAAA,gEACX;AAAA,8DACJ,OACK;AACD,2EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9N,uEAAO;AAAA,8DACX;AAAA,4DACJ;AACA,gEAAI,UAAU,YAAY;AAAA,0DAC9B,OACK;AACD,gEAAI,UAAU;AAAA,0DAClB;AACA,8DAAI,SAAS;AACT,gEAAI,OAAO,QAAQ,QAAW;AAC1B,kEAAI,SAAS,OAAO;AACpB,oEAAM,UAAU;AAChB,oEAAM,UAAU;AAChB,kEAAI,WAAW,SAAS;AACpB,oEAAI,OAAO,WAAW,UAAU;AAC5B,sEAAI,CAAC,SAAS,KAAK,MAAM,GAAG;AACxB,+EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACpS,2EAAO;AAAA,kEACX;AAAA,gEACJ,OACK;AACD,6EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9N,yEAAO;AAAA,gEACX;AAAA,8DACJ;AACA,kEAAI,UAAU,YAAY;AAAA,4DAC9B,OACK;AACD,kEAAI,UAAU;AAAA,4DAClB;AACA,gEAAI,SAAS;AACT,kEAAI,OAAO,4BAA4B,QAAW;AAC9C,oEAAI,SAAS,OAAO;AACpB,sEAAM,UAAU;AAChB,oEAAI,WAAW,SAAS;AACpB,sEAAK,OAAO,UAAU,YAAc,SAAS,MAAM,GAAI;AACnD,wEAAI,SAAS,KAAK,MAAM,MAAM,GAAG;AAC7B,iFAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,4BAA4B,YAAY,2FAA2F,SAAS,WAAW,QAAQ,EAAE,YAAY,MAAM,OAAO,EAAE,GAAG,SAAS,eAAe,CAAC;AACtS,6EAAO;AAAA,oEACX;AAAA,kEACJ,OACK;AACD,+EAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,KAAK,4BAA4B,YAAY,wFAAwF,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACtR,2EAAO;AAAA,kEACX;AAAA,gEACJ;AACA,oEAAI,UAAU,YAAY;AAAA,8DAC9B,OACK;AACD,oEAAI,UAAU;AAAA,8DAClB;AAAA,4DACJ;AAAA,0DACJ;AAAA,wDACJ;AAAA,sDACJ;AAAA,oDACJ;AAAA,kDACJ;AAAA,gDACJ;AAAA,8CACJ;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ,OACK;AACD,qDAAW,SAAS,CAAC,EAAE,cAAc,eAAe,qBAAqB,IAAI,YAAY,qDAAqD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACtN,iDAAO;AAAA,wCACX;AAAA,sCACJ;AACA,0CAAI,UAAU,YAAY;AAC1B,0CAAI,CAAC,SAAS;AACV;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ,OACK;AACD,+CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,mBAAmB,YAAY,+CAA+C,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AACxM,2CAAO;AAAA,kCACX;AAAA,gCACJ;AACA,oCAAI,SAAS,YAAY;AAAA,8BAC7B,OACK;AACD,oCAAI,SAAS;AAAA,8BACjB;AAAA,4BACJ;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC/K,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,4BAA4B,QAAW;AAC5C,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,4BAA4B,UAAU;AAClD,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,4BAA4B,YAAY,6CAA6C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACjN,2BAAO;AAAA,kBACX;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,mBAAmB,QAAW;AACnC,wBAAI,SAAS,KAAK;AAClB,0BAAM,UAAU;AAChB,wBAAI,EAAE,UAAU,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,MAAM,IAAI;AAClE,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,mBAAmB,YAAY,oCAAoC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC/L,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,UAAU;AAEvB,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA2D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACtN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAM,KAAK,iBAAiB,WAAe,WAAW,mBAAsB,KAAK,cAAc,WAAe,WAAW,cAAe;AACpI,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,YAAI,KAAK,yBAAyB,QAAW;AACzC,cAAI,SAAS;AACb,qBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,yBAAyB,YAAY,kDAAkD,SAAS,gBAAgB,QAAQ,CAAC,GAAG,SAAS,0BAA0B,CAAC;AACpN,iBAAO;AAAA,QACX,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,iBAAiB,QAAW;AACjC,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,iBAAiB,UAAU;AACvC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,iBAAiB,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3L,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,cAAc,QAAW;AAC9B,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,OAAO,UAAU,UAAU;AAC3B,sBAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AAChR,2BAAO;AAAA,kBACX;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC1M,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,UAAU;AAEvB,IAAM,WAAW,EAAE,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,QAAQ,EAAE,QAAQ,qCAAqC,eAAe,mBAAmB,GAAG,MAAM,EAAE,QAAQ,qCAAqC,eAAe,sBAAsB,GAAG,QAAQ,EAAE,QAAQ,UAAU,QAAQ,CAAC,OAAO,SAAS,SAAS,eAAe,OAAO,GAAG,eAAe,qCAAqC,GAAG,MAAM,EAAE,QAAQ,UAAU,eAAe,iBAAiB,GAAG,cAAc,EAAE,QAAQ,UAAU,eAAe,4FAA4F,GAAG,cAAc,EAAE,QAAQ,UAAU,eAAe,6DAA6D,GAAG,aAAa,EAAE,QAAQ,UAAU,eAAe,sDAAsD,GAAG,YAAY,EAAE,QAAQ,UAAU,eAAe,8CAA8C,EAAE,GAAG,YAAY,CAAC,QAAQ,MAAM,QAAQ,MAAM,cAAc,aAAa,UAAU,EAAE;AAEp/B,IAAM,YAAY,IAAI,OAAO,kLAAkL,GAAG;AAClN,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAC3J,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAW,KAAK,SAAS,WAAe,WAAW,WAAc,KAAK,OAAO,WAAe,WAAW,SAAa,KAAK,SAAS,WAAe,WAAW,WAAe,KAAK,OAAO,WAAe,WAAW,SAAa,KAAK,eAAe,WAAe,WAAW,iBAAqB,KAAK,cAAc,WAAe,WAAW,gBAAoB,KAAK,aAAa,WAAe,WAAW,aAAc;AACxZ,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAS,SAAS,UAAY,SAAS,QAAW,SAAS,UAAa,SAAS,QAAW,SAAS,gBAAmB,SAAS,gBAAmB,SAAS,eAAkB,SAAS,aAAc;AACtM,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,SAAS,QAAW;AACzB,gBAAI,QAAQ,KAAK;AACjB,kBAAM,SAAS;AACf,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,OAAO,UAAU,UAAU;AAC3B,oBAAI,CAAC,UAAU,KAAK,KAAK,GAAG;AACxB,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,6CAA6C,SAAS,WAAW,QAAQ,EAAE,SAAS,iLAAiL,GAAG,SAAS,sMAAkN,CAAC;AAC7iB,yBAAO;AAAA,gBACX;AAAA,cACJ,OACK;AACD,2BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0CAA0C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3L,uBAAO;AAAA,cACX;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,OAAO,QAAW;AACvB,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,OAAO,UAAU,UAAU;AAC3B,sBAAI,CAAC,UAAU,KAAK,KAAK,GAAG;AACxB,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,OAAO,YAAY,6CAA6C,SAAS,WAAW,QAAQ,EAAE,SAAS,iLAAiL,GAAG,SAAS,sMAAkN,CAAC;AAC3iB,2BAAO;AAAA,kBACX;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,OAAO,YAAY,0CAA0C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACzL,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,SAAS,QAAW;AACzB,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,oBAAI,OAAO,UAAU,UAAU;AAC3B,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3K,yBAAO;AAAA,gBACX;AACA,oBAAI,EAAM,UAAU,SAAW,UAAU,WAAc,UAAU,WAAc,UAAU,iBAAoB,UAAU,UAAW;AAC9H,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,eAAe,SAAS,WAAW,KAAK,KAAK,GAAG,SAAS,6CAA6C,CAAC;AACrO,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,OAAO,QAAW;AACvB,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,OAAO,UAAU;AAC7B,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,OAAO,YAAY,wBAAwB,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvK,2BAAO;AAAA,kBACX;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,eAAe,QAAW;AAC/B,0BAAM,UAAU;AAChB,wBAAI,OAAO,KAAK,eAAe,UAAU;AACrC,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvL,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,KAAK,eAAe,QAAW;AAC/B,4BAAM,UAAU;AAChB,0BAAI,OAAO,KAAK,eAAe,UAAU;AACrC,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvL,+BAAO;AAAA,sBACX;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,KAAK,cAAc,QAAW;AAC9B,8BAAM,UAAU;AAChB,4BAAI,OAAO,KAAK,cAAc,UAAU;AACpC,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,+BAA+B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACrL,iCAAO;AAAA,wBACX;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,KAAK,aAAa,QAAW;AAC7B,gCAAM,UAAU;AAChB,8BAAI,OAAO,KAAK,aAAa,UAAU;AACnC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,8BAA8B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnL,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AACpD,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA2D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACtN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAO,KAAK,aAAa,WAAe,WAAW,eAAkB,KAAK,SAAS,WAAe,WAAW,WAAe,KAAK,cAAc,WAAe,WAAW,cAAe;AACpL,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAK,SAAS,cAAgB,SAAS,UAAa,SAAS,eAAkB,SAAS,gBAAiB;AACzG,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,aAAa,QAAW;AAC7B,kBAAM,SAAS;AACf,gBAAI,CAAE,WAAW,KAAK,UAAU,EAAE,cAAc,eAAe,aAAa,YAAY,MAAM,oBAAoB,YAAY,SAAS,CAAC,GAAI;AACxI,wBAAU,YAAY,OAAO,WAAW,SAAS,QAAQ,OAAO,WAAW,MAAM;AACjF,uBAAS,QAAQ;AAAA,YACrB;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,SAAS,QAAW;AACzB,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,kBAAI,EAAE,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI;AAC/D,2BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3K,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,cAAc,QAAW;AAC9B,sBAAM,SAAS;AACf,oBAAI,OAAO,KAAK,cAAc,UAAU;AACpC,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,+BAA+B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACrL,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,gBAAgB,QAAW;AAChC,sBAAI,QAAQ,KAAK;AACjB,wBAAM,SAAS;AACf,sBAAI,EAAE,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI;AAC/D,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACzL,2BAAO;AAAA,kBACX;AACA,sBAAI,SAAS,WAAW;AAAA,gBAC5B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,QAAQ;AAErB,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAyD;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACpN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,iBAAW,QAAQ,MAAM;AACrB,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,eAAO;AACP;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,cAAc;AAE3B,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA+D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAC1N,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAK,KAAK,gBAAgB,WAAe,WAAW,gBAAgB;AAChE,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAE,SAAS,gBAAgB;AAC3B,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,gBAAgB,QAAW;AAChC,gBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,iCAAiC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACzL,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,QAAQ;AAIrB,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAC3J,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAM,KAAK,iBAAiB,WAAe,WAAW,mBAAsB,KAAK,WAAW,WAAe,WAAW,WAAY;AAC9H,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAK,SAAS,kBAAoB,SAAS,YAAe,SAAS,SAAY,SAAS,uBAAwB;AAChH,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,iBAAiB,QAAW;AACjC,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,iBAAiB,UAAU;AACvC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,iBAAiB,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3L,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,WAAW,QAAW;AAC3B,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,OAAO,UAAU,UAAU;AAC3B,sBAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AAC7Q,2BAAO;AAAA,kBACX;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvM,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,QAAQ,QAAW;AACxB,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,sBAAM,SAAS;AACf,oBAAI,WAAW,QAAQ;AACnB,sBAAI,OAAO,UAAU,UAAU;AAC3B,wBAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,QAAQ,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AAC1Q,6BAAO;AAAA,oBACX;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,QAAQ,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpM,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,uBAAuB,QAAW;AACvC,sBAAI,QAAQ,KAAK;AACjB,wBAAM,UAAU;AAChB,wBAAM,UAAU;AAChB,sBAAI,WAAW,SAAS;AACpB,wBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,4BAAM,UAAU;AAChB,iCAAW,QAAQ,OAAO;AACtB,4BAAI,EAAG,SAAS,UAAY,SAAS,gBAAiB;AAClD,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,uBAAuB,YAAY,yDAAyD,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AACvQ,iCAAO;AACP;AAAA,wBACJ;AAAA,sBACJ;AACA,0BAAI,YAAY,QAAQ;AACpB,4BAAI,MAAM,SAAS,QAAW;AAC1B,gCAAM,UAAU;AAChB,8BAAI,OAAO,MAAM,SAAS,UAAU;AAChC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,4BAA4B,YAAY,yDAAyD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7N,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,gBAAgB,QAAW;AACjC,kCAAM,UAAU;AAChB,gCAAI,OAAO,MAAM,gBAAgB,UAAU;AACvC,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,mCAAmC,YAAY,gEAAgE,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3O,qCAAO;AAAA,4BACX;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,uBAAuB,YAAY,yCAAyC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACxM,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AACpD,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAyD;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACpN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAO,KAAK,cAAc,WAAe,WAAW,gBAAmB,KAAK,UAAU,WAAe,WAAW,YAAgB,KAAK,WAAW,WAAe,WAAW,WAAY;AAClL,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAI,SAAS,eAAiB,SAAS,WAAc,SAAS,WAAY;AAC1E,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,cAAc,QAAW;AAC9B,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,cAAc,UAAU;AACpC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,+BAA+B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACrL,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,UAAU,QAAW;AAC1B,oBAAM,SAAS;AACf,kBAAI,CAAE,WAAW,KAAK,OAAO,EAAE,cAAc,eAAe,UAAU,YAAY,MAAM,oBAAoB,SAAS,SAAS,CAAC,GAAI;AAC/H,0BAAU,YAAY,OAAO,WAAW,SAAS,QAAQ,OAAO,WAAW,MAAM;AACjF,yBAAS,QAAQ;AAAA,cACrB;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,WAAW,QAAW;AAC3B,sBAAM,SAAS;AACf,oBAAI,CAAE,WAAW,KAAK,QAAQ,EAAE,cAAc,eAAe,WAAW,YAAY,MAAM,oBAAoB,UAAU,SAAS,CAAC,GAAI;AAClI,4BAAU,YAAY,OAAO,WAAW,SAAS,QAAQ,OAAO,WAAW,MAAM;AACjF,2BAAS,QAAQ;AAAA,gBACrB;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,WAAW;AACxB,IAAM,WAAW,EAAE,WAAW,2CAA2C,OAAO,0CAA0C,QAAQ,UAAU,wBAAwB,OAAO,cAAc,EAAE,YAAY,EAAE,QAAQ,UAAU,cAAc,EAAE,QAAQ,EAAE,QAAQ,qCAAqC,eAAe,gBAAgB,GAAG,QAAQ,EAAE,QAAQ,UAAU,QAAQ,CAAC,YAAY,SAAS,GAAG,eAAe,oCAAoC,GAAG,MAAM,EAAE,QAAQ,UAAU,eAAe,kBAAkB,GAAG,aAAa,EAAE,QAAQ,UAAU,eAAe,yDAAyD,GAAG,aAAa,EAAE,QAAQ,UAAU,eAAe,2DAA2D,GAAG,YAAY,EAAE,QAAQ,UAAU,eAAe,8CAA8C,EAAE,GAAG,YAAY,CAAC,QAAQ,QAAQ,MAAM,aAAa,UAAU,GAAG,eAAe,gHAAgH,GAAG,QAAQ,EAAE,eAAe,+BAA+B,QAAQ,SAAS,GAAG,aAAa,EAAE,QAAQ,UAAU,eAAe,uEAAuE,EAAE,GAAG,YAAY,CAAC,YAAY,QAAQ,WAAW,GAAG,eAAe,gBAAgB;AACtwC,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA4D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AACvN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAO,KAAK,aAAa,WAAe,WAAW,eAAkB,KAAK,SAAS,WAAe,WAAW,WAAe,KAAK,cAAc,WAAe,WAAW,cAAe;AACpL,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAI,SAAS,cAAgB,SAAS,UAAa,SAAS,cAAe;AAC3E,uBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,0BAA0B,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAClM,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,aAAa,QAAW;AAC7B,gBAAI,QAAQ,KAAK;AACjB,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,oBAAI;AACJ,oBAAS,MAAM,SAAS,WAAe,WAAW,WAAc,MAAM,SAAS,WAAe,WAAW,WAAe,MAAM,OAAO,WAAe,WAAW,SAAa,MAAM,cAAc,WAAe,WAAW,gBAAoB,MAAM,aAAa,WAAe,WAAW,aAAc;AACrS,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,kCAAkC,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtO,yBAAO;AAAA,gBACX,OACK;AACD,sBAAI,MAAM,SAAS,QAAW;AAC1B,wBAAI,QAAQ,MAAM;AAClB,0BAAM,SAAS;AACf,0BAAM,SAAS;AACf,wBAAI,WAAW,QAAQ;AACnB,0BAAI,OAAO,UAAU,UAAU;AAC3B,4BAAI,CAAC,UAAU,KAAK,KAAK,GAAG;AACxB,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,6CAA6C,SAAS,WAAW,QAAQ,EAAE,SAAS,iLAAiL,GAAG,SAAS,sMAAkN,CAAC;AACtjB,iCAAO;AAAA,wBACX;AAAA,sBACJ,OACK;AACD,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,0CAA0C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpM,+BAAO;AAAA,sBACX;AAAA,oBACJ;AACA,wBAAI,SAAS,WAAW;AAAA,kBAC5B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,MAAM,SAAS,QAAW;AAC1B,0BAAI,QAAQ,MAAM;AAClB,4BAAM,SAAS;AACf,0BAAI,OAAO,UAAU,UAAU;AAC3B,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,8CAA8C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACxM,+BAAO;AAAA,sBACX;AACA,0BAAI,EAAG,UAAU,cAAgB,UAAU,YAAa;AACpD,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,kBAAkB,YAAY,8CAA8C,SAAS,QAAQ,QAAQ,EAAE,eAAe,SAAS,WAAW,SAAS,WAAW,KAAK,KAAK,GAAG,SAAS,6CAA6C,CAAC;AACtR,+BAAO;AAAA,sBACX;AACA,0BAAI,SAAS,WAAW;AAAA,oBAC5B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,MAAM,OAAO,QAAW;AACxB,8BAAM,SAAS;AACf,4BAAI,OAAO,MAAM,OAAO,UAAU;AAC9B,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,4CAA4C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpM,iCAAO;AAAA,wBACX;AACA,4BAAI,SAAS,WAAW;AAAA,sBAC5B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,MAAM,cAAc,QAAW;AAC/B,gCAAM,UAAU;AAChB,8BAAI,OAAO,MAAM,cAAc,UAAU;AACrC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,uBAAuB,YAAY,mDAAmD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClN,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,cAAc,QAAW;AAC/B,kCAAM,UAAU;AAChB,gCAAI,OAAO,MAAM,cAAc,UAAU;AACrC,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,uBAAuB,YAAY,mDAAmD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClN,qCAAO;AAAA,4BACX;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AACA,8BAAI,QAAQ;AACR,gCAAI,MAAM,aAAa,QAAW;AAC9B,oCAAM,UAAU;AAChB,kCAAI,OAAO,MAAM,aAAa,UAAU;AACpC,2CAAW,SAAS,CAAC,EAAE,cAAc,eAAe,sBAAsB,YAAY,kDAAkD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChN,uCAAO;AAAA,8BACX;AACA,kCAAI,SAAS,YAAY;AAAA,4BAC7B,OACK;AACD,kCAAI,SAAS;AAAA,4BACjB;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OACK;AACD,2BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,YAAY,8BAA8B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnL,uBAAO;AAAA,cACX;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,SAAS,QAAW;AACzB,kBAAI,QAAQ,KAAK;AACjB,oBAAM,UAAU;AAChB,kBAAI,EAAE,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI;AAC/D,2BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3K,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,cAAc,QAAW;AAC9B,sBAAM,UAAU;AAChB,oBAAI,OAAO,KAAK,cAAc,UAAU;AACpC,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,cAAc,YAAY,+BAA+B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACrL,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,aAAa;AAE1B,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAA+D;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAC1N,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAK,KAAK,SAAS,WAAe,WAAW,SAAS;AAClD,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,YAAI,KAAK,yBAAyB,QAAW;AACzC,cAAI,SAAS;AACb,qBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,yBAAyB,YAAY,kDAAkD,SAAS,gBAAgB,QAAQ,CAAC,GAAG,SAAS,0BAA0B,CAAC;AACpN,iBAAO;AAAA,QACX,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,SAAS,QAAW;AACzB,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,SAAS,YAAY,0BAA0B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3K,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,WAAW,QAAW;AAC3B,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,sBAAI,SAAS;AACb,wBAAM,OAAO,MAAM;AACnB,2BAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,0BAAM,SAAS;AACf,wBAAI,OAAO,MAAM,EAAE,MAAM,UAAU;AAC/B,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,aAAa,IAAI,YAAY,kCAAkC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC3L,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,WAAW;AACxB,wBAAI,CAAC,QAAQ;AACT;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,QAAQ,GAAG,SAAS,gBAAgB,CAAC;AAC7K,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,UAAU,QAAW;AAC1B,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,oBAAI,WAAW,QAAQ;AACnB,sBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,0BAAM,SAAS;AACf,+BAAW,QAAQ,OAAO;AACtB,0BAAI,EAAE,SAAS,mBAAmB;AAC9B,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2CAA2C,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAC5O,+BAAO;AACP;AAAA,sBACJ;AAAA,oBACJ;AACA,wBAAI,WAAW,QAAQ;AACnB,0BAAI,MAAM,mBAAmB,QAAW;AACpC,4BAAI,QAAQ,MAAM;AAClB,4BAAI,EAAE,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI;AAC/D,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,yBAAyB,YAAY,qDAAqD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACtN,iCAAO;AAAA,wBACX;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2BAA2B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7K,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,WAAW,QAAW;AAC3B,sBAAI,QAAQ,KAAK;AACjB,wBAAM,UAAU;AAChB,sBAAI,WAAW,SAAS;AACpB,wBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,4BAAM,UAAU;AAChB,iCAAW,QAAQ,OAAO;AACtB,4BAAI,EAAE,SAAS,mBAAmB;AAC9B,qCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4CAA4C,SAAS,wBAAwB,QAAQ,EAAE,oBAAoB,KAAK,GAAG,SAAS,sCAAsC,CAAC;AAC9O,iCAAO;AACP;AAAA,wBACJ;AAAA,sBACJ;AACA,0BAAI,YAAY,QAAQ;AACpB,4BAAI,MAAM,mBAAmB,QAAW;AACpC,8BAAI,QAAQ,MAAM;AAClB,8BAAI,EAAE,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI;AAC/D,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,0BAA0B,YAAY,sDAAsD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACxN,mCAAO;AAAA,0BACX;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC/K,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;AAC7C,IAAM,MAAM;AAEnB,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AAAuD;AAAE,MAAI,UAAU;AAAM,MAAI,SAAS;AAAG,MAAI,WAAW,GAAG;AAClN,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAO,KAAK,eAAe,WAAe,WAAW,iBAAoB,KAAK,UAAU,WAAe,WAAW,YAAgB,KAAK,WAAW,WAAe,WAAW,WAAY;AACpL,mBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,cAAc,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AACtL,eAAO;AAAA,MACX,OACK;AACD,YAAI,KAAK,yBAAyB,QAAW;AACzC,cAAI,SAAS;AACb,qBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,yBAAyB,YAAY,kDAAkD,SAAS,gBAAgB,QAAQ,CAAC,GAAG,SAAS,0BAA0B,CAAC;AACpN,iBAAO;AAAA,QACX,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,eAAe,QAAW;AAC/B,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,eAAe,UAAU;AACrC,yBAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvL,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,eAAe,QAAW;AAC/B,oBAAM,SAAS;AACf,kBAAI,OAAO,KAAK,eAAe,UAAU;AACrC,2BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,gCAAgC,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACvL,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,UAAU,QAAW;AAC1B,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,oBAAI,WAAW,QAAQ;AACnB,sBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,wBAAI;AACJ,wBAAM,MAAM,WAAW,WAAe,WAAW,aAAgB,MAAM,SAAS,WAAe,WAAW,SAAU;AAChH,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,+BAA+B,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AAChO,6BAAO;AAAA,oBACX,OACK;AACD,0BAAI,MAAM,WAAW,QAAW;AAC5B,4BAAI,QAAQ,MAAM;AAClB,8BAAM,SAAS;AACf,8BAAM,SAAS;AACf,4BAAI,WAAW,QAAQ;AACnB,8BAAI,OAAO,UAAU,UAAU;AAC3B,gCAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AACvB,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,iBAAiB,YAAY,uDAAuD,SAAS,WAAW,QAAQ,EAAE,SAAS,2BAA2B,GAAG,SAAS,gDAA4D,CAAC;AACnR,qCAAO;AAAA,4BACX;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,iBAAiB,YAAY,oDAAoD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7M,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,WAAW;AAAA,sBAC5B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,MAAM,SAAS,QAAW;AAC1B,gCAAM,UAAU;AAChB,8BAAI,OAAO,MAAM,SAAS,UAAU;AAChC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,eAAe,YAAY,2CAA2C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAClM,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,uBAAuB,QAAW;AACxC,kCAAM,UAAU;AAChB,gCAAI,OAAO,MAAM,uBAAuB,UAAU;AAC9C,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,6BAA6B,YAAY,yDAAyD,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC9N,qCAAO;AAAA,4BACX;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS,CAAC,EAAE,cAAc,eAAe,UAAU,YAAY,2BAA2B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC7K,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,WAAW,QAAW;AAC3B,sBAAI,QAAQ,KAAK;AACjB,wBAAM,UAAU;AAChB,sBAAI,WAAW,SAAS;AACpB,wBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,0BAAI;AACJ,0BAAK,MAAM,SAAS,WAAe,WAAW,SAAS;AACnD,mCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,gCAAgC,SAAS,YAAY,QAAQ,EAAE,iBAAiB,SAAS,GAAG,SAAS,kCAAkC,WAAW,IAAI,CAAC;AAClO,+BAAO;AAAA,sBACX,OACK;AACD,4BAAI,MAAM,SAAS,QAAW;AAC1B,gCAAM,UAAU;AAChB,8BAAI,OAAO,MAAM,SAAS,UAAU;AAChC,uCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,gBAAgB,YAAY,4CAA4C,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACpM,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,uBAAuB,QAAW;AACxC,kCAAM,UAAU;AAChB,gCAAI,OAAO,MAAM,uBAAuB,UAAU;AAC9C,yCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,8BAA8B,YAAY,0DAA0D,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAChO,qCAAO;AAAA,4BACX;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS,CAAC,EAAE,cAAc,eAAe,WAAW,YAAY,4BAA4B,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AAC/K,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS,CAAC,EAAE,cAAc,YAAY,UAAU,SAAS,QAAQ,QAAQ,EAAE,MAAM,SAAS,GAAG,SAAS,iBAAiB,CAAC;AACnI,aAAO;AAAA,IACX;AAAA,EACJ;AAAE,aAAW,SAAS;AAAS,SAAO,WAAW;AAAG;;;AD/sF7C,SAAS,SAAS,SAAS,YAAY;AAC1C,MAAI,aAAa,4BAAmB,UAAU;AAC9C,MAAI,CAAC,YAAY;AACb,UAAM,IAAI,MAAM,0BAA0B,UAAU,EAAE;AAAA,EAC1D;AACA,aAAW,OAAO;AAClB,MAAI,WAAW,QAAQ;AACnB,0BAAsB,WAAW,MAAM;AAAA,EAC3C;AACJ;AACA,SAAS,sBAAsB,QAAQ;AAInC,QAAM,CAAC,QAAQ,IAAI;AACnB,MAAI,EAAE,cAAc,SAAAC,UAAS,OAAO,IAAI;AACxC,kCAAiB;AAGjB,EAAAA,WAAU,OAAO,gBAAgB,GAAGA,QAAO,MAAM,OAAO,cAAc,KAAK,IAAI,CAAC,KAAKA;AACrF,QAAM,IAAI,MAAM,GAAG,YAAY,KAAKA,QAAO,EAAE;AACjD;;;AlDnBO,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAelB,YAAY,UAAU,MAAM,WAAW;AAbvC;AAAA;AAEA;AAAA;AAEA;AAAA;AAUI,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA,EAEA,OAAO,WAAW,cAAc;AAC5B,WAAO,OAAO,YAAY,EAAE,SAAS;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,KAAK,KAAK;AACZ,SAAK,aAAa,MAAM,OAAO,KAAK,EAAE,KAAK,SAAS,KAAK,OAAO,GAAG,UAAU,KAAK,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,SAAS;AACX,SAAK,SAAS;AACd,UAAM,SAAS,KAAK,gBAAgB;AACpC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,kBAAkB;AACpB,QAAI,KAAK,cAAc,QAAW;AAC9B,YAAM,IAAI,MAAM,oEAAoE;AAAA,IACxF;AACA,UAAM,SAAS,MAAM,OAAO,OAAO,EAAE,iBAAiB,KAAK,OAAO,GAAG,WAAW,KAAK,UAAU,CAAC;AAChG,QAAI,KAAK,SAAS,SAAS,QAAQ;AAC/B,YAAM,IAAI,MAAM,2FAA2F;AAAA,IAC/G;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS;AACL,WAAO,OAAO,OAAO,EAAE,UAAU,KAAK,UAAU,MAAM,KAAK,KAAK,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AACP,aAAS,KAAK,OAAO,GAAG,UAAU;AAClC,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACX,aAAS,KAAK,MAAM,KAAK,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACL,WAAO;AAAA,MACH,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,MACX,WAAW,KAAK;AAAA,IACpB;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,aAAa;AACT,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AACJ;;;AoD1IA,IAAAC,gBAAA;AAQO,IAAM,UAAN,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAejB,YAAY,UAAU,MAAM,WAAW;AAbvC;AAAA;AAEA;AAAA;AAEA;AAAA;AAUI,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA,EAEA,OAAO,WAAW,aAAa;AAC3B,WAAO,OAAO,WAAW,EAAE,SAAS;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,KAAK,KAAK;AACZ,SAAK,aAAa,MAAM,OAAO,KAAK,EAAE,KAAK,SAAS,KAAK,OAAO,GAAG,UAAU,KAAK,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SAAS;AACX,SAAK,SAAS;AACd,UAAM,SAAS,MAAM,KAAK,gBAAgB;AAC1C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,kBAAkB;AACpB,QAAI,KAAK,cAAc,QAAW;AAC9B,YAAM,IAAI,MAAM,oEAAoE;AAAA,IACxF;AACA,UAAM,SAAS,MAAM,OAAO,OAAO,EAAE,iBAAiB,KAAK,OAAO,GAAG,WAAW,KAAK,UAAU,CAAC;AAChG,QAAI,KAAK,SAAS,SAAS,QAAQ;AAC/B,YAAM,IAAI,MAAM,2FAA2F;AAAA,IAC/G;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS;AACL,WAAO,OAAO,OAAO,EAAE,UAAU,KAAK,UAAU,MAAM,KAAK,KAAK,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AACP,aAAS,KAAK,OAAO,GAAG,SAAS;AACjC,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACX,aAAS,KAAK,MAAM,KAAK,IAAI;AAAA,EACjC;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,QAAQ;AACJ,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA,EAEA,gBAAgB;AACZ,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACL,UAAMC,WAAU;AAAA,MACZ,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,MACX,WAAW,KAAK;AAAA,IACpB;AACA,WAAOA;AAAA,EACX;AACJ;;;AC9JA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;AAgDA,IACE,YAAY;AADd,IAEE,WAAW,KAAK;AAFlB,IAGE,YAAY,KAAK;AAHnB,IAKE,iBAAiB;AALnB,IAME,gBAAgB,iBAAiB;AANnC,IAQE,OAAO;AART,IASE,WAAW;AATb,IAUE,mBAAmB;AAVrB,IAYE,WAAW,CAAC,GAAG,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,IAAI;AAZnF,IAaE,YAAY;AAbd,IAkBE,MAAM;AAMR,SAAS,MAAM,cAAc;AAC3B,MAAI,KAAK,aAAa,cACpB,IAAIC,WAAU,YAAY,EAAE,aAAaA,YAAW,UAAU,MAAM,SAAS,KAAK,GAClF,MAAM,IAAIA,WAAU,CAAC,GAUrB,iBAAiB,IAajB,gBAAgB,GAMhB,aAAa,IAIb,aAAa,IAMb,UAAU,MAKV,UAAU,KAGV,SAAS,OAkBT,cAAc,GAId,gBAAgB,GAGhB,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,IAChB,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,IACnB,wBAAwB;AAAA;AAAA,IACxB,QAAQ;AAAA,EACV,GAKA,WAAW,wCACX,iCAAiC;AAgBnC,WAASA,WAAU,GAAG,GAAG;AACvB,QAAIC,WAAU,GAAG,aAAa,GAAG,GAAG,OAAO,KAAK,KAC9C,IAAI;AAGN,QAAI,EAAE,aAAaD;AAAY,aAAO,IAAIA,WAAU,GAAG,CAAC;AAExD,QAAI,KAAK,MAAM;AAEb,UAAI,KAAK,EAAE,iBAAiB,MAAM;AAChC,UAAE,IAAI,EAAE;AAER,YAAI,CAAC,EAAE,KAAK,EAAE,IAAI,SAAS;AACzB,YAAE,IAAI,EAAE,IAAI;AAAA,QACd,WAAW,EAAE,IAAI,SAAS;AACxB,YAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,QAChB,OAAO;AACL,YAAE,IAAI,EAAE;AACR,YAAE,IAAI,EAAE,EAAE,MAAM;AAAA,QAClB;AAEA;AAAA,MACF;AAEA,WAAK,QAAQ,OAAO,KAAK,aAAa,IAAI,KAAK,GAAG;AAGhD,UAAE,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,GAAG,MAAM;AAGjC,YAAI,MAAM,CAAC,CAAC,GAAG;AACb,eAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAEzC,cAAI,IAAI,SAAS;AACf,cAAE,IAAI,EAAE,IAAI;AAAA,UACd,OAAO;AACL,cAAE,IAAI;AACN,cAAE,IAAI,CAAC,CAAC;AAAA,UACV;AAEA;AAAA,QACF;AAEA,cAAM,OAAO,CAAC;AAAA,MAChB,OAAO;AAEL,YAAI,CAAC,UAAU,KAAK,MAAM,OAAO,CAAC,CAAC;AAAG,iBAAO,aAAa,GAAG,KAAK,KAAK;AAEvE,UAAE,IAAI,IAAI,WAAW,CAAC,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,GAAG,MAAM;AAAA,MAC7D;AAGA,WAAK,IAAI,IAAI,QAAQ,GAAG,KAAK;AAAI,cAAM,IAAI,QAAQ,KAAK,EAAE;AAG1D,WAAK,IAAI,IAAI,OAAO,IAAI,KAAK,GAAG;AAG9B,YAAI,IAAI;AAAG,cAAI;AACf,aAAK,CAAC,IAAI,MAAM,IAAI,CAAC;AACrB,cAAM,IAAI,UAAU,GAAG,CAAC;AAAA,MAC1B,WAAW,IAAI,GAAG;AAGhB,YAAI,IAAI;AAAA,MACV;AAAA,IAEF,OAAO;AAGL,eAAS,GAAG,GAAG,SAAS,QAAQ,MAAM;AAItC,UAAI,KAAK,MAAM,gCAAgC;AAC7C,YAAI,IAAIA,WAAU,CAAC;AACnB,eAAO,MAAM,GAAG,iBAAiB,EAAE,IAAI,GAAG,aAAa;AAAA,MACzD;AAEA,YAAM,OAAO,CAAC;AAEd,UAAI,QAAQ,OAAO,KAAK,UAAU;AAGhC,YAAI,IAAI,KAAK;AAAG,iBAAO,aAAa,GAAG,KAAK,OAAO,CAAC;AAEpD,UAAE,IAAI,IAAI,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,GAAG,MAAM;AAG7C,YAAIA,WAAU,SAAS,IAAI,QAAQ,aAAa,EAAE,EAAE,SAAS,IAAI;AAC/D,gBAAM,MACJ,gBAAgB,CAAC;AAAA,QACrB;AAAA,MACF,OAAO;AACL,UAAE,IAAI,IAAI,WAAW,CAAC,MAAM,MAAM,MAAM,IAAI,MAAM,CAAC,GAAG,MAAM;AAAA,MAC9D;AAEA,MAAAC,YAAW,SAAS,MAAM,GAAG,CAAC;AAC9B,UAAI,IAAI;AAIR,WAAK,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AACnC,YAAIA,UAAS,QAAQ,IAAI,IAAI,OAAO,CAAC,CAAC,IAAI,GAAG;AAC3C,cAAI,KAAK,KAAK;AAGZ,gBAAI,IAAI,GAAG;AACT,kBAAI;AACJ;AAAA,YACF;AAAA,UACF,WAAW,CAAC,aAAa;AAGvB,gBAAI,OAAO,IAAI,YAAY,MAAM,MAAM,IAAI,YAAY,MACnD,OAAO,IAAI,YAAY,MAAM,MAAM,IAAI,YAAY,IAAI;AACzD,4BAAc;AACd,kBAAI;AACJ,kBAAI;AACJ;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,aAAa,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC;AAAA,QAC5C;AAAA,MACF;AAGA,cAAQ;AACR,YAAM,YAAY,KAAK,GAAG,IAAI,EAAE,CAAC;AAGjC,WAAK,IAAI,IAAI,QAAQ,GAAG,KAAK;AAAI,cAAM,IAAI,QAAQ,KAAK,EAAE;AAAA;AACrD,YAAI,IAAI;AAAA,IACf;AAGA,SAAK,IAAI,GAAG,IAAI,WAAW,CAAC,MAAM,IAAI;AAAI;AAG1C,SAAK,MAAM,IAAI,QAAQ,IAAI,WAAW,EAAE,GAAG,MAAM;AAAI;AAErD,QAAI,MAAM,IAAI,MAAM,GAAG,EAAE,GAAG,GAAG;AAC7B,aAAO;AAGP,UAAI,SAASD,WAAU,SACrB,MAAM,OAAO,IAAI,oBAAoB,MAAM,UAAU,CAAC,IAAI;AACxD,cAAM,MACJ,gBAAiB,EAAE,IAAI,CAAE;AAAA,MAC/B;AAGA,WAAK,IAAI,IAAI,IAAI,KAAK,SAAS;AAG7B,UAAE,IAAI,EAAE,IAAI;AAAA,MAGd,WAAW,IAAI,SAAS;AAGtB,UAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,MAChB,OAAO;AACL,UAAE,IAAI;AACN,UAAE,IAAI,CAAC;AAMP,aAAK,IAAI,KAAK;AACd,YAAI,IAAI;AAAG,eAAK;AAEhB,YAAI,IAAI,KAAK;AACX,cAAI;AAAG,cAAE,EAAE,KAAK,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;AAEhC,eAAK,OAAO,UAAU,IAAI,OAAM;AAC9B,cAAE,EAAE,KAAK,CAAC,IAAI,MAAM,GAAG,KAAK,QAAQ,CAAC;AAAA,UACvC;AAEA,cAAI,YAAY,MAAM,IAAI,MAAM,CAAC,GAAG;AAAA,QACtC,OAAO;AACL,eAAK;AAAA,QACP;AAEA,eAAO,KAAK,OAAO;AAAI;AACvB,UAAE,EAAE,KAAK,CAAC,GAAG;AAAA,MACf;AAAA,IACF,OAAO;AAGL,QAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,IAChB;AAAA,EACF;AAMA,EAAAA,WAAU,QAAQ;AAElB,EAAAA,WAAU,WAAW;AACrB,EAAAA,WAAU,aAAa;AACvB,EAAAA,WAAU,aAAa;AACvB,EAAAA,WAAU,cAAc;AACxB,EAAAA,WAAU,gBAAgB;AAC1B,EAAAA,WAAU,kBAAkB;AAC5B,EAAAA,WAAU,kBAAkB;AAC5B,EAAAA,WAAU,kBAAkB;AAC5B,EAAAA,WAAU,mBAAmB;AAC7B,EAAAA,WAAU,SAAS;AAqCnB,EAAAA,WAAU,SAASA,WAAU,MAAM,SAAU,KAAK;AAChD,QAAI,GAAG;AAEP,QAAI,OAAO,MAAM;AAEf,UAAI,OAAO,OAAO,UAAU;AAI1B,YAAI,IAAI,eAAe,IAAI,gBAAgB,GAAG;AAC5C,cAAI,IAAI,CAAC;AACT,mBAAS,GAAG,GAAG,KAAK,CAAC;AACrB,2BAAiB;AAAA,QACnB;AAIA,YAAI,IAAI,eAAe,IAAI,eAAe,GAAG;AAC3C,cAAI,IAAI,CAAC;AACT,mBAAS,GAAG,GAAG,GAAG,CAAC;AACnB,0BAAgB;AAAA,QAClB;AAMA,YAAI,IAAI,eAAe,IAAI,gBAAgB,GAAG;AAC5C,cAAI,IAAI,CAAC;AACT,cAAI,KAAK,EAAE,KAAK;AACd,qBAAS,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC;AACzB,qBAAS,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC;AACxB,yBAAa,EAAE,CAAC;AAChB,yBAAa,EAAE,CAAC;AAAA,UAClB,OAAO;AACL,qBAAS,GAAG,CAAC,KAAK,KAAK,CAAC;AACxB,yBAAa,EAAE,aAAa,IAAI,IAAI,CAAC,IAAI;AAAA,UAC3C;AAAA,QACF;AAKA,YAAI,IAAI,eAAe,IAAI,OAAO,GAAG;AACnC,cAAI,IAAI,CAAC;AACT,cAAI,KAAK,EAAE,KAAK;AACd,qBAAS,EAAE,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;AAC1B,qBAAS,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC;AACxB,sBAAU,EAAE,CAAC;AACb,sBAAU,EAAE,CAAC;AAAA,UACf,OAAO;AACL,qBAAS,GAAG,CAAC,KAAK,KAAK,CAAC;AACxB,gBAAI,GAAG;AACL,wBAAU,EAAE,UAAU,IAAI,IAAI,CAAC,IAAI;AAAA,YACrC,OAAO;AACL,oBAAM,MACJ,iBAAiB,IAAI,sBAAsB,CAAC;AAAA,YAChD;AAAA,UACF;AAAA,QACF;AAKA,YAAI,IAAI,eAAe,IAAI,QAAQ,GAAG;AACpC,cAAI,IAAI,CAAC;AACT,cAAI,MAAM,CAAC,CAAC,GAAG;AACb,gBAAI,GAAG;AACL,kBAAI,OAAO,UAAU,eAAe,WAClC,OAAO,mBAAmB,OAAO,cAAc;AAC/C,yBAAS;AAAA,cACX,OAAO;AACL,yBAAS,CAAC;AACV,sBAAM,MACJ,iBAAiB,oBAAoB;AAAA,cACzC;AAAA,YACF,OAAO;AACL,uBAAS;AAAA,YACX;AAAA,UACF,OAAO;AACL,kBAAM,MACJ,iBAAiB,IAAI,yBAAyB,CAAC;AAAA,UACnD;AAAA,QACF;AAIA,YAAI,IAAI,eAAe,IAAI,aAAa,GAAG;AACzC,cAAI,IAAI,CAAC;AACT,mBAAS,GAAG,GAAG,GAAG,CAAC;AACnB,wBAAc;AAAA,QAChB;AAIA,YAAI,IAAI,eAAe,IAAI,eAAe,GAAG;AAC3C,cAAI,IAAI,CAAC;AACT,mBAAS,GAAG,GAAG,KAAK,CAAC;AACrB,0BAAgB;AAAA,QAClB;AAIA,YAAI,IAAI,eAAe,IAAI,QAAQ,GAAG;AACpC,cAAI,IAAI,CAAC;AACT,cAAI,OAAO,KAAK;AAAU,qBAAS;AAAA;AAC9B,kBAAM,MACT,iBAAiB,IAAI,qBAAqB,CAAC;AAAA,QAC/C;AAIA,YAAI,IAAI,eAAe,IAAI,UAAU,GAAG;AACtC,cAAI,IAAI,CAAC;AAIT,cAAI,OAAO,KAAK,YAAY,CAAC,wBAAwB,KAAK,CAAC,GAAG;AAC5D,6CAAiC,EAAE,MAAM,GAAG,EAAE,KAAK;AACnD,uBAAW;AAAA,UACb,OAAO;AACL,kBAAM,MACJ,iBAAiB,IAAI,eAAe,CAAC;AAAA,UACzC;AAAA,QACF;AAAA,MAEF,OAAO;AAGL,cAAM,MACJ,iBAAiB,sBAAsB,GAAG;AAAA,MAC9C;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,gBAAgB,CAAC,YAAY,UAAU;AAAA,MACvC,OAAO,CAAC,SAAS,OAAO;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAYA,EAAAA,WAAU,cAAc,SAAU,GAAG;AACnC,QAAI,CAAC,KAAK,EAAE,iBAAiB;AAAM,aAAO;AAC1C,QAAI,CAACA,WAAU;AAAO,aAAO;AAE7B,QAAI,GAAG,GACL,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE;AAER;AAAK,UAAI,CAAC,EAAE,SAAS,KAAK,CAAC,KAAK,kBAAkB;AAEhD,aAAK,MAAM,KAAK,MAAM,OAAO,KAAK,CAAC,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC,GAAG;AAGxE,cAAI,EAAE,CAAC,MAAM,GAAG;AACd,gBAAI,MAAM,KAAK,EAAE,WAAW;AAAG,qBAAO;AACtC,kBAAM;AAAA,UACR;AAGA,eAAK,IAAI,KAAK;AACd,cAAI,IAAI;AAAG,iBAAK;AAIhB,cAAI,OAAO,EAAE,CAAC,CAAC,EAAE,UAAU,GAAG;AAE5B,iBAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC7B,kBAAI,EAAE,CAAC;AACP,kBAAI,IAAI,KAAK,KAAK,QAAQ,MAAM,UAAU,CAAC;AAAG,sBAAM;AAAA,YACtD;AAGA,gBAAI,MAAM;AAAG,qBAAO;AAAA,UACtB;AAAA,QACF;AAAA,MAGF,WAAW,MAAM,QAAQ,MAAM,SAAS,MAAM,QAAQ,MAAM,KAAK,MAAM,KAAK;AAC1E,eAAO;AAAA,MACT;AAEA,UAAM,MACH,iBAAiB,wBAAwB,CAAC;AAAA,EAC/C;AAQA,EAAAA,WAAU,UAAUA,WAAU,MAAM,WAAY;AAC9C,WAAO,SAAS,WAAW,EAAE;AAAA,EAC/B;AAQA,EAAAA,WAAU,UAAUA,WAAU,MAAM,WAAY;AAC9C,WAAO,SAAS,WAAW,CAAC;AAAA,EAC9B;AAaA,EAAAA,WAAU,SAAU,WAAY;AAC9B,QAAI,UAAU;AAMd,QAAI,iBAAkB,KAAK,OAAO,IAAI,UAAW,UAC9C,WAAY;AAAE,aAAO,UAAU,KAAK,OAAO,IAAI,OAAO;AAAA,IAAG,IACzD,WAAY;AAAE,cAAS,KAAK,OAAO,IAAI,aAAa,KAAK,WACxD,KAAK,OAAO,IAAI,UAAW;AAAA,IAAI;AAEnC,WAAO,SAAU,IAAI;AACnB,UAAI,GAAG,GAAG,GAAG,GAAG,GACd,IAAI,GACJ,IAAI,CAAC,GACL,OAAO,IAAIA,WAAU,GAAG;AAE1B,UAAI,MAAM;AAAM,aAAK;AAAA;AAChB,iBAAS,IAAI,GAAG,GAAG;AAExB,UAAI,SAAS,KAAK,QAAQ;AAE1B,UAAI,QAAQ;AAGV,YAAI,OAAO,iBAAiB;AAE1B,cAAI,OAAO,gBAAgB,IAAI,YAAY,KAAK,CAAC,CAAC;AAElD,iBAAO,IAAI,KAAI;AAQb,gBAAI,EAAE,CAAC,IAAI,UAAW,EAAE,IAAI,CAAC,MAAM;AAMnC,gBAAI,KAAK,MAAM;AACb,kBAAI,OAAO,gBAAgB,IAAI,YAAY,CAAC,CAAC;AAC7C,gBAAE,CAAC,IAAI,EAAE,CAAC;AACV,gBAAE,IAAI,CAAC,IAAI,EAAE,CAAC;AAAA,YAChB,OAAO;AAIL,gBAAE,KAAK,IAAI,IAAI;AACf,mBAAK;AAAA,YACP;AAAA,UACF;AACA,cAAI,IAAI;AAAA,QAGV,WAAW,OAAO,aAAa;AAG7B,cAAI,OAAO,YAAY,KAAK,CAAC;AAE7B,iBAAO,IAAI,KAAI;AAMb,iBAAM,EAAE,CAAC,IAAI,MAAM,kBAAoB,EAAE,IAAI,CAAC,IAAI,gBAC9C,EAAE,IAAI,CAAC,IAAI,aAAgB,EAAE,IAAI,CAAC,IAAI,YACtC,EAAE,IAAI,CAAC,KAAK,OAAO,EAAE,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC;AAE/C,gBAAI,KAAK,MAAM;AACb,qBAAO,YAAY,CAAC,EAAE,KAAK,GAAG,CAAC;AAAA,YACjC,OAAO;AAGL,gBAAE,KAAK,IAAI,IAAI;AACf,mBAAK;AAAA,YACP;AAAA,UACF;AACA,cAAI,IAAI;AAAA,QACV,OAAO;AACL,mBAAS;AACT,gBAAM,MACJ,iBAAiB,oBAAoB;AAAA,QACzC;AAAA,MACF;AAGA,UAAI,CAAC,QAAQ;AAEX,eAAO,IAAI,KAAI;AACb,cAAI,eAAe;AACnB,cAAI,IAAI;AAAM,cAAE,GAAG,IAAI,IAAI;AAAA,QAC7B;AAAA,MACF;AAEA,UAAI,EAAE,EAAE,CAAC;AACT,YAAM;AAGN,UAAI,KAAK,IAAI;AACX,YAAI,SAAS,WAAW,EAAE;AAC1B,UAAE,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI;AAAA,MAC5B;AAGA,aAAO,EAAE,CAAC,MAAM,GAAG,EAAE,IAAI,GAAG;AAAI;AAGhC,UAAI,IAAI,GAAG;AACT,YAAI,CAAC,IAAI,CAAC;AAAA,MACZ,OAAO;AAGL,aAAK,IAAI,IAAK,EAAE,CAAC,MAAM,GAAG,EAAE,OAAO,GAAG,CAAC,GAAG,KAAK;AAAS;AAGxD,aAAK,IAAI,GAAG,IAAI,EAAE,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAG5C,YAAI,IAAI;AAAU,eAAK,WAAW;AAAA,MACpC;AAEA,WAAK,IAAI;AACT,WAAK,IAAI;AACT,aAAO;AAAA,IACT;AAAA,EACF,EAAG;AAQH,EAAAA,WAAU,MAAM,WAAY;AAC1B,QAAI,IAAI,GACN,OAAO,WACP,MAAM,IAAIA,WAAU,KAAK,CAAC,CAAC;AAC7B,WAAO,IAAI,KAAK;AAAS,YAAM,IAAI,KAAK,KAAK,GAAG,CAAC;AACjD,WAAO;AAAA,EACT;AAOA,gBAAe,WAAY;AACzB,QAAI,UAAU;AAOd,aAAS,UAAU,KAAK,QAAQ,SAASC,WAAU;AACjD,UAAI,GACF,MAAM,CAAC,CAAC,GACR,MACA,IAAI,GACJ,MAAM,IAAI;AAEZ,aAAO,IAAI,OAAM;AACf,aAAK,OAAO,IAAI,QAAQ,QAAQ,IAAI,IAAI,KAAK;AAAO;AAEpD,YAAI,CAAC,KAAKA,UAAS,QAAQ,IAAI,OAAO,GAAG,CAAC;AAE1C,aAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AAE/B,cAAI,IAAI,CAAC,IAAI,UAAU,GAAG;AACxB,gBAAI,IAAI,IAAI,CAAC,KAAK;AAAM,kBAAI,IAAI,CAAC,IAAI;AACrC,gBAAI,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,UAAU;AACjC,gBAAI,CAAC,KAAK;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI,QAAQ;AAAA,IACrB;AAKA,WAAO,SAAU,KAAK,QAAQ,SAAS,MAAM,kBAAkB;AAC7D,UAAIA,WAAU,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAC/B,IAAI,IAAI,QAAQ,GAAG,GACnB,KAAK,gBACL,KAAK;AAGP,UAAI,KAAK,GAAG;AACV,YAAI;AAGJ,wBAAgB;AAChB,cAAM,IAAI,QAAQ,KAAK,EAAE;AACzB,YAAI,IAAID,WAAU,MAAM;AACxB,YAAI,EAAE,IAAI,IAAI,SAAS,CAAC;AACxB,wBAAgB;AAKhB,UAAE,IAAI;AAAA,UAAU,aAAa,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG;AAAA,UACxD;AAAA,UAAI;AAAA,UAAS;AAAA,QAAO;AACrB,UAAE,IAAI,EAAE,EAAE;AAAA,MACZ;AAIA,WAAK,UAAU,KAAK,QAAQ,SAAS,oBACjCC,YAAW,UAAU,YACrBA,YAAW,SAAS,SAAS;AAGjC,UAAI,IAAI,GAAG;AAGX,aAAO,GAAG,EAAE,CAAC,KAAK,GAAG,GAAG,IAAI;AAAE;AAG9B,UAAI,CAAC,GAAG,CAAC;AAAG,eAAOA,UAAS,OAAO,CAAC;AAGpC,UAAI,IAAI,GAAG;AACT,UAAE;AAAA,MACJ,OAAO;AACL,UAAE,IAAI;AACN,UAAE,IAAI;AAGN,UAAE,IAAI;AACN,YAAI,IAAI,GAAG,GAAG,IAAI,IAAI,OAAO;AAC7B,aAAK,EAAE;AACP,YAAI,EAAE;AACN,YAAI,EAAE;AAAA,MACR;AAKA,UAAI,IAAI,KAAK;AAGb,UAAI,GAAG,CAAC;AAIR,UAAI,UAAU;AACd,UAAI,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK;AAE/B,UAAI,KAAK,KAAK,KAAK,QAAQ,OAAO,MAAM,KAAK,OAAO,EAAE,IAAI,IAAI,IAAI,MAC1D,IAAI,KAAK,KAAK,MAAK,MAAM,KAAK,KAAK,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,KAC3D,OAAO,EAAE,IAAI,IAAI,IAAI;AAK5B,UAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG;AAGnB,cAAM,IAAI,aAAaA,UAAS,OAAO,CAAC,GAAG,CAAC,IAAIA,UAAS,OAAO,CAAC,CAAC,IAAIA,UAAS,OAAO,CAAC;AAAA,MACzF,OAAO;AAGL,WAAG,SAAS;AAGZ,YAAI,GAAG;AAGL,eAAK,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,WAAU;AACpC,eAAG,CAAC,IAAI;AAER,gBAAI,CAAC,GAAG;AACN,gBAAE;AACF,mBAAK,CAAC,CAAC,EAAE,OAAO,EAAE;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAGA,aAAK,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;AAAG;AAG9B,aAAK,IAAI,GAAG,MAAM,IAAI,KAAK,GAAG,OAAOA,UAAS,OAAO,GAAG,GAAG,CAAC;AAAE;AAG9D,cAAM,aAAa,KAAK,GAAGA,UAAS,OAAO,CAAC,CAAC;AAAA,MAC/C;AAGA,aAAO;AAAA,IACT;AAAA,EACF,EAAG;AAIH,QAAO,WAAY;AAGjB,aAAS,SAAS,GAAG,GAAG,MAAM;AAC5B,UAAI,GAAG,MAAM,KAAK,KAChB,QAAQ,GACR,IAAI,EAAE,QACN,MAAM,IAAI,WACV,MAAM,IAAI,YAAY;AAExB,WAAK,IAAI,EAAE,MAAM,GAAG,OAAM;AACxB,cAAM,EAAE,CAAC,IAAI;AACb,cAAM,EAAE,CAAC,IAAI,YAAY;AACzB,YAAI,MAAM,MAAM,MAAM;AACtB,eAAO,MAAM,MAAQ,IAAI,YAAa,YAAa;AACnD,iBAAS,OAAO,OAAO,MAAM,IAAI,YAAY,KAAK,MAAM;AACxD,UAAE,CAAC,IAAI,OAAO;AAAA,MAChB;AAEA,UAAI;AAAO,YAAI,CAAC,KAAK,EAAE,OAAO,CAAC;AAE/B,aAAO;AAAA,IACT;AAEA,aAASC,SAAQ,GAAG,GAAG,IAAI,IAAI;AAC7B,UAAI,GAAG;AAEP,UAAI,MAAM,IAAI;AACZ,cAAM,KAAK,KAAK,IAAI;AAAA,MACtB,OAAO;AAEL,aAAK,IAAI,MAAM,GAAG,IAAI,IAAI,KAAK;AAE7B,cAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG;AAChB,kBAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI;AACxB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,SAAS,GAAG,GAAG,IAAI,MAAM;AAChC,UAAI,IAAI;AAGR,aAAO,QAAO;AACZ,UAAE,EAAE,KAAK;AACT,YAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI;AACxB,UAAE,EAAE,IAAI,IAAI,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,MACjC;AAGA,aAAO,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,GAAG,EAAE,OAAO,GAAG,CAAC;AAAE;AAAA,IAC/C;AAGA,WAAO,SAAU,GAAG,GAAG,IAAI,IAAI,MAAM;AACnC,UAAI,KAAK,GAAG,GAAG,MAAM,GAAG,MAAM,OAAO,GAAG,IAAI,KAAK,MAAM,MAAM,IAAI,IAAI,KACnE,IAAI,IACJ,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,IACrB,KAAK,EAAE,GACP,KAAK,EAAE;AAGT,UAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG;AAElC,eAAO,IAAIF;AAAA;AAAA,UAGV,CAAC,EAAE,KAAK,CAAC,EAAE,MAAM,KAAK,MAAM,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM;AAAA;AAAA,YAGnD,MAAM,GAAG,CAAC,KAAK,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI;AAAA;AAAA,QACzC;AAAA,MACD;AAEA,UAAI,IAAIA,WAAU,CAAC;AACnB,WAAK,EAAE,IAAI,CAAC;AACZ,UAAI,EAAE,IAAI,EAAE;AACZ,UAAI,KAAK,IAAI;AAEb,UAAI,CAAC,MAAM;AACT,eAAO;AACP,YAAI,SAAS,EAAE,IAAI,QAAQ,IAAI,SAAS,EAAE,IAAI,QAAQ;AACtD,YAAI,IAAI,WAAW;AAAA,MACrB;AAIA,WAAK,IAAI,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,IAAI;AAAI;AAEvC,UAAI,GAAG,CAAC,KAAK,GAAG,CAAC,KAAK;AAAI;AAE1B,UAAI,IAAI,GAAG;AACT,WAAG,KAAK,CAAC;AACT,eAAO;AAAA,MACT,OAAO;AACL,aAAK,GAAG;AACR,aAAK,GAAG;AACR,YAAI;AACJ,aAAK;AAIL,YAAI,UAAU,QAAQ,GAAG,CAAC,IAAI,EAAE;AAIhC,YAAI,IAAI,GAAG;AACT,eAAK,SAAS,IAAI,GAAG,IAAI;AACzB,eAAK,SAAS,IAAI,GAAG,IAAI;AACzB,eAAK,GAAG;AACR,eAAK,GAAG;AAAA,QACV;AAEA,aAAK;AACL,cAAM,GAAG,MAAM,GAAG,EAAE;AACpB,eAAO,IAAI;AAGX,eAAO,OAAO,IAAI,IAAI,MAAM,IAAI;AAAE;AAClC,aAAK,GAAG,MAAM;AACd,aAAK,CAAC,CAAC,EAAE,OAAO,EAAE;AAClB,cAAM,GAAG,CAAC;AACV,YAAI,GAAG,CAAC,KAAK,OAAO;AAAG;AAIvB,WAAG;AACD,cAAI;AAGJ,gBAAME,SAAQ,IAAI,KAAK,IAAI,IAAI;AAG/B,cAAI,MAAM,GAAG;AAIX,mBAAO,IAAI,CAAC;AACZ,gBAAI,MAAM;AAAM,qBAAO,OAAO,QAAQ,IAAI,CAAC,KAAK;AAGhD,gBAAI,UAAU,OAAO,GAAG;AAaxB,gBAAI,IAAI,GAAG;AAGT,kBAAI,KAAK;AAAM,oBAAI,OAAO;AAG1B,qBAAO,SAAS,IAAI,GAAG,IAAI;AAC3B,sBAAQ,KAAK;AACb,qBAAO,IAAI;AAMX,qBAAOA,SAAQ,MAAM,KAAK,OAAO,IAAI,KAAK,GAAG;AAC3C;AAGA,yBAAS,MAAM,KAAK,QAAQ,KAAK,IAAI,OAAO,IAAI;AAChD,wBAAQ,KAAK;AACb,sBAAM;AAAA,cACR;AAAA,YACF,OAAO;AAML,kBAAI,KAAK,GAAG;AAGV,sBAAM,IAAI;AAAA,cACZ;AAGA,qBAAO,GAAG,MAAM;AAChB,sBAAQ,KAAK;AAAA,YACf;AAEA,gBAAI,QAAQ;AAAM,qBAAO,CAAC,CAAC,EAAE,OAAO,IAAI;AAGxC,qBAAS,KAAK,MAAM,MAAM,IAAI;AAC9B,mBAAO,IAAI;AAGX,gBAAI,OAAO,IAAI;AAMb,qBAAOA,SAAQ,IAAI,KAAK,IAAI,IAAI,IAAI,GAAG;AACrC;AAGA,yBAAS,KAAK,KAAK,OAAO,KAAK,IAAI,MAAM,IAAI;AAC7C,uBAAO,IAAI;AAAA,cACb;AAAA,YACF;AAAA,UACF,WAAW,QAAQ,GAAG;AACpB;AACA,kBAAM,CAAC,CAAC;AAAA,UACV;AAGA,aAAG,GAAG,IAAI;AAGV,cAAI,IAAI,CAAC,GAAG;AACV,gBAAI,MAAM,IAAI,GAAG,EAAE,KAAK;AAAA,UAC1B,OAAO;AACL,kBAAM,CAAC,GAAG,EAAE,CAAC;AACb,mBAAO;AAAA,UACT;AAAA,QACF,UAAU,OAAO,MAAM,IAAI,CAAC,KAAK,SAAS;AAE1C,eAAO,IAAI,CAAC,KAAK;AAGjB,YAAI,CAAC,GAAG,CAAC;AAAG,aAAG,OAAO,GAAG,CAAC;AAAA,MAC5B;AAEA,UAAI,QAAQ,MAAM;AAGhB,aAAK,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAE7C,cAAM,GAAG,MAAM,EAAE,IAAI,IAAI,IAAI,WAAW,KAAK,GAAG,IAAI,IAAI;AAAA,MAG1D,OAAO;AACL,UAAE,IAAI;AACN,UAAE,IAAI,CAAC;AAAA,MACT;AAEA,aAAO;AAAA,IACT;AAAA,EACF,EAAG;AAYH,WAAS,OAAO,GAAG,GAAG,IAAI,IAAI;AAC5B,QAAI,IAAI,GAAG,IAAI,KAAK;AAEpB,QAAI,MAAM;AAAM,WAAK;AAAA;AAChB,eAAS,IAAI,GAAG,CAAC;AAEtB,QAAI,CAAC,EAAE;AAAG,aAAO,EAAE,SAAS;AAE5B,SAAK,EAAE,EAAE,CAAC;AACV,SAAK,EAAE;AAEP,QAAI,KAAK,MAAM;AACb,YAAM,cAAc,EAAE,CAAC;AACvB,YAAM,MAAM,KAAK,MAAM,MAAM,MAAM,cAAc,MAAM,cACpD,cAAc,KAAK,EAAE,IACrB,aAAa,KAAK,IAAI,GAAG;AAAA,IAC9B,OAAO;AACL,UAAI,MAAM,IAAIF,WAAU,CAAC,GAAG,GAAG,EAAE;AAGjC,UAAI,EAAE;AAEN,YAAM,cAAc,EAAE,CAAC;AACvB,YAAM,IAAI;AAOV,UAAI,MAAM,KAAK,MAAM,MAAM,KAAK,KAAK,KAAK,aAAa;AAGrD,eAAO,MAAM,GAAG,OAAO,KAAK;AAAM;AAClC,cAAM,cAAc,KAAK,CAAC;AAAA,MAG5B,OAAO;AACL,aAAK;AACL,cAAM,aAAa,KAAK,GAAG,GAAG;AAG9B,YAAI,IAAI,IAAI,KAAK;AACf,cAAI,EAAE,IAAI;AAAG,iBAAK,OAAO,KAAK,KAAK,OAAO;AAAI;AAAA,QAChD,OAAO;AACL,eAAK,IAAI;AACT,cAAI,IAAI,GAAG;AACT,gBAAI,IAAI,KAAK;AAAK,qBAAO;AACzB,mBAAO,KAAK,OAAO;AAAI;AAAA,UACzB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,EAAE,IAAI,KAAK,KAAK,MAAM,MAAM;AAAA,EACrC;AAKA,WAAS,SAAS,MAAM,GAAG;AACzB,QAAI,GAAG,GACL,IAAI,GACJ,IAAI,IAAIA,WAAU,KAAK,CAAC,CAAC;AAE3B,WAAO,IAAI,KAAK,QAAQ,KAAK;AAC3B,UAAI,IAAIA,WAAU,KAAK,CAAC,CAAC;AACzB,UAAI,CAAC,EAAE,MAAM,IAAI,QAAQ,GAAG,CAAC,OAAO,KAAK,MAAM,KAAK,EAAE,MAAM,GAAG;AAC7D,YAAI;AAAA,MACN;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAOA,WAAS,UAAU,GAAG,GAAG,GAAG;AAC1B,QAAI,IAAI,GACN,IAAI,EAAE;AAGR,WAAO,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI;AAAE;AAGxB,SAAK,IAAI,EAAE,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAGrC,SAAK,IAAI,IAAI,IAAI,WAAW,KAAK,SAAS;AAGxC,QAAE,IAAI,EAAE,IAAI;AAAA,IAGd,WAAW,IAAI,SAAS;AAGtB,QAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,IAChB,OAAO;AACL,QAAE,IAAI;AACN,QAAE,IAAI;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAIA,iBAAgB,WAAY;AAC1B,QAAI,aAAa,+BACf,WAAW,eACX,YAAY,eACZ,kBAAkB,sBAClB,mBAAmB;AAErB,WAAO,SAAU,GAAG,KAAK,OAAO,GAAG;AACjC,UAAI,MACF,IAAI,QAAQ,MAAM,IAAI,QAAQ,kBAAkB,EAAE;AAGpD,UAAI,gBAAgB,KAAK,CAAC,GAAG;AAC3B,UAAE,IAAI,MAAM,CAAC,IAAI,OAAO,IAAI,IAAI,KAAK;AAAA,MACvC,OAAO;AACL,YAAI,CAAC,OAAO;AAGV,cAAI,EAAE,QAAQ,YAAY,SAAU,GAAG,IAAI,IAAI;AAC7C,oBAAQ,KAAK,GAAG,YAAY,MAAM,MAAM,KAAK,MAAM,MAAM,IAAI;AAC7D,mBAAO,CAAC,KAAK,KAAK,OAAO,KAAK;AAAA,UAChC,CAAC;AAED,cAAI,GAAG;AACL,mBAAO;AAGP,gBAAI,EAAE,QAAQ,UAAU,IAAI,EAAE,QAAQ,WAAW,MAAM;AAAA,UACzD;AAEA,cAAI,OAAO;AAAG,mBAAO,IAAIA,WAAU,GAAG,IAAI;AAAA,QAC5C;AAIA,YAAIA,WAAU,OAAO;AACnB,gBAAM,MACH,iBAAiB,WAAW,IAAI,WAAW,IAAI,MAAM,cAAc,GAAG;AAAA,QAC3E;AAGA,UAAE,IAAI;AAAA,MACR;AAEA,QAAE,IAAI,EAAE,IAAI;AAAA,IACd;AAAA,EACF,EAAG;AAOH,WAAS,MAAM,GAAG,IAAI,IAAI,GAAG;AAC3B,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IACrB,KAAK,EAAE,GACP,SAAS;AAGX,QAAI,IAAI;AAQN,WAAK;AAGH,aAAK,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAC7C,YAAI,KAAK;AAGT,YAAI,IAAI,GAAG;AACT,eAAK;AACL,cAAI;AACJ,cAAI,GAAG,KAAK,CAAC;AAGb,eAAK,UAAU,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;AAAA,QAC3C,OAAO;AACL,eAAK,UAAU,IAAI,KAAK,QAAQ;AAEhC,cAAI,MAAM,GAAG,QAAQ;AAEnB,gBAAI,GAAG;AAGL,qBAAO,GAAG,UAAU,IAAI,GAAG,KAAK,CAAC;AAAE;AACnC,kBAAI,KAAK;AACT,kBAAI;AACJ,mBAAK;AACL,kBAAI,IAAI,WAAW;AAAA,YACrB,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF,OAAO;AACL,gBAAI,IAAI,GAAG,EAAE;AAGb,iBAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAGlC,iBAAK;AAIL,gBAAI,IAAI,WAAW;AAGnB,iBAAK,IAAI,IAAI,IAAI,UAAU,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;AAAA,UACvD;AAAA,QACF;AAEA,YAAI,KAAK,KAAK;AAAA;AAAA;AAAA,QAKb,GAAG,KAAK,CAAC,KAAK,SAAS,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC;AAExD,YAAI,KAAK,KACL,MAAM,OAAO,MAAM,KAAK,OAAO,EAAE,IAAI,IAAI,IAAI,MAC9C,KAAK,KAAK,MAAM,MAAM,MAAM,KAAK,KAAK,MAAM;AAAA,SAG3C,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,KAAM,KAC7D,OAAO,EAAE,IAAI,IAAI,IAAI;AAExB,YAAI,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG;AACpB,aAAG,SAAS;AAEZ,cAAI,GAAG;AAGL,kBAAM,EAAE,IAAI;AAGZ,eAAG,CAAC,IAAI,QAAQ,WAAW,KAAK,YAAY,QAAQ;AACpD,cAAE,IAAI,CAAC,MAAM;AAAA,UACf,OAAO;AAGL,eAAG,CAAC,IAAI,EAAE,IAAI;AAAA,UAChB;AAEA,iBAAO;AAAA,QACT;AAGA,YAAI,KAAK,GAAG;AACV,aAAG,SAAS;AACZ,cAAI;AACJ;AAAA,QACF,OAAO;AACL,aAAG,SAAS,KAAK;AACjB,cAAI,OAAO,WAAW,CAAC;AAIvB,aAAG,EAAE,IAAI,IAAI,IAAI,UAAU,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,IAAI;AAAA,QAClE;AAGA,YAAI,GAAG;AAEL,qBAAU;AAGR,gBAAI,MAAM,GAAG;AAGX,mBAAK,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAC7C,kBAAI,GAAG,CAAC,KAAK;AACb,mBAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAGlC,kBAAI,KAAK,GAAG;AACV,kBAAE;AACF,oBAAI,GAAG,CAAC,KAAK;AAAM,qBAAG,CAAC,IAAI;AAAA,cAC7B;AAEA;AAAA,YACF,OAAO;AACL,iBAAG,EAAE,KAAK;AACV,kBAAI,GAAG,EAAE,KAAK;AAAM;AACpB,iBAAG,IAAI,IAAI;AACX,kBAAI;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAGA,aAAK,IAAI,GAAG,QAAQ,GAAG,EAAE,CAAC,MAAM,GAAG,GAAG,IAAI;AAAE;AAAA,MAC9C;AAGA,UAAI,EAAE,IAAI,SAAS;AACjB,UAAE,IAAI,EAAE,IAAI;AAAA,MAGd,WAAW,EAAE,IAAI,SAAS;AACxB,UAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,MAChB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAGA,WAAS,QAAQ,GAAG;AAClB,QAAI,KACF,IAAI,EAAE;AAER,QAAI,MAAM;AAAM,aAAO,EAAE,SAAS;AAElC,UAAM,cAAc,EAAE,CAAC;AAEvB,UAAM,KAAK,cAAc,KAAK,aAC1B,cAAc,KAAK,CAAC,IACpB,aAAa,KAAK,GAAG,GAAG;AAE5B,WAAO,EAAE,IAAI,IAAI,MAAM,MAAM;AAAA,EAC/B;AASA,IAAE,gBAAgB,EAAE,MAAM,WAAY;AACpC,QAAI,IAAI,IAAIA,WAAU,IAAI;AAC1B,QAAI,EAAE,IAAI;AAAG,QAAE,IAAI;AACnB,WAAO;AAAA,EACT;AAUA,IAAE,aAAa,SAAU,GAAG,GAAG;AAC7B,WAAO,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC;AAAA,EAC1C;AAgBA,IAAE,gBAAgB,EAAE,KAAK,SAAU,IAAI,IAAI;AACzC,QAAI,GAAG,GAAG,GACR,IAAI;AAEN,QAAI,MAAM,MAAM;AACd,eAAS,IAAI,GAAG,GAAG;AACnB,UAAI,MAAM;AAAM,aAAK;AAAA;AAChB,iBAAS,IAAI,GAAG,CAAC;AAEtB,aAAO,MAAM,IAAIA,WAAU,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,EAAE;AAAA,IACjD;AAEA,QAAI,EAAE,IAAI,EAAE;AAAI,aAAO;AACvB,UAAM,IAAI,EAAE,SAAS,KAAK,SAAS,KAAK,IAAI,QAAQ,KAAK;AAGzD,QAAI,IAAI,EAAE,CAAC;AAAG,aAAO,IAAI,MAAM,GAAG,KAAK,IAAI;AAAI;AAC/C,QAAI,IAAI;AAAG,UAAI;AAEf,WAAO;AAAA,EACT;AAuBA,IAAE,YAAY,EAAE,MAAM,SAAU,GAAG,GAAG;AACpC,WAAO,IAAI,MAAM,IAAIA,WAAU,GAAG,CAAC,GAAG,gBAAgB,aAAa;AAAA,EACrE;AAOA,IAAE,qBAAqB,EAAE,OAAO,SAAU,GAAG,GAAG;AAC9C,WAAO,IAAI,MAAM,IAAIA,WAAU,GAAG,CAAC,GAAG,GAAG,CAAC;AAAA,EAC5C;AAkBA,IAAE,kBAAkB,EAAE,MAAM,SAAU,GAAG,GAAG;AAC1C,QAAI,MAAM,UAAU,GAAG,GAAG,MAAM,QAAQ,QAAQ,QAAQ,GACtD,IAAI;AAEN,QAAI,IAAIA,WAAU,CAAC;AAGnB,QAAI,EAAE,KAAK,CAAC,EAAE,UAAU,GAAG;AACzB,YAAM,MACH,iBAAiB,8BAA8B,QAAQ,CAAC,CAAC;AAAA,IAC9D;AAEA,QAAI,KAAK;AAAM,UAAI,IAAIA,WAAU,CAAC;AAGlC,aAAS,EAAE,IAAI;AAGf,QAAI,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG;AAIhF,UAAI,IAAIA,WAAU,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,SAAS,EAAE,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpF,aAAO,IAAI,EAAE,IAAI,CAAC,IAAI;AAAA,IACxB;AAEA,aAAS,EAAE,IAAI;AAEf,QAAI,GAAG;AAGL,UAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;AAAG,eAAO,IAAIA,WAAU,GAAG;AAElD,iBAAW,CAAC,UAAU,EAAE,UAAU,KAAK,EAAE,UAAU;AAEnD,UAAI;AAAU,YAAI,EAAE,IAAI,CAAC;AAAA,IAI3B,WAAW,EAAE,IAAI,MAAM,EAAE,IAAI,KAAK,EAAE,IAAI,OAAO,EAAE,KAAK,IAElD,EAAE,EAAE,CAAC,IAAI,KAAK,UAAU,EAAE,EAAE,CAAC,KAAK,OAElC,EAAE,EAAE,CAAC,IAAI,QAAQ,UAAU,EAAE,EAAE,CAAC,KAAK,aAAa;AAGpD,UAAI,EAAE,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK;AAG/B,UAAI,EAAE,IAAI;AAAI,YAAI,IAAI;AAGtB,aAAO,IAAIA,WAAU,SAAS,IAAI,IAAI,CAAC;AAAA,IAEzC,WAAW,eAAe;AAKxB,UAAI,SAAS,gBAAgB,WAAW,CAAC;AAAA,IAC3C;AAEA,QAAI,QAAQ;AACV,aAAO,IAAIA,WAAU,GAAG;AACxB,UAAI;AAAQ,UAAE,IAAI;AAClB,eAAS,MAAM,CAAC;AAAA,IAClB,OAAO;AACL,UAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxB,eAAS,IAAI;AAAA,IACf;AAEA,QAAI,IAAIA,WAAU,GAAG;AAGrB,eAAU;AAER,UAAI,QAAQ;AACV,YAAI,EAAE,MAAM,CAAC;AACb,YAAI,CAAC,EAAE;AAAG;AAEV,YAAI,GAAG;AACL,cAAI,EAAE,EAAE,SAAS;AAAG,cAAE,EAAE,SAAS;AAAA,QACnC,WAAW,UAAU;AACnB,cAAI,EAAE,IAAI,CAAC;AAAA,QACb;AAAA,MACF;AAEA,UAAI,GAAG;AACL,YAAI,UAAU,IAAI,CAAC;AACnB,YAAI,MAAM;AAAG;AACb,iBAAS,IAAI;AAAA,MACf,OAAO;AACL,YAAI,EAAE,MAAM,IAAI;AAChB,cAAM,GAAG,EAAE,IAAI,GAAG,CAAC;AAEnB,YAAI,EAAE,IAAI,IAAI;AACZ,mBAAS,MAAM,CAAC;AAAA,QAClB,OAAO;AACL,cAAI,CAAC,QAAQ,CAAC;AACd,cAAI,MAAM;AAAG;AACb,mBAAS,IAAI;AAAA,QACf;AAAA,MACF;AAEA,UAAI,EAAE,MAAM,CAAC;AAEb,UAAI,GAAG;AACL,YAAI,EAAE,KAAK,EAAE,EAAE,SAAS;AAAG,YAAE,EAAE,SAAS;AAAA,MAC1C,WAAW,UAAU;AACnB,YAAI,EAAE,IAAI,CAAC;AAAA,MACb;AAAA,IACF;AAEA,QAAI;AAAU,aAAO;AACrB,QAAI;AAAQ,UAAI,IAAI,IAAI,CAAC;AAEzB,WAAO,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,MAAM,GAAG,eAAe,eAAe,IAAI,IAAI;AAAA,EAC3E;AAWA,IAAE,eAAe,SAAU,IAAI;AAC7B,QAAI,IAAI,IAAIA,WAAU,IAAI;AAC1B,QAAI,MAAM;AAAM,WAAK;AAAA;AAChB,eAAS,IAAI,GAAG,CAAC;AACtB,WAAO,MAAM,GAAG,EAAE,IAAI,GAAG,EAAE;AAAA,EAC7B;AAOA,IAAE,YAAY,EAAE,KAAK,SAAU,GAAG,GAAG;AACnC,WAAO,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC,MAAM;AAAA,EAChD;AAMA,IAAE,WAAW,WAAY;AACvB,WAAO,CAAC,CAAC,KAAK;AAAA,EAChB;AAOA,IAAE,gBAAgB,EAAE,KAAK,SAAU,GAAG,GAAG;AACvC,WAAO,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC,IAAI;AAAA,EAC9C;AAOA,IAAE,yBAAyB,EAAE,MAAM,SAAU,GAAG,GAAG;AACjD,YAAQ,IAAI,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC,OAAO,KAAK,MAAM;AAAA,EAEjE;AAMA,IAAE,YAAY,WAAY;AACxB,WAAO,CAAC,CAAC,KAAK,KAAK,SAAS,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE,SAAS;AAAA,EACnE;AAOA,IAAE,aAAa,EAAE,KAAK,SAAU,GAAG,GAAG;AACpC,WAAO,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC,IAAI;AAAA,EAC9C;AAOA,IAAE,sBAAsB,EAAE,MAAM,SAAU,GAAG,GAAG;AAC9C,YAAQ,IAAI,QAAQ,MAAM,IAAIA,WAAU,GAAG,CAAC,CAAC,OAAO,MAAM,MAAM;AAAA,EAClE;AAMA,IAAE,QAAQ,WAAY;AACpB,WAAO,CAAC,KAAK;AAAA,EACf;AAMA,IAAE,aAAa,WAAY;AACzB,WAAO,KAAK,IAAI;AAAA,EAClB;AAMA,IAAE,aAAa,WAAY;AACzB,WAAO,KAAK,IAAI;AAAA,EAClB;AAMA,IAAE,SAAS,WAAY;AACrB,WAAO,CAAC,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC,KAAK;AAAA,EAClC;AAuBA,IAAE,QAAQ,SAAU,GAAG,GAAG;AACxB,QAAI,GAAG,GAAG,GAAG,MACX,IAAI,MACJ,IAAI,EAAE;AAER,QAAI,IAAIA,WAAU,GAAG,CAAC;AACtB,QAAI,EAAE;AAGN,QAAI,CAAC,KAAK,CAAC;AAAG,aAAO,IAAIA,WAAU,GAAG;AAGtC,QAAI,KAAK,GAAG;AACV,QAAE,IAAI,CAAC;AACP,aAAO,EAAE,KAAK,CAAC;AAAA,IACjB;AAEA,QAAI,KAAK,EAAE,IAAI,UACb,KAAK,EAAE,IAAI,UACX,KAAK,EAAE,GACP,KAAK,EAAE;AAET,QAAI,CAAC,MAAM,CAAC,IAAI;AAGd,UAAI,CAAC,MAAM,CAAC;AAAI,eAAO,MAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,WAAU,KAAK,IAAI,GAAG;AAGtE,UAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;AAGpB,eAAO,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,WAAU,GAAG,CAAC,IAAI;AAAA;AAAA,UAGpD,iBAAiB,IAAI,KAAK;AAAA,SAAC;AAAA,MAC9B;AAAA,IACF;AAEA,SAAK,SAAS,EAAE;AAChB,SAAK,SAAS,EAAE;AAChB,SAAK,GAAG,MAAM;AAGd,QAAI,IAAI,KAAK,IAAI;AAEf,UAAI,OAAO,IAAI,GAAG;AAChB,YAAI,CAAC;AACL,YAAI;AAAA,MACN,OAAO;AACL,aAAK;AACL,YAAI;AAAA,MACN;AAEA,QAAE,QAAQ;AAGV,WAAK,IAAI,GAAG,KAAK,EAAE,KAAK,CAAC;AAAE;AAC3B,QAAE,QAAQ;AAAA,IACZ,OAAO;AAGL,WAAK,QAAQ,IAAI,GAAG,WAAW,IAAI,GAAG,WAAW,IAAI;AAErD,WAAK,IAAI,IAAI,GAAG,IAAI,GAAG,KAAK;AAE1B,YAAI,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG;AAClB,iBAAO,GAAG,CAAC,IAAI,GAAG,CAAC;AACnB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,MAAM;AACR,UAAI;AACJ,WAAK;AACL,WAAK;AACL,QAAE,IAAI,CAAC,EAAE;AAAA,IACX;AAEA,SAAK,IAAI,GAAG,WAAW,IAAI,GAAG;AAI9B,QAAI,IAAI;AAAG,aAAO,KAAK,GAAG,GAAG,IAAI;AAAE;AACnC,QAAI,OAAO;AAGX,WAAO,IAAI,KAAI;AAEb,UAAI,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG;AACnB,aAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI;AAAE;AACrC,UAAE,GAAG,CAAC;AACN,WAAG,CAAC,KAAK;AAAA,MACX;AAEA,SAAG,CAAC,KAAK,GAAG,CAAC;AAAA,IACf;AAGA,WAAO,GAAG,CAAC,KAAK,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,EAAE;AAAG;AAGzC,QAAI,CAAC,GAAG,CAAC,GAAG;AAIV,QAAE,IAAI,iBAAiB,IAAI,KAAK;AAChC,QAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AACd,aAAO;AAAA,IACT;AAIA,WAAO,UAAU,GAAG,IAAI,EAAE;AAAA,EAC5B;AAwBA,IAAE,SAAS,EAAE,MAAM,SAAU,GAAG,GAAG;AACjC,QAAI,GAAG,GACL,IAAI;AAEN,QAAI,IAAIA,WAAU,GAAG,CAAC;AAGtB,QAAI,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG;AAClC,aAAO,IAAIA,WAAU,GAAG;AAAA,IAG1B,WAAW,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG;AACjC,aAAO,IAAIA,WAAU,CAAC;AAAA,IACxB;AAEA,QAAI,eAAe,GAAG;AAIpB,UAAI,EAAE;AACN,QAAE,IAAI;AACN,UAAI,IAAI,GAAG,GAAG,GAAG,CAAC;AAClB,QAAE,IAAI;AACN,QAAE,KAAK;AAAA,IACT,OAAO;AACL,UAAI,IAAI,GAAG,GAAG,GAAG,WAAW;AAAA,IAC9B;AAEA,QAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAGtB,QAAI,CAAC,EAAE,EAAE,CAAC,KAAK,eAAe;AAAG,QAAE,IAAI,EAAE;AAEzC,WAAO;AAAA,EACT;AAuBA,IAAE,eAAe,EAAE,QAAQ,SAAU,GAAG,GAAG;AACzC,QAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAClD,MAAM,UACN,IAAI,MACJ,KAAK,EAAE,GACP,MAAM,IAAI,IAAIA,WAAU,GAAG,CAAC,GAAG;AAGjC,QAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;AAGlC,UAAI,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI;AAC9D,UAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAAA,MACpB,OAAO;AACL,UAAE,KAAK,EAAE;AAGT,YAAI,CAAC,MAAM,CAAC,IAAI;AACd,YAAE,IAAI,EAAE,IAAI;AAAA,QAGd,OAAO;AACL,YAAE,IAAI,CAAC,CAAC;AACR,YAAE,IAAI;AAAA,QACR;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,EAAE,IAAI,QAAQ,IAAI,SAAS,EAAE,IAAI,QAAQ;AACtD,MAAE,KAAK,EAAE;AACT,UAAM,GAAG;AACT,UAAM,GAAG;AAGT,QAAI,MAAM,KAAK;AACb,WAAK;AACL,WAAK;AACL,WAAK;AACL,UAAI;AACJ,YAAM;AACN,YAAM;AAAA,IACR;AAGA,SAAK,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;AAAE;AAE7C,WAAO;AACP,eAAW;AAEX,SAAK,IAAI,KAAK,EAAE,KAAK,KAAI;AACvB,UAAI;AACJ,YAAM,GAAG,CAAC,IAAI;AACd,YAAM,GAAG,CAAC,IAAI,WAAW;AAEzB,WAAK,IAAI,KAAK,IAAI,IAAI,GAAG,IAAI,KAAI;AAC/B,cAAM,GAAG,EAAE,CAAC,IAAI;AAChB,cAAM,GAAG,CAAC,IAAI,WAAW;AACzB,YAAI,MAAM,MAAM,MAAM;AACtB,cAAM,MAAM,MAAQ,IAAI,WAAY,WAAY,GAAG,CAAC,IAAI;AACxD,aAAK,MAAM,OAAO,MAAM,IAAI,WAAW,KAAK,MAAM;AAClD,WAAG,GAAG,IAAI,MAAM;AAAA,MAClB;AAEA,SAAG,CAAC,IAAI;AAAA,IACV;AAEA,QAAI,GAAG;AACL,QAAE;AAAA,IACJ,OAAO;AACL,SAAG,OAAO,GAAG,CAAC;AAAA,IAChB;AAEA,WAAO,UAAU,GAAG,IAAI,CAAC;AAAA,EAC3B;AAOA,IAAE,UAAU,WAAY;AACtB,QAAI,IAAI,IAAIA,WAAU,IAAI;AAC1B,MAAE,IAAI,CAAC,EAAE,KAAK;AACd,WAAO;AAAA,EACT;AAuBA,IAAE,OAAO,SAAU,GAAG,GAAG;AACvB,QAAI,GACF,IAAI,MACJ,IAAI,EAAE;AAER,QAAI,IAAIA,WAAU,GAAG,CAAC;AACtB,QAAI,EAAE;AAGN,QAAI,CAAC,KAAK,CAAC;AAAG,aAAO,IAAIA,WAAU,GAAG;AAGrC,QAAI,KAAK,GAAG;AACX,QAAE,IAAI,CAAC;AACP,aAAO,EAAE,MAAM,CAAC;AAAA,IAClB;AAEA,QAAI,KAAK,EAAE,IAAI,UACb,KAAK,EAAE,IAAI,UACX,KAAK,EAAE,GACP,KAAK,EAAE;AAET,QAAI,CAAC,MAAM,CAAC,IAAI;AAGd,UAAI,CAAC,MAAM,CAAC;AAAI,eAAO,IAAIA,WAAU,IAAI,CAAC;AAI1C,UAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;AAAG,eAAO,GAAG,CAAC,IAAI,IAAI,IAAIA,WAAU,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAAA,IAC1E;AAEA,SAAK,SAAS,EAAE;AAChB,SAAK,SAAS,EAAE;AAChB,SAAK,GAAG,MAAM;AAGd,QAAI,IAAI,KAAK,IAAI;AACf,UAAI,IAAI,GAAG;AACT,aAAK;AACL,YAAI;AAAA,MACN,OAAO;AACL,YAAI,CAAC;AACL,YAAI;AAAA,MACN;AAEA,QAAE,QAAQ;AACV,aAAO,KAAK,EAAE,KAAK,CAAC;AAAE;AACtB,QAAE,QAAQ;AAAA,IACZ;AAEA,QAAI,GAAG;AACP,QAAI,GAAG;AAGP,QAAI,IAAI,IAAI,GAAG;AACb,UAAI;AACJ,WAAK;AACL,WAAK;AACL,UAAI;AAAA,IACN;AAGA,SAAK,IAAI,GAAG,KAAI;AACd,WAAK,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO;AAC3C,SAAG,CAAC,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI;AAAA,IACvC;AAEA,QAAI,GAAG;AACL,WAAK,CAAC,CAAC,EAAE,OAAO,EAAE;AAClB,QAAE;AAAA,IACJ;AAIA,WAAO,UAAU,GAAG,IAAI,EAAE;AAAA,EAC5B;AAkBA,IAAE,YAAY,EAAE,KAAK,SAAU,IAAI,IAAI;AACrC,QAAI,GAAG,GAAG,GACR,IAAI;AAEN,QAAI,MAAM,QAAQ,OAAO,CAAC,CAAC,IAAI;AAC7B,eAAS,IAAI,GAAG,GAAG;AACnB,UAAI,MAAM;AAAM,aAAK;AAAA;AAChB,iBAAS,IAAI,GAAG,CAAC;AAEtB,aAAO,MAAM,IAAIA,WAAU,CAAC,GAAG,IAAI,EAAE;AAAA,IACvC;AAEA,QAAI,EAAE,IAAI,EAAE;AAAI,aAAO;AACvB,QAAI,EAAE,SAAS;AACf,QAAI,IAAI,WAAW;AAEnB,QAAI,IAAI,EAAE,CAAC,GAAG;AAGZ,aAAO,IAAI,MAAM,GAAG,KAAK,IAAI;AAAI;AAGjC,WAAK,IAAI,EAAE,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI;AAAI;AAAA,IACvC;AAEA,QAAI,MAAM,EAAE,IAAI,IAAI;AAAG,UAAI,EAAE,IAAI;AAEjC,WAAO;AAAA,EACT;AAWA,IAAE,YAAY,SAAU,GAAG;AACzB,aAAS,GAAG,CAAC,kBAAkB,gBAAgB;AAC/C,WAAO,KAAK,MAAM,OAAO,CAAC;AAAA,EAC5B;AAcA,IAAE,aAAa,EAAE,OAAO,WAAY;AAClC,QAAI,GAAG,GAAG,GAAG,KAAK,GAChB,IAAI,MACJ,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE,GACN,KAAK,iBAAiB,GACtB,OAAO,IAAIA,WAAU,KAAK;AAG5B,QAAI,MAAM,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG;AAC1B,aAAO,IAAIA,WAAU,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC;AAAA,IACxE;AAGA,QAAI,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC;AAIzB,QAAI,KAAK,KAAK,KAAK,IAAI,GAAG;AACxB,UAAI,cAAc,CAAC;AACnB,WAAK,EAAE,SAAS,KAAK,KAAK;AAAG,aAAK;AAClC,UAAI,KAAK,KAAK,CAAC,CAAC;AAChB,UAAI,UAAU,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI;AAE1C,UAAI,KAAK,IAAI,GAAG;AACd,YAAI,OAAO;AAAA,MACb,OAAO;AACL,YAAI,EAAE,cAAc;AACpB,YAAI,EAAE,MAAM,GAAG,EAAE,QAAQ,GAAG,IAAI,CAAC,IAAI;AAAA,MACvC;AAEA,UAAI,IAAIA,WAAU,CAAC;AAAA,IACrB,OAAO;AACL,UAAI,IAAIA,WAAU,IAAI,EAAE;AAAA,IAC1B;AAMA,QAAI,EAAE,EAAE,CAAC,GAAG;AACV,UAAI,EAAE;AACN,UAAI,IAAI;AACR,UAAI,IAAI;AAAG,YAAI;AAGf,iBAAU;AACR,YAAI;AACJ,YAAI,KAAK,MAAM,EAAE,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AAEvC,YAAI,cAAc,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC,OAAO,IAAI,cAAc,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG;AAK3E,cAAI,EAAE,IAAI;AAAG,cAAE;AACf,cAAI,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC;AAKxB,cAAI,KAAK,UAAU,CAAC,OAAO,KAAK,QAAQ;AAItC,gBAAI,CAAC,KAAK;AACR,oBAAM,GAAG,EAAE,IAAI,iBAAiB,GAAG,CAAC;AAEpC,kBAAI,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG;AACpB,oBAAI;AACJ;AAAA,cACF;AAAA,YACF;AAEA,kBAAM;AACN,iBAAK;AACL,kBAAM;AAAA,UACR,OAAO;AAIL,gBAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,KAAK;AAG7C,oBAAM,GAAG,EAAE,IAAI,iBAAiB,GAAG,CAAC;AACpC,kBAAI,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC;AAAA,YACtB;AAEA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,MAAM,GAAG,EAAE,IAAI,iBAAiB,GAAG,eAAe,CAAC;AAAA,EAC5D;AAYA,IAAE,gBAAgB,SAAU,IAAI,IAAI;AAClC,QAAI,MAAM,MAAM;AACd,eAAS,IAAI,GAAG,GAAG;AACnB;AAAA,IACF;AACA,WAAO,OAAO,MAAM,IAAI,IAAI,CAAC;AAAA,EAC/B;AAeA,IAAE,UAAU,SAAU,IAAI,IAAI;AAC5B,QAAI,MAAM,MAAM;AACd,eAAS,IAAI,GAAG,GAAG;AACnB,WAAK,KAAK,KAAK,IAAI;AAAA,IACrB;AACA,WAAO,OAAO,MAAM,IAAI,EAAE;AAAA,EAC5B;AA4BA,IAAE,WAAW,SAAU,IAAI,IAAIG,SAAQ;AACrC,QAAI,KACF,IAAI;AAEN,QAAIA,WAAU,MAAM;AAClB,UAAI,MAAM,QAAQ,MAAM,OAAO,MAAM,UAAU;AAC7C,QAAAA,UAAS;AACT,aAAK;AAAA,MACP,WAAW,MAAM,OAAO,MAAM,UAAU;AACtC,QAAAA,UAAS;AACT,aAAK,KAAK;AAAA,MACZ,OAAO;AACL,QAAAA,UAAS;AAAA,MACX;AAAA,IACF,WAAW,OAAOA,WAAU,UAAU;AACpC,YAAM,MACH,iBAAiB,6BAA6BA,OAAM;AAAA,IACzD;AAEA,UAAM,EAAE,QAAQ,IAAI,EAAE;AAEtB,QAAI,EAAE,GAAG;AACP,UAAI,GACF,MAAM,IAAI,MAAM,GAAG,GACnB,KAAK,CAACA,QAAO,WACb,KAAK,CAACA,QAAO,oBACb,iBAAiBA,QAAO,kBAAkB,IAC1C,UAAU,IAAI,CAAC,GACf,eAAe,IAAI,CAAC,GACpB,QAAQ,EAAE,IAAI,GACd,YAAY,QAAQ,QAAQ,MAAM,CAAC,IAAI,SACvC,MAAM,UAAU;AAElB,UAAI,IAAI;AACN,YAAI;AACJ,aAAK;AACL,aAAK;AACL,eAAO;AAAA,MACT;AAEA,UAAI,KAAK,KAAK,MAAM,GAAG;AACrB,YAAI,MAAM,MAAM;AAChB,kBAAU,UAAU,OAAO,GAAG,CAAC;AAC/B,eAAO,IAAI,KAAK,KAAK;AAAI,qBAAW,iBAAiB,UAAU,OAAO,GAAG,EAAE;AAC3E,YAAI,KAAK;AAAG,qBAAW,iBAAiB,UAAU,MAAM,CAAC;AACzD,YAAI;AAAO,oBAAU,MAAM;AAAA,MAC7B;AAEA,YAAM,eACH,WAAWA,QAAO,oBAAoB,QAAQ,KAAK,CAACA,QAAO,qBAC1D,aAAa;AAAA,QAAQ,IAAI,OAAO,SAAS,KAAK,QAAQ,GAAG;AAAA,QAC1D,QAAQA,QAAO,0BAA0B;AAAA,MAAG,IAC3C,gBACD;AAAA,IACL;AAEA,YAAQA,QAAO,UAAU,MAAM,OAAOA,QAAO,UAAU;AAAA,EACzD;AAcA,IAAE,aAAa,SAAU,IAAI;AAC3B,QAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,GAAG,GAAG,GAC1C,IAAI,MACJ,KAAK,EAAE;AAET,QAAI,MAAM,MAAM;AACd,UAAI,IAAIH,WAAU,EAAE;AAGpB,UAAI,CAAC,EAAE,UAAU,MAAM,EAAE,KAAK,EAAE,MAAM,MAAM,EAAE,GAAG,GAAG,GAAG;AACrD,cAAM,MACH,iBAAiB,eACf,EAAE,UAAU,IAAI,mBAAmB,sBAAsB,QAAQ,CAAC,CAAC;AAAA,MAC1E;AAAA,IACF;AAEA,QAAI,CAAC;AAAI,aAAO,IAAIA,WAAU,CAAC;AAE/B,QAAI,IAAIA,WAAU,GAAG;AACrB,SAAK,KAAK,IAAIA,WAAU,GAAG;AAC3B,SAAK,KAAK,IAAIA,WAAU,GAAG;AAC3B,QAAI,cAAc,EAAE;AAIpB,QAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI;AAC3B,MAAE,EAAE,CAAC,IAAI,UAAU,MAAM,IAAI,YAAY,IAAI,WAAW,MAAM,GAAG;AACjE,SAAK,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,IAAK,IAAI,IAAI,IAAI,KAAM;AAErD,UAAM;AACN,cAAU,IAAI;AACd,QAAI,IAAIA,WAAU,CAAC;AAGnB,OAAG,EAAE,CAAC,IAAI;AAEV,eAAW;AACT,UAAI,IAAI,GAAG,GAAG,GAAG,CAAC;AAClB,WAAK,GAAG,KAAK,EAAE,MAAM,EAAE,CAAC;AACxB,UAAI,GAAG,WAAW,EAAE,KAAK;AAAG;AAC5B,WAAK;AACL,WAAK;AACL,WAAK,GAAG,KAAK,EAAE,MAAM,KAAK,EAAE,CAAC;AAC7B,WAAK;AACL,UAAI,EAAE,MAAM,EAAE,MAAM,KAAK,CAAC,CAAC;AAC3B,UAAI;AAAA,IACN;AAEA,SAAK,IAAI,GAAG,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC;AAC/B,SAAK,GAAG,KAAK,GAAG,MAAM,EAAE,CAAC;AACzB,SAAK,GAAG,KAAK,GAAG,MAAM,EAAE,CAAC;AACzB,OAAG,IAAI,GAAG,IAAI,EAAE;AAChB,QAAI,IAAI;AAGR,QAAI,IAAI,IAAI,IAAI,GAAG,aAAa,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE;AAAA,MAC7C,IAAI,IAAI,IAAI,GAAG,aAAa,EAAE,MAAM,CAAC,EAAE,IAAI;AAAA,IAAC,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAE1E,cAAU;AAEV,WAAO;AAAA,EACT;AAMA,IAAE,WAAW,WAAY;AACvB,WAAO,CAAC,QAAQ,IAAI;AAAA,EACtB;AAcA,IAAE,cAAc,SAAU,IAAI,IAAI;AAChC,QAAI,MAAM;AAAM,eAAS,IAAI,GAAG,GAAG;AACnC,WAAO,OAAO,MAAM,IAAI,IAAI,CAAC;AAAA,EAC/B;AAcA,IAAE,WAAW,SAAU,GAAG;AACxB,QAAI,KACF,IAAI,MACJ,IAAI,EAAE,GACN,IAAI,EAAE;AAGR,QAAI,MAAM,MAAM;AACd,UAAI,GAAG;AACL,cAAM;AACN,YAAI,IAAI;AAAG,gBAAM,MAAM;AAAA,MACzB,OAAO;AACL,cAAM;AAAA,MACR;AAAA,IACF,OAAO;AACL,UAAI,KAAK,MAAM;AACb,cAAM,KAAK,cAAc,KAAK,aAC3B,cAAc,cAAc,EAAE,CAAC,GAAG,CAAC,IACnC,aAAa,cAAc,EAAE,CAAC,GAAG,GAAG,GAAG;AAAA,MAC5C,WAAW,MAAM,MAAM,gCAAgC;AACrD,YAAI,MAAM,IAAIA,WAAU,CAAC,GAAG,iBAAiB,IAAI,GAAG,aAAa;AACjE,cAAM,aAAa,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG;AAAA,MACjD,OAAO;AACL,iBAAS,GAAG,GAAG,SAAS,QAAQ,MAAM;AACtC,cAAM,YAAY,aAAa,cAAc,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI;AAAA,MAC5E;AAEA,UAAI,IAAI,KAAK,EAAE,EAAE,CAAC;AAAG,cAAM,MAAM;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAOA,IAAE,UAAU,EAAE,SAAS,WAAY;AACjC,WAAO,QAAQ,IAAI;AAAA,EACrB;AAGA,IAAE,eAAe;AAEjB,IAAE,OAAO,WAAW,IAAI;AAGxB,IAAE,OAAO,IAAI,4BAA4B,CAAC,IAAI,EAAE;AAEhD,MAAI,gBAAgB;AAAM,IAAAA,WAAU,IAAI,YAAY;AAEpD,SAAOA;AACT;AASA,SAAS,SAAS,GAAG;AACnB,MAAI,IAAI,IAAI;AACZ,SAAO,IAAI,KAAK,MAAM,IAAI,IAAI,IAAI;AACpC;AAIA,SAAS,cAAc,GAAG;AACxB,MAAI,GAAG,GACL,IAAI,GACJ,IAAI,EAAE,QACN,IAAI,EAAE,CAAC,IAAI;AAEb,SAAO,IAAI,KAAI;AACb,QAAI,EAAE,GAAG,IAAI;AACb,QAAI,WAAW,EAAE;AACjB,WAAO,KAAK,IAAI,MAAM;AAAE;AACxB,SAAK;AAAA,EACP;AAGA,OAAK,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,MAAM;AAAI;AAE7C,SAAO,EAAE,MAAM,GAAG,IAAI,KAAK,CAAC;AAC9B;AAIA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,GAAG,GACL,KAAK,EAAE,GACP,KAAK,EAAE,GACP,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE;AAGR,MAAI,CAAC,KAAK,CAAC;AAAG,WAAO;AAErB,MAAI,MAAM,CAAC,GAAG,CAAC;AACf,MAAI,MAAM,CAAC,GAAG,CAAC;AAGf,MAAI,KAAK;AAAG,WAAO,IAAI,IAAI,IAAI,CAAC,IAAI;AAGpC,MAAI,KAAK;AAAG,WAAO;AAEnB,MAAI,IAAI;AACR,MAAI,KAAK;AAGT,MAAI,CAAC,MAAM,CAAC;AAAI,WAAO,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;AAG7C,MAAI,CAAC;AAAG,WAAO,IAAI,IAAI,IAAI,IAAI;AAE/B,OAAK,IAAI,GAAG,WAAW,IAAI,GAAG,UAAU,IAAI;AAG5C,OAAK,IAAI,GAAG,IAAI,GAAG;AAAK,QAAI,GAAG,CAAC,KAAK,GAAG,CAAC;AAAG,aAAO,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI;AAG3E,SAAO,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACtC;AAMA,SAAS,SAAS,GAAG,KAAK,KAAK,MAAM;AACnC,MAAI,IAAI,OAAO,IAAI,OAAO,MAAM,UAAU,CAAC,GAAG;AAC5C,UAAM,MACJ,kBAAkB,QAAQ,eAAe,OAAO,KAAK,WAClD,IAAI,OAAO,IAAI,MAAM,oBAAoB,sBACzC,+BAA+B,OAAO,CAAC,CAAC;AAAA,EAC/C;AACF;AAIA,SAAS,MAAM,GAAG;AAChB,MAAI,IAAI,EAAE,EAAE,SAAS;AACrB,SAAO,SAAS,EAAE,IAAI,QAAQ,KAAK,KAAK,EAAE,EAAE,CAAC,IAAI,KAAK;AACxD;AAGA,SAAS,cAAc,KAAK,GAAG;AAC7B,UAAQ,IAAI,SAAS,IAAI,IAAI,OAAO,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,QAC5D,IAAI,IAAI,MAAM,QAAQ;AAC1B;AAGA,SAAS,aAAa,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK;AAGT,MAAI,IAAI,GAAG;AAGT,SAAK,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM;AAAE;AAChC,UAAM,KAAK;AAAA,EAGb,OAAO;AACL,UAAM,IAAI;AAGV,QAAI,EAAE,IAAI,KAAK;AACb,WAAK,KAAK,GAAG,KAAK,KAAK,EAAE,GAAG,MAAM;AAAE;AACpC,aAAO;AAAA,IACT,WAAW,IAAI,KAAK;AAClB,YAAM,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC;AAAA,IAC3C;AAAA,EACF;AAEA,SAAO;AACT;AAMO,IAAI,YAAY,MAAM;;;ACx1F7B,IAAAI,gBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA,IAAMC,UAAS,IAAI,gBAAS;AAuEtB,IAAO,MAAP,MAAO,KAAG;;;;;;;;;;;;EAiBd,OAAa,KAAK,SAAuB;;AACvC,YAAM,EAAE,WAAW,QAAO,IAAK;AAC/B,YAAM,SAAS,MAAM,UAAU,UAAS;AAExC,UAAI,OAAO,OAAO;AAClB,UAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1B,eAAO,GAAG,UAAU,GAAG,GAAG,IAAI;;AAGhC,YAAM,SAA0B;QAC9B,KAAM;QACN,KAAM,OAAO;QACb,KAAM;;AAGR,YAAM,yBAAyB,QAAQ,OAAO,MAAM,EAAE,YAAW;AACjE,YAAM,0BAA0B,QAAQ,OAAO,OAAO,EAAE,YAAW;AAEnE,YAAM,SAAS,GAAG,sBAAsB,IAAI,uBAAuB;AACnE,YAAM,cAAc,QAAQ,OAAO,MAAM,EAAE,aAAY;AAEvD,YAAM,iBAAiB,MAAM,OAAO,KAAK,EAAE,MAAM,YAAW,CAAE;AAE9D,YAAM,4BAA4B,QAAQ,WAAW,cAAc,EAAE,YAAW;AAEhF,aAAO,GAAG,MAAM,IAAI,yBAAyB;IAC/C,CAAC;;;;;;;;;;;;;EAaD,OAAa,OAAO,SAAyB;;AAC3C,YAAM,EAAE,SAAS,YAAY,SAAS,WAAU,IAAK,KAAI,MAAM,EAAE,KAAK,QAAQ,IAAG,CAAE;AAEnF,UAAI,WAAW,QAAQ,OAAO,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI,IAAI,WAAW,QAAQ,KAAK;AACpF,cAAM,IAAI,MAAM,qCAAqC;;AAIvD,YAAM,oBAAoB,MAAM,KAAI,YAAY,YAAY,WAAW,OAAO,GAAI;AAClF,UAAI,kBAAkB,sBAAsB,OAAO;AACjD,cAAM,IAAI,MAAM,qBAAqB,WAAW,OAAO,GAAG,EAAE;;AAG9D,YAAM,qBAAqB,kBAAkB;AAC7C,UAAI,CAAC,sBAAsB,CAACC,eAAS,wBAAwB,kBAAkB,GAAG;AAChF,cAAM,IAAI,MAAM,mGAAmG;;AAIrH,YAAM,eAAe,mBAAmB;AACxC,UAAI,CAAC,cAAc;AACjB,cAAM,IAAI,MAAM,wHAAwH;;AAG1I,UAAG,aAAa,OAAQ,aAAa,QAAQ,WAAW,OAAO,KAAM;AACnE,cAAM,IAAI,MAAM,+FAA+F;;AAGjH,YAAM,aAAa,GAAG,WAAW,MAAM,IAAI,WAAW,OAAO;AAC7D,YAAM,kBAAkB,QAAQ,OAAO,UAAU,EAAE,aAAY;AAE/D,YAAM,iBAAiB,QAAQ,UAAU,WAAW,SAAS,EAAE,aAAY;AAE3E,YAAM,mBAAmB,MAAMD,QAAO,OAAO;QAC3C,KAAY;QACZ,WAAY;QACZ,MAAY;OACb;AAED,UAAI,CAAC,kBAAkB;AACrB,cAAM,IAAI,MAAM,mDAAmD;;AAGrE,aAAO;IACT,CAAC;;;;;;;;;;;;;EAaD,OAAO,MAAM,SAAwB;AACnC,UAAM,WAAW,QAAQ,IAAI,MAAM,GAAG;AACtC,QAAI,SAAS,WAAW,GAAG;AACzB,YAAM,IAAI,MAAM,6DAA6D,SAAS,MAAM,EAAE;;AAGhG,UAAM,CAAC,2BAA2B,4BAA4B,yBAAyB,IAAI;AAC3F,QAAI;AACJ,QAAI;AAEJ,QAAI;AACF,kBAAY,QAAQ,UAAU,yBAAyB,EAAE,SAAQ;aAC3D,GAAG;AACT,YAAM,IAAI,MAAM,+EAA+E;;AAGjG,QAAI,CAAC,UAAU,OAAO,UAAU,QAAQ,OAAO;AAC7C,YAAM,IAAI,MAAM,6EAA6E;;AAG/F,QAAI,CAAC,UAAU,OAAO,CAAC,UAAU,KAAK;AACpC,YAAM,IAAI,MAAM,iEAAiE;;AAInF,QAAI;AACF,mBAAa,QAAQ,UAAU,0BAA0B,EAAE,SAAQ;aAC7D,GAAG;AACT,YAAM,IAAI,MAAM,gFAAgF;;AAGlG,WAAO;MACL,SAAS;QACP,QAAU;QACV,SAAU;;MAEZ,SAAS;QACP,QAAY;QACZ,SAAY;QACZ,WAAY;;;EAGlB;;AAvJO,IAAA,cAAiC,IAAI,kBAAkB,EAAE,cAAc,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,EAAC,CAAE;;;AC9E1H,IAAAE,gBAAA;AAWM,IAAO,uBAAP,MAA2B;;;;;;;;;EAaxB,OAAO,kBAAkB,EAAE,QAAQ,uBAAsB,GAG/D;;AACC,SAAK,SAAQ;AACb,UAAM,gBAA+B,KAAK,IAAI,WAAW,wBAAwB,MAAM;AAGvF,UAAG,KAAA,cAAc,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,YAAW,GAAG;AACrC,aAAO,CAAA;;AAGT,WAAO,MAAM,KAAK,IAAI,KAAI,KAAA,cAAc,0BAAgC,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE,CAAC;EACjF;;;;;;;;;EAUO,OAAO,gCAAgC,EAAE,QAAQ,uBAAsB,GAG7E;;AACC,SAAK,SAAQ;AACb,UAAM,oBAAuC,KAAK,IAAI,oBAAoB,wBAAwB,MAAM;AACxG,SAAI,KAAA,kBAAkB,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACtC,cAAQ,KAAK,4DAA4D,KAAK,UAAU,kBAAkB,QAAQ,CAAC;;AAGrH,QAAI,kBAAkB,8BAA8B,SAAQ,MAAO,YAAU,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ;AAC7G,UAAI,eAAe;AACnB,UAAG,kBAAkB,+BAA+B;AAClD,wBAAgB,uCAAuC,KAAK,UAAU,kBAAkB,6BAA6B;;AAGvH,WAAI,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACpC,wBAAgB,aAAa,KAAK,UAAU,kBAAkB,MAAM;;AAGtE,YAAM,IAAI,MAAM,YAAY;;EAEhC;;;;;;;;;;;;;;;EAgBO,OAAO,kCAAkC,EAAE,QAAQ,uBAAsB,GAG/E;;AACC,SAAK,SAAQ;AAEb,UAAM,cAAyB,IAAI,mBAAmB,sBAAsB;AAC5E,YAAQ,WAAW;AAEnB,UAAM,oBAAuC,KAAK,IAAI,oBAAoB,wBAAwB,MAAM;AAExG,SAAI,KAAA,kBAAkB,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACtC,cAAQ,KAAK,4DAA4D,KAAK,UAAU,kBAAkB,QAAQ,CAAC;;AAGrH,QAAI,kBAAkB,8BAA8B,SAAQ,MAAO,YAAU,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ;AAC7G,UAAI,eAAe;AACnB,UAAG,kBAAkB,+BAA+B;AAClD,wBAAgB,uCAAuC,KAAK,UAAU,kBAAkB,6BAA6B;;AAGvH,WAAI,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACpC,wBAAgB,aAAa,KAAK,UAAU,kBAAkB,MAAM;;AAGtE,YAAM,IAAI,MAAM,YAAY;;AAG9B,UAAM,qBAAyC,KAAK,IAAI,iBAAiB,wBAAwB,MAAM;AAEvG,UAAM,sBAAiC,IAAI,mBAAmB,mBAAmB,sBAAsB;AACvG,YAAQ,mBAAmB;AAE3B,WAAO;EACT;;;;;;;EAQO,OAAO,mBAAmB,EAAE,uBAAsB,GAExD;AACC,WAAO,IAAI,mBAAmB,sBAAsB;EACtD;;;;;;;EAQO,OAAO,mBAAmB,EAAE,uBAAsB,GAExD;AACC,WAAO,IAAI,mBAAmB,sBAAsB;EACtD;;;;;;EAOO,OAAO,qBAAqB,EAAE,wBAAwB,aAAY,GAGxE;AACC,SAAK,SAAQ;AACb,WAAO,KAAK,IAAI,qBAAqB,wBAAwB,YAAY;EAC3E;;EAGQ,OAAO,WAAQ;AACrB,SAAK,MAAM,IAAI,IAAG;EACpB;;AApJe,qBAAA,MAAW,IAAI,IAAG;AAuJnC,SAAS,QAAQ,WAAoB;AACnC,MAAI,eAAe;AACnB,MAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,QAAI,CAAC,UAAU,MAAM,UAAQ,KAAK,WAAW,MAAM,GAAG;AACpD,sBAAgB,wBAAwB,KAAK,UAAU,SAAS;AAChE,YAAM,IAAI,MAAM,YAAY;;SAEzB;AACL,QAAI,UAAU,WAAW,QAAQ;AAC/B,sBAAgB,wBAAwB,KAAK,UAAU,SAAS;AAChE,YAAM,IAAI,MAAM,YAAY;;;AAGlC;;;;;;ACrLA,IAAAC,gBAAA;;;ACLA,IAAAC,iBAAA;SAAAA,gBAAA;;;;;;;IAAAC,gBAAA;AAaM,SAAU,kCAA+B;AAE7C,UAAO,oBAAI,KAAI,GAAG,YAAW,EAAG,QAAQ,WAAW,GAAG;AACxD;AAmBM,SAAU,yBAAyB,oBAA0B;AACjE,QAAM,OAAO,IAAI,KAAK,qBAAqB,GAAI;AAG/C,SAAO,KAAK,YAAW,EAAG,QAAQ,WAAW,EAAE;AACjD;AAiBM,SAAU,+BAA+B,iBAAuB;AACpE,QAAM,aAAa,IAAI,KAAK,KAAK,IAAG,IAAK,kBAAkB,GAAI;AAC/D,SAAO,WAAW,YAAW,EAAG,QAAQ,WAAW,GAAG;AACxD;AAgBM,SAAU,6BAA6B,WAAiB;AAE5D,QAAM,QAAQ;AACd,MAAI,CAAC,MAAM,KAAK,SAAS,GAAG;AAC1B,WAAO;;AAGT,QAAM,OAAO,IAAI,KAAK,SAAS;AAE/B,SAAO,CAAC,MAAM,KAAK,QAAO,CAAE;AAC9B;AAeM,SAAU,wBAAwB,WAAiB;AAGvD,QAAM,QAAQ;AACd,MAAI,CAAC,MAAM,KAAK,SAAS,GAAG;AAC1B,WAAO;;AAIT,QAAM,OAAO,IAAI,KAAK,SAAS;AAG/B,SAAO,CAAC,MAAM,KAAK,QAAO,CAAE;AAC9B;;;;ACvGO,IAAM,kBAAkB;;;AFGzB,IAAO,eAAP,MAAmB;EACvB,OAAO,0BAA0B,IAAwB;AACvD,SAAK,gBAAgB,GAAG,YAAY,UAAU,CAAC;AAC/C,SAAK,eAAe,GAAG,IAAI;AAC3B,SAAK,0BAA0B,GAAG,YAAY,iBAAiB;AAC/D,QAAI,GAAG,YAAY;AAAc,WAAK,kBAAkB,GAAG,YAAY,YAAY;AACnF,QAAI,GAAG,YAAY;AAAgB,WAAK,kBAAkB,GAAG,YAAY,cAAc;EACzF;EAEA,OAAO,gBAAgB,OAAwD;AAC7E,UAAM,QAAQ,KAAK,QAAQ,KAAK;AAChC,QAAI,MAAM,SAAS,KAAK,MAAM,QAAQ,kBAAkB,MAAM,IAAI;AAChE,YAAM,IAAI,MAAM,wCAAwC,kBAAkB,GAAG;;EAEjF;EAEA,OAAO,eAAe,OAAwB;AAC5C,UAAM,QAAQ,KAAK,QAAQ,KAAK;AAChC,QAAI,MAAM,SAAS,KAAK,MAAM,QAAQ,eAAe,MAAM,IAAI;AAC7D,YAAM,IAAI,MAAM,4BAA4B,eAAe,GAAG;;EAElE;EAEA,OAAO,eAAe,OAAwB;AAC5C,UAAM,QAAQ,KAAK,QAAQ,KAAK;AAChC,QAAI,MAAM,SAAS,KAAK,MAAM,QAAQ,eAAe,MAAM,IAAI;AAC7D,YAAM,IAAI,MAAM,4BAA4B,eAAe,GAAG;;EAElE;EAEA,OAAO,0BAA0B,OAAgD;AAC/E,QAAI,OAAO,KAAK,KAAK,EAAE,WAAW,GAAG;AACnC,YAAM,IAAI,MAAM,qCAAqC;;EAEzD;EAEA,OAAO,kBAAkB,WAAiB;AACxC,QAAG,CAAC,6BAA6B,SAAS,KAAK,CAAC,wBAAwB,SAAS,GAAE;AACjF,YAAM,IAAI,MAAM,iDAAiD;;EAErE;EAEA,OAAO,QAAQ,KAAgB;AAC7B,WAAO,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG;EACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGhDK,IAAM,qBAAqB;AAE3B,IAAM,kBAAkB;AA2DzB,IAAO,uBAAP,MAAO,sBAAoB;EAC/B,YAAmB,aAAwB;AAAxB,SAAA,cAAA;EAA2B;;EAG9C,IAAI,OAAI;AACN,WAAO,KAAK,YAAY,KAAK,KAAK,YAAY,KAAK,SAAS,CAAC;EAC/D;;EAGA,IAAI,SAAM;AACR,WAAO,KAAK,YAAY,OAAO,SAAQ;EACzC;;EAGA,IAAI,UAAO;AACT,QAAI,MAAM,QAAQ,KAAK,YAAY,iBAAiB,GAAG;AACrD,aAAO,KAAK,YAAY,kBAAkB,CAAC,EAAE;WACxC;AACL,aAAO,KAAK,YAAY,kBAAkB;;EAE9C;;;;;;;;;;;;EAaa,KAAK,SAAwC;;AACxD,YAAM,QAAgB,MAAM,IAAI,KAAK;QACnC,WAAY,QAAQ;QACpB,SAAO,OAAA,OAAA,EACL,IAAM,KAAK,aACX,KAAM,KAAK,MAAM,IAAI,KAAK,KAAK,YAAY,YAAY,EAAE,QAAO,IAAK,GAAI,GACzE,KAAM,KAAK,YAAY,IACvB,KAAM,QAAQ,IAAI,KAClB,KAAM,KAAK,SACX,KAAM,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI,EAAC,GAC/B,KAAK,YAAY,kBAAkB;UACrC,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,YAAY,cAAc,EAAE,QAAO,IAAK,GAAI;SAC1E;OAEL;AAED,aAAO;IACT,CAAC;;;;;;;EAOM,WAAQ;AACb,WAAO,KAAK,UAAU,KAAK,WAAW;EACxC;;;;;;;;;;;;;;;;;EAkBO,OAAa,OAAO,SAA0C;;AACnE,YAAM,EAAE,MAAM,QAAQ,SAAS,MAAM,cAAc,gBAAgB,SAAQ,IAAK;AAEhF,YAAM,WAAW,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AAEhD,UAAI,OAAO,aAAa,UAAU;AAChC,cAAM,IAAI,MAAM,kDAAkD;;AAGpE,UAAG,CAAC,UAAU,CAAC,SAAS;AACtB,cAAM,IAAI,MAAM,oCAAoC;;AAGtD,UAAG,OAAO,WAAW,YAAY,OAAO,YAAY,UAAU;AAC5D,cAAM,IAAI,MAAM,2CAA2C;;AAG7D,YAAM,oBAAiB,OAAA,OAAA,EACrB,IAAI,QAAO,GACR,QAAQ;AAGb,YAAM,cAAW,OAAA,OAAA,OAAA,OAAA,EACf,YAAa,CAAC,kBAAkB,GAChC,MAAa,MAAM,QAAQ,IAAI,IAC3B,CAAC,iBAAiB,GAAG,IAAI,IACxB,OAAO,CAAC,iBAAiB,IAAI,IAAI,CAAC,eAAe,GACtD,IAAoB,YAAY,cAAY,WAAU,CAAE,IACxD,QACA,cAAoB,gBAAgB,gCAA+B,GACnE,kBAAqC,GAEjC,kBAAkB,EAAE,eAAc,CAAG,GACrC,YAAY,EAAE,SAAQ,CAAG;AAG/B,sBAAgB,WAAW;AAE3B,aAAO,IAAI,sBAAqB,WAAW;IAC7C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyCM,OAAa,OAAO,EAAE,MAAK,GAEjC;;AACC,YAAM,EAAE,QAAO,IAAK,MAAM,IAAI,OAAO,EAAE,KAAK,MAAK,CAAE;AACnD,YAAM,EAAE,KAAK,KAAK,KAAK,KAAK,KAAK,GAAE,IAAK;AAExC,UAAI,CAAC,IAAI;AACP,cAAM,IAAI,MAAM,sBAAsB;;AAGxC,YAAM,UAAuB,QAAQ,IAAI;AAGzC,UAAG,OAAO,QAAQ,kBAAkB,QAAS,KAAK,MAAM,IAAI,KAAK,QAAQ,cAAc,EAAE,QAAO,IAAK,GAAI,GAAG;AAC1G,cAAM,IAAI,MAAM,8DAA8D;;AAIhF,UAAG,KAAK;AACN,gBAAQ,iBAAiB,yBAAyB,GAAG;;AAGvD,UAAI,CAAC;AAAK,cAAM,IAAI,MAAM,4CAA4C;AAGtE,UAAI,QAAQ,QAAQ,QAAQ;AAC1B,cAAM,IAAI,MAAM,+DAA+D;;AAIjF,UAAG,OAAO,MAAM,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI,GAAG;AAC7C,cAAM,IAAI,MAAM,iDAAiD;;AAInE,UAAG,OAAO,QAAQ,gBAAgB,QAAQ,KAAK,MAAM,IAAI,KAAK,QAAQ,YAAY,EAAE,QAAO,IAAK,GAAI,GAAG;AACrG,cAAM,IAAI,MAAM,4DAA4D;;AAI9E,UAAG,KAAK;AACN,gBAAQ,eAAe,yBAAyB,GAAG;;AAIrD,UAAG,OAAO,CAAC,MAAM,QAAQ,QAAQ,iBAAiB,KAAK,QAAQ,QAAQ,kBAAkB,IAAI;AAC3F,cAAM,IAAI,MAAM,oEAAoE;;AAItF,UAAG,OAAO,CAAC,MAAM,QAAQ,QAAQ,iBAAiB,GAAG;AACnD,gBAAQ,kBAAkB,KAAK;;AAIjC,UAAG,OAAO,QAAQ,QAAQ,IAAI;AAC5B,cAAM,IAAI,MAAM,kDAAkD;;AAGpE,UAAG,KAAK;AACN,gBAAQ,KAAK;;AAGf,sBAAgB,OAAO;AAEvB,aAAO;;QAEL,QAAU,QAAQ;;QAElB,SAAU,QAAQ;;QAElB,IAAU;;IAEd,CAAC;;;;;;;;;;;;;EAaM,OAAO,SAAS,EAAE,MAAK,GAAqB;AACjD,UAAM,YAAY,IAAI,MAAM,EAAE,KAAK,MAAK,CAAE;AAC1C,UAAM,cAA2B,UAAU,QAAQ,QAAQ,IAAI;AAE/D,QAAG,CAAC,aAAa;AACf,YAAM,MAAM,iCAAiC;;AAG/C,oBAAgB,WAAW;AAE3B,WAAO,IAAI,sBAAqB,WAAW;EAC7C;;AASF,SAAS,gBAAgB,IAAe;AACtC,eAAa,gBAAgB,GAAG,UAAU,CAAC;AAC3C,eAAa,eAAe,GAAG,IAAI;AACnC,eAAa,0BAA0B,GAAG,iBAAiB;AAC3D,MAAI,GAAG;AAAc,iBAAa,kBAAkB,GAAG,YAAY;AACnE,MAAI,GAAG;AAAgB,iBAAa,kBAAkB,GAAG,cAAc;AACzE;;;ARhVA,iBAAgB;AAST,IAAM,MAAN,MAAM,aAAY,QAAQ;AAAA,EAW7B,YAAY,UAAU,MAAM,WAAW,aAAa;AAChD,UAAM,UAAU,MAAM,SAAS;AAVnC;AAAA,qCAAY,oBAAI,IAAI,CAAC,SAAS,OAAO,CAAC;AAEtC;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY,MAAM;AACjC,UAAM,cAAc,OAAO,kBAAkB,UAAU;AACvD,UAAMC,OAAM,IAAI,KAAI,YAAY,UAAU,YAAY,MAAM,YAAY,WAAW,YAAY,WAAW;AAC1G,UAAMA,KAAI,OAAO;AACjB,QAAI,6BAAM,uBAAuB;AAC7B,MAAAA,KAAI,qBAAqB;AAAA,IAC7B,OACK;AACD,MAAAA,KAAI,yBAAyB;AAAA,IACjC;AACA,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW;AACP,UAAM,SAAS;AACf,QAAI,KAAK,gBAAgB,QAAW;AAChC,eAAS,KAAK,aAAa,YAAY;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,MAAM;AAChB,UAAM,KAAK,QAAQ,WAAW,KAAK;AACnC,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN;AAAA,MACA,YAAY;AAAA,MACZ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAM,EAAE,MAAM,YAAY,IAAI,KAAI,gBAAgB,KAAK,IAAI;AAC3D,UAAMA,OAAM,IAAI,KAAI,UAAU,MAAM,QAAW,WAAW;AAC1D,IAAAA,KAAI,aAAa;AACjB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,gBAAgB,iBAAiB;AACpC,UAAM,OAAO,QAAQ,WAAWC,aAAY,EAAE,CAAC,EAAE,YAAY;AAC7D,UAAM,EAAE,QAAQ,OAAO,QAAQ,GAAG,iBAAiB,IAAI;AACvD,UAAM,EAAE,gBAAgB,cAAc,GAAG,eAAe,IAAI;AAC5D,UAAM,EAAE,gBAAgB,eAAe,GAAG,gBAAgB,IAAI;AAC9D,UAAM,OAAO;AAAA,MACT,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AACA,QAAI,iBAAiB,QAAW;AAC5B,WAAK,MAAM,qBAAqB,KAAI,kBAAkB,MAAM,YAAY;AAAA,IAC5E;AACA,QAAI,kBAAkB,QAAW;AAC7B,WAAK,OAAO,qBAAqB,KAAI,kBAAkB,MAAM,aAAa;AAAA,IAC9E;AACA,QAAI,WAAW,WAAa,iCAAQ,UAAS,GAAG;AAC5C,WAAK,aAAa,KAAI,kBAAkB,MAAM,MAAM;AAAA,IACxD;AACA,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,OAAO;AAAA,QACH,gBAAgB;AAAA,MACpB;AAAA,MACA,QAAQ;AAAA,QACJ,gBAAgB;AAAA,MACpB;AAAA,MACA;AAAA,IACJ;AACA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,uBAAuB;AACnB,QAAI,KAAK,gBAAgB,QAAW;AAChC,YAAM,IAAI,MAAM,0EAA0E;AAAA,IAC9F;AAEA,QAAI,KAAK,KAAK,MAAM,uBAAuB,QAAW;AAClD,WAAK,uBAAuB;AAAA,IAChC;AAEA,QAAI,KAAK,KAAK,OAAO,uBAAuB,QAAW;AACnD,WAAK,wBAAwB;AAAA,IACjC;AAEA,QAAI,KAAK,KAAK,eAAe,QAAW;AACpC,WAAK,iBAAiB;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,2BAA2B;AApJ/B;AAsJQ,QAAI,KAAK,KAAK,MAAM,uBAAuB,YAAa,gBAAK,gBAAL,mBAAkB,UAAlB,mBAAyB,oBAAmB,QAAW;AAC3G,WAAK,uBAAuB;AAAA,IAChC;AAEA,QAAI,KAAK,KAAK,OAAO,uBAAuB,YAAa,gBAAK,gBAAL,mBAAkB,WAAlB,mBAA0B,oBAAmB,QAAW;AAC7G,WAAK,wBAAwB;AAAA,IACjC;AAEA,QAAI,KAAK,KAAK,eAAe,YAAa,UAAK,gBAAL,mBAAkB,YAAW,QAAW;AAC9E,WAAK,iBAAiB;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,yBAAyB;AAlK7B;AAmKQ,UAAM,SAAS,KAAI,kBAAkB,KAAK,YAAY,OAAM,gBAAK,gBAAL,mBAAkB,UAAlB,mBAAyB,cAAc;AACnG,QAAI,WAAW,KAAK,KAAK,MAAM,oBAAoB;AAC/C,YAAM,IAAI,MAAM,8HAC6E;AAAA,IACjG;AAAA,EACJ;AAAA,EACA,0BAA0B;AAzK9B;AA0KQ,UAAM,SAAS,KAAI,kBAAkB,KAAK,YAAY,OAAM,gBAAK,gBAAL,mBAAkB,WAAlB,mBAA0B,cAAc;AACpG,QAAI,WAAW,KAAK,KAAK,OAAO,oBAAoB;AAChD,YAAM,IAAI,MAAM,gIAC+E;AAAA,IACnG;AAAA,EACJ;AAAA,EACA,mBAAmB;AAhLvB;AAiLQ,UAAM,aAAa,KAAK,KAAK;AAC7B,UAAM,UAAS,UAAK,gBAAL,mBAAkB;AACjC,UAAM,SAAS,KAAI,kBAAkB,KAAK,YAAY,MAAM,MAAM;AAClE,QAAI,WAAW,YAAY;AACvB,YAAM,IAAI,MAAM,kGACiD;AAAA,IACrE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,MAAM,OAAO;AAClC,UAAM,aAAa,CAAC,MAAM,KAAK;AAC/B,UAAM,YAAY,OAAO,OAAO,UAAU;AAC1C,WAAO,QAAQ,WAAW,SAAS,EAAE,YAAY;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,2BAA2BC,WAAU;AA/M/C;AAgNQ,QAAIA,UAAS,SAAS,aAAa,KAAK,SAAS,UAAU;AACvD,YAAM,IAAI,MAAM,oCAAoC,KAAK,SAAS,QAAQ,QAAQA,UAAS,SAAS,QAAQ,aAAa;AAAA,IAC7H;AACA,QAAIA,UAAS,SAAS,OAAO,KAAK,KAAK,YAAY;AAC/C,YAAM,IAAI,MAAM,+BAA+B,KAAK,KAAK,UAAU,QAAQA,UAAS,SAAS,EAAE,aAAa;AAAA,IAChH;AAEA,QAAI;AACJ,QAAIA,UAAS,KAAK,MAAM,KAAK;AACzB,oBAAc,UAAU,KAAK,KAAK,MAAM,MAAM;AAC9C,YAAM,YAAY,UAAUA,UAAS,KAAK,MAAM,GAAG;AACnD,UAAI,YAAY,cAAc,SAAS,GAAG;AACtC,cAAM,IAAI,MAAM,uDAAuD,KAAK,KAAK,MAAM,MAAM,MAAMA,UAAS,KAAK,MAAM,GAAG,aAAa;AAAA,MAC3I;AAAA,IACJ;AAEA,QAAIA,UAAS,KAAK,MAAM,KAAK;AACzB,oCAAgB,UAAU,KAAK,KAAK,MAAM,MAAM;AAChD,YAAM,YAAY,UAAUA,UAAS,KAAK,MAAM,GAAG;AACnD,UAAI,YAAY,WAAW,SAAS,GAAG;AACnC,cAAM,IAAI,MAAM,wDAAwD,KAAK,KAAK,MAAM,MAAM,MAAMA,UAAS,KAAK,MAAM,GAAG,aAAa;AAAA,MAC5I;AAAA,IACJ;AAEA,SAAK,oBAAoB,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,qBAAoB,gBAAK,gBAAL,mBAAkB,UAAlB,mBAAyB,gBAAgBA,UAAS,KAAK,MAAM,SAAS,OAAO;AAChK,SAAK,oBAAoB,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,qBAAoB,gBAAK,gBAAL,mBAAkB,WAAlB,mBAA0B,gBAAgBA,UAAS,KAAK,OAAO,SAAS,QAAQ;AACrK,UAAM,KAAK,aAAaA,SAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,oBAAoB,qBAAqB,4BAA4B,wBAAwB,uBAAuB,cAAc;AAC9H,UAAM,uBAAuB,sBAAsB,OAAO,mBAAiB,cAAc,SAAS,mBAAmB;AACrH,QAAI,CAAC,qBAAqB,QAAQ;AAC9B,YAAM,qBAAqB,sBAAsB,IAAI,mBAAiB,cAAc,IAAI,EAAE,KAAK,IAAI;AACnG,YAAM,IAAI,MAAM,mCAAmC,YAAY,sBAAsB,mBAAmB,uBAAuB,kBAAkB,cAAc;AAAA,IACnK;AACA,UAAM,MAAM,IAAI,WAAAC,QAAI,QAAQ;AAC5B,UAAM,8BAA8B,oBAAI,IAAI;AAC5C,eAAW,sBAAsB,sBAAsB;AACnD,UAAI,CAAC,mBAAmB,wBAAwB;AAE5C,YAAI,+BAA+B,QAAW;AAC1C;AAAA,QACJ;AAEA,oCAA4B,IAAI,IAAI,MAAM,uEAAuE,CAAC;AAAA,MACtH,OACK;AAED,cAAMC,YAAW,IAAI,QAAQ,mBAAmB,sBAAsB;AACtE,cAAMC,WAAUD,UAAS,sBAAsB;AAC/C,YAAIC,UAAS;AAET;AAAA,QACJ;AACA,oCAA4B,IAAID,UAAS,MAAM;AAAA,MACnD;AAAA,IACJ;AACA,UAAM,IAAI,MAAM,OAAO,YAAY,mHACF,MAAM,KAAK,2BAA2B,EAAE,KAAK,CAAC,EAAE;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,aAAaF,WAAU;AA3RjC;AA4RQ,QAAI,CAACA,UAAS,KAAK,gBAAgB;AAC/B;AAAA,IACJ;AACA,UAAM,cAAc,qBAAqB,kBAAkB,EAAE,UAAQ,UAAK,gBAAL,mBAAkB,WAAU,CAAC,GAAG,wBAAwBA,UAAS,KAAK,eAAe,CAAC;AAC3J,QAAI,YAAY,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,mDAAoD;AAAA,IACxE;AACA,aAAS,cAAc,aAAa;AAChC,YAAM,qBAAqB,OAAO,EAAE,OAAO,WAAW,CAAC;AAAA,IAC3D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACL,UAAM,cAAc,MAAM,OAAO;AACjC,QAAI,KAAK,gBAAgB,QAAW;AAChC,kBAAY,cAAc,KAAK;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AACJ;;;ASjTA,IAAAI,gBAAA;AAOO,IAAM,QAAN,MAAM,eAAc,QAAQ;AAAA,EAY/B,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AAXnC;AAAA,qCAAY,oBAAI,IAAI,CAAC,SAAS,OAAO,CAAC;AAEtC;AAAA,gCAAO;AAEP;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,kBAAkB,UAAU;AACvD,UAAMC,SAAQ,IAAI,OAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACrF,UAAMA,OAAM,OAAO;AACnB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,QAAQ,WAAW,OAAO;AAAA,MAC9B,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAMA,SAAQ,IAAI,OAAM,UAAU,KAAK,IAAI;AAC3C,IAAAA,OAAM,aAAa;AACnB,WAAOA;AAAA,EACX;AACJ;;;ACpDA,IAAAC,gBAAA;AAMO,IAAM,QAAN,MAAM,eAAc,QAAQ;AAAA,EAS/B,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AARnC;AAAA,qCAAY,oBAAI,IAAI,CAAC,aAAa,CAAC;AAEnC;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,kBAAkB,UAAU;AACvD,UAAMC,SAAQ,IAAI,OAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACrF,UAAMA,OAAM,OAAO;AACnB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,QAAQ,WAAW,OAAO;AAAA,MAC9B,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAMA,SAAQ,IAAI,OAAM,UAAU,CAAC,CAAC;AACpC,IAAAA,OAAM,aAAa;AACnB,WAAOA;AAAA,EACX;AACJ;;;AChDA,IAAAC,gBAAA;AAOO,IAAM,cAAN,MAAM,qBAAoB,QAAQ;AAAA,EASrC,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AARnC;AAAA,qCAAY,oBAAI,IAAI,CAAC,eAAe,OAAO,CAAC;AAE5C;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,kBAAkB,UAAU;AACvD,UAAM,cAAc,IAAI,aAAY,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACjG,UAAM,YAAY,OAAO;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,QAAQ,WAAW,aAAa;AAAA,MACpC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAM,cAAc,IAAI,aAAY,UAAU,KAAK,IAAI;AACvD,gBAAY,aAAa;AACzB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;;;ACrDA,IAAAC,gBAAA;AAMO,IAAM,QAAN,MAAM,eAAc,QAAQ;AAAA,EAS/B,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AARnC;AAAA,qCAAY,oBAAI,IAAI,CAAC,CAAC;AAEtB;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,kBAAkB,UAAU;AACvD,UAAMC,SAAQ,IAAI,OAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACrF,UAAMA,OAAM,OAAO;AACnB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,QAAQ,WAAW,OAAO;AAAA,MAC9B,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAMA,SAAQ,IAAI,OAAM,UAAU,KAAK,IAAI;AAC3C,IAAAA,OAAM,aAAa;AACnB,WAAOA;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,KAAK;AAAA,EACrB;AACJ;;;Ad9CO,IAAM,SAAN,MAAM,QAAO;AAAA,EAChB,cAAc;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,aAAa,aAAa,YAAY;AAClC,UAAM,cAAc,QAAO,kBAAkB,UAAU;AACvD,QAAIC;AACJ,YAAQ,YAAY,SAAS,MAAM;AAAA,MAC/B,KAAK;AACD,QAAAA,WAAU,IAAI,IAAI,YAAY,UAAU,YAAY,MAAM,YAAY,WAAW,YAAY,WAAW;AACxG;AAAA,MACJ,KAAK;AACD,QAAAA,WAAU,IAAI,MAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACjF;AAAA,MACJ,KAAK;AACD,QAAAA,WAAU,IAAI,MAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACjF;AAAA,MACJ,KAAK;AACD,QAAAA,WAAU,IAAI,YAAY,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACvF;AAAA,MACJ,KAAK;AACD,QAAAA,WAAU,IAAI,MAAM,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACjF;AAAA,MACJ;AACI,cAAM,IAAI,MAAM,8BAA8B,YAAY,SAAS,IAAI,GAAG;AAAA,IAClF;AACA,UAAMA,SAAQ,OAAO;AACrB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,cAAc,aAAa;AACpC,UAAM,eAAe,QAAO,mBAAmB,WAAW;AAC1D,QAAIC;AACJ,YAAQ,aAAa,SAAS,MAAM;AAAA,MAChC,KAAK;AACD,QAAAA,YAAW,IAAI,SAAS,aAAa,UAAU,aAAa,MAAM,aAAa,SAAS;AACxF;AAAA,MACJ,KAAK;AACD,QAAAA,YAAW,IAAI,QAAQ,aAAa,UAAU,aAAa,MAAM,aAAa,SAAS;AACvF;AAAA,MACJ;AACI,cAAM,IAAI,MAAM,+BAA+B,aAAa,SAAS,IAAI,GAAG;AAAA,IACpF;AACA,UAAMA,UAAS,OAAO;AACtB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,YAAY;AACjC,QAAI;AACA,aAAO,OAAO,eAAe,WAAW,KAAK,MAAM,UAAU,IAAI;AAAA,IACrE,SACO,GAAG;AACN,YAAM,eAAe,aAAa,QAAQ,EAAE,UAAU;AACtD,YAAM,IAAI,MAAM,0CAA0C,YAAY,EAAE;AAAA,IAC5E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,mBAAmB,aAAa;AACnC,QAAI;AACA,aAAO,OAAO,gBAAgB,WAAW,KAAK,MAAM,WAAW,IAAI;AAAA,IACvE,SACO,GAAG;AACN,YAAM,eAAe,aAAa,QAAQ,EAAE,UAAU;AACtD,YAAM,IAAI,MAAM,2CAA2C,YAAY,EAAE;AAAA,IAC7E;AAAA,EACJ;AACJ;;;ADvFO,IAAM,WAAN,MAAM,kBAAiB,SAAS;AAAA,EAOnC,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AANnC;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,mBAAmB,UAAU;AACxD,UAAMC,YAAW,IAAI,UAAS,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AAC3F,UAAMA,UAAS,OAAO;AACtB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,SAAS,WAAW,UAAU;AAAA,MAClC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAMA,YAAW,IAAI,UAAS,UAAU,KAAK,IAAI;AACjD,IAAAA,UAAS,aAAa;AACtB,WAAOA;AAAA,EACX;AACJ;;;AgBhDA,IAAAC,gBAAA;AAOO,IAAM,UAAN,MAAM,iBAAgB,SAAS;AAAA,EAOlC,YAAY,UAAU,MAAM,WAAW;AACnC,UAAM,UAAU,MAAM,SAAS;AANnC;AAAA,gCAAO;AAEP;AAAA;AAEA;AAAA;AAGI,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM,YAAY;AAC3B,UAAM,cAAc,OAAO,mBAAmB,UAAU;AACxD,UAAMC,WAAU,IAAI,SAAQ,YAAY,UAAU,YAAY,MAAM,YAAY,SAAS;AACzF,UAAMA,SAAQ,OAAO;AACrB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,MAAM;AAChB,UAAM,WAAW;AAAA,MACb,GAAG,KAAK;AAAA,MACR,MAAM;AAAA,MACN,IAAI,SAAS,WAAW,SAAS;AAAA,MACjC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU,KAAK,SAAS,YAAY;AAAA,IACxC;AACA,UAAMA,WAAU,IAAI,SAAQ,UAAU,KAAK,IAAI;AAC/C,IAAAA,SAAQ,aAAa;AACrB,WAAOA;AAAA,EACX;AACJ;;;AC/CA,IAAAC,gBAAA;AAWO,IAAM,WAAN,MAAe;AAAA,EAWlB,cAAc;AATd;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEI,SAAK,cAAc,CAAC;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAU;AAElB,UAAM,iBAAiB,SAAS,KAAK,CAAC,IAAI,OAAO;AAC7C,YAAM,QAAQ,IAAI,KAAK,GAAG,SAAS,SAAS,EAAE,QAAQ;AACtD,YAAM,QAAQ,IAAI,KAAK,GAAG,SAAS,SAAS,EAAE,QAAQ;AACtD,aAAO,QAAQ;AAAA,IACnB,CAAC;AACD,eAAWC,YAAW,gBAAgB;AAClC,WAAK,eAAeA,QAAO;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAeA,UAAS;AACpB,QAAI,KAAK,aAAa,UAAaA,SAAQ,SAAS,aAAa,KAAK,UAAU;AAC5E,YAAM,IAAI,MAAM,0BAA0BA,SAAQ,SAAS,EAAE,2BAA2BA,SAAQ,SAAS,QAAQ,mEACzF,KAAK,QAAQ,oCAAoC;AAAA,IAC7E;AACA,QAAI,CAAC,KAAK,YAAYA,SAAQ,SAAS,IAAI,GAAG;AAC1C,YAAM,IAAI,MAAM,0BAA0BA,SAAQ,SAAS,EAAE,yBAAyBA,SAAQ,SAAS,IAAI,8BAC1E;AAAA,IACrC;AACA,QAAI,KAAK,eAAe,UAAaA,SAAQ,SAAS,eAAe,KAAK,YAAY;AAClF,YAAM,IAAI,MAAM,0BAA0BA,SAAQ,SAAS,EAAE,sBAAsBA,SAAQ,SAAS,UAAU,8DAC3F,KAAK,UAAU,kBAAkB;AAAA,IACxD;AACA,QAAIA,SAAQ,MAAM,GAAG;AACjB,WAAK,MAAMA;AAAA,IACf,WACSA,SAAQ,QAAQ,GAAG;AACxB,WAAK,QAAQA;AAAA,IACjB,WACSA,SAAQ,QAAQ,GAAG;AACxB,WAAK,QAAQA;AAAA,IACjB,WACSA,SAAQ,QAAQ,GAAG;AACxB,WAAK,QAAQA;AAAA,IACjB,WACSA,SAAQ,cAAc,GAAG;AAC9B,WAAK,YAAY,KAAKA,QAAO;AAAA,IACjC,OACK;AAED,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC/C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,aAAa;AArF7B;AAsFQ,UAAM,cAAY,UAAK,kBAAL,mBAAoB,cAAa,oBAAI,IAAI,CAAC,KAAK,CAAC;AAClE,WAAO,UAAU,IAAI,WAAW;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,gBAAgB;AAChB,WAAO,KAAK,SACR,KAAK,YAAY,KAAK,YAAY,SAAS,CAAC,KAC5C,KAAK,SACL,KAAK,SACL,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,aAAa;AAtGrB;AAuGQ,YAAO,gBAAK,QAAL,mBAAU,aAAV,mBAAoB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,WAAW;AA5GnB;AA6GQ,YAAO,gBAAK,QAAL,mBAAU,aAAV,mBAAoB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,WAAW;AACX,UAAM,sBAAsB;AAAA,MACxB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,GAAG,KAAK;AAAA,MACR,KAAK;AAAA,IACT;AACA,WAAO,oBAAoB,OAAO,CAACA,aAAYA,aAAY,MAAS;AAAA,EACxE;AACJ;;;AC5HA,IAAAC,gBAAA;AAQO,IAAM,WAAN,MAAM,UAAS;AAAA;AAAA;AAAA;AAAA,EAIlB,OAAO,eAAe,MAAM;AACxB,WAAO,SAAS,OAAO;AAAA,MACnB,UAAU,EAAE,OAAM,6BAAM,SAAQ,aAAa;AAAA,MAC7C,OAAM,6BAAM,iBAAgB,UAAS,mBAAmB;AAAA,IAC5D,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,qBAAqB;AACxB,WAAO;AAAA,MACH,aAAa;AAAA,MACb,OAAO;AAAA,QACH,cAAc;AAAA,QACd,KAAK;AAAA,QACL,KAAK;AAAA,QACL,SAAS,CAAC;AAAA,UACF,MAAM;AAAA,UACN,wBAAwB;AAAA,YACpB,SAAS;AAAA,YACT,MAAM;AAAA,YACN,YAAY;AAAA,cACR,YAAY;AAAA,gBACR,MAAM;AAAA,gBACN,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,WAAW;AAAA,cACf;AAAA,cACA,YAAY;AAAA,gBACR,MAAM;AAAA,gBACN,aAAa;AAAA,gBACb,SAAS;AAAA,cACb;AAAA,cACA,gBAAgB;AAAA,gBACZ,MAAM;AAAA,gBACN,aAAa;AAAA,cACjB;AAAA,cACA,KAAK;AAAA,gBACD,MAAM;AAAA,gBACN,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,WAAW;AAAA,cACf;AAAA,YACJ;AAAA,YACA,UAAU,CAAC,cAAc,cAAc,kBAAkB,KAAK;AAAA,YAC9D,sBAAsB;AAAA,UAC1B;AAAA,QACJ,CAAC;AAAA,MACT;AAAA,MACA,QAAQ;AAAA,QACJ,cAAc;AAAA,QACd,KAAK;AAAA,QACL,SAAS,CAAC;AAAA,UACF,MAAM;AAAA,UACN,wBAAwB;AAAA,YACpB,SAAS;AAAA,YACT,MAAM;AAAA,YACN,YAAY;AAAA,cACR,YAAY;AAAA,gBACR,MAAM;AAAA,gBACN,aAAa;AAAA,cACjB;AAAA,YACJ;AAAA,YACA,UAAU,CAAC,YAAY;AAAA,YACvB,sBAAsB;AAAA,UAC1B;AAAA,UACA,yBAAyB;AAAA;AAAA,QAC7B,CAAC;AAAA,MACT;AAAA,MACA,yBAAyB;AAAA,MACzB,gBAAgB;AAAA,QACZ,IAAI;AAAA,QACJ,mBAAmB,CAAC;AAAA,UACZ,IAAI;AAAA,UACJ,aAAa;AAAA,YACT,QAAQ;AAAA,cACJ;AAAA,gBACI,MAAM,CAAC,WAAW;AAAA,gBAClB,QAAQ;AAAA,kBACJ,MAAM;AAAA,kBACN,SAAS;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,cAAc,MAAM;AACvB,WAAO,QAAQ,OAAO;AAAA,MAClB,UAAU,EAAE,OAAM,6BAAM,SAAQ,aAAa;AAAA,MAC7C,OAAM,6BAAM,gBAAe,UAAS,kBAAkB;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,oBAAoB;AACvB,WAAO;AAAA,MACH,cAAc;AAAA,MACd,WAAW;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,kBAAkB;AACrB,WAAO;AAAA,MACH,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,OAAO;AAAA,QACH,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,oBAAoB;AAAA,UAChB,MAAM;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,oBAAoB;AAAA,UAChB,MAAM;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU,MAAM;AACzB,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,UAAU,MAAM,UAAS,cAAc,IAAI;AACjD,WAAO,IAAI,OAAO;AAAA,MACd,UAAU,EAAE,MAAM,OAAO,KAAK,KAAI,qCAAU,QAAO,aAAa;AAAA,MAChE,MAAM;AAAA,IACV,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,cAAc,MAAM;AAC7B,QAAI,QAAQ;AACZ,QAAI,6BAAM,QAAQ;AACd,YAAM,KAAK,MAAM,qBAAqB,OAAO;AAAA,QACzC,MAAM;AAAA,QACN,QAAQ,KAAK,OAAO;AAAA,QACpB,SAAS,KAAK,OAAO;AAAA,QACrB,MAAM;AAAA,UACF,QAAQ;AAAA,QACZ;AAAA,MACJ,CAAC;AACD,cAAQ,MAAM,GAAG,KAAK,EAAE,KAAK,KAAK,OAAO,CAAC;AAAA,IAC9C;AACA,WAAO;AAAA,MACH,YAAY,SAAS,WAAW,UAAU;AAAA,MAC1C,OAAO;AAAA,QACH,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,gBAAgB;AAAA,UACZ,cAAc;AAAA,UACd,cAAc;AAAA,UACd,kBAAkB;AAAA,UAClB,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,gBAAgB;AAAA,UACZ,YAAY;AAAA,QAChB;AAAA,MACJ;AAAA,MACA,QAAQ,CAAC,KAAK;AAAA,IAClB;AAAA,EACJ;AACJ;;;ACpMA,IAAAC,gBAAA;;;ACAA,IAAAC,iBAAA;;;ACAA,IAAAC,gBAAA;;;ACAA,IAAAC,gBAAA;AAIO,IAAM,eAAN,cAA2B,MAAM;AAAA,EAKpC,YAAY,QAAQ;AAChB,UAAM,OAAO,SAAS,EAAE,OAAO,OAAO,MAAM,CAAC;AAJjD;AAAA;AAEA;AAAA;AAGI,SAAK,OAAO,KAAK,YAAY;AAC7B,SAAK,eAAe,OAAO;AAC3B,SAAK,MAAM,OAAO;AAAA,EACtB;AACJ;;;ACfA,IAAAC,gBAAA;AAIO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EASrC,YAAY,QAAQ;AAChB,UAAM;AARV;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGI,SAAK,OAAO,KAAK,YAAY;AAC7B,SAAK,aAAa,OAAO;AACzB,SAAK,UAAU,OAAO;AACtB,SAAK,eAAe,OAAO;AAC3B,SAAK,MAAM,OAAO;AAAA,EACtB;AACJ;;;ACrBA,IAAAC,gBAAA;AAIO,IAAM,kBAAN,cAA8B,MAAM;AAAA,EACvC,YAAYC,UAAS;AACjB,UAAMA,QAAO;AACb,SAAK,OAAO,KAAK,YAAY;AAAA,EACjC;AACJ;AAKO,IAAM,kBAAN,cAA8B,gBAAgB;AACrD;AAKO,IAAM,8BAAN,cAA0C,gBAAgB;AACjE;;;ACrBA,IAAAC,gBAAA;AAKO,IAAM,oBAAN,cAAgC,MAAM;AAAA,EACzC,YAAY,QAAQ;AAChB,UAAM,OAAO,SAAS,EAAE,OAAO,OAAO,MAAM,CAAC;AAC7C,SAAK,OAAO,KAAK,YAAY;AAAA,EACjC;AACJ;AAKO,IAAM,2BAAN,cAAuC,kBAAkB;AAChE;AAKO,IAAM,gCAAN,cAA4C,kBAAkB;AACrE;AAKO,IAAM,iCAAN,cAA6C,kBAAkB;AACtE;AAKO,IAAM,oCAAN,cAAgD,kBAAkB;AACzE;AAKO,IAAM,wCAAN,cAAoD,kBAAkB;AAC7E;;;ACxCA,IAAAC,iBAAA;;;AC+gBA,IAAAC,gBAAA;AAWA,IAAYC;CAAZ,SAAYA,8BAA2B;AAOrC,EAAAA,6BAAA,gBAAA,IAAA;AASA,EAAAA,6BAAA,iBAAA,IAAA;AAQA,EAAAA,6BAAA,cAAA,IAAA;AAQA,EAAAA,6BAAA,sBAAA,IAAA;AAQA,EAAAA,6BAAA,sBAAA,IAAA;AACF,GAzCYA,iCAAAA,+BAA2B,CAAA,EAAA;;;ACxcvC,IAAAC,gBAAA;AAKO,IAAMC,+BAAmD;EAC9D,YAAwB;EACxB,uBAAwB,CAAA;EACxB,aAAwB;EACxB,qBAAwB,CAAA;;;;AC3F1B,IAAAC,gBAAA;AAiBM,IAAOC,OAAP,MAAO,KAAG;;;;;;;;;;;;EAyFd,YAAY,EAAE,QAAQ,IAAI,MAAM,OAAO,UAAU,OAAM,GAOtD;AACC,SAAK,MAAM,OAAO,MAAM,IAAI,EAAE;AAC9B,SAAK,SAAS;AACd,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,SAAS;EAChB;;;;;;;;;;;;;;;;;;;EAoBA,OAAO,MAAM,QAAc;AAEzB,QAAI,CAAC;AAAQ,aAAO;AAGpB,UAAM,QAAQ,KAAI,gBAAgB,KAAK,MAAM;AAG7C,QAAI,CAAC,SAAS,CAAC,MAAM;AAAQ,aAAO;AAGpC,UAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,SAAQ,IAAK,MAAM;AAGpD,UAAM,MAAW;MACf,KAAK,OAAO,MAAM,IAAI,EAAE;MACxB;MACA;;AAIF,QAAI;AAAM,UAAI,OAAO;AAGrB,QAAI;AAAO,UAAI,QAAQ,MAAM,MAAM,CAAC;AAGpC,QAAI;AAAU,UAAI,WAAW,SAAS,MAAM,CAAC;AAG7C,QAAI,OAAO;AACT,YAAM,eAAe,CAAA;AAErB,YAAM,aAAa,MAAM,MAAM,CAAC,EAAE,MAAM,GAAG;AAC3C,iBAAW,QAAQ,YAAY;AAE7B,cAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,GAAG;AACnC,qBAAa,GAAG,IAAI;;AAEtB,UAAI,SAAS;;AAGf,WAAO;EACT;;AArKgBA,KAAA,iBAAiB;AAEjBA,KAAA,sBAAsB;AAEtBA,KAAA,kBAAkB,qBAAqBA,KAAI,mBAAmB;AAE9DA,KAAA,oBAAoB,OAAOA,KAAI,eAAe,QAAQA,KAAI,eAAe;AAEzEA,KAAA,eAAe;AAEfA,KAAA,gBAAgB;AAEhBA,KAAA,mBAAmB;AAEnBA,KAAA,kBAAkB,IAAI,OACpC,kBAAkBA,KAAI,cAAc,WAAWA,KAAI,iBAAiB,YAAYA,KAAI,YAAY,aAAaA,KAAI,aAAa,gBAAgBA,KAAI,gBAAgB,IAAI;;;AClC1K,IAAAC,gBAAA;AAGM,IAAOC,YAAP,MAAO,kBAAiB,MAAK;;;;;;;EAOjC,YAAmB,MAAoBC,UAAe;AACpD,UAAMA,QAAO;AADI,SAAA,OAAA;AAEjB,SAAK,OAAO;AAIZ,WAAO,eAAe,MAAM,WAAW,SAAS;AAIhD,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,SAAQ;;EAE1C;;AAMF,IAAYC;CAAZ,SAAYA,eAAY;AAEtB,EAAAA,cAAA,YAAA,IAAA;AAGA,EAAAA,cAAA,oBAAA,IAAA;AAGA,EAAAA,cAAA,eAAA,IAAA;AAGA,EAAAA,cAAA,oBAAA,IAAA;AAGA,EAAAA,cAAA,0BAAA,IAAA;AAGA,EAAAA,cAAA,eAAA,IAAA;AAGA,EAAAA,cAAA,kBAAA,IAAA;AAGA,EAAAA,cAAA,wBAAA,IAAA;AAGA,EAAAA,cAAA,sBAAA,IAAA;AAGA,EAAAA,cAAA,kBAAA,IAAA;AAGA,EAAAA,cAAA,UAAA,IAAA;AAMA,EAAAA,cAAA,4BAAA,IAAA;AAGA,EAAAA,cAAA,0BAAA,IAAA;AACF,GA1CYA,kBAAAA,gBAAY,CAAA,EAAA;;;;;;AC7BxB,IAAAC,iBAAA;;;;;;ACEA,IAAAC,iBAAA;;;ACFA,IAAAC,gBAAA;IAAAC,mBAAqB;;;;;;ACgErB,IAAAC,gBAAA;AAeM,SAAUC,oBAAmB,iBAAgC;AACjE,SAAO,gBAAgB,eAAe,KAAK,gBAAgB,eAAe,gBAAgB,OAAO;AACnG;AA+BM,SAAUC,iBAAgB,KAAQ;AACtC,MAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AAC3C,WAAO;;AAGT,SAAO,OAAO,IAAI,OAAO,aAAa,MAAM;AAC9C;AAiFM,SAAUC,iBAAgB,OAAc;AAE5C,QAAM,aAAa,OAAO,UAAU,SAAS,KAAK,KAAK;AAEvD,QAAM,QAAQ,WAAW,MAAM,kBAAkB;AAEjD,QAAM,CAAC,GAAG,IAAI,IAAI;AAElB,SAAO;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA,IAAMC,eAAc,IAAI,YAAW;AACnC,IAAMC,eAAc,IAAI,YAAW;AAE7B,IAAOC,WAAP,MAAO,SAAO;EAIlB,YAAY,MAAW,QAAc;AACnC,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;EAEA,OAAO,YAAY,MAAiB;AAClC,WAAO,IAAI,SAAQ,MAAM,aAAa;EACxC;EAEA,OAAO,cAAc,MAAwB;AAC3C,QAAI,CAACC,iBAAgB,IAAI,GAAG;AAC1B,YAAM,IAAI,UAAU,sCAAsC;;AAE5D,WAAO,IAAI,SAAQ,MAAM,eAAe;EAC1C;EAEA,OAAO,QAAQ,MAAY;AACzB,WAAO,IAAI,SAAQ,MAAM,SAAS;EACpC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;;;;;;;EAQA,OAAO,aAAa,MAAkB;AACpC,WAAO,IAAI,SAAQ,MAAM,cAAc;EACzC;EAEA,OAAO,IAAI,MAAY;AACrB,QAAI,OAAO,SAAS,UAAU;AAC5B,YAAM,IAAI,UAAU,6BAA6B;;AAEnD,QAAI,KAAK,SAAS,MAAM,GAAG;AACzB,YAAM,IAAI,UAAU,mDAAmD;;AAEzE,WAAO,IAAI,SAAQ,MAAM,KAAK;EAChC;EAEA,OAAO,UAAU,MAAY;AAC3B,WAAO,IAAI,SAAQ,MAAM,WAAW;EACtC;EAEA,OAAO,OAAO,MAAyB;AACrC,WAAO,IAAI,SAAQ,MAAM,QAAQ;EACnC;EAEA,OAAO,OAAO,MAAY;AACxB,WAAO,IAAI,SAAQ,MAAM,QAAQ;EACnC;EAEA,OAAO,WAAW,MAAgB;AAChC,WAAO,IAAI,SAAQ,MAAM,YAAY;EACvC;EAEA,gBAAa;AACX,YAAQ,KAAK,QAAQ;MAEnB,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI,EAAE;;MAGzC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI,EAAE;;MAGzC,KAAK,gBAAgB;AACnB,cAAM,WAAWC,iBAAgB,KAAK,IAAI;AAC1C,YAAI,aAAa,eAAe;AAE9B,iBAAO,KAAK;mBACH,YAAY,OAAO,KAAK,IAAI,GAAG;AAExC,cAAIC,oBAAmB,KAAK,IAAI,GAAG;AAEjC,mBAAO,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,YAAY,KAAK,KAAK,aAAa,KAAK,KAAK,UAAU;iBAC1F;AAEL,mBAAO,KAAK,KAAK;;eAEd;AACL,gBAAM,IAAI,UAAU,GAAG,KAAK,MAAM,8DAA8D;;;MAIpG,KAAK,OAAO;AACV,eAAO,KAAK,aAAY,EAAG;;MAG7B,KAAK,UAAU;AACb,eAAO,KAAK,aAAY,EAAG;;MAG7B,KAAK,cAAc;AACjB,eAAO,KAAK,KAAK;;MAGnB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,mCAAmC;;EAE3F;EAEM,qBAAkB;;AACtB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AACpB,gBAAM,OAAO,MAAM,KAAK,YAAW;AACnC,iBAAO,MAAM,KAAK,YAAW;;QAG/B;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,mCAAmC;;IAExG,CAAC;;EAED,YAAS;AACP,YAAQ,KAAK,QAAQ;MAEnB,KAAK,cAAc;AACjB,eAAO,QAAQ,WAAW,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,+BAA+B;;EAEvF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,IAAI,WAAW,KAAK,IAAI;AACpC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,aAAa;AAChB,eAAO,KAAK,KAAK,UAAU,CAAC;;MAG9B,KAAK,cAAc;AACjB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,IAAI,WAAW,KAAK,IAAI;AACpC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,gBAAgB;AACnB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,UAAU;AACb,cAAM,SAAS,KAAK,UAAU,KAAK,IAAI;AACvC,cAAM,MAAML,aAAY,OAAO,MAAM;AACrC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,UAAU;AACb,cAAM,MAAMA,aAAY,OAAO,KAAK,IAAI;AACxC,eAAO,UAAU,WAAW,GAAG;;MAGjC,KAAK,cAAc;AACjB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEM,cAAW;;;AACf,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,gBAAM,SAAS,CAAA;;AAGf,qBAA0B,KAAA,MAAA,KAAAM,eAAC,KAAK,IAA2B,GAAA,IAAA,KAAA,MAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,CAAA,IAAA,KAAA,MAAE;AAAnC,mBAAA,GAAA;AAAA,mBAAA;AAAf,oBAAM,QAAK;AAEpB,qBAAO,KAAK,KAAK;;;;;;;;;;;;;AAKnB,gBAAM,OAAO,IAAI,KAAK,MAAM;AAE5B,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,4BAA4B;;;;EAIjG,QAAK;AAEH,UAAM,QAAQ,MAAM,KAAK,EAAE,QAAQ,IAAG,GAAI,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAEnF,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,SAAQ,WAAW,GAAG,EAAE,MAAK;;MAGtC,KAAK,aAAa;AAChB,cAAM,MAAM,KAAK,aAAY;AAC7B,eAAO,SAAQ,WAAW,GAAG,EAAE,MAAK;;MAGtC,KAAK,cAAc;AACjB,YAAI,MAAM;AACV,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACzC,iBAAO,MAAM,KAAK,KAAK,CAAC,CAAC;;AAE3B,eAAO;;MAGT;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,2BAA2B;;EAEnF;EAEA,cAAW;AACT,YAAQ,KAAK,QAAQ;MACnB,KAAK,aAAa;AAChB,eAAO,IAAI,KAAK,IAAI;;MAGtB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,iCAAiC;;EAEzF;EAEA,WAAQ;AACN,YAAQ,KAAK,QAAQ;MAEnB,KAAK,aAAa;AAChB,cAAM,MAAM,UAAU,WAAW,KAAK,IAAI;AAC1C,cAAM,OAAOL,aAAY,OAAO,GAAG;AACnC,eAAO,KAAK,MAAM,IAAI;;MAGxB,KAAK,UAAU;AACb,eAAO,KAAK,MAAM,KAAK,IAAI;;MAG7B,KAAK,cAAc;AACjB,cAAM,OAAOA,aAAY,OAAO,KAAK,IAAI;AACzC,eAAO,KAAK,MAAM,IAAI;;MAGxB;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,8BAA8B;;EAEtF;EAEM,gBAAa;;AACjB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,gBAAM,OAAO,MAAM,KAAK,cAAa;AAIrC,gBAAM,OAAO,KAAK,MAAM,IAAI;AAI5B,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,8BAA8B;;IAEnG,CAAC;;EAED,WAAQ;AACN,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAClB,eAAOA,aAAY,OAAO,KAAK,IAAI;;MAGrC,KAAK,aAAa;AAChB,cAAM,MAAM,UAAU,WAAW,KAAK,IAAI;AAC1C,eAAOA,aAAY,OAAO,GAAG;;MAG/B,KAAK,UAAU;AACb,eAAO,KAAK,UAAU,KAAK,IAAI;;MAGjC,KAAK,cAAc;AACjB,eAAOA,aAAY,OAAO,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,8BAA8B;;EAEtF;EAEM,gBAAa;;;AACjB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AAEpB,cAAI,MAAM;;AAGV,qBAA0B,KAAA,MAAA,KAAAK,eAAC,KAAK,IAA2B,GAAA,IAAA,KAAA,MAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,CAAA,IAAA,KAAA,MAAE;AAAnC,mBAAA,GAAA;AAAA,mBAAA;AAAf,oBAAM,QAAK;AAEpB,kBAAI,OAAO,UAAU;AACnB,uBAAO;;AAKP,uBAAOL,aAAY,OAAO,OAAO,EAAE,QAAQ,KAAI,CAAE;;;;;;;;;;;;;AAKrD,iBAAOA,aAAY,OAAO,QAAW,EAAE,QAAQ,MAAK,CAAE;AAGtD,iBAAO;;QAGT;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,8BAA8B;;;;EAInG,eAAY;AACV,YAAQ,KAAK,QAAQ;MAEnB,KAAK,eAAe;AAGlB,eAAO,IAAI,WAAW,KAAK,IAAI;;MAGjC,KAAK,WAAW;AACd,eAAO,QAAQ,WAAW,KAAK,IAAI;;MAGrC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC,KAAK,aAAa;AAChB,eAAO,UAAU,WAAW,KAAK,IAAI;;MAGvC,KAAK,gBAAgB;AACnB,cAAM,WAAWG,iBAAgB,KAAK,IAAI;AAC1C,YAAI,aAAa,cAAc;AAG7B,iBAAO,KAAK;mBACH,aAAa,eAAe;AAGrC,iBAAO,IAAI,WAAW,KAAK,IAAI;mBACtB,YAAY,OAAO,KAAK,IAAI,GAAG;AAExC,iBAAO,IAAI,WAAW,KAAK,KAAK,QAAQ,KAAK,KAAK,YAAY,KAAK,KAAK,UAAU;eAC7E;AACL,gBAAM,IAAI,UAAU,GAAG,KAAK,MAAM,8DAA8D;;;MAIpG,KAAK,OAAO;AACV,cAAM,MAAM,IAAI,WAAW,KAAK,KAAK,SAAS,CAAC;AAC/C,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC5C,gBAAM,YAAY,SAAS,KAAK,KAAK,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE;AAC5D,cAAI,MAAM,SAAS,GAAG;AACpB,kBAAM,IAAI,UAAU,0CAA0C;;AAEhE,cAAI,IAAI,CAAC,IAAI;;AAEf,eAAO;;MAGT,KAAK,UAAU;AACb,cAAM,SAAS,KAAK,UAAU,KAAK,IAAI;AACvC,eAAOJ,aAAY,OAAO,MAAM;;MAGlC,KAAK,UAAU;AACb,eAAOA,aAAY,OAAO,KAAK,IAAI;;MAGrC;AACE,cAAM,IAAI,UAAU,mBAAmB,KAAK,MAAM,kCAAkC;;EAE1F;EAEM,oBAAiB;;AACrB,cAAQ,KAAK,QAAQ;QACnB,KAAK,iBAAiB;AACpB,gBAAM,cAAc,MAAM,KAAK,mBAAkB;AACjD,iBAAO,IAAI,WAAW,WAAW;;QAGnC;AACE,gBAAM,IAAI,UAAU,gCAAgC,KAAK,MAAM,kCAAkC;;IAEvG,CAAC;;;;;AC1bH,IAAAO,gBAAA;AA6BM,IAAOC,cAAP,MAAO,YAAU;;;;;;;;;;EAoBd,OAAO,UAAU,SAIvB;;AACC,QAAI,EAAE,MAAM,MAAM,KAAI,IAAK;AAE3B,QAAI,EAAE,OAAO,CAAC,OAAO,OAAO;AAC1B,YAAM,IAAI,MAAM,wDAAwD;;AAI1E,WAAO,YAAW,WAAW,IAAI,IAAK,IAAI,OAAO,YAAW,WAAW,IAAI,IAAK;AAGhF,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,4BAA2B,KAAA,QAAQ,UAAI,QAAA,OAAA,SAAA,KAAI,QAAQ,IAAI,EAAE;;AAI3E,UAAM,eAAe,eAAO,eAAe,IAAI;AAC/C,UAAM,iBAAiB,IAAI,WAAW,eAAe,KAAK,UAAU;AACpE,mBAAe,IAAI,MAAM,YAAY;AAGrC,mBAAO,SAAS,MAAM,cAAc;AAEpC,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,aAAY,IAAK;AACzB,UAAM,CAAC,MAAM,CAAC,IAAI,eAAO,OAAO,YAAY;AAE5C,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,KAAI,IAAK;AAGjB,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO;EACT;;;;;;;;EASO,OAAO,gBAAgB,SAE7B;AACC,UAAM,EAAE,KAAI,IAAK;AAGjB,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO;EACT;;;;;;EAOO,OAAO,cAAc,OAA2C;AACrE,gBAAW,WAAW,IAAI,MAAM,MAAM,MAAM,IAAI;AAChD,gBAAW,WAAW,IAAI,MAAM,MAAM,MAAM,IAAI;EAClD;;;;;;;EAQO,OAAO,aAAa,SAE1B;AACC,UAAM,EAAE,aAAY,IAAK;AACzB,UAAM,CAAC,MAAM,cAAc,IAAI,eAAO,OAAO,YAAY;AAGzD,UAAM,OAAO,YAAW,WAAW,IAAI,IAAI;AAC3C,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;;AAGnD,WAAO,EAAE,MAAM,MAAM,aAAa,MAAM,cAAc,GAAG,KAAI;EAC/D;;AArIOA,YAAA,aAAa,oBAAI,IAAG;AAKpBA,YAAA,aAAa,oBAAI,IAAG;AAoI7BA,YAAW,cAAc,EAAE,MAAM,KAAM,MAAM,cAAa,CAAE;AAC5DA,YAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,eAAc,CAAE;AAC/DA,YAAW,cAAc,EAAE,MAAM,KAAM,MAAM,aAAY,CAAE;AAC3DA,YAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,cAAa,CAAE;AAC9DA,YAAW,cAAc,EAAE,MAAM,KAAM,MAAM,gBAAe,CAAE;AAC9DA,YAAW,cAAc,EAAE,MAAM,MAAQ,MAAM,iBAAgB,CAAE;;;AC/KjE,IAAAC,gBAAA;AAkCM,SAAUC,2BAA0B,KAA4B;AACpE,SAAO,KAAK,GAAG,EAAE,QAAQ,SAAM;AAC7B,QAAI,IAAI,GAAG,MAAM,QAAW;AAC1B,aAAO,IAAI,GAAG;eACL,OAAO,IAAI,GAAG,MAAO,UAAU;AACxC,MAAAA,2BAA0B,IAAI,GAAG,CAA4B;;EAEjE,CAAC;AACH;;;;ACxCA,IAAAC,gBAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DhB,IAAOC,eAAP,MAAkB;EAAxB,cAAA;AAIU,SAAA,QAAmB,oBAAI,IAAG;EAoEpC;;;;;;EA7DQ,QAAK;;AACT,WAAK,MAAM,MAAK;IAClB,CAAC;;;;;;EAMK,QAAK;;IAEX,CAAC;;;;;;;;EAQK,OAAO,IAAK;;AAChB,aAAO,KAAK,MAAM,OAAO,EAAE;IAC7B,CAAC;;;;;;;;EAQK,IAAI,IAAK;;AACb,aAAO,KAAK,MAAM,IAAI,EAAE;IAC1B,CAAC;;;;;;;;EAQK,IAAI,IAAK;;AACb,aAAO,KAAK,MAAM,IAAI,EAAE;IAC1B,CAAC;;;;;;;EAOK,OAAI;;AACR,aAAO,MAAM,KAAK,KAAK,MAAM,OAAM,CAAE;IACvC,CAAC;;;;;;;;;EASK,IAAI,IAAO,KAAM;;AACrB,WAAK,MAAM,IAAI,IAAI,GAAG;IACxB,CAAC;;;;;;;;;ACnIH,IAAAC,0BAAyB;AAIzB,IAAAC,0BAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACanB,IAAOC,UAAP,MAAa;;;;;;;;;;;;;;;;;;;;EAoBV,OAAa,OAAO,EAAE,KAAI,GAEhC;;AACC,YAAM,OAAO,OAAO,IAAI;AAExB,aAAO;IACT,CAAC;;;;;AC7CH,IAAAC,iBAAA;AAGM,IAAgBC,mBAAhB,MAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuB/B,IAAOC,iBAAP,cAA6BC,iBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BnC,OAAO,EAAE,WAAW,KAAI,GAAoB;;AACvD,cAAQ,WAAW;QAEjB,KAAK,WAAW;AACd,gBAAM,OAAO,MAAMC,QAAO,OAAO,EAAE,KAAI,CAAE;AACzC,iBAAO;;;IAIb,CAAC;;;;;;;;;;;;;;AC/DH,IAAAC,iBAAA;AAUM,SAAUC,cAAa,KAA2B;AAOtD,QAAM,cAAc,CAACC,SAAuD;AAC1E,QAAIA,SAAQ,QAAQ,OAAOA,SAAQ,YAAY,CAAC,MAAM,QAAQA,IAAG,GAAG;AAClE,YAAM,aAAa,OAAO,KAAKA,IAAG,EAAE,KAAI;AACxC,YAAMC,aAAoC,CAAA;AAC1C,iBAAW,OAAO,YAAY;AAE5B,QAAAA,WAAU,GAAG,IAAI,YAAYD,KAAI,GAAG,CAAC;;AAEvC,aAAOC;;AAET,WAAOD;EACT;AAGA,QAAM,YAAY,YAAY,GAAG;AACjC,SAAO,KAAK,UAAU,SAAS;AACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBO,IAAME,sBAAqB;AA4c5B,SAAgBC,sBAAqB,EAAE,IAAG,GAE/C;;AAIC,UAAM,UAAU,IAAI;AACpB,QAAI;AACJ,QAAI,YAAY,MAAM;AACpB,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,IAAI,EAAC;eACvD,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,IAAG;eAC/B,YAAY,OAAO;AAC5B,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;eAC7C,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;WAC7C;AACL,YAAM,IAAI,MAAM,yBAAyB,OAAO,EAAE;;AAEpD,IAAAC,2BAA0B,aAAa;AAIvC,UAAM,gBAAgBC,cAAa,aAAa;AAKhD,UAAM,YAAYC,SAAQ,OAAO,aAAa,EAAE,aAAY;AAC5D,UAAM,SAAS,MAAMC,QAAO,OAAO,EAAE,MAAM,UAAS,CAAE;AAGtD,UAAM,aAAaD,SAAQ,WAAW,MAAM,EAAE,YAAW;AAEzD,WAAO;EACT,CAAC;;AAQK,SAAUE,gBAAe,KAAY;AACzC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO,OAAO,OAAO;AAAM,WAAO;AACxE,MAAI,IAAI,QAAQ;AAAM,WAAO;AAC7B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAUC,eAAc,KAAY;AACxC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO;AAAM,WAAO;AAC1D,MAAI,OAAO;AAAK,WAAO;AACvB,MAAI,IAAI,QAAQ;AAAM,WAAO;AAC7B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAsBM,SAAUC,iBAAgB,KAAY;AAC1C,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO,OAAO,OAAO;AAAM,WAAO;AACxE,MAAI,IAAI,QAAQ;AAAO,WAAO;AAC9B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAUC,gBAAe,KAAY;AACzC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAC5C,MAAI,OAAO;AAAK,WAAO;AACvB,MAAI,EAAE,SAAS,OAAO,SAAS,OAAO,OAAO;AAAM,WAAO;AAC1D,MAAI,IAAI,QAAQ;AAAO,WAAO;AAC9B,MAAI,OAAO,IAAI,MAAM;AAAU,WAAO;AACtC,SAAO;AACT;AAQM,SAAUC,cAAa,KAAY;AACvC,MAAI,CAAC,OAAO,OAAO,QAAQ;AAAU,WAAO;AAE5C,QAAM,MAAO,IAAwB;AAErC,UAAQ,KAAK;IACX,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO,OAAO;IAChB,KAAK;AACH,aAAO,OAAO;IAChB;AACE,aAAO;;AAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1hBM,IAAOC,aAAP,MAAO,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkDb,OAAa,sBAAsB,EAAE,UAAS,GAEpD;;AAEC,YAAM,kBAAkB,UAAU,UAAU,YAAY,SAAS;AAEjE,UAAI,gBAAgB,SAAQ,GAAI;AAE9B,cAAM,0BAA0B,gBAAgB,WAAU;AAG1D,cAAM,oBAAoB,wBAAwB,kBAAiB;AAEnE,eAAO;aAEF;AAEL,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAMC,SAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,iBAAW,MAAM,MAAMC,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,eAAc,CAAE;AAGxE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,IAAI;IAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG9E,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,6BAA6B,EAAE,aAAY,GAE9D;;AAGC,YAAM,kBAAkB,UAAU,UAAU,QAAQ,YAAY;AAIhE,YAAM,mBAAmB,gBAAgB,kBAAiB;AAE1D,aAAQ;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,oBAAoB,EAAE,eAAc,GAEvD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,KAAK;IAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,UAAU,MAAM,iBAAgB;AAGxD,YAAM,aAAa,MAAM,WAAU,kBAAkB,EAAE,gBAAe,CAAE;AAGxE,iBAAW,MAAM,MAAMA,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAEC,gBAAe,GAAG,KAAK,IAAI,QAAQ,cAAc;AACrD,cAAM,IAAI,MAAM,6DAA6D;;AAI/E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAMF,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAACC,gBAAe,UAAU,GAAG;AAC/B,cAAM,IAAI,MAAM,4DAA4D;;AAI9E,YAAM,kBAAkBF,SAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,EAAEI,eAAc,SAAS,KAAK,UAAU,IAAI;AAC9C,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,SAAS,IAAI,WAAW,CAAC,CAAI,CAAC;AACpC,YAAM,IAAIJ,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AACrD,YAAM,IAAIA,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAGrD,YAAM,iBAAiB,IAAI,WAAW,CAAC,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,oGAAoG;;AAItH,YAAM,mBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACtF,YAAM,kBAAkB,MAAM,WAAU,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAGlF,YAAM,eAAe,UAAU,gBAAgB,kBAAkB,iBAAiB,IAAI;AAItF,aAAO,aAAa,MAAM,CAAC;IAC7B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,KAAK,EAAE,MAAM,IAAG,GACxB;;AAGV,YAAM,kBAAkB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG7E,YAAM,SAAS,OAAO,IAAI;AAI1B,YAAM,kBAAkB,UAAU,KAAK,QAAQ,eAAe;AAG9D,YAAM,YAAY,gBAAgB,kBAAiB;AAEnD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,mBAAmB,EAAE,gBAAe,GAEvD;;AACC,aAAO,UAAU,MAAM,kBAAkB,eAAe;IAC1D,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,WAAU,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAG1E,YAAM,SAAS,OAAO,IAAI;AAO1B,YAAMK,WAAU,UAAU,OAAO,WAAW,QAAQ,gBAAgB,EAAE,MAAM,MAAK,CAAE;AAEnF,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCO,OAAa,cAAc,EAAE,SAAQ,GAE5C;;AAEC,UAAI,SAAS,eAAe,IAAI;AAC9B,mBAAW,UAAU,aAAa,QAAQ;;AAI5C,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,QAAQ;AAGxD,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AACrC,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AAErC,aAAO,EAAE,GAAG,EAAC;IACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvwBG,IAAOC,aAAP,MAAO,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkDb,OAAa,sBAAsB,EAAE,UAAS,GAEpD;;AAEC,YAAM,kBAAkB,UAAU,UAAU,YAAY,SAAS;AAEjE,UAAI,gBAAgB,SAAQ,GAAI;AAE9B,cAAM,0BAA0B,gBAAgB,WAAU;AAG1D,cAAM,oBAAoB,wBAAwB,kBAAiB;AAEnE,eAAO;aAEF;AAEL,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAMC,SAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,iBAAW,MAAM,MAAMC,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,eAAc,CAAE;AAGxE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,IAAI;IAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG9E,YAAM,QAAQ,MAAM,WAAU,cAAc,EAAE,UAAU,gBAAe,CAAE;AAGzE,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;QAC7C,GAAMA,SAAQ,WAAW,MAAM,CAAC,EAAE,YAAW;;AAI/C,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,6BAA6B,EAAE,aAAY,GAE9D;;AAGC,YAAM,kBAAkB,UAAU,UAAU,QAAQ,YAAY;AAIhE,YAAM,mBAAmB,gBAAgB,kBAAiB;AAE1D,aAAQ;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,oBAAoB,EAAE,eAAc,GAEvD;;AAEC,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,aAAO,MAAM,WAAW,KAAK;IAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,UAAU,MAAM,iBAAgB;AAGxD,YAAM,aAAa,MAAM,WAAU,kBAAkB,EAAE,gBAAe,CAAE;AAGxE,iBAAW,MAAM,MAAMA,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAEC,gBAAe,GAAG,KAAK,IAAI,QAAQ,UAAU;AACjD,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAMF,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAACC,gBAAe,UAAU,GAAG;AAC/B,cAAM,IAAI,MAAM,4DAA4D;;AAI9E,YAAM,kBAAkBF,SAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,EAAEI,eAAc,SAAS,KAAK,UAAU,IAAI;AAC9C,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,SAAS,IAAI,WAAW,CAAC,CAAI,CAAC;AACpC,YAAM,IAAIJ,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AACrD,YAAM,IAAIA,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAGrD,YAAM,iBAAiB,IAAI,WAAW,CAAC,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,oGAAoG;;AAItH,YAAM,mBAAmB,MAAM,WAAU,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACtF,YAAM,kBAAkB,MAAM,WAAU,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAGlF,YAAM,eAAe,UAAU,gBAAgB,kBAAkB,iBAAiB,IAAI;AAItF,aAAO,aAAa,MAAM,CAAC;IAC7B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCM,OAAa,KAAK,EAAE,MAAM,IAAG,GACxB;;AAGV,YAAM,kBAAkB,MAAM,WAAU,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG7E,YAAM,SAAS,OAAO,IAAI;AAI1B,YAAM,kBAAkB,UAAU,KAAK,QAAQ,eAAe;AAG9D,YAAM,YAAY,gBAAgB,kBAAiB;AAEnD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,mBAAmB,EAAE,gBAAe,GAEvD;;AACC,aAAO,UAAU,MAAM,kBAAkB,eAAe;IAC1D,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,UAAU,gBAAgB,QAAQ,cAAc;AAG9D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,WAAU,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAG1E,YAAM,SAAS,OAAO,IAAI;AAO1B,YAAMK,WAAU,UAAU,OAAO,WAAW,QAAQ,gBAAgB,EAAE,MAAM,MAAK,CAAE;AAEnF,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCO,OAAa,cAAc,EAAE,SAAQ,GAE5C;;AAEC,UAAI,SAAS,eAAe,IAAI;AAC9B,mBAAW,UAAU,aAAa,QAAQ;;AAI5C,YAAM,QAAQ,UAAU,gBAAgB,QAAQ,QAAQ;AAGxD,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AACrC,YAAM,IAAI,gBAAgB,MAAM,GAAG,EAAE;AAErC,aAAO,EAAE,GAAG,EAAC;IACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3yBG,IAAOC,kBAAP,cAA8BC,iBAAe;;;;;;;;;;;;;;;;;;;;;EAwBpC,iBAAiB,EAAE,IAAG,GACX;;AAEtB,UAAI,CAACC,gBAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,gBAAM,YAAY,MAAMC,WAAU,iBAAiB,EAAE,IAAG,CAAE;AAC1D,oBAAU,MAAM;AAChB,iBAAO;;QAGT,KAAK,SAAS;AACZ,gBAAM,YAAY,MAAMC,WAAU,iBAAiB,EAAE,IAAG,CAAE;AAC1D,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;EAgBY,YAAY,EAAE,UAAS,GACZ;;AAEtB,cAAQ,WAAW;QAEjB,KAAK;QACL,KAAK,aAAa;AAChB,gBAAM,aAAa,MAAMD,WAAU,YAAW;AAC9C,qBAAW,MAAM;AACjB,iBAAO;;QAGT,KAAK;QACL,KAAK,aAAa;AAChB,gBAAM,aAAa,MAAMC,WAAU,YAAW;AAC9C,qBAAW,MAAM;AACjB,iBAAO;;;IAGb,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BY,aAAa,EAAE,IAAG,GACX;;AAElB,UAAI,CAACF,gBAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,gBAAM,YAAY,MAAMC,WAAU,aAAa,EAAE,IAAG,CAAE;AACtD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,KAAK,SAAS;AACZ,gBAAM,YAAY,MAAMC,WAAU,aAAa,EAAE,IAAG,CAAE;AACtD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BY,KAAK,EAAE,KAAK,KAAI,GACjB;;AAEV,UAAI,CAACF,gBAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,iBAAO,MAAMC,WAAU,KAAK,EAAE,KAAK,KAAI,CAAE;;QAG3C,KAAK,SAAS;AACZ,iBAAO,MAAMC,WAAU,KAAK,EAAE,KAAK,KAAI,CAAE;;QAG3C,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BY,OAAO,EAAE,KAAK,WAAW,KAAI,GAC5B;;AAEZ,UAAI,CAACC,eAAc,GAAG;AAAG,cAAM,IAAI,UAAU,kEAAkE;AAE/G,cAAQ,IAAI,KAAK;QAEf,KAAK,aAAa;AAChB,iBAAO,MAAMF,WAAU,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGxD,KAAK,SAAS;AACZ,iBAAO,MAAMC,WAAU,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGxD,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClNG,IAAOE,WAAP,MAAO,SAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BX,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,iBAAkB,QAAQ,aAAa,eAAe;AAG5D,YAAM,aAAkB;QACtB,KAAM;QACN,GAAMC,SAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,KAAM;QACN,GAAMA,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,iBAAW,MAAM,MAAMC,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;EAuBM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,SAAQ,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG5E,YAAM,iBAAkB,QAAQ,aAAa,eAAe;AAG5D,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,0BAA0B,EAAE,WAAU,GAEzD;;AAEC,YAAM,yBAAyB,MAAM,SAAQ,kBAAkB,EAAE,WAAU,CAAE;AAG7E,YAAM,wBAAwB,wBAAwB,sBAAsB;AAG5E,YAAM,uBAAuB,OAAO,aAAa,qBAAqB;AAGtE,YAAM,mBAAwB;QAC5B,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,qBAAqB,EAAE,YAAW;QAC3D,GAAMA,SAAQ,WAAW,oBAAoB,EAAE,YAAW;;AAI5D,uBAAiB,MAAM,MAAMC,sBAAqB,EAAE,KAAK,iBAAgB,CAAE;AAE3E,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBM,OAAa,yBAAyB,EAAE,UAAS,GAEvD;;AAEC,YAAM,wBAAwB,MAAM,SAAQ,iBAAiB,EAAE,UAAS,CAAE;AAG1E,YAAMC,WAAU,MAAM,SAAQ,kBAAkB,EAAE,gBAAgB,sBAAqB,CAAE;AACzF,UAAI,CAACA,UAAS;AACZ,cAAM,IAAI,MAAM,8BAA8B;;AAIhD,YAAM,uBAAuB,uBAAuB,qBAAqB;AAGzE,YAAM,kBAAuB;QAC3B,KAAM;QACN,KAAM;QACN,GAAMF,SAAQ,WAAW,oBAAoB,EAAE,YAAW;;AAI5D,sBAAgB,MAAM,MAAMC,sBAAqB,EAAE,KAAK,gBAAe,CAAE;AAEzE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,QAAQ,MAAM,iBAAgB;AAGtD,YAAM,aAAa,MAAM,SAAQ,kBAAkB,EAAE,gBAAe,CAAE;AAGtE,iBAAW,MAAM,MAAMA,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAEE,iBAAgB,GAAG,KAAK,IAAI,QAAQ,YAAY;AACpD,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAMH,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;EAwBF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAACE,iBAAgB,UAAU,GAAG;AAChC,cAAM,IAAI,MAAM,2DAA2D;;AAI7E,YAAM,kBAAkBH,SAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;EAqBM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,CAACK,gBAAe,SAAS,GAAG;AAC9B,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,YAAM,iBAAiBL,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAElE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BM,OAAa,KAAK,EAAE,KAAK,KAAI,GACxB;;AAGV,YAAM,kBAAkB,MAAM,SAAQ,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG3E,YAAM,YAAY,QAAQ,KAAK,MAAM,eAAe;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,kBAAkB,EAAE,eAAc,GAErD;;AACC,UAAI;AAEF,cAAM,QAAQ,QAAQ,cAAc,QAAQ,cAAc;AAG1D,cAAM,eAAc;eAEd,OAAY;AAClB,eAAO;;AAGT,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,OAAO,EAAE,KAAK,WAAW,KAAI,GACnC;;AAGZ,YAAM,iBAAiB,MAAM,SAAQ,iBAAiB,EAAE,WAAW,IAAG,CAAE;AAGxE,YAAME,WAAU,QAAQ,OAAO,WAAW,MAAM,cAAc;AAE9D,aAAOA;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7fG,IAAOI,kBAAP,cAA8BC,iBAAe;;;;;;;;;;;;;;;;;;;;;EAwBpC,iBAAiB,EAAE,IAAG,GACX;;AAEtB,UAAI,CAACC,iBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,gBAAM,YAAY,MAAMC,SAAQ,iBAAiB,EAAE,IAAG,CAAE;AACxD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;EAgBK,YAAY,EAAE,UAAS,GACL;;AAEtB,cAAQ,WAAW;QAEjB,KAAK,WAAW;AACd,gBAAM,aAAa,MAAMA,SAAQ,YAAW;AAC5C,qBAAW,MAAM;AACjB,iBAAO;;;IAGb,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BY,aAAa,EAAE,IAAG,GACX;;AAElB,UAAI,CAACD,iBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,gBAAM,YAAY,MAAMC,SAAQ,aAAa,EAAE,IAAG,CAAE;AACpD,oBAAU,MAAM;AAChB,iBAAO;;QAGT,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BY,KAAK,EAAE,KAAK,KAAI,GACjB;;AAEV,UAAI,CAACD,iBAAgB,GAAG;AAAG,cAAM,IAAI,UAAU,oEAAoE;AAEnH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,iBAAO,MAAMC,SAAQ,KAAK,EAAE,KAAK,KAAI,CAAE;;QAGzC,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BY,OAAO,EAAE,KAAK,WAAW,KAAI,GAC5B;;AAEZ,UAAI,CAACC,gBAAe,GAAG;AAAG,cAAM,IAAI,UAAU,mEAAmE;AAEjH,cAAQ,IAAI,KAAK;QAEf,KAAK,WAAW;AACd,iBAAO,MAAMD,SAAQ,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;;QAGtD,SAAS;AACP,gBAAM,IAAI,MAAM,sBAAsB,IAAI,GAAG,EAAE;;;IAGrD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MH,IAAME,uBAAsB;EAC1B,WAAW;IACT,gBAAiBC;IACjB,OAAiB,CAAC,SAAS;;EAE7B,aAAa;IACX,gBAAiBC;IACjB,OAAiB,CAAC,UAAU,WAAW;;EAEzC,aAAa;IACX,gBAAiBA;IACjB,OAAiB,CAAC,SAAS,WAAW;;EAExC,WAAW;IACT,gBAAiBC;IACjB,OAAiB,CAAC,SAAS;;;AA0DzB,IAAOC,mBAAP,MAAsB;EAsB1B,YAAY,QAA8B;;AAZlC,SAAA,sBAAuF,oBAAI,IAAG;AAapG,SAAK,aAAY,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,cAAQ,QAAA,OAAA,SAAA,KAAI,IAAIC,aAAW;EACtD;;;;;;;;;;;;;;;;;;;;;;;;;;EA2Ba,OAAO,EAAE,WAAW,KAAI,GACR;;AAG3B,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,OAAO,MAAM,OAAO,OAAO,EAAE,WAAW,KAAI,CAAE;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;EAqBY,UAAU,EAAE,OAAM,GACX;;AAGlB,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAEtD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;EAkBY,YAAY,EAAE,UAAS,GACF;;AAGhC,YAAM,eAAe,KAAK,aAAa,EAAE,UAAS,CAAE;AAGpD,YAAM,MAAM,MAAM,aAAa,YAAY,EAAE,UAAS,CAAE;AAExD,WAAI,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,SAAQ,QAAW;AAC1B,cAAM,IAAI,MAAM,mDAAmD;;AAIrE,YAAM,SAAS,GAAGC,mBAAkB,GAAG,IAAI,GAAG;AAG9C,YAAM,KAAK,UAAU,IAAI,QAAQ,GAAG;AAEpC,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BY,UAAU,EAAE,IAAG,GACR;;AAGlB,YAAM,gBAAgB,MAAMC,sBAAqB,EAAE,KAAK,IAAG,CAAE;AAG7D,YAAM,SAAS,GAAGD,mBAAkB,GAAG,aAAa;AAEpD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;EAkBY,aAAa,EAAE,OAAM,GACX;;AAGrB,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAGtD,YAAM,YAAY,KAAK,iBAAiB,EAAE,KAAK,WAAU,CAAE;AAG3D,YAAM,eAAe,KAAK,aAAa,EAAE,UAAS,CAAE;AAGpD,YAAM,YAAY,MAAM,aAAa,aAAa,EAAE,KAAK,WAAU,CAAE;AAErE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BY,UAAU,EAAE,IAAG,GACR;;;AAElB,UAAI,CAACE,cAAa,GAAG;AAAG,cAAM,IAAI,UAAU,4DAA4D;AAGxG,YAAM,aAAa,gBAAgB,GAAG;AAGtC,OAAA,KAAA,WAAW,SAAG,QAAA,OAAA,SAAA,KAAd,WAAW,MAAQ,MAAMD,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAGjE,YAAM,SAAS,MAAM,KAAK,UAAU,EAAE,KAAK,WAAU,CAAE;AAGvD,YAAM,KAAK,UAAU,IAAI,QAAQ,UAAU;AAE3C,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BI,KAAK,EAAE,QAAQ,KAAI,GACjB;;AAGb,YAAM,aAAa,MAAM,KAAK,cAAc,EAAE,OAAM,CAAE;AAGtD,YAAM,YAAY,KAAK,iBAAiB,EAAE,KAAK,WAAU,CAAE;AAG3D,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,YAAY,OAAO,KAAK,EAAE,MAAM,KAAK,WAAU,CAAE;AAEvD,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BY,OAAO,EAAE,KAAK,WAAW,KAAI,GACzB;;AAGf,YAAM,YAAY,KAAK,iBAAiB,EAAE,IAAG,CAAE;AAG/C,YAAM,SAAS,KAAK,aAAa,EAAE,UAAS,CAAE;AAG9C,YAAM,mBAAmB,OAAO,OAAO,EAAE,KAAK,WAAW,KAAI,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;EAsBO,aAAa,EAAE,UAAS,GAE/B;;AAEC,UAAM,2BAA0B,KAAAP,qBAAoB,SAAS,OAAC,QAAA,OAAA,SAAA,SAAA,GAAG,gBAAgB;AACjF,QAAI,CAAC,yBAAyB;AAC5B,YAAM,IAAI,MAAM,4BAA4B,SAAS,EAAE;;AAIzD,QAAI,CAAC,KAAK,oBAAoB,IAAI,uBAAuB,GAAG;AAE1D,WAAK,oBAAoB,IAAI,yBAAyB,IAAI,wBAAuB,CAAE;;AAIrF,WAAO,KAAK,oBAAoB,IAAI,uBAAuB;EAC7D;;;;;;;;;;;;;;;;;;;;;EAsBQ,iBAAiB,EAAE,IAAG,GAE7B;AACC,UAAM,cAAc,IAAI;AACxB,UAAM,cAAc,IAAI;AAExB,eAAW,WAAWA,sBAAqB;AACzC,YAAM,gBAAgBA,qBAAoB,OAA6B;AACvE,UAAI,eAAe,cAAc,MAAM,SAAS,WAAW,GAAG;AAC5D,eAAO;iBACE,eAAe,cAAc,MAAM,SAAS,WAAW,GAAG;AACnE,eAAO;;;AAIX,UAAM,IAAI,MAAM,8DAA8D,WAAW,SAAS,WAAW,EAAE;EACjH;;;;;;;;;;;;;;;;EAiBc,cAAc,EAAE,OAAM,GAEnC;;AAEC,YAAM,aAAa,MAAM,KAAK,UAAU,IAAI,MAAM;AAElD,UAAI,CAAC,YAAY;AACf,cAAM,IAAI,MAAM,kBAAkB,MAAM,EAAE;;AAG5C,aAAO;IACT,CAAC;;;;;ACxhBH,IAAAS,iBAAA;SAAAA,gBAAA;+BAAAC;EAAA,0BAAAC;EAAA,8CAAAC;EAAA,4BAAAC;EAAA,mBAAAC;EAAA,kBAAAC;;AAAA,IAAAC,iBAAA;AAmBM,SAAUC,uBAAsB,QAGrC;AACC,MAAI,CAAC,UAAU,OAAO,aAAa,UAAa,OAAO,aAAa,QAAW;AAC7E,UAAM,IAAI,UAAU,iEAAiE;;AAEvF,QAAM,EAAE,UAAU,SAAQ,IAAK;AAC/B,MAAI,EAAE,YAAY,WAAW;AAC3B,UAAM,IAAI,UAAU,gCAAgC,QAAQ,GAAG;;AAEnE;AAkBM,SAAUC,oBAAmB,QAElC;AACC,MAAI,CAAC,UAAU,OAAO,aAAa,UAAa,OAAO,sBAAsB,QAAW;AACtF,UAAM,IAAI,UAAU,wEAAwE;;AAE9F,QAAM,EAAE,UAAU,kBAAiB,IAAK;AACxC,MACG,MAAM,QAAQ,iBAAiB,KAAK,CAAC,kBAAkB,SAAS,QAAQ,KACxE,6BAA6B,OAAO,CAAC,kBAAkB,IAAI,QAAQ,KACnE,6BAA6B,OAAO,CAAC,kBAAkB,IAAI,QAAQ,GACpE;AACA,UAAM,kBAAkB,MAAM,KAAM,6BAA6B,MAAO,kBAAkB,KAAI,IAAK,iBAAiB,EAAE,KAAK,IAAI;AAC/H,UAAM,IAAI,UAAU,kBAAkB,QAAQ,sBAAsB,eAAe,GAAG;;AAE1F;AA2BM,SAAUC,wCAAuC,WAAc;AACnE,QAAM,uBAA+C;IACnD,WAAc;IACd,SAAc;IACd,SAAc;IACd,SAAc;IACd,aAAc;;AAKhB,MAAI,UAAU,OAAO,OAAO,OAAO,oBAAoB,EAAE,SAAS,UAAU,GAAG,GAAG;AAChF,WAAO,UAAU;;AAInB,MAAI,UAAU,OAAO,OAAO,KAAK,oBAAoB,EAAE,SAAS,UAAU,GAAG,GAAG;AAC9E,WAAO,qBAAqB,UAAU,GAAG;;AAG3C,QAAM,IAAI,MACR,8DAA8D,UAAU,GAAG,SAAS,UAAU,GAAG,6BACtE,OAAO,OAAO,oBAAoB,EAAE,KAAK,IAAI,CAAC,6BAC9C,OAAO,KAAK,oBAAoB,EAAE,KAAK,IAAI,CAAC,GAAG;AAE9E;AA6BM,SAAUC,wBAAoB;AAClC,MAAI,WAAW,UAAU,WAAW,OAAO,QAAQ;AACjD,WAAO;SACF;AACL,WAAO;;AAEX;AAsBM,SAAUC,aAAY,aAAmB;AAC7C,SAAO,YAAiB,WAAW;AACrC;AA2BM,SAAUC,cAAU;AACxB,QAAM,OAAOC,QAAO,WAAU;AAE9B,SAAO;AACT;;;;;;;;;;;;;;;AC/MA,IAAAC,iBAAA;;;ACAA,IAAAC,iBAAA;;;ACAA,IAAAC,iBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+CM,IAAOC,UAAP,MAAO,QAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BV,OAAa,kBAAkB,EAAE,gBAAe,GAEtD;;AAEC,YAAM,iBAAkB,OAAO,aAAa,eAAe;AAG3D,YAAM,aAAkB;QACtB,KAAM;QACN,KAAM;QACN,GAAMC,SAAQ,WAAW,eAAe,EAAE,YAAW;QACrD,GAAMA,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,iBAAW,MAAM,MAAMC,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BM,OAAa,iBAAiB,EAAE,eAAc,GAEpD;;AAEC,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,iBAAiB,EAAE,IAAG,GAClB;;AAGtB,YAAM,kBAAmB,MAAM,QAAO,kBAAkB,EAAE,YAAY,IAAG,CAAE;AAG3E,YAAM,iBAAiB,OAAO,aAAa,eAAe;AAG1D,YAAM,YAAiB;QACrB,KAAM;QACN,KAAM;QACN,GAAMD,SAAQ,WAAW,cAAc,EAAE,YAAW;;AAItD,gBAAU,MAAM,MAAMC,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE7D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BM,OAAa,cAAW;;AAE7B,YAAM,kBAAkB,OAAO,MAAM,iBAAgB;AAGrD,YAAM,aAAa,MAAM,QAAO,kBAAkB,EAAE,gBAAe,CAAE;AAGrE,iBAAW,MAAM,MAAMA,sBAAqB,EAAE,KAAK,WAAU,CAAE;AAE/D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BM,OAAa,aAAa,EAAE,IAAG,GAClB;;;AAGlB,UAAI,EAAEC,iBAAgB,GAAG,KAAK,IAAI,QAAQ,WAAW;AACnD,cAAM,IAAI,MAAM,wDAAwD;;AAI1E,UAAI,EAAE,EAAC,IAAmB,KAAd,YAASC,QAAK,KAAtB,CAAA,GAAA,CAAmB;AAGvB,OAAA,KAAA,UAAU,SAAG,QAAA,OAAA,SAAA,KAAb,UAAU,MAAQ,MAAMF,sBAAqB,EAAE,KAAK,UAAS,CAAE;AAE/D,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BF,OAAa,kBAAkB,EAAE,WAAU,GAEjD;;AAEC,UAAI,CAACC,iBAAgB,UAAU,GAAG;AAChC,cAAM,IAAI,MAAM,0DAA0D;;AAI5E,YAAM,kBAAkBF,SAAQ,UAAU,WAAW,CAAC,EAAE,aAAY;AAEpE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,iBAAiB,EAAE,UAAS,GAE/C;;AAEC,UAAI,CAACI,gBAAe,SAAS,GAAG;AAC9B,cAAM,IAAI,MAAM,yDAAyD;;AAI3E,YAAM,iBAAiBJ,SAAQ,UAAU,UAAU,CAAC,EAAE,aAAY;AAElE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,OAAa,aAAa,EAAE,aAAa,WAAU,GAGzD;;AAEC,UAAI,OAAO,eAAe,OAAO,cAAc,YAAY,MAAM,WAAW,GAAG;AAC7E,cAAM,IAAI,MAAM,iGAAiG;;AAInH,YAAM,mBAAmB,MAAM,QAAO,kBAAkB,EAAE,YAAY,YAAW,CAAE;AACnF,YAAM,kBAAkB,MAAM,QAAO,iBAAiB,EAAE,WAAW,WAAU,CAAE;AAG/E,YAAM,eAAe,OAAO,gBAAgB,kBAAkB,eAAe;AAE7E,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpUG,SAAUK,oBAAmB,OAAc;AAC/C,MAAI,OAAO,UAAU;AAAU,WAAO;AACtC,MAAI,MAAM,WAAW;AAAG,WAAO;AAC/B,SAAO,MAAM,MAAM,GAAG,EAAE,IAAG;AAC7B;AAsBM,SAAUC,aAAY,EAAE,aAAa,IAAI,KAAI,GAIlD;;AACC,UAAO,MAAA,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,aAAU;AAC5C,QAAI,MAAM,QAAQ,OAAO;AAAI,aAAO;AACpC,QAAI,QAAQ,QAAQ,SAAS;AAAM,aAAO;AAC1C,WAAO;EACT,CAAC,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;AACR;AA+BM,SAAgBC,4BAA2B,EAAE,aAAa,cAAc,mBAAkB,GAI/F;;AAEC,UAAM,sBAAsBC,wBAAuB,EAAE,YAAW,CAAE;AAElE,aAAS,UAAU,qBAAqB;AACtC,UAAI,gBAAgB,OAAO,cAAc;AACvC,cAAM,sBAAsB,MAAMC,sBAAqB,EAAE,KAAK,aAAY,CAAE;AAC5E,YAAI,yBAAwB,MAAMA,sBAAqB,EAAE,KAAK,OAAO,aAAY,CAAE,IAAG;AACpF,iBAAO;;iBAEA,sBAAsB,OAAO,oBAAoB;AAC1D,YAAI,uBAAuB,OAAO,oBAAoB;AACpD,iBAAO;;;;AAKb,WAAO;EACT,CAAC;;AAwBK,SAAUD,wBAAuB,EAAE,YAAW,GAEnD;;AACC,MAAI,CAAC;AAAa,UAAM,IAAI,UAAU,2CAA2C;AAEjF,QAAM,sBAA+C,CAAA;AAGrD,sBAAoB,KAAK,IAAG,MAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAOE,wBAAuB,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AAGjG,SAAO,KAAKC,4BAA2B,EAAE,QAAQ,CAAC,iBAAgB;;AAChE,wBAAoB,KAClB,IAAGC,OAAAC,MAAC,YAAY,YAAiC,OAAwC,QAAAA,QAAA,SAAA,SAAAA,IACrF,OAAOH,wBAAuB,OAAC,QAAAE,QAAA,SAAAA,MAAI,CAAA,CAAE;EAE7C,CAAC;AAED,SAAO;AACT;AA8CM,SAAUE,4BAA2B,EAAE,YAAW,GAEvD;AAEC,QAAM,sBAAsBN,wBAAuB,EAAE,YAAW,CAAE;AAGlE,QAAM,QAAQ,oBAAoB,IAAI,YAAU,OAAO,IAAI;AAE3D,SAAO,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAC3B;AAqCM,SAAUO,kCAAiC,EAAE,aAAa,SAAQ,GAGvE;AACC,QAAM,gBAA+C,CAAA;AAErD,SAAO,KAAKJ,4BAA2B,EAAE,QAAQ,CAAC,iBAAgB;AAChE,QAAI,MAAM,QAAQ,YAAY,YAAiC,CAAC,GAAG;AACjE,YAAM,sBAAsB,YAAY,YAAiC;AAEzE,YAAM,mBAAmBN,oBAAmB,QAAQ;AAIpD,YAAM,mBAAmB,oBAAoB,KAAK,YAAS;AACzD,cAAM,qBAAqBA,oBAAmB,MAAM,MAAM;AAC1D,cAAM,wBAAwBK,yBAAwB,MAAM,KAAKL,oBAAmB,OAAO,EAAE,MAAM;AACnG,eAAO,sBAAsB;MAC/B,CAAC;AAED,UAAI,kBAAkB;AACpB,sBAAc,KAAK,YAA2C;;;EAGpE,CAAC;AAED,SAAO;AACT;AA2BM,SAAUW,cAAa,KAAY;AAEvC,MAAI,CAAC,OAAO,OAAO,QAAQ,YAAY,QAAQ;AAAM,WAAO;AAG5D,SAAO,QAAQ,OAAO,UAAU,OAAO,qBAAqB;AAC9D;AAkDM,SAAUC,iBAAgB,KAAY;AAE1C,MAAI,CAACD,cAAa,GAAG;AAAG,WAAO;AAG/B,MAAI,IAAI,SAAS;AAAwB,WAAO;AAGhD,MAAI,EAAE,SAAS,OAAO,SAAS;AAAM,WAAO;AAG5C,QAAM,wBAAwB,CAAC,SAC7B,OAAO,SAAS,YAAY,MAAM,QAAQ,IAAI,KAAK,KAAK,MAAM,UAAQ,OAAO,SAAS,QAAQ;AAChG,SAAQ,sBAAsB,IAAI,GAAG,KAAO,sBAAsB,IAAI,GAAG;AAC3E;AA2BM,SAAUN,yBAAwB,KAAY;AAElD,MAAI,CAAC,OAAO,OAAO,QAAQ,YAAY,QAAQ;AAAM,WAAO;AAG5D,MAAI,EAAE,QAAQ,OAAO,UAAU,OAAO,gBAAgB;AAAM,WAAO;AAEnE,MAAI,OAAO,IAAI,OAAO;AAAU,WAAO;AACvC,MAAI,OAAO,IAAI,SAAS;AAAU,WAAO;AACzC,MAAI,OAAO,IAAI,eAAe;AAAU,WAAO;AAE/C,SAAO;AACT;AAoBM,SAAUQ,uBAAsB,EAAE,UAAU,gBAAgB,eAAc,GACpC;AAE1C,QAAM,cAAcC,YAAW,UAAU;IACvC,MAAO;IACP,MAAO;IACP,MAAO;GACR;AACD,QAAM,iBAAiBC,SAAQ,WAAW,WAAW,EAAE,YAAW;AAClE,QAAM,iBAAiBA,SAAQ,UAAU,cAAc,EAAE,YAAW;AAEpE,SAAO;AACT;AAsBM,SAAUC,uBAAsB,EAAE,eAAc,GAErD;AACC,MAAI;AACF,UAAM,iBAAiBD,SAAQ,UAAU,cAAc,EAAE,YAAW;AACpE,UAAM,cAAcA,SAAQ,UAAU,cAAc,EAAE,aAAY;AAClE,UAAM,EAAE,MAAM,MAAM,KAAI,IAAKD,YAAW,aAAa,EAAE,cAAc,YAAW,CAAE;AAElF,WAAO,EAAE,UAAU,MAAM,gBAAgB,MAAM,gBAAgB,KAAI;WAC5D,OAAY;AACnB,UAAM,IAAIG,UAASC,cAAa,YAAY,iCAAiC,cAAc,EAAE;;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxdM,IAAOC,aAAP,MAAO,WAAS;EAqBpB,YAAY,EAAE,KAAK,UAAU,UAAU,YAAAC,YAAU,GAKhD;AACC,SAAK,MAAM;AACX,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,aAAaA;EACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCa,SAAM;;AAEjB,UAAI,EAAE,MAAM,QAAQ,KAAK,SAAS,kBAAkB,KAAK,KAAK,SAAS,mBAAmB,SAAS,IAAI;AACrG,cAAM,IAAI,MAAM,qBAAqB,KAAK,GAAG,mCAAmC;;AAIlF,UAAI,cAA2B;QAC7B,KAAW,KAAK;QAChB,UAAW,KAAK;QAChB,UAAW,KAAK;;AAIlB,UAAI,eAAe,KAAK,cAAc,OAAO,KAAK,WAAW,cAAc,YAAY;AACrF,cAAM,cAAqB,CAAA;AAC3B,iBAAS,MAAM,KAAK,SAAS,oBAAoB;AAC/C,cAAI,CAAC,GAAG,cAAc;AACpB,kBAAM,IAAI,MAAM,wBAAwB,GAAG,EAAE,+CAA+C;;AAI9F,gBAAM,SAAS,MAAM,KAAK,WAAW,UAAU,EAAE,KAAK,GAAG,aAAY,CAAE;AAGvE,gBAAM,aAAa,MAAM,KAAK,WAAW,UAAU,EAAE,OAAM,CAAE;AAG7D,sBAAY,KAAI,OAAA,OAAA,CAAA,GAAM,UAAU,CAAA;;AAElC,oBAAY,cAAc;;AAG5B,aAAO;IACT,CAAC;;;;;;;;;;;;;;;EAeY,UAAU,QAA6B;;;AAGlD,YAAM,sBAAqB,KAAA,KAAK,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAC3D,QAAK;AAAA,YAAAC,KAAA;AAAC,eAAAC,oBAAmB,GAAG,EAAE,QAAOD,MAAAC,oBAAmB,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,QAAQ,OAAC,QAAAD,QAAA,SAAAA,MAAIC,qBAAmB,KAAA,KAAK,SAAS,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,CAAC;MAAE,CAAA;AAGtI,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAIC,UAASC,cAAa,eAAe,0FAA0F;;AAI3I,YAAM,SAAS,MAAM,KAAK,WAAW,UAAU,EAAE,KAAK,mBAAmB,aAAY,CAAE;AAIvF,YAAM,YAAY,MAAM,KAAK,WAAW,aAAa,EAAE,OAAM,CAAE;AAG/D,YAAMJ,cAAa,KAAK;AAGxB,YAAM,YAAYK,eAAY,uCAAuC,SAAS;AAE9E,aAAO;QACL;QACA,OAAY,mBAAmB;QAEzB,KAAK,EAAE,KAAI,GAAsB;;AACrC,kBAAM,YAAY,MAAML,YAAW,KAAK,EAAE,MAAM,OAAe,CAAE;AACjE,mBAAO;UACT,CAAC;;QAEK,OAAO,EAAE,MAAM,UAAS,GAAwB;;AACpD,kBAAMM,WAAU,MAAMN,YAAW,OAAO,EAAE,MAAM,KAAK,WAAY,UAAS,CAAE;AAC5E,mBAAOM;UACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BE,OAAa,OAAO,EAAE,aAAa,YAAAN,cAAa,IAAIO,iBAAe,EAAE,GAG3E;;;AAEC,YAAM,sBAAsBC,wBAAuB,EAAE,aAAa,YAAY,SAAQ,CAAE;AAGxF,UAAI,oBAAoB,WAAW,GAAG;AACpC,cAAM,IAAIL,UAASC,cAAa,oBAAoB,+DAA+D;;AAIrH,eAAS,QAAO,KAAA,YAAY,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAC7C,cAAMJ,YAAW,UAAU,EAAE,IAAG,CAAE;;AAKpC,eAAS,MAAM,qBAAqB;AAClC,YAAI,CAAC,GAAG,cAAc;AACpB,gBAAM,IAAI,MAAM,wBAAwB,GAAG,EAAE,+CAA+C;;AAI9F,cAAM,SAAS,MAAMA,YAAW,UAAU,EAAE,KAAK,GAAG,aAAY,CAAE;AAGlE,cAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;;AAI1C,YAAM,MAAM,IAAI,WAAU;QACxB,KAAW,YAAY;QACvB,UAAW,YAAY;QACvB,UAAW,YAAY;QACvB,YAAAA;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCL,IAAOS,aAAP,MAAgB;;;;;;;;;;;;;;EAcb,OAAa,iBAAiB,SAGpC;;AACC,YAAM,IAAI,MAAM,gFAAgF;IAClG,CAAC;;;;;;;;;;;EAWM,OAAa,QAAQ,SAAiB,UAA+B;;AAC1E,YAAM,IAAI,MAAM,uEAAuE;IACzF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DH,IAAMC,uBAAsB;AAa5B,IAAMC,iCAAgC;AAQtC,IAAMC,kBAAiB;AAYvB,IAAMC,sBAAqB;AAY3B,IAAMC,mBAAkB;AAYxB,IAAYC;CAAZ,SAAYA,0BAAuB;AAKjC,EAAAA,yBAAAA,yBAAA,cAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,cAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,YAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,aAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,eAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,iBAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,QAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,sBAAA,IAAA,CAAA,IAAA;AACF,GAhDYA,6BAAAA,2BAAuB,CAAA,EAAA;AA4DnC,IAAYC;CAAZ,SAAYA,0BAAuB;AAKjC,EAAAA,yBAAAA,yBAAA,SAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,WAAA,IAAA,CAAA,IAAA;AAMA,EAAAA,yBAAAA,yBAAA,WAAA,IAAA,CAAA,IAAA;AACF,GAlBYA,6BAAAA,2BAAuB,CAAA,EAAA;AAwBnC,IAAYC;CAAZ,SAAYA,iCAA8B;AAIxC,EAAAA,gCAAA,gBAAA,IAAA;AAMA,EAAAA,gCAAA,iBAAA,IAAA;AAMA,EAAAA,gCAAA,sBAAA,IAAA;AAKA,EAAAA,gCAAA,sBAAA,IAAA;AAMA,EAAAA,gCAAA,cAAA,IAAA;AACF,GA5BYA,oCAAAA,kCAA8B,CAAA,EAAA;AAkC1C,IAAMC,yBAAwB;EAC5B,SAAYF,yBAAwB;EACpC,QAAYA,yBAAwB;EACpC,OAAYA,yBAAwB;EACpC,SAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;;AAsDhC,IAAOG,UAAP,MAAO,gBAAeC,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAIC,iBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAMJ,WAAI,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,EAAE,GAAG,aAAaJ,uBAAsB,GAAG;AACrF,cAAM,IAAI,MAAM,8DAA8D;;AAIhF,YAAM,aAAY,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,QAAM,QAAQ,EAAE,EAAE,IAAI,QAAM,GAAG,EAAE;AACvF,UAAI,aAAa,UAAU,WAAW,IAAI,IAAI,SAAS,EAAE,MAAM;AAC7D,cAAM,IAAI,MAAM,oDAAoD;;AAItE,WAAI,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,OAAK,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,eAAe,GAAG;AACvE,cAAM,IAAI,MAAM,sDAAsD;;AAIxE,YAAM,iBAAiB,MAAMG,YAAW,YAAY,EAAE,WAAW,UAAS,CAAE;AAC5E,YAAM,cAAc,MAAMA,YAAW,aAAa,EAAE,QAAQ,eAAc,CAAE;AAG5E,YAAM,SAAS,MAAME,aAAY,wBAAwB,EAAE,YAAW,CAAE;AAGxE,YAAM,WAAQ,OAAA,OAAA,OAAA,OAAA,EACZ,IAAI,OAAM,GACP,QAAQ,eAAe,EAAE,aAAa,QAAQ,YAAW,CAAE,GAC3D,QAAQ,eAAe,EAAE,YAAY,QAAQ,YAAW,CAAE;AAI/D,YAAM,2BAA2B,CAAC,IAAG,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE;AACtE,UAAI,EAAC,6BAAwB,QAAxB,6BAAwB,SAAA,SAAxB,yBAA0B,KAAK,QAAK;AAAA,YAAAC;AAAC,iBAAAA,MAAA,GAAG,QAAE,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,GAAG,EAAE,IAAG,OAAO;MAAG,CAAA,IAAG;AAE1E,iCAAyB,QAAQ;UAC/B,WAAY;UACZ,IAAY;UACZ,UAAY,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;SACjG;;AAKH,iBAAW,MAAM,0BAA0B;AAGzC,cAAM,SAAU,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG,EAAE,IAAG,MAAO,MAChD,iBACA,MAAMH,YAAW,YAAY,EAAE,WAAW,GAAG,UAAS,CAAE;AAE5D,cAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAG1D,YAAI,YAAW,MAAA,KAAA,GAAG,QAAE,QAAA,OAAA,SAAA,KAAI,UAAU,SAAG,QAAA,OAAA,SAAA,KAAI,MAAMI,sBAAqB,EAAE,KAAK,UAAS,CAAE;AACtF,mBAAW,GAAG,MAAM,IAAIC,oBAAmB,QAAQ,CAAC;AAGpD,SAAA,KAAA,SAAS,wBAAkB,QAAA,OAAA,SAAA,KAA3B,SAAS,qBAAuB,CAAA;AAGhC,iBAAS,mBAAmB,KAAK;UAC/B,IAAe;UACf,MAAe;UACf,aAAe,KAAA,GAAG,gBAAU,QAAA,OAAA,SAAA,KAAI;UAChC,cAAe;SAChB;AAGD,mBAAW,YAAW,KAAA,GAAG,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAEvC,cAAI,CAAC,SAAS,OAAO;AAAG,qBAAS,OAAO,IAAI,CAAA;AAE5C,mBAAS,OAAO,EAAG,KAAK,QAAQ;;;AAKpC,OAAA,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ,aAAU;;AAClC,SAAAF,MAAA,SAAS,aAAO,QAAAA,QAAA,SAAAA,MAAhB,SAAS,UAAY,CAAA;AACrB,gBAAQ,KAAK,GAAG,MAAM,IAAI,QAAQ,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE;AACrD,iBAAS,QAAQ,KAAK,OAAO;MAC/B,CAAC;AAID,YAAM,MAAM,IAAIG,WAAU;QACxB,KAAW;QACX;QACA,UAAQ,OAAA,OAAA,EACN,WAAW,MAAK,GACb,QAAQ,SAAS,EAAE,OAAO,QAAQ,MAAK,CAAE;QAE9C,YAAAN;OACD;AAGD,WAAI,KAAA,QAAQ,aAAO,QAAA,OAAA,SAAA,KAAI,MAAM;AAC3B,cAAM,qBAAqB,MAAM,QAAO,QAAQ,EAAE,KAAK,YAAY,QAAQ,WAAU,CAAE;AACvF,YAAI,WAAW,mBAAmB;;AAGpC,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BF,OAAa,OAAO,EAAE,aAAa,YAAAA,cAAa,IAAIC,iBAAe,EAAE,GAG3E;;;AAEC,YAAM,YAAYM,KAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAIC,UAASC,cAAa,oBAAoB,sBAAsB;;AAG5E,YAAM,MAAM,MAAMH,WAAU,OAAO,EAAE,aAAa,YAAAN,YAAU,CAAE;AAG9D,UAAI,GAAC,KAAA,IAAI,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAK;AAAA,YAAAG;AAAC,iBAAAA,MAAA,GAAG,QAAE,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAM,GAAG,EAAE,IAAG,OAAO;MAAG,CAAA,IAAG;AACjF,cAAM,IAAIK,UAASC,cAAa,oBAAoB,2CAA2C;;AAGjG,aAAO;;;;;;;;;;;;;;EAcF,OAAa,iBAAiB,EAAE,aAAa,WAAW,KAAI,GAGlE;;;AAEC,YAAM,YAAYF,KAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAIC,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAKjG,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KACzD,QAAK;AAAA,YAAAN,KAAA;AAAC,eAAAE,oBAAmB,GAAG,EAAE,QAAOF,MAAAE,oBAAmB,QAAQ,OAAC,QAAAF,QAAA,SAAAA,MAAIE,qBAAmB,KAAA,YAAY,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,CAAC;MAAE,CAAA;AAG5H,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAIG,UAASC,cAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCF,OAAa,QAAQ,EAAE,KAAK,aAAapB,qBAAmB,GAGlE;;AACC,YAAM,qBAAqB,MAAMqB,gBAAe,IAAI,EAAE,KAAK,WAAU,CAAE;AAEvE,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBM,OAAa,QAAQ,QAAgB,UAAgC,CAAA,GAAE;;;AAE5E,YAAM,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAU,QAAA,OAAA,SAAA,KAAIrB;AAE1C,UAAI;AAEF,cAAMa,aAAY,wBAAwB,EAAE,OAAM,CAAE;AAGpD,cAAM,EAAE,aAAa,oBAAmB,IAAK,MAAMQ,gBAAe,IAAI,EAAE,QAAQ,WAAU,CAAE;AAG5F,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKC,4BAA2B,GAAA;UAC9B;UACA;QAAmB,CAAA;eAGd,OAAY;AAEnB,YAAI,EAAE,iBAAiBH;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKG,4BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;;;;AA1T7Cb,QAAA,aAAa;AAwUvB,IAAOY,kBAAP,MAAO,gBAAc;;;;;;;;;;EAUlB,OAAa,IAAI,EAAE,QAAQ,WAAU,GAG3C;;AAEC,YAAM,iBAAiBR,aAAY,6BAA6B,EAAE,OAAM,CAAE;AAG1E,YAAM,eAAe,MAAM,gBAAe,SAAS,EAAE,YAAY,eAAc,CAAE;AAGjF,YAAM,YAAY,MAAMA,aAAY,qBAAqB,EAAE,aAAY,CAAE;AAGzE,YAAM,mBAAmB,MAAM,gBAAe,cAAc,EAAE,QAAQ,UAAS,CAAE;AAGjF,uBAAiB,oBAAoB,YAAY,aAAa,IAAI,SAAQ;AAE1E,aAAO;IACT,CAAC;;;;;;;;;;;EAWM,OAAa,IAAI,EAAE,KAAK,WAAU,GAGxC;;AAEC,YAAM,YAAY,MAAM,gBAAe,YAAY;QACjD,aAAc,IAAI;QAClB,aAAc,IAAI;OACnB;AAGD,YAAM,eAAe,MAAMA,aAAY,sBAAsB;QAC3D;QACA,gBAAiBA,aAAY,6BAA6B,EAAE,QAAQ,IAAI,IAAG,CAAE;QAC7E,QAAiB,MAAM,IAAI,UAAU,EAAE,UAAU,IAAG,CAAE;OACvD;AAGD,YAAM,YAAY,MAAM,gBAAe,SAAS,EAAE,YAAY,aAAY,CAAE;AAI5E,aAAO;QACL,aAAsB,IAAI;QAC1B,qBAAmB,OAAA,OAAA,OAAA,OAAA,CAAA,GACd,IAAI,QAAQ,GAAA,EACf,WAAY,WACZ,WAAY,aAAa,IAAI,SAAQ,EAAE,CAAA;QAEzC,yBAAyB,CAAA;;IAE7B,CAAC;;;;;;;;;;;;EAYO,OAAa,SAAS,EAAE,YAAY,eAAc,GAGzD;;AAEC,YAAM,aAAaU,SAAQ,WAAW,cAAc,EAAE,UAAS;AAG/D,YAAM,MAAM,IAAI,IAAI,YAAY,UAAU,EAAE;AAG5C,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK,EAAE,QAAQ,MAAK,CAAE;AAE7C,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAIJ,UAASC,cAAa,UAAU,+BAA+B,UAAU,EAAE;;eAGhF,OAAY;AACnB,YAAI,iBAAiBD;AAAU,gBAAM;AACrC,cAAM,IAAIA,UAASC,cAAa,eAAe,iCAAiC,MAAM,OAAO,EAAE;;AAIjG,YAAM,eAAe,MAAM,SAAS,YAAW;AAE/C,UAAG,CAAC,cAAc;AAChB,cAAM,IAAID,UAASC,cAAa,UAAU,+BAA+B,UAAU,EAAE;;AAGvF,UAAI,aAAa,aAAa,IAAI;AAChC,cAAM,IAAID,UAASC,cAAa,0BAA0B,qDAAqD,aAAa,UAAU,EAAE;;AAG1I,UAAI,aAAa,aAAa,MAAM;AAClC,cAAM,IAAID,UAASC,cAAa,0BAA0B,2CAA2C,aAAa,UAAU,EAAE;;AAIhI,YAAM,eAA6B;QACjC,GAAM;QACN,KAAM,OAAO,IAAI,SAAS,YAAY,EAAE,aAAa,EAAE,CAAC;QACxD,KAAM,IAAI,WAAW,cAAc,GAAG,EAAE;QACxC,GAAM,IAAI,WAAW,cAAc,EAAE;;AAGvC,aAAO;IACT,CAAC;;;;;;;;;;;;EAYO,OAAa,SAAS,EAAE,YAAY,aAAY,GAGvD;;AAEC,YAAM,aAAaG,SAAQ,WAAW,aAAa,CAAC,EAAE,UAAS;AAG/D,YAAM,MAAM,IAAI,IAAI,YAAY,UAAU,EAAE;AAG5C,YAAM,OAAO,IAAI,WAAW,aAAa,EAAE,SAAS,EAAE;AACtD,WAAK,IAAI,aAAa,KAAK,CAAC;AAC5B,UAAI,SAAS,KAAK,MAAM,EAAE,aAAa,aAAa,IAAI,QAAQ,OAAO,aAAa,GAAG,CAAC;AACxF,WAAK,IAAI,aAAa,GAAG,aAAa,IAAI,SAAS,CAAC;AAGpD,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK;UAC1B,QAAU;UACV,SAAU,EAAE,gBAAgB,2BAA0B;UACtD;SACD;eAEM,OAAY;AACnB,cAAM,IAAIJ,UAASC,cAAa,eAAe,+BAA+B,MAAM,OAAO,EAAE;;AAI/F,aAAO,SAAS;IAClB,CAAC;;;;;;;;;;;;;EAaM,OAAa,cAAc,EAAE,QAAQ,UAAS,GAGpD;;;AAEC,YAAM,cAA2B,EAAE,IAAI,OAAM;AAG7C,YAAM,sBAAmC;QACvC,WAAW;;AAGb,YAAM,WAAW,oBAAI,IAAG;AAExB,iBAAW,WAAU,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AAE7C,YAAI,OAAO,SAAS;AAAO;AAG3B,cAAM,cAAc,OAAO,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC;AAEzD,gBAAQ,MAAM;UAEZ,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,OAAOP,aAAY,qBAAqB,OAAO,IAAI;AAGzD,wBAAY,cAAc,KAAK,MAAMT,gBAAe;AAEpD;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,OAAOS,aAAY,qBAAqB,OAAO,IAAI;AAGzD,wBAAY,aAAa,KAAK,SAAST,gBAAe,IAAI,KAAK,MAAMA,gBAAe,IAAI;AAExF;;UAIF,KAAK,YAAY,WAAW,GAAG,GAAG;AAGhC,kBAAM,EAAE,IAAI,GAAG,GAAG,EAAC,IAAKS,aAAY,qBAAqB,OAAO,IAAI;AAGpE,kBAAM,iBAAiBU,SAAQ,UAAU,CAAC,EAAE,aAAY;AAGxD,kBAAM,aAAajB,yBAAwB,OAAO,CAAC,CAAC;AAGpD,gBAAI,YAAY,MAAMO,aAAY,aAAa,UAAU,EAAE,iBAAiB,EAAE,eAAc,CAAE;AAG9F,aAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,KAA9B,YAAY,qBAAuB,CAAA;AAGnC,kBAAM,WAAW,GAAG,MAAM,IAAI,EAAE;AAGhC,wBAAY,mBAAmB,KAAK;cAClC,IAAe;cACf,MAAe;cACf,YAAe,MAAC,QAAD,MAAC,SAAD,IAAK;cACpB,cAAe;aAChB;AAID,qBAAS,IAAI,aAAa,QAAQ;AAElC;;UAIF,KAAK,YAAY,WAAW,GAAG,GAAG;AAGhC,kBAAM,KAAqCA,aAAY,qBAAqB,OAAO,IAAI,GAAjF,EAAE,IAAI,GAAG,GAAE,IAAA,IAAK,mBAAgBW,SAAA,IAAhC,CAAA,MAAA,KAAA,IAAA,CAAkC;AAGxC,kBAAM,kBAAkB,GAAG,SAASpB,gBAAe,IAAI,GAAG,MAAMA,gBAAe,IAAI;AAGnF,kBAAM,oBAAoB,OAAO,YAAY,OAAO,QAAQ,gBAAgB,EAAE,IAC5E,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAASA,gBAAe,IAAI,EAAE,MAAMA,gBAAe,IAAI,CAAC,CAAC,CAC5E;AAGD,aAAA,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,KAAnB,YAAY,UAAY,CAAA;AAExB,wBAAY,QAAQ,KAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACnB,iBAAiB,GAAA,EACpB,IAAO,GAAG,MAAM,IAAI,EAAE,IACtB,MAAO,GACP,gBAAe,CAAA,CAAA;AAGjB;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,EAAE,IAAI,MAAK,IAAKS,aAAY,qBAAqB,OAAO,IAAI;AAGlE,gCAAoB,QAAQ,MAAM,MAAMT,gBAAe,EAAE,IAAI,iBAAe,OAAO,WAAW,CAAC;AAE/F;;UAIF,KAAK,YAAY,WAAW,KAAK,GAAG;AAElC,kBAAM,uBAAuB,CAAC,SAA2B,KACtD,MAAMA,gBAAe,EACrB,IAAI,CAAAqB,iBAAe,SAAS,IAAIA,YAAW,CAAC,EAC5C,OAAO,CAAC,OAAqB,OAAO,OAAO,QAAQ;AAGtD,kBAAM,EAAE,MAAM,KAAK,KAAK,KAAK,IAAG,IAAKZ,aAAY,qBAAqB,OAAO,IAAI;AAGjF,gBAAI;AAAM,0BAAY,iBAAiB,qBAAqB,IAAI;AAChE,gBAAI;AAAK,0BAAY,kBAAkB,qBAAqB,GAAG;AAC/D,gBAAI;AAAK,0BAAY,uBAAuB,qBAAqB,GAAG;AACpE,gBAAI;AAAK,0BAAY,uBAAuB,qBAAqB,GAAG;AACpE,gBAAI;AAAK,0BAAY,eAAe,qBAAqB,GAAG;AAE5D;;;;AAKN,aAAO,EAAE,aAAa,qBAAqB,uBAAuB,CAAA,EAAE;;;;;;;;;;;;;EAa/D,OAAa,YAAY,EAAE,aAAa,YAAW,GAGzD;;;AACC,YAAM,mBAAgC,CAAA;AACtC,YAAM,WAAW,oBAAI,IAAG;AACxB,YAAM,aAAuB,CAAA;AAC7B,YAAM,wBAAkC,CAAA;AAGxC,UAAI,YAAY,aAAa;AAC3B,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAOX;UACP,MAAO,YAAY,YAAY,KAAKE,gBAAe;SACpD;;AAIH,UAAI,YAAY,YAAY;AAC1B,cAAM,aAAa,MAAM,QAAQ,YAAY,UAAU,IACnD,YAAY,WAAW,KAAKA,gBAAe,IAC3C,YAAY;AAChB,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAOF;UACP,MAAO;SACR;;AAIH,iBAAW,CAAC,OAAO,EAAE,MAAK,MAAA,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,QAAO,OAAE,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI;AACzE,cAAM,cAAc,IAAI,KAAK;AAC7B,8BAAsB,KAAK,WAAW;AACtC,YAAI,WAAW,GAAG,GAAG,MAAM,GAAG,EAAE,IAAG;AACnC,iBAAS,IAAI,UAAU,WAAW;AAElC,cAAM,YAAY,GAAG;AAErB,YAAI,GAAE,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,QAAO,UAAU,OAAOM,yBAAwB;AAC/D,gBAAM,IAAIW,UAASC,cAAa,sBAAsB,wBAAwB,GAAG,EAAE,wCAAuC,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAG,QAAA,OAAA,SAAA,KAAI,WAAW,EAAE;;AAI3J,cAAM,UAAUd,yBAAwB,UAAU,GAA2C;AAG7F,cAAM,iBAAiB,MAAMO,aAAY,aAAa,UAAU,GAAG,EAAE,iBAAiB,EAAE,UAAS,CAAE;AAGnG,cAAM,qBAAqBU,SAAQ,WAAW,cAAc,EAAE,YAAW;AAGzE,cAAM,UAAU,CAAC,MAAM,QAAQ,IAAI,KAAK,OAAO,IAAI,KAAK,kBAAkB,EAAE;AAG5E,YAAI,GAAG,eAAe,YAAY;AAAI,kBAAQ,KAAK,KAAK,GAAG,UAAU,EAAE;AAGvE,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO,IAAI,WAAW;UACtB,KAAOrB;UACP,MAAO,QAAQ,KAAKC,mBAAkB;SACvC;;AAIH,OAAA,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ,CAAC,SAAS,UAAS;AAC9C,cAAM,cAAc,IAAI,KAAK;AAC7B,mBAAW,KAAK,WAAW;AAC3B,YAAI,EAAE,IAAI,MAAM,GAAG,iBAAiB,GAAE,IAA0B,SAArB,mBAAgBqB,SAAK,SAA5D,CAAA,MAAA,QAAA,iBAAA,CAAyD;AAC7D,aAAKR,oBAAmB,EAAE;AAC1B,aAAK,MAAM,QAAQ,EAAE,IAAI,GAAG,KAAK,GAAG,IAAI;AAGxC,cAAM,UAAU,OAAO,QAAO,OAAA,OAAA,EAAG,IAAI,GAAG,GAAE,GAAK,gBAAgB,CAAA,EAAI,IACjE,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AAIrC,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO,IAAI,WAAW;UACtB,KAAOd;UACP,MAAO,QAAQ,KAAKC,mBAAkB;SACvC;MACH,CAAC;AAGD,YAAM,aAAuB,CAAC,KAAKF,8BAA6B,EAAE;AAGlE,UAAI,sBAAsB,QAAQ;AAChC,mBAAW,KAAK,MAAM,sBAAsB,KAAKG,gBAAe,CAAC,EAAE;;AAIrE,aAAO,KAAKsB,4BAA2B,EAAE,QAAQ,kBAAe;;AAE9D,cAAM,gBAAeZ,MAAC,YAAY,YAAiC,OAAW,QAAAA,QAAA,SAAA,SAAAA,IAC1E,IAAI,QAAM,SAAS,IAAI,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE,CAAC;AAG/C,YAAI,cAAc;AAChB,gBAAM,aAAaP,gCAA+B,YAA2D;AAC7G,qBAAW,KAAK,GAAG,UAAU,IAAI,aAAa,KAAKH,gBAAe,CAAC,EAAE;;MAEzE,CAAC;AAGD,UAAI,WAAW,QAAQ;AACrB,mBAAW,KAAK,OAAO,WAAW,KAAKA,gBAAe,CAAC,EAAE;;AAI3D,WAAI,KAAA,YAAY,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AAG7B,cAAM,QAAQ,YAAY;AAC1B,cAAM,eAAe,MAAM,IAAI,UAAQ,OAAO,SAAS,WAAWC,yBAAwB,IAAI,IAAI,IAAI;AAEtG,yBAAiB,KAAK;UACpB,MAAO;UACP,MAAO;UACP,KAAOH;UACP,MAAO,MAAM,aAAa,KAAKE,gBAAe,CAAC;SAChD;;AAIH,uBAAiB,KAAK;QACpB,MAAO;QACP,MAAO;QACP,KAAOF;QACP,MAAO,WAAW,KAAKC,mBAAkB;OAC1C;AAID,YAAM,CAAC,EAAC,EAAG,UAAU,IAAI,YAAY,GAAG,MAAM,GAAG;AACjD,uBAAiB,QAAQ,YAAU,OAAO,QAAQ,UAAU;AAG5D,YAAM,YAAoB;QACxB,IAAU;QACV,MAAU;QACV,OAAU;QACV,SAAU;;AAGZ,aAAO;;;;AASL,IAAOU,eAAP,MAAO,aAAW;;;;;;;;;;EAUf,OAAa,sBAAsB,EAAE,WAAW,gBAAgB,OAAM,GAI1E;;AAMD,YAAM,iBAAiB,KAAK,KAAK,KAAK,IAAG,IAAK,GAAI;AAGlD,YAAM,mBAAmB,OAAgB,SAAS;AAGlD,YAAM,eAAe,gBAAQ,OAAO,EAAE,KAAK,gBAAgB,GAAG,iBAAgB,CAAE,EAAE,SAAS,GAAG,EAAE;AAEhG,UAAI,aAAa,SAAS,KAAM;AAC9B,cAAM,IAAIM,UAASC,cAAa,0BAA0B,kDAAkD,aAAa,MAAM,QAAQ;;AAIzI,YAAM,YAAY,MAAM,OAAO,KAAK,EAAE,MAAM,aAAY,CAAE;AAE1D,aAAO,EAAE,GAAG,gBAAgB,KAAK,gBAAgB,KAAK,WAAW,GAAG,iBAAgB;IACtF,CAAC;;;;;;;;;EASM,OAAa,wBAAwB,EAAE,OAAM,GAEnD;;AAEC,UAAI,mBAAmB,aAAY,6BAA6B,EAAE,OAAM,CAAE;AAG1E,YAAM,cAAc,MAAMO,SAAQ,iBAAiB,EAAE,gBAAgB,iBAAgB,CAAE;AAEvF,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAO,6BAA6B,EAAE,OAAM,GAElD;AAEC,UAAM,YAAYT,KAAI,MAAM,MAAM;AAGlC,QAAI,CAAC,WAAW;AACd,YAAM,IAAIC,UAASC,cAAa,YAAY,oBAAoB,MAAM,EAAE;;AAI1E,QAAI,UAAU,WAAWX,QAAO,YAAY;AAC1C,YAAM,IAAIU,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,QAAI;AACJ,QAAI;AACF,yBAAmBG,SAAQ,QAAQ,UAAU,EAAE,EAAE,aAAY;aAC7D,IAAM;AACN,YAAM,IAAIJ,UAASC,cAAa,kBAAkB,6CAA6C;;AAGjG,QAAI,iBAAiB,WAAW,IAAI;AAClC,YAAM,IAAID,UAASC,cAAa,wBAAwB,8BAA8B,iBAAiB,MAAM,EAAE;;AAGjH,WAAO;EACT;;;;;;;;;;;EAYO,OAAa,wBAAwB,EAAE,YAAW,GAExD;;AAEC,YAAM,iBAAiB,MAAMO,SAAQ,iBAAiB,EAAE,WAAW,YAAW,CAAE;AAGhF,YAAM,aAAaJ,SAAQ,WAAW,cAAc,EAAE,UAAS;AAE/D,aAAO,OAAOd,QAAO,UAAU,IAAI,UAAU;IAC/C,CAAC;;;;;;;;EAQM,OAAO,aAAa,OAAa;AACtC,UAAM,aAAqD;MACzD,WAAckB;MACd,SAAcC;MACd,aAAcC;;AAGhB,UAAM,YAAY,WAAW,KAAK;AAElC,QAAI,CAAC;AAAW,YAAM,IAAIV,UAASC,cAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEnG,WAAO;EACT;;;;;;;;EASO,OAAa,qBAAqB,EAAE,aAAY,GAEtD;;AAEC,YAAM,YAAY,MAAMO,SAAQ,iBAAiB,EAAE,gBAAgB,aAAa,EAAC,CAAE;AAGnF,YAAM,eAAe,gBAAQ,OAAO,EAAE,KAAK,aAAa,KAAK,GAAG,aAAa,EAAC,CAAE,EAAE,SAAS,GAAG,EAAE;AAGhG,YAAMG,WAAU,MAAMH,SAAQ,OAAO;QACnC,KAAY;QACZ,WAAY,aAAa;QACzB,MAAY;OACb;AAED,UAAI,CAACG,UAAS;AACZ,cAAM,IAAIX,UAASC,cAAa,kBAAkB,yCAAyC;;AAG7F,aAAO,OAAgB,aAAa,CAAC;IACvC,CAAC;;;;;;;;EAQM,OAAO,qBAAqB,SAAgB;AACjD,WAAO,KAAK,qBAAqB,OAAO,EAAE,MAAMjB,mBAAkB,EAAE,OAAO,CAAC,KAAK,SAAQ;AACvF,YAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,GAAG;AACnC,UAAI,GAAG,IAAI;AACX,aAAO;IACT,GAAG,CAAA,CAA4B;EACjC;;;;;;;EAQO,OAAO,qBAAqB,SAAgB;AACjD,QAAI,OAAO,YAAY,UAAU;AAC/B,aAAO;eACE,mBAAmB,YAAY;AACxC,aAAOoB,SAAQ,WAAW,OAAO,EAAE,SAAQ;eAClC,MAAM,QAAQ,OAAO,GAAG;AACjC,aAAO,QAAQ,IAAI,UAAQ,KAAK,qBAAqB,IAAI,CAAC,EAAE,KAAK,EAAE;WAC9D;AACL,YAAM,IAAIJ,UAASC,cAAa,eAAe,sDAAsD;;EAEzG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjtCF,IAAYW;CAAZ,SAAYA,0BAAuB;AAKjC,EAAAA,yBAAA,SAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAKA,EAAAA,yBAAA,QAAA,IAAA;AACF,GAvBYA,6BAAAA,2BAAuB,CAAA,EAAA;AA6BnC,IAAMC,yBAAwB;EAC5B,SAAYD,yBAAwB;EACpC,QAAYA,yBAAwB;EACpC,OAAYA,yBAAwB;EACpC,SAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;;AAOtC,IAAME,uBAAsB;AA+CtB,IAAOC,UAAP,MAAO,gBAAeC,WAAS;;;;;;;;;;;;;;;;;;;;;;;EA6B5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAIC,iBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAMJ,WAAI,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,EAAE,GAAG,aAAaL,uBAAsB,GAAG;AACrF,cAAM,IAAI,MAAM,8DAA8D;;AAIhF,YAAM,aAAY,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,QAAM,QAAQ,EAAE,EAAE,IAAI,QAAM,GAAG,EAAE;AACvF,UAAI,aAAa,UAAU,WAAW,IAAI,IAAI,SAAS,EAAE,MAAM;AAC7D,cAAM,IAAI,MAAM,oDAAoD;;AAItE,WAAI,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,OAAK,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,eAAe,GAAG;AACvE,cAAM,IAAI,MAAM,sDAAsD;;AAIxE,YAAM,4BAA+D;QACnE,WAAY;QACZ,UAAY,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;;AAGlG,YAAM,2BAAuD,CAAA;AAG7D,iBAAW,OAAM,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,CAAC,yBAAyB,GAAG;AAE3E,cAAM,SAAS,MAAMI,YAAW,YAAY,EAAE,WAAW,GAAG,UAAS,CAAE;AACvE,cAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAG1D,iCAAyB,KAAK;UAC5B,IAAe,GAAG;UAClB,cAAe;UACf,WAAe,KAAA,GAAG,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAC,kBAAkB,mBAAmB,wBAAwB,sBAAsB;SACnH;;AAIH,YAAM,iBAAiB,MAAMA,YAAW,YAAY,EAAE,WAAWL,yBAAwB,UAAS,CAAE;AACpG,YAAM,cAAc,MAAMK,YAAW,aAAa,EAAE,QAAQ,eAAc,CAAE;AAG5E,YAAM,eAAe,MAAMA,YAAW,YAAY,EAAE,WAAWL,yBAAwB,UAAS,CAAE;AAClG,YAAM,YAAY,MAAMK,YAAW,aAAa,EAAE,QAAQ,aAAY,CAAE;AAGxE,YAAM,iBAAiB,MAAME,aAAY,sBAAsB;QAC7D;QACA;QACA,WAAsB,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAA;QAC1C,qBAAsB;OACvB;AAGD,YAAM,EAAE,aAAa,sBAAqB,IAAK,MAAM,QAAO,QAAQ,gBAAgB,EAAE,YAAY,QAAQ,WAAU,CAAE;AACtH,UAAI,gBAAgB,MAAM;AACxB,cAAM,IAAI,MAAM,0CAA0C,0BAAqB,QAArB,0BAAqB,SAAA,SAArB,sBAAuB,KAAK,EAAE;;AAK1F,YAAM,MAAM,IAAIC,WAAU;QACxB,KAAW;QACX,UAAW;QACX,UAAW;UACT,WAAc;UACd,aAAc,eAAe,MAAM,KAAK,CAAC,EAAE,KAAK,GAAG;UACnD;UACA;;QAEF,YAAAH;OACD;AAGD,WAAI,KAAA,QAAQ,aAAO,QAAA,OAAA,SAAA,KAAI,MAAM;AAC3B,cAAM,qBAAqB,MAAM,QAAO,QAAQ,EAAE,KAAK,YAAY,QAAQ,WAAU,CAAE;AACvF,YAAI,WAAW,mBAAmB;;AAGpC,aAAO;;;;;;;;;;;;;;EAcF,OAAa,iBAAiB,EAAE,aAAa,SAAQ,GAG3D;;;AAEC,YAAM,YAAYI,KAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAIC,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KACzD,QAAK;AAAA,YAAAC;AAAC,eAAA,GAAG,QAAQ,aAAQ,QAAR,aAAQ,SAAR,YAAYA,MAAA,YAAY,qBAAe,QAAAA,QAAA,SAAA,SAAAA,IAAG,CAAC;MAAE,CAAA;AAGhE,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAIF,UAASC,cAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BF,OAAa,OAAO,EAAE,aAAa,YAAAN,cAAa,IAAIC,iBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAYG,KAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAIC,UAASC,cAAa,oBAAoB,sBAAsB;;AAG5E,YAAM,MAAM,MAAMH,WAAU,OAAO,EAAE,aAAa,YAAAH,YAAU,CAAE;AAE9D,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BM,OAAa,QAAQ,EAAE,KAAK,aAAaH,qBAAmB,GAGlE;;;AAGC,YAAM,uBAAkD,MAAA,KAAA,IAAI,SAAS,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,IACvF,SAAO;QACL,IAAe,GAAG;QAClB,cAAe,GAAG;QAClB,UAAeW,kCAAiC,EAAE,aAAa,IAAI,UAAU,UAAU,GAAG,GAAE,CAAE;QAC9F,OACH,QAAA,OAAA,SAAA,KAAI,CAAA;AAGL,YAAM,cAAc,MAAMN,aAAY,kBAAkB;QACtD,WAAU,KAAA,IAAI,SAAS,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA;QAClC;OACD;AAGD,YAAM,kBAAkB,MAAMA,aAAY,uBAAuB;QAC/D;QACA,aAAc,IAAI,SAAS;QAC3B,WAAc,IAAI,SAAS;OAC5B;AAED,UAAI;AAEF,cAAM,gBAAgBA,aAAY,gBAAgB;UAChD,SAAU;UACV,MAAU;SACX;AAGD,cAAM,WAAW,MAAM,MAAM,eAAe;UAC1C,QAAU;UACV,MAAU;UACV,SAAU,EAAE,gBAAgB,mBAAkB;UAC9C,MAAU,KAAK,UAAU,eAAe;SACzC;AAID,eAAO;UACL,aAAsB,IAAI;UAC1B,qBAAmB,OAAA,OAAA,OAAA,OAAA,CAAA,GACd,IAAI,QAAQ,GAAA,EACf,WAAW,SAAS,GAAE,CAAA;UAExB,yBAAyB,CAAA;;eAGpB,OAAY;AACnB,eAAO;UACL,aAAsB;UACtB,qBAAsB;YACpB,WAAW;;UAEb,yBAAyB;YACvB,OAAeI,cAAa;YAC5B,cAAe,uCAAuC,IAAI,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4B9D,OAAa,QAAQ,QAAgB,UAAgC,CAAA,GAAE;;;AAE5E,YAAM,YAAYF,KAAI,MAAM,MAAM;AAGlC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKK,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAK1D,YAAM,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAU,QAAA,OAAA,SAAA,KAAIZ;AAE1C,UAAI;AAEF,cAAM,gBAAgBK,aAAY,gBAAgB;UAChD,SAAU;UACV,MAAU,gBAAgB,MAAM;SACjC;AAGD,cAAM,WAAW,MAAM,MAAM,aAAa;AAG1C,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAIG,UAASC,cAAa,UAAU,oCAAoC,MAAM,EAAE;;AAIxF,cAAM,EAAE,aAAa,oBAAmB,IAAK,MAAM,SAAS,KAAI;AAChE,eAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKG,4BAA2B,GAC3B,eAAe,EAAE,YAAW,CAAE,GAAA,EACjC,qBAAmB,OAAA,OAAA,EACjB,YAAW,KAAA,wBAAmB,QAAnB,wBAAmB,SAAA,SAAnB,oBAAqB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,GAC9C,mBAAmB,EAAA,CAAA;eAInB,OAAY;AAEnB,YAAI,EAAE,iBAAiBJ;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKI,4BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;;;;AA/W7CX,QAAA,aAAa;AAyXvB,IAAOI,eAAP,MAAO,aAAW;;;;;;;;;;;;;EAaf,OAAO,gBAAgB,EAAE,SAAS,KAAI,GAG5C;AACC,UAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,QAAI,WAAW,IAAI,SAAS,SAAS,GAAG,IAAI,IAAI,WAAW,IAAI,WAAW;AAC1E,QAAI,YAAY,KAAK,WAAW,GAAG,IAAI,KAAK,UAAU,CAAC,IAAI;AAE3D,WAAO,IAAI,SAAQ;EACrB;;;;;;;;;;;;EAaO,OAAa,sBAAsB,EAAE,aAAa,WAAW,UAAU,oBAAmB,GAKhG;;AAEC,YAAM,cAAc,MAAM,aAAY,kBAAkB,EAAE,UAAU,oBAAmB,CAAE;AAGzF,YAAM,wBAAwB,aAAY,aAAa,WAAW;AAClE,YAAM,sBAAsB,aAAY,aAAa,SAAS;AAG9D,YAAM,iBAAiB,MAAM,OAAO,kBAAkB;QACpD,UAAc;QACd,aAAc;QACd,WAAc;OACf;AAED,aAAO;IACT,CAAC;;;;;;;;;;;;;;EAcM,OAAa,uBAAuB,EAAE,aAAa,aAAa,UAAS,GAI/E;;AAEC,YAAM,gBAAgB,MAAM,WAAW,oBAAoB;QACzD,UAAc;QACd,aAAc,aAAY,aAAa,WAAW;QAClD,WAAc,aAAY,aAAa,SAAS;OACjD;AAED,aAAO;IACT,CAAC;;;;;;;;;;;;;;;;EAgBM,OAAa,kBAAkB,EAAE,UAAU,oBAAmB,GAGpE;;;AAIC,YAAM,gBAAqC,CAAA;AAE3C,iBAAW,MAAM,qBAAqB;AAEpC,YAAI,YAAW,MAAA,KAAA,GAAG,QAAE,QAAA,OAAA,SAAA,KAAI,GAAG,aAAa,SAAG,QAAA,OAAA,SAAA,KAAI,MAAMQ,sBAAqB,EAAE,KAAK,GAAG,aAAY,CAAE;AAClG,mBAAW,GAAG,SAAS,MAAM,GAAG,EAAE,IAAG,CAAE;AAGvC,cAAM,YAA+B;UACnC,IAAe;UACf,cAAe,aAAY,aAAa,GAAG,YAAY;UACvD,UAAe,GAAG;UAClB,MAAe;;AAGjB,sBAAc,KAAK,SAAS;;AAM9B,YAAM,cAAc,SAAS,IAAI,aAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACvC,OAAO,GAAA;QACV,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,EAAE,IAAG,CAAE;;QAClC;AAKF,YAAM,mBAAqC;QACzC,YAAa;QACb,UAAa;;AAGf,aAAO;;;;;;;;;EASD,OAAO,aAAa,KAAQ;AAClC,UAAM,UAAU,IAAI;AACpB,QAAI;AAEJ,QAAI,YAAY,MAAM;AACpB,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,IAAI,EAAC;eACvD,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,IAAG;eAC/B,YAAY,OAAO;AAC5B,sBAAgB,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;eAC7C,YAAY,OAAO;AAC5B,sBAAgB,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG,IAAI,EAAC;WAC7C;AACL,YAAM,IAAI,MAAM,yBAAyB,OAAO,EAAE;;AAGpD,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACptBI,IAAOC,UAAP,MAAO,gBAAeC,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAIC,iBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAKJ,UAAI,QAAQ,aAAa,QAAQ,qBAAqB;AACpD,cAAM,IAAI,MAAM,0EAA0E;;AAK5F,UAAI,QAAQ,uBAAuB,QAAQ,oBAAoB,WAAW,GAAG;AAC3E,cAAM,IAAI,MAAM,iEAAiE;;AAInF,YAAM,aAAY,MAAA,KAAA,QAAQ,eAAS,QAAA,OAAA,SAAA,MAAI,MAAA,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,eAAS,QAAA,OAAA,SAAA,KAAI;AAGtF,YAAM,SAAS,MAAMD,YAAW,YAAY,EAAE,UAAS,CAAE;AACzD,YAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAI1D,YAAM,aAAaE,SAAQ,OAAO,SAAS,EAAE,YAAW;AAGxD,YAAM,SAAS,OAAO,QAAO,UAAU,IAAI,UAAU;AAGrD,YAAM,sBAAsB,MAAM,QAAO,QAAQ,MAAM;AACvD,YAAM,WAAW,oBAAoB;AAGrC,YAAM,MAAM,IAAIC,WAAU;QACxB,KAAW;QACX;QACA,UAAW,CAAA;QACX,YAAAH;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;EAiBF,OAAa,iBAAiB,EAAE,YAAW,GAGjD;;;AAEC,YAAM,YAAYI,KAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAIC,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,CAAE,kBAAkB,KAAK,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,KAAI,CAAA;AAEjE,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAID,UAASC,cAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BF,OAAa,OAAO,EAAE,aAAa,YAAAN,cAAa,IAAIC,iBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAYG,KAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAIC,UAASC,cAAa,oBAAoB,sBAAsB;;AAI5E,YAAM,MAAM,MAAMH,WAAU,OAAO,EAAE,aAAa,YAAAH,YAAU,CAAE;AAK9D,UAAI,IAAI,SAAS,mBAAoB,WAAW,GAAG;AACjD,cAAM,IAAIK,UAASC,cAAa,oBAAoB,2DAA2D;;AAGjH,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAa,QAAQ,QAAgB,UAA+B;;AAEzE,YAAM,YAAYF,KAAI,MAAM,MAAM;AAGlC,UAAI;AACJ,UAAI;AACF,oBAAYF,SAAQ,UAAU,UAAW,EAAE,EAAE,SAAQ;eACgC,IAA/E;MAA+E;AAGvF,UAAI,CAAC,aAAa,CAAC,WAAW;AAC5B,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKK,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAI1D,YAAM,cAA2B;QAC/B,YAAY;UACV;;QAEF,IAAI,UAAU;;AAGhB,YAAM,SAAS,GAAG,YAAY,EAAE;AAGhC,kBAAY,qBAAqB,CAAC;QAChC,IAAe;QACf,MAAe;QACf,YAAe,YAAY;QAC3B,cAAe;OAChB;AAGD,kBAAY,iBAAiB,CAAC,MAAM;AACpC,kBAAY,kBAAkB,CAAC,MAAM;AACrC,kBAAY,uBAAuB,CAAC,MAAM;AAC1C,kBAAY,uBAAuB,CAAC,MAAM;AAC1C,kBAAY,eAAe,CAAC,MAAM;AAKlC,cAAQ,UAAU,KAAK;QACrB,KAAK,OAAO;AACV,iBAAO,YAAY;AACnB;;QAGF,KAAK,OAAO;AACV,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB,iBAAO,YAAY;AACnB;;;AAIJ,aAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,YAAW,CAAA;IAEf,CAAC;;;AAlPaT,QAAA,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACf7B,IAAYU;CAAZ,SAAYA,0BAAuB;AAKjC,EAAAA,yBAAA,SAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAMA,EAAAA,yBAAA,WAAA,IAAA;AAKA,EAAAA,yBAAA,QAAA,IAAA;AACF,GAvBYA,6BAAAA,2BAAuB,CAAA,EAAA;AAgC5B,IAAMC,gCAA+B;;EAE1C,4BAA4B;;EAG5B,gBAAgB;;EAGhB,2BAA2B;;AAO7B,IAAMC,yBAAwB;EAC5B,SAAYF,yBAAwB;EACpC,QAAYA,yBAAwB;EACpC,OAAYA,yBAAwB;EACpC,SAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;EACpC,WAAYA,yBAAwB;EACpC,QAAYA,yBAAwB;;AA0FhC,IAAOG,UAAP,MAAO,gBAAeC,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2C5B,OAAa,OAAuD,EACzE,YAAAC,cAAa,IAAIC,iBAAe,GAChC,UAAU,CAAA,EAAE,IAIV,CAAA,GAAE;;;AAKJ,UAAI,QAAQ,aAAa,QAAQ,qBAAqB;AACpD,cAAM,IAAI,MAAM,0EAA0E;;AAK5F,UAAI,QAAQ,uBAAuB,QAAQ,oBAAoB,WAAW,GAAG;AAC3E,cAAM,IAAI,MAAM,iEAAiE;;AAInF,YAAM,aAAY,MAAA,KAAA,QAAQ,eAAS,QAAA,OAAA,SAAA,MAAI,MAAA,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAG,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,eAAS,QAAA,OAAA,SAAA,KAAI;AAGtF,YAAM,SAAS,MAAMD,YAAW,YAAY,EAAE,UAAS,CAAE;AACzD,YAAM,YAAY,MAAMA,YAAW,aAAa,EAAE,OAAM,CAAE;AAI1D,YAAM,aAAa,MAAME,aAAY,uBAAuB,EAAE,UAAS,CAAE;AAGzE,YAAM,SAAS,OAAO,QAAO,UAAU,IAAI,UAAU;AAGrD,YAAM,sBAAsB,MAAM,QAAO,QAAQ,QAAQ,OAAO;AAChE,YAAM,WAAW,oBAAoB;AAGrC,YAAM,MAAM,IAAIC,WAAU;QACxB,KAAW;QACX;QACA,UAAW,CAAA;QACX,YAAAH;OACD;AAED,aAAO;;;;;;;;;;;;;;;;;EAiBF,OAAa,iBAAiB,EAAE,YAAW,GAGjD;;;AAEC,YAAM,YAAYI,KAAI,MAAM,YAAY,EAAE;AAC1C,UAAI,aAAa,UAAU,WAAW,KAAK,YAAY;AACrD,cAAM,IAAIC,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAIjG,YAAM,CAAE,QAAQ,IAAK,YAAY,mBAAmB,CAAA;AACpD,YAAM,sBAAqB,KAAA,YAAY,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAM,GAAG,OAAO,QAAQ;AAExF,UAAI,EAAE,sBAAsB,mBAAmB,eAAe;AAC5D,cAAM,IAAID,UAASC,cAAa,eAAe,0FAA0F;;AAG3I,aAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BF,OAAa,OAAO,EAAE,aAAa,YAAAN,cAAa,IAAIC,iBAAe,EAAE,GAG3E;;AAEC,YAAM,YAAYG,KAAI,MAAM,YAAY,GAAG;AAC3C,WAAI,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,YAAW,QAAO,YAAY;AAC3C,cAAM,IAAIC,UAASC,cAAa,oBAAoB,sBAAsB;;AAI5E,YAAM,MAAM,MAAMH,WAAU,OAAO,EAAE,aAAa,YAAAH,YAAU,CAAE;AAK9D,UAAI,IAAI,SAAS,mBAAoB,WAAW,GAAG;AACjD,cAAM,IAAIK,UAASC,cAAa,oBAAoB,2DAA2D;;AAGjH,aAAO;IACT,CAAC;;;;;;;;;EASM,OAAa,QAAQ,QAAgB,SAA8B;;AACxE,UAAI;AAEF,cAAM,cAAc,MAAM,QAAO,eAAe,EAAE,QAAQ,QAAO,CAAE;AAGnE,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKC,4BAA2B,GAAA,EAC9B,YAAW,CAAA;eAGN,OAAY;AAEnB,YAAI,EAAE,iBAAiBF;AAAW,gBAAM,IAAI,MAAM,KAAK;AAGvD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKE,4BAA2B,GAAA,EAC9B,uBAAqB,OAAA,OAAA,EACnB,OAAO,MAAM,KAAI,GACd,MAAM,WAAW,EAAE,cAAc,MAAM,QAAO,CAAE,EAAA,CAAA;;IAI3D,CAAC;;;;;;;;;;EAUO,OAAa,eAAe,EAAE,QAAQ,UAAU,CAAA,EAAE,GAGzD;;AACC,YAAM,EACJ,iBAAiB,gCACjB,gCAAgC,OAChC,mCAAmC,OACnC,kBAAkB,iBAAgB,IAChC;AAKJ,YAAM,cAA2B,EAAE,IAAI,GAAE;AAQzC,YAAM,YAAYH,KAAI,MAAM,MAAM;AAClC,UAAI,CAAC,WAAW;AACd,cAAM,IAAIC,UAASC,cAAa,YAAY,oBAAoB,MAAM,EAAE;;AAE1E,YAAM,iBAAiB,UAAU;AASjC,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,cAAM,IAAID,UAASC,cAAa,oBAAoB,yBAAyB,UAAU,MAAM,EAAE;;AAEjG,UAAI,CAAC,QAAO,mBAAmB,SAAS,GAAG;AACzC,cAAM,IAAID,UAASC,cAAa,YAAY,oBAAoB,MAAM,EAAE;;AAQ1E,YAAM,8BAA8B,MAAM,QAAO,sBAAsB;QACrE;QACA;QACA,SAAS,EAAE,kCAAkC,gBAAe;OAC7D;AASD,kBAAY,KAAK,UAAU;AAM3B,kBAAY,qBAAqB,CAAC,2BAA2B;AAQ7D,kBAAY,iBAAiB,CAAC,4BAA4B,EAAE;AAC5D,kBAAY,kBAAkB,CAAC,4BAA4B,EAAE;AAC7D,kBAAY,uBAAuB,CAAC,4BAA4B,EAAE;AAClE,kBAAY,uBAAuB,CAAC,4BAA4B,EAAE;AASlE,UAAI,kCAAkC,MAAM;AAO1C,cAAM,4BACH,oBAAoB,+BACjB,8BACA;AAON,cAAM,+BAA+B,MAAM,KAAK,uBAAuB;UACrE;UACA;UACA,SAAS,EAAE,kCAAkC,iBAAiB,0BAAyB;SACxF;AAMD,oBAAY,mBAAmB,KAAK,4BAA4B;AAOhE,oBAAY,eAAe,CAAC,6BAA6B,EAAE;;AAQ7D,YAAM,eAAe,CAAE,cAAc;AAMrC,YAAM,0BAA0BE,4BAA2B,EAAE,YAAW,CAAE;AAC1E,8BAAwB,QAAQ,CAAC,aAAoB;AACnD,cAAM,UAAUZ,8BAA6B,QAAqD;AAClG,qBAAa,KAAK,OAAO;MAC3B,CAAC;AACD,kBAAY,UAAU,IAAI;AAK1B,aAAO;IACT,CAAC;;;;;;;EAOO,OAAa,uBAAuB,EAAE,QAAQ,gBAAgB,QAAO,GAI5E;;AACC,YAAM,EAAE,kCAAkC,gBAAe,IAAK;AAK9D,YAAM,qBAA4C,EAAE,IAAI,IAAI,MAAM,IAAI,YAAY,GAAE;AAMpF,YAAM,EACJ,UAAU,gBACV,gBAAgB,gBAAe,IAC7B,MAAM,QAAO,oBAAoB,EAAE,eAAc,CAAE;AAWvD,YAAM,eAAe,eAAe;AACpC,YAAM,iBAAiBM,aAAY,6BAA6B,eAAe;AAC/E,UAAI,iBAAiB,gBAAgB;AACnC,cAAM,IAAIG,UAASC,cAAa,wBAAwB,YAAY,YAAY,mBAAmB,cAAc,EAAE;;AAQrH,YAAM,oBAAoBG,uBAAsB;QAC9C,UAAiB;QACjB,gBAAiB;OAClB;AAOD,yBAAmB,KAAK,GAAG,MAAM,IAAI,iBAAiB;AACtD,UAAI;AACF,YAAI,IAAI,mBAAmB,EAAE;eACtB,OAAY;AACnB,cAAM,IAAIJ,UAASC,cAAa,eAAe,gDAAgD;;AAQjG,UAAI,EAAE,mBAAmBV,gCAA+B;AACtD,cAAM,IAAIS,UAASC,cAAa,0BAA0B,uBAAuB,eAAe,EAAE;;AAQpG,YAAM,yBAAyB,CAAC,YAAY,kBAAkB,2BAA2B;AACzF,UAAI,qCAAqC,SACpC,CAAE,uBAAuB,SAAS,eAAe,GAAI;AACxD,cAAM,IAAID,UAASC,cAAa,sBAAsB,cAAc,eAAe,6DAA6D;;AAMlJ,yBAAmB,OAAO;AAK1B,yBAAmB,aAAa;AAShC,UAAI,oBAAoB,6BAA6B;AACnD,2BAAmB,qBAAqB;;AAO1C,UAAI,oBAAoB,kBAAkB;AACxC,cAAM,EAAE,IAAG,IAAK,MAAMJ,aAAY,gBAAgB,EAAE,MAAM,gBAAe,CAAE;AAC3E,2BAAmB,eAAe,MAAMA,aAAY,aAAa,GAAI,EAAE,iBAAiB,EAAE,eAAc,CAAE;;AAM5G,aAAO;IACT,CAAC;;;;;;;;EAQO,OAAa,sBAAsB,EAAE,QAAQ,gBAAgB,QAAO,GAI3E;;AACC,YAAM,EAAE,kCAAkC,gBAAe,IAAK;AAK9D,YAAM,qBAA4C,EAAE,IAAI,IAAI,MAAM,IAAI,YAAY,GAAE;AAMpF,YAAM,EACJ,UAAU,gBACV,gBAAgB,iBAChB,eAAc,IACZQ,uBAAsB,EAAE,gBAAgB,eAAc,CAAE;AAQ5D,YAAM,eAAe,eAAe;AACpC,YAAM,iBAAiBR,aAAY,6BAA6B,eAAe;AAC/E,UAAI,iBAAiB,gBAAgB;AACnC,cAAM,IAAIG,UAASC,cAAa,wBAAwB,YAAY,YAAY,mBAAmB,cAAc,EAAE;;AAQrH,UAAIK,WAAU;AACd,cAAQ,gBAAgB;QACtB,KAAK;AACH,UAAAA,WAAU,MAAMC,WAAU,kBAAkB,EAAE,eAAc,CAAE;AAC9D;QACF,KAAK;AACH,UAAAD,WAAU,MAAME,SAAQ,kBAAkB,EAAE,eAAc,CAAE;AAC5D;QACF,KAAK;AAGH,UAAAF,WAAU;AACV;;AAEJ,UAAI,CAACA,UAAS;AACZ,cAAM,IAAIN,UAASC,cAAa,kBAAkB,8BAA8B;;AAQlF,yBAAmB,KAAK,GAAG,MAAM,IAAI,cAAc;AACnD,UAAI;AACF,YAAI,IAAI,mBAAmB,EAAE;eACtB,OAAY;AACnB,cAAM,IAAID,UAASC,cAAa,eAAe,gDAAgD;;AAQjG,UAAI,EAAE,mBAAmBV,gCAA+B;AACtD,cAAM,IAAIS,UAASC,cAAa,0BAA0B,uBAAuB,eAAe,EAAE;;AAQpG,YAAM,yBAAyB,CAAC,YAAY,kBAAkB,4BAA4B;AAC1F,UAAI,qCAAqC,SACpC,CAAE,uBAAuB,SAAS,eAAe,GAAI;AACxD,cAAM,IAAID,UAASC,cAAa,sBAAsB,cAAc,eAAe,6DAA6D;;AAMlJ,yBAAmB,OAAO;AAK1B,yBAAmB,aAAa;AAShC,UAAI,oBAAoB,8BAA8B;AACpD,2BAAmB,qBAAqB;;AAO1C,UAAI,oBAAoB,kBAAkB;AACxC,cAAM,EAAE,IAAG,IAAK,MAAMJ,aAAY,gBAAgB,EAAE,MAAM,gBAAe,CAAE;AAC3E,2BAAmB,eAAe,MAAMA,aAAY,aAAa,GAAI,EAAE,iBAAiB,EAAE,eAAc,CAAC;;AAM3G,aAAO;IACT,CAAC;;;;;;;;;EAUO,OAAa,oBAAoB,EAAE,eAAc,GAExD;;AAIC,UAAI,sBAAqF;QACvF,UAAiB,IAAI,WAAU;QAC/B,gBAAiB;;AAYnB,YAAM,EACJ,UAAU,gBACV,gBAAgB,gBAAe,IAC7BQ,uBAAsB,EAAE,gBAAgB,eAAc,CAAE;AAS5D,UAAI,oBAAoB,KAAM;AAC5B,cAAM,mBAAmB,MAAMR,aAAY,aAAa,SAAS,EAAE,iBAAiB;UAClF;SACD;AACD,cAAM,+BAA+B,MAAMW,SAAQ,yBAAyB;UAC1E,WAAW;SACZ;AACD,cAAM,oCAAoC,MAAMX,aAAY,aAAa,SAAS,EAAE,iBAAiB;UACnG,WAAW;SACZ;AAMD,8BAAsB;UACpB,UAAiB;UACjB,gBAAiB;;;AAOrB,aAAO;IACT,CAAC;;;;;;;;;;EAUO,OAAO,mBAAmB,WAAc;AAC9C,UAAM,EAAE,QAAQ,IAAI,eAAc,IAAK;AACvC,UAAM,CAAE,MAAM,IAAK,UAAU,IAAI,MAAM,KAAK,CAAC;AAQ7C,UAAM,UAAU;AAEhB,WACE,WAAW,SACX,WAAW,SACX,OAAO,OAAO,IAAI,KAClBY,iBAAgB,cAAc,MAAM,YACpC,eAAe,WAAW,GAAG;EAEjC;;AAjsBchB,QAAA,aAAa;AAusBvB,IAAOI,eAAP,MAAO,aAAW;;;;;;;;;;;;;;EA8Ef,OAAa,gBAAgB,EAAE,IAAG,GAExC;;AACC,YAAM,SAAmB,CAAA;AAEzB,UAAI,IAAI,KAAK;AACX,eAAO,KAAK,IAAI,GAAG;AACnB,YAAI,IAAI,GAAG;AACT,iBAAO,KAAK,SAAS;eAChB;AACL,iBAAO,KAAK,QAAQ;;;AAIxB,YAAM,YAAY,OAAO,KAAK,GAAG;AACjC,YAAM,OAAO,aAAY,kBAAkB,SAAS;AAEpD,UAAI,SAAS,QAAW;AACtB,cAAM,IAAI,MAAM,8CAA8C,SAAS,GAAG;;AAG5E,YAAM,OAAOa,YAAW,gBAAgB,EAAE,KAAI,CAAE;AAEhD,aAAO,EAAE,MAAM,KAAI;IACrB,CAAC;;;;;;;;EAQM,OAAO,cACZ,OAAa;AAGb,UAAM,cAAc;MAClB,SAAcC,WAAU;MACxB,aAAcJ,WAAU;;AAG1B,UAAM,aAAa,YAAY,KAAK;AAEpC,QAAI,CAAC;AAAY,YAAM,IAAIP,UAASC,cAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEpG,WAAO;EACT;;;;;;;EAQO,OAAO,aAAa,OAAa;AACtC,UAAM,aAAqD;MACzD,WAAcO;MACd,SAAcG;MACd,aAAcJ;MACd,UAAcK;;AAGhB,UAAM,YAAY,WAAW,KAAK;AAElC,QAAI,CAAC;AAAW,YAAM,IAAIZ,UAASC,cAAa,sBAAsB,sBAAsB,KAAK,EAAE;AAEnG,WAAO;EACT;;;;;;;;;;;;;;EAeO,OAAa,gBAAgB,EAAE,MAAM,KAAI,GAG/C;;AAEC,UAAI,EAAE,OAAO,CAAC,OAAO,OAAO;AAC1B,cAAM,IAAI,MAAM,wDAAwD;;AAI1E,aAAQ,SAAS,SAAcS,YAAW,gBAAgB,EAAE,KAAW,CAAE,IAAI;AAE7E,YAAM,YAAY;AAClB,YAAM,OAAO,aAAY,kBAAkB,SAAS;AAEpD,UAAI,SAAS,QAAW;AACtB,cAAM,IAAI,MAAM,0CAA0C;;AAG5D,aAAA,OAAA,OAAA,CAAA,GAAY,IAAI;IAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BM,OAAa,uBAAuB,EAAE,UAAS,GAErD;;;AACC,UAAI,GAAE,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,QAAO,UAAU,OAAOlB,yBAAwB;AAC/D,cAAM,IAAIQ,UAASC,cAAa,sBAAsB,iDAAgD,KAAA,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,SAAG,QAAA,OAAA,SAAA,KAAI,WAAW,EAAE;;AAIvI,UAAI,iBAAiB,MAAM,aAAY,aAAa,UAAU,GAAG,EAAE,iBAAiB,EAAE,UAAS,CAAE;AAGjG,UAAI,kCAAkC,KAAK,UAAU,GAAG,GAAG;AACzD,yBAAiB,MAAM,aAAY,cAAc,UAAU,GAAG,EAAE,EAAE,eAAc,CAAE;;AAIpF,YAAM,EAAE,MAAM,eAAc,IAAK,MAAM,aAAY,gBAAgB,EAAE,KAAK,UAAS,CAAE;AAGrF,YAAM,cAAcG,uBAAsB;QACxC,UAAU;QACV;OACD;AAED,aAAO;;;;AAzNMP,aAAA,oBAA+C;EAC5D,kBAAsB;EACtB,mBAAsB;EACtB,oBAAsB;EACtB,qBAAsB;EACtB,iBAAsB;EACtB,kBAAsB;;AAOVA,aAAA,+BAAuD;;EAEnE,KAAM;;EAGN,KAAM;;EAGN,KAAM;;AAkBOA,aAAA,oBAA4C;EACzD,eAAmB,EAAE,KAAK,WAAa,KAAK,OAAO,GAAG,GAAE;EACxD,gBAAmB,EAAE,KAAK,WAAa,KAAK,OAAO,GAAG,IAAW,GAAG,GAAE;EACtE,iBAAmB,EAAE,KAAK,aAAa,KAAK,MAAO,GAAG,IAAI,GAAG,GAAE;EAC/D,kBAAmB,EAAE,KAAK,aAAa,KAAK,MAAO,GAAG,IAAI,GAAG,IAAI,GAAG,GAAE;EACtE,cAAmB,EAAE,KAAK,UAAa,KAAK,OAAO,GAAG,GAAE;EACxD,eAAmB,EAAE,KAAK,UAAa,KAAK,OAAO,GAAG,IAAW,GAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvhCpE,IAAOgB,UAAP,MAAO,gBAAeC,WAAS;;;;;;;;EAc5B,OAAa,QAAQ,QAAgB,UAA+B;;AAEzE,YAAM,YAAYC,KAAI,MAAM,MAAM;AAGlC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKC,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,aAAY,EAAE,CAAA;;AAKlD,UAAI,UAAU,WAAW,QAAO,YAAY;AAC1C,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,qBAAoB,EAAE,CAAA;;AAM1D,UAAI,UAAU,WAAW,UAAU,GAAG,QAAQ,MAAM,GAAG,CAAC;AAGxD,gBAAU,mBAAmB,OAAO;AAGpC,YAAM,iBAAiB,UAAU,GAAG,SAAS,GAAG,IAC9C,GAAG,OAAO,cACV,GAAG,OAAO;AAEZ,UAAI;AAEF,cAAM,WAAW,MAAM,MAAM,cAAc;AAG3C,YAAI,CAAC,SAAS;AAAI,gBAAM,IAAI,MAAM,iCAAiC;AAGnE,cAAM,cAAc,MAAM,SAAS,KAAI;AAEvC,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,YAAW,CAAA;eAGN,OAAY;AAEnB,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKA,4BAA2B,GAAA,EAC9B,uBAAuB,EAAE,OAAO,WAAU,EAAE,CAAA;;IAGlD,CAAC;;;AA/DaH,QAAA,aAAa;;;;AC7B7B,IAAAI,aAAe;AACf,IAAAC,gBAAsB;;;ACAtB,IAAAC,iBAAA;AAMO,IAAMC,wBAAyC;EACpD,KAAK,SAAU,MAAY;AACzB,WAAO;EACT;EACA,KAAK,SAAU,MAAc,QAA2B;AACtD,WAAO;EACT;EACA,QAAQ,SAAU,MAAY;AAC5B,WAAO;EACT;EACA,OAAO,WAAA;AACL,WAAO;EACT;EACA,OAAO,WAAA;AACL,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwCI,IAAOC,qBAAP,MAAwB;;;;;;EAgB5B,YAAY,EAAE,OAAO,aAAY,GAA2B;AAPpD,SAAA,eAA+C,oBAAI,IAAG;AAQ5D,SAAK,QAAQ,SAASC;AAEtB,eAAW,YAAY,cAAc;AACnC,WAAK,aAAa,IAAI,SAAS,YAAY,QAAQ;;EAEvD;;;;;;;;;;;EAYa,QAAQ,QAAgB,SAA8B;;AAEjE,YAAM,YAAYC,KAAI,MAAM,MAAM;AAClC,UAAI,CAAC,WAAW;AACd,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKC,4BAA2B,GAAA,EAC9B,uBAAuB;UACrB,OAAeC,cAAa;UAC5B,cAAe,oBAAoB,MAAM;UAC1C,CAAA;;AAIL,YAAM,WAAW,KAAK,aAAa,IAAI,UAAU,MAAM;AACvD,UAAI,CAAC,UAAU;AACb,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACKD,4BAA2B,GAAA,EAC9B,uBAAuB;UACrB,OAAeC,cAAa;UAC5B,cAAe,yBAAyB,UAAU,MAAM;UACzD,CAAA;;AAIL,YAAM,yBAAyB,MAAM,KAAK,MAAM,IAAI,UAAU,GAAG;AAEjE,UAAI,wBAAwB;AAC1B,eAAO;aACF;AACL,cAAM,mBAAmB,MAAM,SAAS,QAAQ,UAAU,KAAK,OAAO;AAEtE,cAAM,KAAK,MAAM,IAAI,UAAU,KAAK,gBAAgB;AAEpD,eAAO;;IAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BK,YACJ,QACA,UAAkC;;AAIlC,YAAM,eAAeF,KAAI,MAAM,MAAM;AAErC,UAAI,CAAC,cAAc;AACjB,eAAO;UACL,uBAAwB,EAAE,OAAOE,cAAa,cAAa;UAC3D,eAAwB;UACxB,iBAAwB,CAAA;;;AAK5B,YAAM,EAAE,aAAa,uBAAuB,oBAAmB,IAAK,MAAM,KAAK,QAAQ,aAAa,GAAG;AAEvG,UAAI,CAAC,aAAa;AAChB,eAAO;UACL,uBAAwB,EAAE,OAAO,sBAAsB,MAAK;UAC5D,eAAwB;UACxB,iBAAwB,CAAA;;;AAK5B,UAAI,CAAC,aAAa,YAAY,aAAa,OAAO;AAChD,eAAO;UACL,uBAAwB,EAAE,aAAa,uBAAsB;UAC7D,eAAwB;UACxB,iBAAwB;;;AAI5B,YAAM,EAAE,UAAU,CAAA,GAAI,qBAAqB,CAAA,EAAE,IAAK;AAMlD,YAAM,QAAQ,oBAAI,IAAI,CAAC,QAAQ,aAAa,UAAU,IAAI,aAAa,QAAQ,EAAE,CAAC;AAElF,UAAI;AAGJ,eAAS,MAAM,oBAAoB;AACjC,YAAI,MAAM,IAAI,GAAG,EAAE,GAAG;AACpB,wBAAc;AACd;;;AAKJ,eAAS,OAAO,SAAS;AACvB,YAAI,MAAM,IAAI,IAAI,EAAE,GAAG;AACrB,wBAAc;AACd;;;AAIJ,UAAI,aAAa;AACf,eAAO;UACL,uBAAwB,EAAE,aAAa,uBAAsB;UAC7D,eAAwB;UACxB,iBAAwB;;aAErB;AACL,eAAO;UACL,uBAAwB,EAAE,OAAOA,cAAa,SAAQ;UACtD,eAAwB;UACxB,iBAAwB,CAAA;;;IAG9B,CAAC;;;;;AC1OH,IAAAC,iBAAA;;;;;;;ACCA,IAAMC,YAAmB;AAGzB,IAAMC,OAAkB,IAAI,WAAW;EACrC;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EAAM;EACtD;EAAM;EAAM;EAAM;EAAM;EAAM;AAChC,CAAC;AAEM,SAASC,QAAO,KAAyB;AAC9C,QAAM,MAAgB,IAAI,MAAM,EAAE,EAAE,KAAK,EAAE;AAE3C,MAAI,IAAI,WAAW,IAAI;AACrB,UAAM,IAAI,MAAM,gBAAgB;EAClC;AAGA,MAAI,CAAC,IAAIF,WAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAIA,UAAS,IAAI,CAAC,IAAI,EAAE;AAC7B,MAAI,CAAC,IAAIA,WAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAIA,WAAU,IAAI,CAAC,IAAI,OAAO,CAAC;AACpC,MAAI,CAAC,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAIA,WAAW,IAAI,CAAC,IAAI,OAAO,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,CAAC,IAAIA,WAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACrC,MAAI,CAAC,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC7D,MAAI,CAAC,IAAIA,UAAS,IAAI,CAAC,IAAI,EAAE;AAG7B,MAAI,EAAE,IAAIA,WAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACtC,MAAI,EAAE,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,EAAE,IAAIA,WAAU,IAAI,CAAC,IAAI,OAAO,CAAC;AACrC,MAAI,EAAE,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC9D,MAAI,EAAE,IAAIA,WAAW,IAAI,CAAC,IAAI,OAAO,KAAO,IAAI,CAAC,IAAI,QAAQ,CAAE;AAC/D,MAAI,EAAE,IAAIA,WAAU,IAAI,CAAC,IAAI,QAAQ,CAAC;AACtC,MAAI,EAAE,IAAIA,WAAW,IAAI,CAAC,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAC/D,MAAI,EAAE,IAAIA,UAAS,IAAI,EAAE,IAAI,EAAE;AAC/B,MAAI,EAAE,IAAIA,WAAU,IAAI,EAAE,IAAI,QAAQ,CAAC;AACvC,MAAI,EAAE,IAAIA,WAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAIA,WAAU,IAAI,EAAE,IAAI,OAAO,CAAC;AACtC,MAAI,EAAE,IAAIA,WAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAIA,WAAW,IAAI,EAAE,IAAI,OAAO,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AACjE,MAAI,EAAE,IAAIA,WAAU,IAAI,EAAE,IAAI,QAAQ,CAAC;AACvC,MAAI,EAAE,IAAIA,WAAW,IAAI,EAAE,IAAI,MAAM,KAAO,IAAI,EAAE,IAAI,QAAQ,CAAE;AAChE,MAAI,EAAE,IAAIA,UAAS,IAAI,EAAE,IAAI,EAAE;AAE/B,SAAO,IAAI,KAAK,EAAE;AACpB;AAEO,SAASG,QAAO,GAAuB;AAC5C,MAAI,EAAE,WAAW,IAAI;AACnB,UAAM,IAAI,MAAM,gBAAgB;EAClC;AAEA,QAAM,UAAU,IAAI,YAAY;AAChC,QAAM,IAAgB,QAAQ,OAAO,CAAC;AAGtC,MACEF,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,CAAC,CAAC,MAAM,OACdA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,OACfA,KAAI,EAAE,EAAE,CAAC,MAAM,KAAM;AACrB,UAAM,IAAI,MAAM,0BAA0B;EAC5C;AAEA,QAAM,KAAK,IAAI,WAAW,EAAE;AAG5B,KAAG,CAAC,IAAKA,KAAI,EAAE,CAAC,CAAC,KAAK,IAAKA,KAAI,EAAE,CAAC,CAAC;AACnC,KAAG,CAAC,IAAKA,KAAI,EAAE,CAAC,CAAC,KAAK,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK;AACzC,KAAG,CAAC,KAAMA,KAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK;AAClE,KAAG,CAAC,KAAMA,KAAI,EAAE,CAAC,CAAC,IAAI,OAAO,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK;AAChD,KAAG,CAAC,KAAMA,KAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK,IAAMA,KAAI,EAAE,CAAC,CAAC,KAAK;AAClE,KAAG,CAAC,KAAMA,KAAI,EAAE,CAAC,CAAC,IAAI,MAAM,IAAKA,KAAI,EAAE,CAAC,CAAC;AAGzC,KAAG,CAAC,IAAKA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AAC3C,KAAG,CAAC,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AACrE,KAAG,CAAC,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,OAAO,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AAClD,KAAG,CAAC,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AACrE,KAAG,EAAE,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAKA,KAAI,EAAE,EAAE,CAAC;AAC5C,KAAG,EAAE,IAAKA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AAC5C,KAAG,EAAE,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AACtE,KAAG,EAAE,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,OAAO,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AACnD,KAAG,EAAE,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK,IAAMA,KAAI,EAAE,EAAE,CAAC,KAAK;AACtE,KAAG,EAAE,KAAMA,KAAI,EAAE,EAAE,CAAC,IAAI,MAAM,IAAKA,KAAI,EAAE,EAAE,CAAC;AAE5C,SAAO;AACT;;;;ACtIO,SAASG,WAAU,MAAc;AACtC,MAAI;AACJ,QAAM,MAAM,IAAI,WAAW,EAAE;AAG7B,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO;AAClD,MAAI,CAAC,IAAK,MAAM,KAAM;AACtB,MAAI,CAAC,IAAK,MAAM,IAAK;AACrB,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO;AACnD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,EAAE,KAAM,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAiB;AACrE,MAAI,EAAE,IAAK,IAAI,aAAe;AAC9B,MAAI,EAAE,IAAK,MAAM,KAAM;AACvB,MAAI,EAAE,IAAK,MAAM,KAAM;AACvB,MAAI,EAAE,IAAK,MAAM,IAAK;AACtB,MAAI,EAAE,IAAI,IAAI;AAEd,SAAO;AACT;;;AChCA,IAAAC,iBAAA;AAAA,IAAIC,SAAQ,KAAK;;;ACOjB,IAAMC,UAAS;AAER,IAAMC,QAAN,MAAW;;EAEd,YAAY,OAAO;AACf,SAAK,QAAQ;AACb,QAAI,MAAM,WAAW,IAAI;AACrB,YAAM,IAAI,UAAU,oBAAoB;IAC5C;EACJ;;;;;;;;;EASA,OAAO,aAAa,UAAU,OAAO,SAAS,SAAS;AACnD,QAAI,CAAC,OAAO,UAAU,QAAQ,KAC1B,CAAC,OAAO,UAAU,KAAK,KACvB,CAAC,OAAO,UAAU,OAAO,KACzB,CAAC,OAAO,UAAU,OAAO,KACzB,WAAW,KACX,QAAQ,KACR,UAAU,KACV,UAAU,KACV,WAAW,mBACX,QAAQ,QACR,UAAU,cACV,UAAU,YAAY;AACtB,YAAM,IAAI,WAAW,qBAAqB;IAC9C;AACA,UAAM,QAAQ,IAAI,WAAW,EAAE;AAC/B,UAAM,CAAC,IAAI,WAAWC,OAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAWA,OAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAWA,OAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAWA,OAAA,GAAK,EAAA;AAC3B,UAAM,CAAC,IAAI,WAAWA,OAAA,GAAK,CAAA;AAC3B,UAAM,CAAC,IAAI;AACX,UAAM,CAAC,IAAI,MAAQ,UAAU;AAC7B,UAAM,CAAC,IAAI;AACX,UAAM,CAAC,IAAI,MAAQ,YAAY;AAC/B,UAAM,CAAC,IAAI,YAAY;AACvB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI;AACZ,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI,YAAY;AACxB,UAAM,EAAE,IAAI;AACZ,WAAO,IAAID,MAAK,KAAK;EACzB;;EAEA,WAAW;AACP,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,cAAQD,QAAO,OAAO,KAAK,MAAM,CAAC,MAAM,CAAC;AACzC,cAAQA,QAAO,OAAO,KAAK,MAAM,CAAC,IAAI,EAAG;AACzC,UAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG;AAC1C,gBAAQ;MACZ;IACJ;AACA,WAAO;EACX;;EAEA,QAAQ;AACJ,WAAO,IAAIC,MAAK,KAAK,MAAM,MAAM,CAAC,CAAC;EACvC;;EAEA,OAAO,OAAO;AACV,WAAO,KAAK,UAAU,KAAK,MAAM;EACrC;;;;;EAKA,UAAU,OAAO;AACb,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,YAAM,OAAO,KAAK,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC;AAC1C,UAAI,SAAS,GAAG;AACZ,eAAO,KAAK,KAAK,IAAI;MACzB;IACJ;AACA,WAAO;EACX;AACJ;AAEA,IAAME,eAAN,MAAkB;EACd,cAAc;AACV,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,SAAS,IAAIC,eAAc;EACpC;;;;;;;;;;;EAWA,WAAW;AACP,UAAM,QAAQ,KAAK,gBAAgB;AACnC,QAAI,UAAU,QAAW;AACrB,aAAO;IACX,OACK;AAED,WAAK,YAAY;AACjB,aAAO,KAAK,gBAAgB;IAChC;EACJ;;;;;;;;;;EAUA,kBAAkB;AACd,UAAM,cAAc;AACpB,UAAM,qBAAqB;AAC3B,UAAM,KAAK,KAAK,IAAI;AACpB,QAAI,KAAK,KAAK,WAAW;AACrB,WAAK,YAAY;AACjB,WAAK,aAAa;IACtB,WACS,KAAK,qBAAqB,KAAK,WAAW;AAE/C,WAAK;AACL,UAAI,KAAK,UAAU,aAAa;AAE5B,aAAK;AACL,aAAK,aAAa;MACtB;IACJ,OACK;AAED,aAAO;IACX;AACA,WAAOH,MAAK,aAAa,KAAK,WAAW,KAAK,MAAM,KAAK,UAAUC,OAAA,GAAK,EAAA,CAAE,GAAG,KAAK,UAAWA,OAAA,GAAK,EAAA,IAAK,GAAI,KAAK,OAAO,WAAW,CAAC;EACvI;;EAEA,eAAe;AACX,SAAK,UACD,KAAK,OAAO,WAAW,IAAI,QAAS,KAAK,OAAO,WAAW,IAAI;EACvE;AACJ;AAEA,IAAIG,mBAAkB,CAAC,WAAW;AAE9B,MAAI,OAAO,yBAAyB,eAAe,sBAAsB;AACrE,UAAM,IAAI,MAAM,2CAA2C;EAC/D;AACA,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,WAAO,CAAC,IACJ,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,QAChC,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK;EAC5C;AACA,SAAO;AACX;AAEA,IAAI,OAAO,WAAW,eAAe,OAAO,iBAAiB;AACzD,EAAAA,mBAAkB,CAAC,WAAW,OAAO,gBAAgB,MAAM;AAC/D;AAMA,IAAMD,iBAAN,MAAoB;EAChB,cAAc;AACV,SAAK,SAAS,IAAI,YAAY,CAAC;AAC/B,SAAK,SAAS;EAClB;EACA,aAAa;AACT,QAAI,KAAK,UAAU,KAAK,OAAO,QAAQ;AACnC,MAAAC,iBAAgB,KAAK,MAAM;AAC3B,WAAK,SAAS;IAClB;AACA,WAAO,KAAK,OAAO,KAAK,QAAQ;EACpC;AACJ;AACA,IAAIC;AASG,IAAMC,aAAY,OAAOD,sBAAqBA,oBAAmB,IAAIH,aAAY,IAAI,SAAS;ACvMrG,SAASK,eAAc,KAAsB;AAC3C,MAAI,IAAI,SAAS,IAAI;AACnB,WAAO;EACT;AAEA,MAAI;AAAM,MAAI;AAAG,MAAI;AAErB,OAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK,GAAG;AAC7C,WAAO,IAAI,WAAW,CAAC;AACvB,QAAI,EAAE,OAAO,MAAM,OAAO,MAAM;AAC9B,aAAO;IACT;EACF;AACA,SAAO;AACT;AAEO,IAAMC,UAAN,MAAqC;EAC1C,YAAoB,QAAmB,SAAiB,IAAI;AAAxC,SAAA,SAAA;AAAmB,SAAA,SAAA;AACrC,QAAI,CAACD,eAAc,MAAM,GAAG;AAC1B,YAAM,IAAI,MAAM,wDAAwD;IAC1E;AACA,SAAK,SAAS;AAEd,QAAI,QAAQ;AACV,WAAK,SAAS;IAChB,OAAO;AACL,YAAM,OAAOD,WAAU;AACvB,WAAK,SAASG,QAAO,KAAK,KAAK;IACjC;AAEA,QAAI,KAAK,OAAO,WAAW,IAAI;AAC7B,YAAM,IAAI,MAAM,yDAAyD,OAAO,MAAA,EAAQ;IAC1F;AAEA,QAAI,KAAK,OAAO,CAAC,IAAI,KAAK;AACxB,YAAM,IAAI,MAAM,4DAA4D;IAC9E;AAIA,UAAM,SAASC,QAAO,KAAK,MAAM;EACnC;EAEO,UAAa;AAClB,WAAO,KAAK;EACd;EAEO,YAAoB;AACzB,WAAO,KAAK;EACd;EAEO,OAA+B,QAAsB;AAC1D,UAAM,OAAO;AACb,QAAI,KAAK,WAAW,QAAQ;AAC1B,YAAM,IAAI,MAAM,iCAAiC,KAAK,MAAA,YAAkB,MAAA,EAAQ;IAClF;AACA,WAAO;EACT;EAEO,cAA0B;AAC/B,WAAOA,QAAO,KAAK,MAAM;EAC3B;EAEO,SAAiB;AACtB,UAAM,OAAO,IAAIV,MAAK,KAAK,YAAY,CAAC;AACxC,WAAO,KAAK,SAAS;EACvB;EAEO,WAAmB;AACxB,QAAI,KAAK,WAAW,IAAI;AACtB,aAAO,KAAK;IACd;AACA,WAAO,GAAG,KAAK,MAAA,IAAU,KAAK,MAAA;EAChC;EAEA,OAAO,WAAmC,KAAwB;AAChE,UAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,QAAI,MAAM,WAAW,GAAG;AACtB,aAAO,IAAIQ,QAAU,IAAS,MAAM,CAAC,CAAC;IACxC;AACA,QAAI,MAAM,WAAW,GAAG;AACtB,UAAI,MAAM,CAAC,MAAM,IAAI;AACnB,cAAM,IAAI,MAAM,oEAAoE,GAAA,EAAK;MAC3F;AACA,aAAO,IAAIA,QAAU,MAAM,CAAC,GAAQ,MAAM,CAAC,CAAC;IAC9C;AACA,UAAM,IAAI,MAAM,0BAA0B,GAAA,EAAK;EACjD;EAEA,OAAO,cAAsC,QAAW,OAA8B;AACpF,UAAM,SAASC,QAAO,KAAK;AAC3B,WAAO,IAAID,QAAO,QAAQ,MAAM;EAClC;EAEA,OAAO,SAAiC,QAAW,MAAyB;AAC1E,UAAM,SAASC,QAAOE,WAAU,IAAI,CAAC;AACrC,WAAO,IAAIH,QAAO,QAAQ,MAAM;EAClC;AACF;AAKO,SAASI,QAAyB,SAAY,IAAS,SAAiB,IAAe;AAC5F,SAAO,IAAIJ,QAAO,QAAQ,MAAM;AAClC;;;AC7GA,IAAAK,iBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA,IAAMC,UAAS,IAAIC,iBAAS;AAuEtB,IAAOC,OAAP,MAAO,KAAG;;;;;;;;;;;;EAiBd,OAAa,KAAK,SAAuB;;AACvC,YAAM,EAAE,WAAW,QAAO,IAAK;AAC/B,YAAM,SAAS,MAAM,UAAU,UAAS;AAExC,UAAI,OAAO,OAAO;AAClB,UAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1B,eAAO,GAAG,UAAU,GAAG,GAAG,IAAI;;AAGhC,YAAM,SAA0B;QAC9B,KAAM;QACN,KAAM,OAAO;QACb,KAAM;;AAGR,YAAM,yBAAyBC,SAAQ,OAAO,MAAM,EAAE,YAAW;AACjE,YAAM,0BAA0BA,SAAQ,OAAO,OAAO,EAAE,YAAW;AAEnE,YAAM,SAAS,GAAG,sBAAsB,IAAI,uBAAuB;AACnE,YAAM,cAAcA,SAAQ,OAAO,MAAM,EAAE,aAAY;AAEvD,YAAM,iBAAiB,MAAM,OAAO,KAAK,EAAE,MAAM,YAAW,CAAE;AAE9D,YAAM,4BAA4BA,SAAQ,WAAW,cAAc,EAAE,YAAW;AAEhF,aAAO,GAAG,MAAM,IAAI,yBAAyB;IAC/C,CAAC;;;;;;;;;;;;;EAaD,OAAa,OAAO,SAAyB;;AAC3C,YAAM,EAAE,SAAS,YAAY,SAAS,WAAU,IAAK,KAAI,MAAM,EAAE,KAAK,QAAQ,IAAG,CAAE;AAEnF,UAAI,WAAW,QAAQ,OAAO,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI,IAAI,WAAW,QAAQ,KAAK;AACpF,cAAM,IAAI,MAAM,qCAAqC;;AAIvD,YAAM,oBAAoB,MAAM,KAAI,YAAY,YAAY,WAAW,OAAO,GAAI;AAClF,UAAI,kBAAkB,sBAAsB,OAAO;AACjD,cAAM,IAAI,MAAM,qBAAqB,WAAW,OAAO,GAAG,EAAE;;AAG9D,YAAM,qBAAqB,kBAAkB;AAC7C,UAAI,CAAC,sBAAsB,CAACC,eAAS,wBAAwB,kBAAkB,GAAG;AAChF,cAAM,IAAI,MAAM,mGAAmG;;AAIrH,YAAM,eAAe,mBAAmB;AACxC,UAAI,CAAC,cAAc;AACjB,cAAM,IAAI,MAAM,wHAAwH;;AAG1I,UAAG,aAAa,OAAQ,aAAa,QAAQ,WAAW,OAAO,KAAM;AACnE,cAAM,IAAI,MAAM,+FAA+F;;AAGjH,YAAM,aAAa,GAAG,WAAW,MAAM,IAAI,WAAW,OAAO;AAC7D,YAAM,kBAAkBD,SAAQ,OAAO,UAAU,EAAE,aAAY;AAE/D,YAAM,iBAAiBA,SAAQ,UAAU,WAAW,SAAS,EAAE,aAAY;AAE3E,YAAM,mBAAmB,MAAMH,QAAO,OAAO;QAC3C,KAAY;QACZ,WAAY;QACZ,MAAY;OACb;AAED,UAAI,CAAC,kBAAkB;AACrB,cAAM,IAAI,MAAM,mDAAmD;;AAGrE,aAAO;IACT,CAAC;;;;;;;;;;;;;EAaD,OAAO,MAAM,SAAwB;AACnC,UAAM,WAAW,QAAQ,IAAI,MAAM,GAAG;AACtC,QAAI,SAAS,WAAW,GAAG;AACzB,YAAM,IAAI,MAAM,6DAA6D,SAAS,MAAM,EAAE;;AAGhG,UAAM,CAAC,2BAA2B,4BAA4B,yBAAyB,IAAI;AAC3F,QAAI;AACJ,QAAI;AAEJ,QAAI;AACF,kBAAYG,SAAQ,UAAU,yBAAyB,EAAE,SAAQ;aAC3D,GAAG;AACT,YAAM,IAAI,MAAM,+EAA+E;;AAGjG,QAAI,CAAC,UAAU,OAAO,UAAU,QAAQ,OAAO;AAC7C,YAAM,IAAI,MAAM,6EAA6E;;AAG/F,QAAI,CAAC,UAAU,OAAO,CAAC,UAAU,KAAK;AACpC,YAAM,IAAI,MAAM,iEAAiE;;AAInF,QAAI;AACF,mBAAaA,SAAQ,UAAU,0BAA0B,EAAE,SAAQ;aAC7D,GAAG;AACT,YAAM,IAAI,MAAM,gFAAgF;;AAGlG,WAAO;MACL,SAAS;QACP,QAAU;QACV,SAAU;;MAEZ,SAAS;QACP,QAAY;QACZ,SAAY;QACZ,WAAY;;;EAGlB;;AAvJOD,KAAA,cAAiC,IAAIG,mBAAkB,EAAE,cAAc,CAACC,SAAQC,SAAQC,SAAQC,SAAQC,OAAM,EAAC,CAAE;;;AC9E1H,IAAAC,iBAAA;AAWM,IAAOC,wBAAP,MAA2B;;;;;;;;;EAaxB,OAAO,kBAAkB,EAAE,QAAQ,uBAAsB,GAG/D;;AACC,SAAK,SAAQ;AACb,UAAM,gBAA+B,KAAK,IAAI,WAAW,wBAAwB,MAAM;AAGvF,UAAG,KAAA,cAAc,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,YAAW,GAAG;AACrC,aAAO,CAAA;;AAGT,WAAO,MAAM,KAAK,IAAI,KAAI,KAAA,cAAc,0BAAgC,QAAA,OAAA,SAAA,KAAI,CAAA,CAAE,CAAC;EACjF;;;;;;;;;EAUO,OAAO,gCAAgC,EAAE,QAAQ,uBAAsB,GAG7E;;AACC,SAAK,SAAQ;AACb,UAAM,oBAAuC,KAAK,IAAI,oBAAoB,wBAAwB,MAAM;AACxG,SAAI,KAAA,kBAAkB,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACtC,cAAQ,KAAK,4DAA4D,KAAK,UAAU,kBAAkB,QAAQ,CAAC;;AAGrH,QAAI,kBAAkB,8BAA8B,SAAQ,MAAO,YAAU,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ;AAC7G,UAAI,eAAe;AACnB,UAAG,kBAAkB,+BAA+B;AAClD,wBAAgB,uCAAuC,KAAK,UAAU,kBAAkB,6BAA6B;;AAGvH,WAAI,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACpC,wBAAgB,aAAa,KAAK,UAAU,kBAAkB,MAAM;;AAGtE,YAAM,IAAI,MAAM,YAAY;;EAEhC;;;;;;;;;;;;;;;EAgBO,OAAO,kCAAkC,EAAE,QAAQ,uBAAsB,GAG/E;;AACC,SAAK,SAAQ;AAEb,UAAM,cAAyB,IAAI,mBAAmB,sBAAsB;AAC5E,IAAAC,SAAQ,WAAW;AAEnB,UAAM,oBAAuC,KAAK,IAAI,oBAAoB,wBAAwB,MAAM;AAExG,SAAI,KAAA,kBAAkB,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACtC,cAAQ,KAAK,4DAA4D,KAAK,UAAU,kBAAkB,QAAQ,CAAC;;AAGrH,QAAI,kBAAkB,8BAA8B,SAAQ,MAAO,YAAU,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ;AAC7G,UAAI,eAAe;AACnB,UAAG,kBAAkB,+BAA+B;AAClD,wBAAgB,uCAAuC,KAAK,UAAU,kBAAkB,6BAA6B;;AAGvH,WAAI,KAAA,kBAAkB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACpC,wBAAgB,aAAa,KAAK,UAAU,kBAAkB,MAAM;;AAGtE,YAAM,IAAI,MAAM,YAAY;;AAG9B,UAAM,qBAAyC,KAAK,IAAI,iBAAiB,wBAAwB,MAAM;AAEvG,UAAM,sBAAiC,IAAI,mBAAmB,mBAAmB,sBAAsB;AACvG,IAAAA,SAAQ,mBAAmB;AAE3B,WAAO;EACT;;;;;;;EAQO,OAAO,mBAAmB,EAAE,uBAAsB,GAExD;AACC,WAAO,IAAI,mBAAmB,sBAAsB;EACtD;;;;;;;EAQO,OAAO,mBAAmB,EAAE,uBAAsB,GAExD;AACC,WAAO,IAAI,mBAAmB,sBAAsB;EACtD;;;;;;EAOO,OAAO,qBAAqB,EAAE,wBAAwB,aAAY,GAGxE;AACC,SAAK,SAAQ;AACb,WAAO,KAAK,IAAI,qBAAqB,wBAAwB,YAAY;EAC3E;;EAGQ,OAAO,WAAQ;AACrB,SAAK,MAAM,IAAI,IAAG;EACpB;;AApJeD,sBAAA,MAAW,IAAI,IAAG;AAuJnC,SAASC,SAAQ,WAAoB;AACnC,MAAI,eAAe;AACnB,MAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,QAAI,CAAC,UAAU,MAAM,UAAQ,KAAK,WAAW,MAAM,GAAG;AACpD,sBAAgB,wBAAwB,KAAK,UAAU,SAAS;AAChE,YAAM,IAAI,MAAM,YAAY;;SAEzB;AACL,QAAI,UAAU,WAAW,QAAQ;AAC/B,sBAAgB,wBAAwB,KAAK,UAAU,SAAS;AAChE,YAAM,IAAI,MAAM,YAAY;;;AAGlC;;;;;;ACrLA,IAAAC,iBAAA;;;ACLA,IAAAC,iBAAA;SAAAA,gBAAA;yCAAAC;EAAA,sCAAAC;EAAA,gCAAAC;EAAA,+BAAAC;EAAA,oCAAAC;;AAAA,IAAAC,iBAAA;AAaM,SAAUL,mCAA+B;AAE7C,UAAO,oBAAI,KAAI,GAAG,YAAW,EAAG,QAAQ,WAAW,GAAG;AACxD;AAmBM,SAAUE,0BAAyB,oBAA0B;AACjE,QAAM,OAAO,IAAI,KAAK,qBAAqB,GAAI;AAG/C,SAAO,KAAK,YAAW,EAAG,QAAQ,WAAW,EAAE;AACjD;AAiBM,SAAUD,gCAA+B,iBAAuB;AACpE,QAAM,aAAa,IAAI,KAAK,KAAK,IAAG,IAAK,kBAAkB,GAAI;AAC/D,SAAO,WAAW,YAAW,EAAG,QAAQ,WAAW,GAAG;AACxD;AAgBM,SAAUG,8BAA6B,WAAiB;AAE5D,QAAM,QAAQ;AACd,MAAI,CAAC,MAAM,KAAK,SAAS,GAAG;AAC1B,WAAO;;AAGT,QAAM,OAAO,IAAI,KAAK,SAAS;AAE/B,SAAO,CAAC,MAAM,KAAK,QAAO,CAAE;AAC9B;AAeM,SAAUD,yBAAwB,WAAiB;AAGvD,QAAM,QAAQ;AACd,MAAI,CAAC,MAAM,KAAK,SAAS,GAAG;AAC1B,WAAO;;AAIT,QAAM,OAAO,IAAI,KAAK,SAAS;AAG/B,SAAO,CAAC,MAAM,KAAK,QAAO,CAAE;AAC9B;;;;;;AClHA,IAAAG,iBAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAM,QAAQ;AACd,IAAM,gBAAgB,IAAI,OAAO,MAAM,QAAQ,cAAc,IAAI;AACjE,IAAM,eAAe,IAAI,OAAO,MAAM,QAAQ,MAAM,IAAI;AAExD,SAAS,iBAAiB,YAAY,OAAO;AAC5C,MAAI;AAEH,WAAO,CAAC,mBAAmB,WAAW,KAAK,EAAE,CAAC,CAAC;AAAA,EAChD,QAAQ;AAAA,EAER;AAEA,MAAI,WAAW,WAAW,GAAG;AAC5B,WAAO;AAAA,EACR;AAEA,UAAQ,SAAS;AAGjB,QAAM,OAAO,WAAW,MAAM,GAAG,KAAK;AACtC,QAAM,QAAQ,WAAW,MAAM,KAAK;AAEpC,SAAO,MAAM,UAAU,OAAO,KAAK,CAAC,GAAG,iBAAiB,IAAI,GAAG,iBAAiB,KAAK,CAAC;AACvF;AAEA,SAASC,QAAO,OAAO;AACtB,MAAI;AACH,WAAO,mBAAmB,KAAK;AAAA,EAChC,QAAQ;AACP,QAAI,SAAS,MAAM,MAAM,aAAa,KAAK,CAAC;AAE5C,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,cAAQ,iBAAiB,QAAQ,CAAC,EAAE,KAAK,EAAE;AAE3C,eAAS,MAAM,MAAM,aAAa,KAAK,CAAC;AAAA,IACzC;AAEA,WAAO;AAAA,EACR;AACD;AAEA,SAAS,yBAAyB,OAAO;AAExC,QAAM,aAAa;AAAA,IAClB,UAAU;AAAA,IACV,UAAU;AAAA,EACX;AAEA,MAAI,QAAQ,aAAa,KAAK,KAAK;AACnC,SAAO,OAAO;AACb,QAAI;AAEH,iBAAW,MAAM,CAAC,CAAC,IAAI,mBAAmB,MAAM,CAAC,CAAC;AAAA,IACnD,QAAQ;AACP,YAAM,SAASA,QAAO,MAAM,CAAC,CAAC;AAE9B,UAAI,WAAW,MAAM,CAAC,GAAG;AACxB,mBAAW,MAAM,CAAC,CAAC,IAAI;AAAA,MACxB;AAAA,IACD;AAEA,YAAQ,aAAa,KAAK,KAAK;AAAA,EAChC;AAGA,aAAW,KAAK,IAAI;AAEpB,QAAM,UAAU,OAAO,KAAK,UAAU;AAEtC,aAAW,OAAO,SAAS;AAE1B,YAAQ,MAAM,QAAQ,IAAI,OAAO,KAAK,GAAG,GAAG,WAAW,GAAG,CAAC;AAAA,EAC5D;AAEA,SAAO;AACR;AAEe,SAAR,mBAAoC,YAAY;AACtD,MAAI,OAAO,eAAe,UAAU;AACnC,UAAM,IAAI,UAAU,wDAAwD,OAAO,aAAa,GAAG;AAAA,EACpG;AAEA,MAAI;AAEH,WAAO,mBAAmB,UAAU;AAAA,EACrC,QAAQ;AAEP,WAAO,yBAAyB,UAAU;AAAA,EAC3C;AACD;;;ACzFA,IAAAC,iBAAA;AAAe,SAAR,aAA8B,QAAQ,WAAW;AACvD,MAAI,EAAE,OAAO,WAAW,YAAY,OAAO,cAAc,WAAW;AACnE,UAAM,IAAI,UAAU,+CAA+C;AAAA,EACpE;AAEA,MAAI,WAAW,MAAM,cAAc,IAAI;AACtC,WAAO,CAAC;AAAA,EACT;AAEA,QAAM,iBAAiB,OAAO,QAAQ,SAAS;AAE/C,MAAI,mBAAmB,IAAI;AAC1B,WAAO,CAAC;AAAA,EACT;AAEA,SAAO;AAAA,IACN,OAAO,MAAM,GAAG,cAAc;AAAA,IAC9B,OAAO,MAAM,iBAAiB,UAAU,MAAM;AAAA,EAC/C;AACD;;;ACnBA,IAAAC,iBAAA;AAAO,SAAS,YAAY,QAAQ,WAAW;AAC9C,QAAM,SAAS,CAAC;AAEhB,MAAI,MAAM,QAAQ,SAAS,GAAG;AAC7B,eAAW,OAAO,WAAW;AAC5B,YAAM,aAAa,OAAO,yBAAyB,QAAQ,GAAG;AAC9D,UAAI,yCAAY,YAAY;AAC3B,eAAO,eAAe,QAAQ,KAAK,UAAU;AAAA,MAC9C;AAAA,IACD;AAAA,EACD,OAAO;AAEN,eAAW,OAAO,QAAQ,QAAQ,MAAM,GAAG;AAC1C,YAAM,aAAa,OAAO,yBAAyB,QAAQ,GAAG;AAC9D,UAAI,WAAW,YAAY;AAC1B,cAAM,QAAQ,OAAO,GAAG;AACxB,YAAI,UAAU,KAAK,OAAO,MAAM,GAAG;AAClC,iBAAO,eAAe,QAAQ,KAAK,UAAU;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;;;AHpBA,IAAM,oBAAoB,WAAS,UAAU,QAAQ,UAAU;AAG/D,IAAM,kBAAkB,YAAU,mBAAmB,MAAM,EAAE,QAAQ,YAAY,OAAK,IAAI,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE,EAAE,YAAY,CAAC,EAAE;AAEtI,IAAM,2BAA2B,OAAO,0BAA0B;AAElE,SAAS,sBAAsB,SAAS;AACvC,UAAQ,QAAQ,aAAa;AAAA,IAC5B,KAAK,SAAS;AACb,aAAO,SAAO,CAAC,QAAQ,UAAU;AAChC,cAAM,QAAQ,OAAO;AAErB,YACC,UAAU,UACN,QAAQ,YAAY,UAAU,QAC9B,QAAQ,mBAAmB,UAAU,IACxC;AACD,iBAAO;AAAA,QACR;AAEA,YAAI,UAAU,MAAM;AACnB,iBAAO;AAAA,YACN,GAAG;AAAA,YAAQ,CAACC,QAAO,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,EAAE,KAAK,EAAE;AAAA,UAC3D;AAAA,QACD;AAEA,eAAO;AAAA,UACN,GAAG;AAAA,UACH,CAACA,QAAO,KAAK,OAAO,GAAG,KAAKA,QAAO,OAAO,OAAO,GAAG,MAAMA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,QAC1F;AAAA,MACD;AAAA,IACD;AAAA,IAEA,KAAK,WAAW;AACf,aAAO,SAAO,CAAC,QAAQ,UAAU;AAChC,YACC,UAAU,UACN,QAAQ,YAAY,UAAU,QAC9B,QAAQ,mBAAmB,UAAU,IACxC;AACD,iBAAO;AAAA,QACR;AAEA,YAAI,UAAU,MAAM;AACnB,iBAAO;AAAA,YACN,GAAG;AAAA,YACH,CAACA,QAAO,KAAK,OAAO,GAAG,IAAI,EAAE,KAAK,EAAE;AAAA,UACrC;AAAA,QACD;AAEA,eAAO;AAAA,UACN,GAAG;AAAA,UACH,CAACA,QAAO,KAAK,OAAO,GAAG,OAAOA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,QAC9D;AAAA,MACD;AAAA,IACD;AAAA,IAEA,KAAK,wBAAwB;AAC5B,aAAO,SAAO,CAAC,QAAQ,UAAU;AAChC,YACC,UAAU,UACN,QAAQ,YAAY,UAAU,QAC9B,QAAQ,mBAAmB,UAAU,IACxC;AACD,iBAAO;AAAA,QACR;AAEA,YAAI,UAAU,MAAM;AACnB,iBAAO;AAAA,YACN,GAAG;AAAA,YACH,CAACA,QAAO,KAAK,OAAO,GAAG,QAAQ,EAAE,KAAK,EAAE;AAAA,UACzC;AAAA,QACD;AAEA,eAAO;AAAA,UACN,GAAG;AAAA,UACH,CAACA,QAAO,KAAK,OAAO,GAAG,UAAUA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,QACjE;AAAA,MACD;AAAA,IACD;AAAA,IAEA,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,qBAAqB;AACzB,YAAM,cAAc,QAAQ,gBAAgB,sBACzC,QACA;AAEH,aAAO,SAAO,CAAC,QAAQ,UAAU;AAChC,YACC,UAAU,UACN,QAAQ,YAAY,UAAU,QAC9B,QAAQ,mBAAmB,UAAU,IACxC;AACD,iBAAO;AAAA,QACR;AAGA,gBAAQ,UAAU,OAAO,KAAK;AAE9B,YAAI,OAAO,WAAW,GAAG;AACxB,iBAAO,CAAC,CAACA,QAAO,KAAK,OAAO,GAAG,aAAaA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA,QAC7E;AAEA,eAAO,CAAC,CAAC,QAAQA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,QAAQ,oBAAoB,CAAC;AAAA,MAC5E;AAAA,IACD;AAAA,IAEA,SAAS;AACR,aAAO,SAAO,CAAC,QAAQ,UAAU;AAChC,YACC,UAAU,UACN,QAAQ,YAAY,UAAU,QAC9B,QAAQ,mBAAmB,UAAU,IACxC;AACD,iBAAO;AAAA,QACR;AAEA,YAAI,UAAU,MAAM;AACnB,iBAAO;AAAA,YACN,GAAG;AAAA,YACHA,QAAO,KAAK,OAAO;AAAA,UACpB;AAAA,QACD;AAEA,eAAO;AAAA,UACN,GAAG;AAAA,UACH,CAACA,QAAO,KAAK,OAAO,GAAG,KAAKA,QAAO,OAAO,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,QAC5D;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,SAAS,qBAAqB,SAAS;AACtC,MAAI;AAEJ,UAAQ,QAAQ,aAAa;AAAA,IAC5B,KAAK,SAAS;AACb,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,iBAAS,YAAY,KAAK,GAAG;AAE7B,cAAM,IAAI,QAAQ,WAAW,EAAE;AAE/B,YAAI,CAAC,QAAQ;AACZ,sBAAY,GAAG,IAAI;AACnB;AAAA,QACD;AAEA,YAAI,YAAY,GAAG,MAAM,QAAW;AACnC,sBAAY,GAAG,IAAI,CAAC;AAAA,QACrB;AAEA,oBAAY,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI;AAAA,MAC/B;AAAA,IACD;AAAA,IAEA,KAAK,WAAW;AACf,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,iBAAS,SAAS,KAAK,GAAG;AAC1B,cAAM,IAAI,QAAQ,QAAQ,EAAE;AAE5B,YAAI,CAAC,QAAQ;AACZ,sBAAY,GAAG,IAAI;AACnB;AAAA,QACD;AAEA,YAAI,YAAY,GAAG,MAAM,QAAW;AACnC,sBAAY,GAAG,IAAI,CAAC,KAAK;AACzB;AAAA,QACD;AAEA,oBAAY,GAAG,IAAI,CAAC,GAAG,YAAY,GAAG,GAAG,KAAK;AAAA,MAC/C;AAAA,IACD;AAAA,IAEA,KAAK,wBAAwB;AAC5B,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,iBAAS,WAAW,KAAK,GAAG;AAC5B,cAAM,IAAI,QAAQ,UAAU,EAAE;AAE9B,YAAI,CAAC,QAAQ;AACZ,sBAAY,GAAG,IAAI;AACnB;AAAA,QACD;AAEA,YAAI,YAAY,GAAG,MAAM,QAAW;AACnC,sBAAY,GAAG,IAAI,CAAC,KAAK;AACzB;AAAA,QACD;AAEA,oBAAY,GAAG,IAAI,CAAC,GAAG,YAAY,GAAG,GAAG,KAAK;AAAA,MAC/C;AAAA,IACD;AAAA,IAEA,KAAK;AAAA,IACL,KAAK,aAAa;AACjB,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,cAAM,UAAU,OAAO,UAAU,YAAY,MAAM,SAAS,QAAQ,oBAAoB;AACxF,cAAM,iBAAkB,OAAO,UAAU,YAAY,CAAC,WAAWC,QAAO,OAAO,OAAO,EAAE,SAAS,QAAQ,oBAAoB;AAC7H,gBAAQ,iBAAiBA,QAAO,OAAO,OAAO,IAAI;AAClD,cAAM,WAAW,WAAW,iBAAiB,MAAM,MAAM,QAAQ,oBAAoB,EAAE,IAAI,UAAQA,QAAO,MAAM,OAAO,CAAC,IAAK,UAAU,OAAO,QAAQA,QAAO,OAAO,OAAO;AAC3K,oBAAY,GAAG,IAAI;AAAA,MACpB;AAAA,IACD;AAAA,IAEA,KAAK,qBAAqB;AACzB,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,cAAM,UAAU,SAAS,KAAK,GAAG;AACjC,cAAM,IAAI,QAAQ,QAAQ,EAAE;AAE5B,YAAI,CAAC,SAAS;AACb,sBAAY,GAAG,IAAI,QAAQA,QAAO,OAAO,OAAO,IAAI;AACpD;AAAA,QACD;AAEA,cAAM,aAAa,UAAU,OAC1B,CAAC,IACD,MAAM,MAAM,QAAQ,oBAAoB,EAAE,IAAI,UAAQA,QAAO,MAAM,OAAO,CAAC;AAE9E,YAAI,YAAY,GAAG,MAAM,QAAW;AACnC,sBAAY,GAAG,IAAI;AACnB;AAAA,QACD;AAEA,oBAAY,GAAG,IAAI,CAAC,GAAG,YAAY,GAAG,GAAG,GAAG,UAAU;AAAA,MACvD;AAAA,IACD;AAAA,IAEA,SAAS;AACR,aAAO,CAAC,KAAK,OAAO,gBAAgB;AACnC,YAAI,YAAY,GAAG,MAAM,QAAW;AACnC,sBAAY,GAAG,IAAI;AACnB;AAAA,QACD;AAEA,oBAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK;AAAA,MACxD;AAAA,IACD;AAAA,EACD;AACD;AAEA,SAAS,6BAA6B,OAAO;AAC5C,MAAI,OAAO,UAAU,YAAY,MAAM,WAAW,GAAG;AACpD,UAAM,IAAI,UAAU,sDAAsD;AAAA,EAC3E;AACD;AAEA,SAASD,QAAO,OAAO,SAAS;AAC/B,MAAI,QAAQ,QAAQ;AACnB,WAAO,QAAQ,SAAS,gBAAgB,KAAK,IAAI,mBAAmB,KAAK;AAAA,EAC1E;AAEA,SAAO;AACR;AAEA,SAASC,QAAO,OAAO,SAAS;AAC/B,MAAI,QAAQ,QAAQ;AACnB,WAAO,mBAAgB,KAAK;AAAA,EAC7B;AAEA,SAAO;AACR;AAEA,SAAS,WAAW,OAAO;AAC1B,MAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,WAAO,MAAM,KAAK;AAAA,EACnB;AAEA,MAAI,OAAO,UAAU,UAAU;AAC9B,WAAO,WAAW,OAAO,KAAK,KAAK,CAAC,EAClC,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,OAAO,CAAC,CAAC,EACpC,IAAI,SAAO,MAAM,GAAG,CAAC;AAAA,EACxB;AAEA,SAAO;AACR;AAEA,SAAS,WAAW,OAAO;AAC1B,QAAM,YAAY,MAAM,QAAQ,GAAG;AACnC,MAAI,cAAc,IAAI;AACrB,YAAQ,MAAM,MAAM,GAAG,SAAS;AAAA,EACjC;AAEA,SAAO;AACR;AAEA,SAAS,QAAQ,KAAK;AACrB,MAAI,OAAO;AACX,QAAM,YAAY,IAAI,QAAQ,GAAG;AACjC,MAAI,cAAc,IAAI;AACrB,WAAO,IAAI,MAAM,SAAS;AAAA,EAC3B;AAEA,SAAO;AACR;AAEA,SAAS,WAAW,OAAO,SAAS;AACnC,MAAI,QAAQ,gBAAgB,CAAC,OAAO,MAAM,OAAO,KAAK,CAAC,MAAM,OAAO,UAAU,YAAY,MAAM,KAAK,MAAM,KAAK;AAC/G,YAAQ,OAAO,KAAK;AAAA,EACrB,WAAW,QAAQ,iBAAiB,UAAU,SAAS,MAAM,YAAY,MAAM,UAAU,MAAM,YAAY,MAAM,UAAU;AAC1H,YAAQ,MAAM,YAAY,MAAM;AAAA,EACjC;AAEA,SAAO;AACR;AAEO,SAAS,QAAQ,OAAO;AAC9B,UAAQ,WAAW,KAAK;AACxB,QAAM,aAAa,MAAM,QAAQ,GAAG;AACpC,MAAI,eAAe,IAAI;AACtB,WAAO;AAAA,EACR;AAEA,SAAO,MAAM,MAAM,aAAa,CAAC;AAClC;AAEO,SAAS,MAAM,OAAO,SAAS;AACrC,YAAU;AAAA,IACT,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,eAAe;AAAA,IACf,GAAG;AAAA,EACJ;AAEA,+BAA6B,QAAQ,oBAAoB;AAEzD,QAAM,YAAY,qBAAqB,OAAO;AAG9C,QAAM,cAAc,uBAAO,OAAO,IAAI;AAEtC,MAAI,OAAO,UAAU,UAAU;AAC9B,WAAO;AAAA,EACR;AAEA,UAAQ,MAAM,KAAK,EAAE,QAAQ,UAAU,EAAE;AAEzC,MAAI,CAAC,OAAO;AACX,WAAO;AAAA,EACR;AAEA,aAAW,aAAa,MAAM,MAAM,GAAG,GAAG;AACzC,QAAI,cAAc,IAAI;AACrB;AAAA,IACD;AAEA,UAAM,aAAa,QAAQ,SAAS,UAAU,QAAQ,OAAO,GAAG,IAAI;AAEpE,QAAI,CAAC,KAAK,KAAK,IAAI,aAAa,YAAY,GAAG;AAE/C,QAAI,QAAQ,QAAW;AACtB,YAAM;AAAA,IACP;AAIA,YAAQ,UAAU,SAAY,OAAQ,CAAC,SAAS,aAAa,mBAAmB,EAAE,SAAS,QAAQ,WAAW,IAAI,QAAQA,QAAO,OAAO,OAAO;AAC/I,cAAUA,QAAO,KAAK,OAAO,GAAG,OAAO,WAAW;AAAA,EACnD;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,WAAW,GAAG;AACvD,QAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAChD,iBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,KAAK,GAAG;AACnD,cAAM,IAAI,IAAI,WAAW,QAAQ,OAAO;AAAA,MACzC;AAAA,IACD,OAAO;AACN,kBAAY,GAAG,IAAI,WAAW,OAAO,OAAO;AAAA,IAC7C;AAAA,EACD;AAEA,MAAI,QAAQ,SAAS,OAAO;AAC3B,WAAO;AAAA,EACR;AAIA,UAAQ,QAAQ,SAAS,OAAO,OAAO,KAAK,WAAW,EAAE,KAAK,IAAI,OAAO,KAAK,WAAW,EAAE,KAAK,QAAQ,IAAI,GAAG,OAAO,CAAC,QAAQ,QAAQ;AACtI,UAAM,QAAQ,YAAY,GAAG;AAC7B,WAAO,GAAG,IAAI,QAAQ,KAAK,KAAK,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK,IAAI,WAAW,KAAK,IAAI;AACzG,WAAO;AAAA,EACR,GAAG,uBAAO,OAAO,IAAI,CAAC;AACvB;AAEO,SAAS,UAAU,QAAQ,SAAS;AAC1C,MAAI,CAAC,QAAQ;AACZ,WAAO;AAAA,EACR;AAEA,YAAU;AAAA,IAAC,QAAQ;AAAA,IAClB,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,sBAAsB;AAAA,IAAK,GAAG;AAAA,EAAO;AAEtC,+BAA6B,QAAQ,oBAAoB;AAEzD,QAAM,eAAe,SACnB,QAAQ,YAAY,kBAAkB,OAAO,GAAG,CAAC,KAC9C,QAAQ,mBAAmB,OAAO,GAAG,MAAM;AAGhD,QAAM,YAAY,sBAAsB,OAAO;AAE/C,QAAM,aAAa,CAAC;AAEpB,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAClD,QAAI,CAAC,aAAa,GAAG,GAAG;AACvB,iBAAW,GAAG,IAAI;AAAA,IACnB;AAAA,EACD;AAEA,QAAM,OAAO,OAAO,KAAK,UAAU;AAEnC,MAAI,QAAQ,SAAS,OAAO;AAC3B,SAAK,KAAK,QAAQ,IAAI;AAAA,EACvB;AAEA,SAAO,KAAK,IAAI,SAAO;AACtB,UAAM,QAAQ,OAAO,GAAG;AAExB,QAAI,UAAU,QAAW;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,UAAU,MAAM;AACnB,aAAOD,QAAO,KAAK,OAAO;AAAA,IAC3B;AAEA,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,UAAI,MAAM,WAAW,KAAK,QAAQ,gBAAgB,qBAAqB;AACtE,eAAOA,QAAO,KAAK,OAAO,IAAI;AAAA,MAC/B;AAEA,aAAO,MACL,OAAO,UAAU,GAAG,GAAG,CAAC,CAAC,EACzB,KAAK,GAAG;AAAA,IACX;AAEA,WAAOA,QAAO,KAAK,OAAO,IAAI,MAAMA,QAAO,OAAO,OAAO;AAAA,EAC1D,CAAC,EAAE,OAAO,OAAK,EAAE,SAAS,CAAC,EAAE,KAAK,GAAG;AACtC;AAEO,SAAS,SAAS,KAAK,SAAS;AAlcvC;AAmcC,YAAU;AAAA,IACT,QAAQ;AAAA,IACR,GAAG;AAAA,EACJ;AAEA,MAAI,CAAC,MAAM,IAAI,IAAI,aAAa,KAAK,GAAG;AAExC,MAAI,SAAS,QAAW;AACvB,WAAO;AAAA,EACR;AAEA,SAAO;AAAA,IACN,OAAK,kCAAM,MAAM,SAAZ,mBAAmB,OAAM;AAAA,IAC9B,OAAO,MAAM,QAAQ,GAAG,GAAG,OAAO;AAAA,IAClC,GAAI,WAAW,QAAQ,2BAA2B,OAAO,EAAC,oBAAoBC,QAAO,MAAM,OAAO,EAAC,IAAI,CAAC;AAAA,EACzG;AACD;AAEO,SAAS,aAAa,QAAQ,SAAS;AAC7C,YAAU;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,CAAC,wBAAwB,GAAG;AAAA,IAC5B,GAAG;AAAA,EACJ;AAEA,QAAM,MAAM,WAAW,OAAO,GAAG,EAAE,MAAM,GAAG,EAAE,CAAC,KAAK;AACpD,QAAM,eAAe,QAAQ,OAAO,GAAG;AAEvC,QAAM,QAAQ;AAAA,IACb,GAAG,MAAM,cAAc,EAAC,MAAM,MAAK,CAAC;AAAA,IACpC,GAAG,OAAO;AAAA,EACX;AAEA,MAAI,cAAc,UAAU,OAAO,OAAO;AAC1C,MAAI,aAAa;AAChB,kBAAc,IAAI,WAAW;AAAA,EAC9B;AAEA,MAAI,OAAO,QAAQ,OAAO,GAAG;AAC7B,MAAI,OAAO,oBAAoB;AAC9B,UAAM,6BAA6B,IAAI,IAAI,GAAG;AAC9C,+BAA2B,OAAO,OAAO;AACzC,WAAO,QAAQ,wBAAwB,IAAI,2BAA2B,OAAO,IAAI,OAAO,kBAAkB;AAAA,EAC3G;AAEA,SAAO,GAAG,GAAG,GAAG,WAAW,GAAG,IAAI;AACnC;AAEO,SAAS,KAAK,OAAO,QAAQ,SAAS;AAC5C,YAAU;AAAA,IACT,yBAAyB;AAAA,IACzB,CAAC,wBAAwB,GAAG;AAAA,IAC5B,GAAG;AAAA,EACJ;AAEA,QAAM,EAAC,KAAK,OAAO,mBAAkB,IAAI,SAAS,OAAO,OAAO;AAEhE,SAAO,aAAa;AAAA,IACnB;AAAA,IACA,OAAO,YAAY,OAAO,MAAM;AAAA,IAChC;AAAA,EACD,GAAG,OAAO;AACX;AAEO,SAAS,QAAQ,OAAO,QAAQ,SAAS;AAC/C,QAAM,kBAAkB,MAAM,QAAQ,MAAM,IAAI,SAAO,CAAC,OAAO,SAAS,GAAG,IAAI,CAAC,KAAK,UAAU,CAAC,OAAO,KAAK,KAAK;AAEjH,SAAO,KAAK,OAAO,iBAAiB,OAAO;AAC5C;;;ADtgBA,IAAO,uBAAQ;;;A1DKf,IAAAC,aAAe;AAKR,IAAM,6BAA6B,CAAC,OAAO,OAAO,OAAO,OAAO,KAAK;AAKrE,IAAM,kBAAN,MAAM,iBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASzB,aAAa,eAAeC,MAAK,MAAM;AACnC,UAAMA,KAAI,OAAO;AACjB,UAAM,EAAE,IAAI,OAAO,IAAIA,KAAI;AAC3B,UAAM,cAAc,KAAK,UAAU,EAAE,KAAAA,MAAK,SAAS,6BAAM,QAAQ,CAAC;AAClE,UAAM,iBAAgB,YAAY,QAAQ,QAAQ,cAAc,WAAW;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,YAAYC,QAAO;AAC5B,UAAMA,OAAM,OAAO;AACnB,UAAM,EAAE,IAAI,QAAQ,WAAW,IAAIA,OAAM;AACzC,UAAM,cAAc,KAAK,UAAUA,MAAK;AACxC,UAAM,iBAAgB,YAAY,QAAQ,OAAO,cAAc,UAAU,IAAI,WAAW;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,YAAYC,QAAO;AAC5B,UAAMA,OAAM,OAAO;AACnB,UAAM,EAAE,IAAI,QAAQ,WAAW,IAAIA,OAAM;AACzC,UAAM,cAAc,KAAK,UAAUA,MAAK;AACxC,UAAM,iBAAgB,YAAY,QAAQ,OAAO,cAAc,UAAU,IAAI,WAAW;AAAA,EAC5F;AAAA,EACA,aAAa,YAAY,QAAQ,MAAM,MAAM,aAAa;AACtD,UAAM,qBAAqB,MAAM,iBAAgB,sBAAsB,MAAM;AAC7E,UAAM,WAAW,GAAG,kBAAkB,GAAG,IAAI;AAC7C,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,MAAM,UAAU;AAAA,QAC7B,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM;AAAA,MACV,CAAC;AAAA,IACL,SACO,GAAG;AACN,YAAM,IAAI,aAAa,EAAE,SAAS,6BAA6B,MAAM,IAAI,cAAc,QAAQ,KAAK,UAAU,OAAO,EAAE,CAAC;AAAA,IAC5H;AACA,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAM,IAAI,cAAc,EAAE,YAAY,SAAS,QAAQ,SAAS,cAAc,cAAc,QAAQ,KAAK,SAAS,CAAC;AAAA,IACvH;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,aAAa,MAAM;AAC5B,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,qBAAqB,MAAM,iBAAgB,sBAAsB,MAAM;AAC7E,UAAM,WAAW,GAAG,kBAAkB;AACtC,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,MAAM,QAAQ;AAAA,IACnC,SACO,GAAG;AACN,YAAM,IAAI,aAAa,EAAE,SAAS,gCAAgC,MAAM,IAAI,cAAc,QAAQ,KAAK,UAAU,OAAO,EAAE,CAAC;AAAA,IAC/H;AACA,UAAM,YAAY,CAAC;AACnB,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAM,IAAI,cAAc,EAAE,YAAY,SAAS,QAAQ,SAAS,cAAc,cAAc,QAAQ,KAAK,SAAS,CAAC;AAAA,IACvH;AACA,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,UAAM,gBAAgB,aAAa;AACnC,aAAS,gBAAgB,eAAe;AACpC,YAAMC,YAAW,MAAM,SAAS,MAAM,YAAY;AAClD,gBAAU,KAAKA,SAAQ;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,YAAY,MAAM;AAC3B,UAAM,EAAE,QAAQ,IAAI,IAAI;AACxB,UAAM,qBAAqB,MAAM,iBAAgB,sBAAsB,MAAM;AAC7E,UAAM,WAAW,GAAG,kBAAkB;AACtC,UAAM,eAAe,MAAM,iBAAgB,qBAAqB,EAAE,cAAc,KAAK,OAAO,CAAC;AAC7F,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,MAAM,UAAU;AAAA,QAC7B,SAAS;AAAA,UACL,eAAe,UAAU,YAAY;AAAA,QACzC;AAAA,MACJ,CAAC;AAAA,IACL,SACO,GAAG;AACN,YAAM,IAAI,aAAa,EAAE,SAAS,+BAA+B,MAAM,IAAI,cAAc,QAAQ,KAAK,UAAU,OAAO,EAAE,CAAC;AAAA,IAC9H;AACA,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAM,IAAI,cAAc,EAAE,YAAY,SAAS,QAAQ,SAAS,cAAc,cAAc,QAAQ,KAAK,SAAS,CAAC;AAAA,IACvH;AACA,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,UAAM,OAAO,aAAa;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,YAAY,MAAM;AAC3B,UAAM,EAAE,QAAQ,YAAY,IAAI,IAAI;AACpC,UAAM,qBAAqB,MAAM,iBAAgB,sBAAsB,MAAM;AAC7E,UAAM,WAAW,GAAG,kBAAkB,cAAc,UAAU;AAC9D,UAAM,eAAe,MAAM,iBAAgB,qBAAqB,EAAE,cAAc,KAAK,OAAO,CAAC;AAC7F,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,MAAM,UAAU;AAAA,QAC7B,SAAS;AAAA,UACL,eAAe,UAAU,YAAY;AAAA,QACzC;AAAA,MACJ,CAAC;AAAA,IACL,SACO,GAAG;AACN,YAAM,IAAI,aAAa,EAAE,SAAS,+BAA+B,MAAM,IAAI,cAAc,QAAQ,KAAK,UAAU,OAAO,EAAE,CAAC;AAAA,IAC9H;AACA,UAAM,WAAW,CAAC;AAClB,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAM,IAAI,cAAc,EAAE,YAAY,SAAS,QAAQ,SAAS,cAAc,cAAc,QAAQ,KAAK,SAAS,CAAC;AAAA,IACvH;AACA,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,aAAS,eAAe,aAAa,MAAM;AACvC,YAAMC,WAAU,MAAM,OAAO,aAAa,WAAW;AACrD,eAAS,KAAKA,QAAO;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,aAAa,MAAM;AAC5B,UAAM,EAAE,QAAQ,QAAQ,IAAI,IAAI;AAChC,UAAM,qBAAqB,MAAM,iBAAgB,sBAAsB,MAAM;AAC7E,UAAM,cAAc,SAAS,IAAI,qBAAY,UAAU,MAAM,CAAC,KAAK;AACnE,UAAM,WAAW,GAAG,kBAAkB,aAAa,WAAW;AAC9D,UAAM,eAAe,MAAM,iBAAgB,qBAAqB,EAAE,cAAc,KAAK,OAAO,CAAC;AAC7F,QAAI;AACJ,QAAI;AACA,iBAAW,MAAM,MAAM,UAAU;AAAA,QAC7B,SAAS;AAAA,UACL,eAAe,UAAU,YAAY;AAAA,QACzC;AAAA,MACJ,CAAC;AAAA,IACL,SACO,GAAG;AACN,YAAM,IAAI,aAAa,EAAE,SAAS,gCAAgC,MAAM,IAAI,cAAc,QAAQ,KAAK,UAAU,OAAO,EAAE,CAAC;AAAA,IAC/H;AACA,UAAM,YAAY,CAAC;AACnB,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAM,IAAI,cAAc,EAAE,YAAY,SAAS,QAAQ,SAAS,cAAc,cAAc,QAAQ,KAAK,SAAS,CAAC;AAAA,IACvH;AACA,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,aAAS,gBAAgB,aAAa,MAAM;AACxC,YAAM,WAAW,CAAC;AAClB,eAAS,eAAe,cAAc;AAClC,cAAMA,WAAU,MAAM,OAAO,aAAa,WAAW;AACrD,iBAAS,KAAKA,QAAO;AAAA,MACzB;AACA,gBAAU,KAAK,QAAQ;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,sBAAsB,KAAK;AACpC,QAAI;AACJ,QAAI;AACA,oBAAc,MAAM,WAAW,GAAG;AAAA,IACtC,SACO,GAAG;AACN,YAAM,IAAI,gBAAgB,EAAE,OAAO;AAAA,IACvC;AACA,UAAM,CAAC,UAAU,IAAIC,eAAS,YAAY,EAAE,aAAa,MAAM,MAAM,CAAC;AACtE,QAAI,EAAC,yCAAY,kBAAiB;AAC9B,YAAM,IAAI,4BAA4B,GAAG,GAAG,2BAA2B;AAAA,IAC3E;AACA,WAAO,WAAW;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,aAAa,qBAAqB,QAAQ;AACtC,UAAM,EAAE,QAAQ,aAAa,IAAI;AACjC,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,MAAO,UAAM,WAAAC,SAAG,IAAI;AAC1B,UAAM,aAAa;AAAA,MACf,KAAK;AAAA,MACL,KAAK,aAAa;AAAA,MAClB,KAAK,KAAK,MAAM,MAAM,GAAI;AAAA,MAC1B,KAAK,KAAK,MAAM,MAAM,GAAI;AAAA,MAC1B,KAAKC,QAAO,EAAE,UAAU;AAAA,IAC5B;AACA,QAAI;AACA,aAAO,MAAMC,KAAI,KAAK,EAAE,WAAW,cAAc,SAAS,WAAW,CAAC;AAAA,IAC1E,SACO,GAAG;AACN,YAAM,IAAI,yBAAyB,EAAE,SAAS,EAAE,SAAS,OAAO,EAAE,CAAC;AAAA,IACvE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,aAAa,mBAAmB,QAAQ;AACpC,QAAI;AACJ,QAAI;AACA,eAAS,MAAMA,KAAI,OAAO,EAAE,KAAK,OAAO,aAAa,CAAC;AAAA,IAC1D,SACO,GAAG;AACN,YAAM,IAAI,8BAA8B,EAAE,SAAS,EAAE,SAAS,OAAO,EAAE,CAAC;AAAA,IAC5E;AACA,UAAM,EAAE,QAAQ,oBAAoB,SAAS,oBAAoB,IAAI;AAErE,aAAS,SAAS,4BAA4B;AAC1C,UAAI,CAAC,oBAAoB,KAAK,GAAG;AAC7B,cAAM,IAAI,+BAA+B,EAAE,SAAS,yBAAyB,KAAK,oBAAoB,0BAA0B,IAAI,CAAC;AAAA,MACzI;AAAA,IACJ;AAEA,QAAI,oBAAoB,QAAQ,OAAO,QAAQ;AAC3C,YAAM,IAAI,kCAAkC,EAAE,SAAS,gFAAgF,CAAC;AAAA,IAC5I;AACA,UAAM,YAAY,mBAAmB;AACrC,UAAM,YAAY,oBAAoB;AACtC,QAAI,CAAC,UAAU,SAAS,SAAS,GAAG;AAChC,YAAM,IAAI,sCAAsC,EAAE,SAAS,6CAA6C,CAAC;AAAA,IAC7G;AACA,WAAO;AAAA,EACX;AACJ;;;A+DvSA,IAAAC,iBAAA;",
  "names": ["import_dist", "TTLCache", "import_dist", "import_dist", "Blob", "isBlob", "message", "import_dist", "message", "import_dist", "String", "import_dist", "Symbol", "import_dist", "process", "Promise", "import_dist", "process", "Symbol", "err", "import_dist", "Stream", "import_dist", "import_dist", "Uint8Array", "import_dist", "import_dist", "process", "Readable", "close", "import_dist", "process", "Promise", "Symbol", "Readable", "Stream", "import_dist", "process", "Error", "Symbol", "Stream", "stream", "state", "import_dist", "process", "Readable", "Blob", "isBlob", "then", "import_dist", "Readable", "import_dist", "Symbol", "import_dist", "import_dist", "process", "Promise", "Readable", "err", "onError", "endFn", "import_dist", "writable", "readable", "import_dist", "Number", "Promise", "Symbol", "map", "asIndexedPairs", "options", "flatMap", "drop", "take", "import_dist", "Promise", "import_dist", "Stream", "fn", "require_browser", "import_dist", "import_dist", "parse", "ms", "require_primordials", "import_dist", "require_util", "import_dist", "Blob", "isBlob", "message", "require_errors", "import_dist", "message", "require_validators", "import_dist", "String", "require_utils", "import_dist", "Symbol", "require_end_of_stream", "import_dist", "process", "Promise", "require_destroy", "import_dist", "process", "Symbol", "err", "require_legacy", "import_dist", "Stream", "require_add_abort_signal", "import_dist", "require_buffer_list", "import_dist", "Uint8Array", "require_state", "import_dist", "require_from", "import_dist", "process", "Readable", "close", "require_readable", "import_dist", "process", "Promise", "Symbol", "Readable", "Stream", "require_writable", "import_dist", "process", "Error", "Symbol", "Stream", "stream", "state", "require_duplexify", "import_dist", "process", "Readable", "Blob", "isBlob", "then", "require_duplex", "import_dist", "Readable", "require_transform", "import_dist", "Symbol", "require_passthrough", "import_dist", "require_pipeline", "import_dist", "process", "Promise", "Readable", "err", "onError", "endFn", "require_compose", "import_dist", "writable", "readable", "require_operators", "import_dist", "Number", "Promise", "Symbol", "map", "asIndexedPairs", "options", "flatMap", "drop", "take", "require_promises", "import_dist", "Promise", "require_stream", "import_dist", "Stream", "fn", "require_browser", "import_dist", "require_ms", "import_dist", "parse", "ms", "import_dist", "import_dist", "import_dist", "import_dist", "encode", "decode", "import_dist", "encode", "decode", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_readable_stream", "import_dist", "import_dist", "import_dist", "obj", "sortedObj", "isValid", "__rest", "isValid", "isValid", "__rest", "randomBytes", "import_dist", "randomBytes", "crypto", "import_dist", "import_dist", "import_dist", "__rest", "import_dist", "import_dist", "import_dist", "DidVerificationRelationship", "import_dist", "import_dist", "import_dist", "message", "DidErrorCode", "_b", "_a", "keyManager", "_a", "isValid", "DidDhtRegisteredDidType", "DidDhtRegisteredKeyType", "DidDhtVerificationRelationship", "keyManager", "_a", "__rest", "dnsRecordId", "isValid", "DidIonRegisteredKeyType", "AlgorithmToKeyTypeMap", "DEFAULT_GATEWAY_URI", "keyManager", "_a", "keyManager", "DidKeyRegisteredKeyType", "AlgorithmToKeyTypeMap", "keyManager", "isValid", "import_level", "import_dist", "canonicalize", "import_dist", "import_dist", "func0", "message", "import_dist", "message", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "BigNumber", "alphabet", "compare", "format", "import_dist", "crypto", "utils_exports", "import_dist", "import_dist", "utils_exports", "import_dist", "rfq", "randomBytes", "offering", "Ajv", "validate", "isValid", "import_dist", "quote", "import_dist", "order", "import_dist", "import_dist", "close", "message", "resource", "offering", "import_dist", "balance", "import_dist", "message", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "message", "import_dist", "import_dist", "import_dist", "DidVerificationRelationship", "import_dist", "EMPTY_DID_RESOLUTION_RESULT", "import_dist", "Did", "import_dist", "DidError", "message", "DidErrorCode", "import_dist", "import_dist", "import_dist", "import_ttlcache", "import_dist", "isArrayBufferSlice", "isAsyncIterable", "universalTypeOf", "textEncoder", "textDecoder", "Convert", "isAsyncIterable", "universalTypeOf", "isArrayBufferSlice", "__asyncValues", "import_dist", "Multicodec", "import_dist", "removeUndefinedProperties", "import_level", "MemoryStore", "import_readable_stream", "import_readable_stream", "Sha256", "import_dist", "CryptoAlgorithm", "Sha2Algorithm", "CryptoAlgorithm", "Sha256", "import_dist", "canonicalize", "obj", "sortedObj", "KEY_URI_PREFIX_JWK", "computeJwkThumbprint", "removeUndefinedProperties", "canonicalize", "Convert", "Sha256", "isEcPrivateJwk", "isEcPublicJwk", "isOkpPrivateJwk", "isOkpPublicJwk", "isPrivateJwk", "Secp256k1", "Convert", "computeJwkThumbprint", "isEcPrivateJwk", "__rest", "isEcPublicJwk", "isValid", "Secp256r1", "Convert", "computeJwkThumbprint", "isEcPrivateJwk", "__rest", "isEcPublicJwk", "isValid", "EcdsaAlgorithm", "CryptoAlgorithm", "isEcPrivateJwk", "Secp256k1", "Secp256r1", "isEcPublicJwk", "Ed25519", "Convert", "computeJwkThumbprint", "isValid", "isOkpPrivateJwk", "__rest", "isOkpPublicJwk", "EdDsaAlgorithm", "CryptoAlgorithm", "isOkpPrivateJwk", "Ed25519", "isOkpPublicJwk", "supportedAlgorithms", "EdDsaAlgorithm", "EcdsaAlgorithm", "Sha2Algorithm", "LocalKeyManager", "MemoryStore", "KEY_URI_PREFIX_JWK", "computeJwkThumbprint", "isPrivateJwk", "utils_exports", "checkRequiredProperty", "checkValidProperty", "getJoseSignatureAlgorithmFromPublicKey", "isWebCryptoSupported", "randomBytes", "randomUuid", "import_dist", "checkRequiredProperty", "checkValidProperty", "getJoseSignatureAlgorithmFromPublicKey", "isWebCryptoSupported", "randomBytes", "randomUuid", "crypto", "import_dist", "import_dist", "import_dist", "X25519", "Convert", "computeJwkThumbprint", "isOkpPrivateJwk", "__rest", "isOkpPublicJwk", "extractDidFragment", "getServices", "getVerificationMethodByKey", "getVerificationMethods", "computeJwkThumbprint", "isDidVerificationMethod", "DidVerificationRelationship", "_b", "_a", "getVerificationMethodTypes", "getVerificationRelationshipsById", "isDidService", "isDwnDidService", "keyBytesToMultibaseId", "Multicodec", "Convert", "multibaseIdToKeyBytes", "DidError", "DidErrorCode", "BearerDid", "keyManager", "_a", "extractDidFragment", "DidError", "DidErrorCode", "utils_exports", "isValid", "LocalKeyManager", "getVerificationMethods", "DidMethod", "DEFAULT_GATEWAY_URI", "DID_DHT_SPECIFICATION_VERSION", "DNS_RECORD_TTL", "PROPERTY_SEPARATOR", "VALUE_SEPARATOR", "DidDhtRegisteredDidType", "DidDhtRegisteredKeyType", "DidDhtVerificationRelationship", "AlgorithmToKeyTypeMap", "DidDht", "DidMethod", "keyManager", "LocalKeyManager", "DidDhtUtils", "_a", "computeJwkThumbprint", "extractDidFragment", "BearerDid", "Did", "DidError", "DidErrorCode", "DidDhtDocument", "EMPTY_DID_RESOLUTION_RESULT", "Convert", "__rest", "dnsRecordId", "DidVerificationRelationship", "Ed25519", "Secp256r1", "Secp256k1", "isValid", "DidIonRegisteredKeyType", "AlgorithmToKeyTypeMap", "DEFAULT_GATEWAY_URI", "DidIon", "DidMethod", "keyManager", "LocalKeyManager", "DidIonUtils", "BearerDid", "Did", "DidError", "DidErrorCode", "_a", "getVerificationRelationshipsById", "EMPTY_DID_RESOLUTION_RESULT", "computeJwkThumbprint", "DidJwk", "DidMethod", "keyManager", "LocalKeyManager", "Convert", "BearerDid", "Did", "DidError", "DidErrorCode", "EMPTY_DID_RESOLUTION_RESULT", "DidKeyRegisteredKeyType", "DidKeyVerificationMethodType", "AlgorithmToKeyTypeMap", "DidKey", "DidMethod", "keyManager", "LocalKeyManager", "DidKeyUtils", "BearerDid", "Did", "DidError", "DidErrorCode", "EMPTY_DID_RESOLUTION_RESULT", "getVerificationMethodTypes", "keyBytesToMultibaseId", "multibaseIdToKeyBytes", "isValid", "Secp256k1", "Ed25519", "universalTypeOf", "Multicodec", "Secp256r1", "X25519", "DidWeb", "DidMethod", "Did", "EMPTY_DID_RESOLUTION_RESULT", "import_ms", "import_level", "import_dist", "DidResolverCacheNoop", "UniversalResolver", "DidResolverCacheNoop", "Did", "EMPTY_DID_RESOLUTION_RESULT", "DidErrorCode", "import_dist", "alphabet", "dec", "encode", "decode", "parseUUID", "import_dist", "__pow", "DIGITS", "UUID", "__pow", "V7Generator", "DefaultRandom", "getRandomValues", "defaultGenerator", "uuidv7obj", "isValidPrefix", "TypeID", "encode", "decode", "parseUUID", "typeid", "import_dist", "crypto", "LocalKeyManager", "Jwt", "Convert", "utils_exports", "UniversalResolver", "DidDht", "DidIon", "DidKey", "DidJwk", "DidWeb", "import_dist", "PresentationExchange", "isValid", "import_dist", "utils_exports", "getCurrentXmlSchema112Timestamp", "getFutureXmlSchema112Timestamp", "getXmlSchema112Timestamp", "isValidRFC3339Timestamp", "isValidXmlSchema112Timestamp", "import_dist", "import_dist", "import_dist", "import_dist", "decode", "import_dist", "import_dist", "encode", "decode", "import_ms", "rfq", "order", "close", "offering", "message", "utils_exports", "ms", "typeid", "Jwt", "import_dist"]
}
