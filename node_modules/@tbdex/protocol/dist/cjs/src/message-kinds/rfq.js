var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { BigNumber } from 'bignumber.js';
import { Crypto } from '../crypto.js';
import { VerifiableCredential, PresentationExchange } from '@web5/credentials';
import { Message } from '../message.js';
import Ajv from 'ajv';
import { Parser } from '../parser.js';
import { validate } from '../validator.js';
import { Convert } from '@web5/common';
import { randomBytes } from '@web5/crypto/utils';
/**
 * Message sent by Alice to PFI to request a quote (RFQ)
 * @beta
 */
var Rfq = /** @class */ (function (_super) {
    __extends(Rfq, _super);
    function Rfq(metadata, data, signature, privateData) {
        var _this = _super.call(this, metadata, data, signature) || this;
        /** a set of valid Message kinds that can come after an rfq */
        _this.validNext = new Set(['quote', 'close']);
        /** The message kind (rfq) */
        _this.kind = 'rfq';
        _this.metadata = metadata;
        _this.data = data;
        _this.privateData = privateData;
        return _this;
    }
    /**
     * Parses a json message into an Rfq
     * @param rawMessage - the rfq to parse
     * @throws if the rfq could not be parsed or is not a valid Rfq
     * @returns The parsed Rfq
     */
    Rfq.parse = function (rawMessage, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var jsonMessage, rfq;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jsonMessage = Parser.rawToMessageModel(rawMessage);
                        rfq = new Rfq(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature, jsonMessage.privateData);
                        return [4 /*yield*/, rfq.verify()];
                    case 1:
                        _a.sent();
                        if (opts === null || opts === void 0 ? void 0 : opts.requireAllPrivateData) {
                            rfq.verifyAllPrivateData();
                        }
                        else {
                            rfq.verifyPresentPrivateData();
                        }
                        return [2 /*return*/, rfq];
                }
            });
        });
    };
    /**
     * Valid structure of the message including the presence of the signature
     * using the official spec JSON Schemas
     * @override
     * @throws If the message's structure does not match the JSON schemas
     */
    Rfq.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (this.privateData !== undefined) {
            validate(this.privateData, 'rfqPrivate');
        }
    };
    /**
     * Creates an rfq with the given options
     * @param opts - options to create an rfq
     * @returns {@link Rfq}
     */
    Rfq.create = function (opts) {
        var _a;
        var id = Message.generateId('rfq');
        var metadata = __assign(__assign({}, opts.metadata), { kind: 'rfq', id: id, exchangeId: id, createdAt: new Date().toISOString(), protocol: (_a = opts.metadata.protocol) !== null && _a !== void 0 ? _a : '1.0' });
        var _b = Rfq.hashPrivateData(opts.data), data = _b.data, privateData = _b.privateData;
        var rfq = new Rfq(metadata, data, undefined, privateData);
        rfq.validateData();
        return rfq;
    };
    /**
     * Hash private RFQ data and set private fields in an RfqPrivateData object
     * @param - unhashedRfqData
     * @returns An object with fields data and privateData.
     * @returns {@link RfqData} The value of data field.
     * @returns {@link RfqPrivateData} The value of privateData field.
     */
    Rfq.hashPrivateData = function (unhashedRfqData) {
        var salt = Convert.uint8Array(randomBytes(16)).toBase64Url();
        var claims = unhashedRfqData.claims, payin = unhashedRfqData.payin, payout = unhashedRfqData.payout, remainingRfqData = __rest(unhashedRfqData, ["claims", "payin", "payout"]);
        var payinDetails = payin.paymentDetails, remainingPayin = __rest(payin, ["paymentDetails"]);
        var payoutDetails = payout.paymentDetails, remainingPayout = __rest(payout, ["paymentDetails"]);
        var data = __assign(__assign({}, remainingRfqData), { payin: remainingPayin, payout: remainingPayout });
        if (payinDetails !== undefined) {
            data.payin.paymentDetailsHash = Rfq.digestPrivateData(salt, payinDetails);
        }
        if (payoutDetails !== undefined) {
            data.payout.paymentDetailsHash = Rfq.digestPrivateData(salt, payoutDetails);
        }
        if (claims !== undefined && (claims === null || claims === void 0 ? void 0 : claims.length) > 0) {
            data.claimsHash = Rfq.digestPrivateData(salt, claims);
        }
        var privateData = {
            salt: salt,
            payin: {
                paymentDetails: payinDetails,
            },
            payout: {
                paymentDetails: payoutDetails,
            },
            claims: claims
        };
        return {
            data: data,
            privateData: privateData,
        };
    };
    /**
     * Verify the presence and integrity of all possible properties in {@link Rfq.privateData}.
     * @throws if there are properties missing in {@link Rfq.privateData} or which do not match the corresponding
     *         hashed property in {@link Rfq.data}
     */
    Rfq.prototype.verifyAllPrivateData = function () {
        if (this.privateData === undefined) {
            throw new Error('Could not verify all privateData because privateData property is missing');
        }
        // Verify payin details
        if (this.data.payin.paymentDetailsHash !== undefined) {
            this.verifyPayinDetailsHash();
        }
        // Verify payout details
        if (this.data.payout.paymentDetailsHash !== undefined) {
            this.verifyPayoutDetailsHash();
        }
        // Verify claims
        if (this.data.claimsHash !== undefined) {
            this.verifyClaimsHash();
        }
    };
    /**
     * Verify the integrity properties that are present in {@link Rfq.privateData}.
     * @throws if there are properties present in {@link Rfq.privateData} which do not match the corresponding
     *         hashed property in {@link Rfq.data}
     */
    Rfq.prototype.verifyPresentPrivateData = function () {
        var _a, _b, _c, _d, _e;
        // Verify payin details
        if (this.data.payin.paymentDetailsHash !== undefined && ((_b = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.payin) === null || _b === void 0 ? void 0 : _b.paymentDetails) !== undefined) {
            this.verifyPayinDetailsHash();
        }
        // Verify payout details
        if (this.data.payout.paymentDetailsHash !== undefined && ((_d = (_c = this.privateData) === null || _c === void 0 ? void 0 : _c.payout) === null || _d === void 0 ? void 0 : _d.paymentDetails) !== undefined) {
            this.verifyPayoutDetailsHash();
        }
        // Verify claims
        if (this.data.claimsHash !== undefined && ((_e = this.privateData) === null || _e === void 0 ? void 0 : _e.claims) !== undefined) {
            this.verifyClaimsHash();
        }
    };
    Rfq.prototype.verifyPayinDetailsHash = function () {
        var _a, _b;
        var digest = Rfq.digestPrivateData(this.privateData.salt, (_b = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.payin) === null || _b === void 0 ? void 0 : _b.paymentDetails);
        if (digest !== this.data.payin.paymentDetailsHash) {
            throw new Error('Private data integrity check failed: ' +
                'data.payin.paymentDetailsHash does not match digest of privateData.payin.paymentDetails');
        }
    };
    Rfq.prototype.verifyPayoutDetailsHash = function () {
        var _a, _b;
        var digest = Rfq.digestPrivateData(this.privateData.salt, (_b = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.payout) === null || _b === void 0 ? void 0 : _b.paymentDetails);
        if (digest !== this.data.payout.paymentDetailsHash) {
            throw new Error('Private data integrity check failed: ' +
                'data.payout.paymentDetailsHash does not match digest of privateData.payout.paymentDetails');
        }
    };
    Rfq.prototype.verifyClaimsHash = function () {
        var _a;
        var claimsHash = this.data.claimsHash;
        var claims = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.claims;
        var digest = Rfq.digestPrivateData(this.privateData.salt, claims);
        if (digest !== claimsHash) {
            throw new Error('Private data integrity check failed: ' +
                "data.claimsHash does not match digest of privateData.claims");
        }
    };
    /**
     * Given a salt and a value, compute a deterministic digest used in hashed fields in RfqData
     * @param - salt
     * @param - value
     * @returns salted hash of the private data value
     */
    Rfq.digestPrivateData = function (salt, value) {
        var digestible = [salt, value];
        var byteArray = Crypto.digest(digestible);
        return Convert.uint8Array(byteArray).toBase64Url();
    };
    /**
     * evaluates this rfq against the provided offering
     * @param offering - the offering to evaluate this rfq against
     * @throws if Rfq.data.offeringId doesn't match the provided offering's id
     * @see RfqData#offeringId
     * @throws if payinAmount in {@link Rfq.data} exceeds the provided offering's max units allowed or is below the offering's min units allowed
     * @throws if payinMethod in {@link Rfq.data} property `kind` cannot be validated against the provided offering's payinMethod kinds
     * @throws if payinMethod in {@link Rfq.data} property `paymentDetails` cannot be validated against the provided offering's payinMethod requiredPaymentDetails
     * @throws if payoutMethod in {@link Rfq.data} property `kind` cannot be validated against the provided offering's payoutMethod kinds
     * @throws if payoutMethod in {@link Rfq.data} property `paymentDetails` cannot be validated against the provided offering's payoutMethod requiredPaymentDetails
     */
    Rfq.prototype.verifyOfferingRequirements = function (offering) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var payinAmount, maxAmount, minAmount;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (offering.metadata.protocol !== this.metadata.protocol) {
                            throw new Error("protocol version mismatch. (rfq) ".concat(this.metadata.protocol, " !== ").concat(offering.metadata.protocol, " (offering)"));
                        }
                        if (offering.metadata.id !== this.data.offeringId) {
                            throw new Error("offering id mismatch. (rfq) ".concat(this.data.offeringId, " !== ").concat(offering.metadata.id, " (offering)"));
                        }
                        if (offering.data.payin.max) {
                            payinAmount = BigNumber(this.data.payin.amount);
                            maxAmount = BigNumber(offering.data.payin.max);
                            if (payinAmount.isGreaterThan(maxAmount)) {
                                throw new Error("rfq payinAmount exceeds offering's maxAmount. (rfq) ".concat(this.data.payin.amount, " > ").concat(offering.data.payin.max, " (offering)"));
                            }
                        }
                        // Verify payin amount is more than minimum
                        if (offering.data.payin.min) {
                            payinAmount !== null && payinAmount !== void 0 ? payinAmount : (payinAmount = BigNumber(this.data.payin.amount));
                            minAmount = BigNumber(offering.data.payin.min);
                            if (payinAmount.isLessThan(minAmount)) {
                                throw new Error("rfq payinAmount is below offering's minAmount. (rfq) ".concat(this.data.payin.amount, " > ").concat(offering.data.payin.min, " (offering)"));
                            }
                        }
                        // Verify payin/payout methods
                        this.verifyPaymentMethod(this.data.payin.kind, this.data.payin.paymentDetailsHash, (_b = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.payin) === null || _b === void 0 ? void 0 : _b.paymentDetails, offering.data.payin.methods, 'payin');
                        this.verifyPaymentMethod(this.data.payout.kind, this.data.payout.paymentDetailsHash, (_d = (_c = this.privateData) === null || _c === void 0 ? void 0 : _c.payout) === null || _d === void 0 ? void 0 : _d.paymentDetails, offering.data.payout.methods, 'payout');
                        return [4 /*yield*/, this.verifyClaims(offering)];
                    case 1:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate the Rfq's payin/payout method against an Offering's allow payin/payout methods
     *
     * @param rfqPaymentMethod - The Rfq's selected payin/payout method being validated
     * @param allowedPaymentMethods - The Offering's allowed payin/payout methods
     * @param payDirection - Either 'payin' or 'payout', used to provide more detailed error messages.
     *
     * @throws if rfqPaymentMethod property `kind` cannot be validated against the provided offering's paymentMethod's kinds
     * @throws if {@link Rfq.privateData} property `paymentDetails` is missing but is necessary to validate against the provided offering's paymentMethod's kinds
     * @throws if rfqPaymentMethod property `paymentDetails` cannot be validated against the provided offering's paymentMethod's requiredPaymentDetails
     */
    Rfq.prototype.verifyPaymentMethod = function (selectedPaymentKind, selectedPaymentDetailsHash, selectedPaymentDetails, allowedPaymentMethods, payDirection) {
        var paymentMethodMatches = allowedPaymentMethods.filter(function (paymentMethod) { return paymentMethod.kind === selectedPaymentKind; });
        if (!paymentMethodMatches.length) {
            var paymentMethodKinds = allowedPaymentMethods.map(function (paymentMethod) { return paymentMethod.kind; }).join(', ');
            throw new Error("offering does not support rfq's ".concat(payDirection, "Method kind. (rfq) ").concat(selectedPaymentKind, " was not found in: [").concat(paymentMethodKinds, "] (offering)"));
        }
        var ajv = new Ajv.default();
        var invalidPaymentDetailsErrors = new Set();
        for (var _i = 0, paymentMethodMatches_1 = paymentMethodMatches; _i < paymentMethodMatches_1.length; _i++) {
            var paymentMethodMatch = paymentMethodMatches_1[_i];
            if (!paymentMethodMatch.requiredPaymentDetails) {
                // If requiredPaymentDetails is omitted, and paymentDetails is also omitted, we have a match
                if (selectedPaymentDetailsHash === undefined) {
                    return;
                }
                // paymentDetails is present even though requiredPaymentDetails is omitted. This is unsatisfactory.
                invalidPaymentDetailsErrors.add(new Error('paymentDetails must be omitted when requiredPaymentDetails is omitted'));
            }
            else {
                // requiredPaymentDetails is present, so Rfq's payment details must match
                var validate_1 = ajv.compile(paymentMethodMatch.requiredPaymentDetails);
                var isValid = validate_1(selectedPaymentDetails);
                if (isValid) {
                    // Selected payment method matches one of the offering's allowed payment methods
                    return;
                }
                invalidPaymentDetailsErrors.add(validate_1.errors);
            }
        }
        throw new Error("rfq ".concat(payDirection, "Method paymentDetails could not be validated against offering requiredPaymentDetails. ") +
            "Schema validation errors: ".concat(Array.from(invalidPaymentDetailsErrors).join()));
    };
    /**
     * checks the claims provided in this rfq against an offering's requirements
     * @param offering - the offering to check against
     * @throws if rfq's claims do not fulfill the offering's requirements
     */
    Rfq.prototype.verifyClaims = function (offering) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var credentials, _i, credentials_1, credential;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!offering.data.requiredClaims) {
                            return [2 /*return*/];
                        }
                        credentials = PresentationExchange.selectCredentials({ vcJwts: (_b = (_a = this.privateData) === null || _a === void 0 ? void 0 : _a.claims) !== null && _b !== void 0 ? _b : [], presentationDefinition: offering.data.requiredClaims });
                        if (credentials.length === 0) {
                            throw new Error('claims do not fulfill the offering\'s requirements');
                        }
                        _i = 0, credentials_1 = credentials;
                        _c.label = 1;
                    case 1:
                        if (!(_i < credentials_1.length)) return [3 /*break*/, 4];
                        credential = credentials_1[_i];
                        return [4 /*yield*/, VerifiableCredential.verify({ vcJwt: credential })];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Converts this rfq message to a json object
     */
    Rfq.prototype.toJSON = function () {
        var jsonMessage = _super.prototype.toJSON.call(this);
        if (this.privateData !== undefined) {
            jsonMessage.privateData = this.privateData;
        }
        return jsonMessage;
    };
    return Rfq;
}(Message));
export { Rfq };
