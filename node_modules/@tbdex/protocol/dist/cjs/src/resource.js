var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { typeid } from 'typeid-js';
import { Crypto } from './crypto.js';
import { validate } from './validator.js';
/**
 * tbDEX Resources are published by PFIs for anyone to consume and generally used as a part of the discovery process.
 * They are not part of the message exchange, i.e Alice cannot reply to a Resource.
 * @beta
 */
var Resource = /** @class */ (function () {
    /**
     * Constructor is primarily for intended for internal use. For a better developer experience,
     * consumers should use concrete classes to programmatically create and parse resources,
     * e.g. {@link Offering.parse} and {@link Offering.create}
     * @param metadata - {@link Resource.metadata}
     * @param data - {@link Resource.data}
     * @param signature - {@link Resource._signature}
     */
    function Resource(metadata, data, signature) {
        this.metadata = metadata;
        this.data = data;
        this._signature = signature;
    }
    /** Generates a unique id with the resource kind's prefix */
    Resource.generateId = function (resourceKind) {
        return typeid(resourceKind).toString();
    };
    /**
     * Signs the resource as a jws with detached content and sets the signature property
     * @param did - the signer's DID
     * @throws If the signature could not be produced
     */
    Resource.prototype.sign = function (did) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, Crypto.sign({ did: did, payload: this.digest(), detached: true })];
                    case 1:
                        _a._signature = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validates the resource structure and verifies the cryptographic signature
     * @throws if the resource signature is invalid
     * @throws if the signer's DID does not match Resource.metadata.from
     * @throws if the resource structure is invalid
     * @throws see {@link Crypto.verify}
     * @returns Resource signer's DID
     */
    Resource.prototype.verify = function () {
        return __awaiter(this, void 0, void 0, function () {
            var signer;
            return __generator(this, function (_a) {
                this.validate();
                signer = this.verifySignature();
                return [2 /*return*/, signer];
            });
        });
    };
    /**
     * Verifies the integrity of the cryptographic signature
     * @throws if the resource signature is invalid
     * @throws if the signer's DID does not match Resource.metadata.from
     * @returns Resource signer's DID
     */
    Resource.prototype.verifySignature = function () {
        return __awaiter(this, void 0, void 0, function () {
            var signer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.signature === undefined) {
                            throw new Error('Could not verify message signature because no signature is missing');
                        }
                        return [4 /*yield*/, Crypto.verify({ detachedPayload: this.digest(), signature: this.signature })];
                    case 1:
                        signer = _a.sent();
                        if (this.metadata.from !== signer) { // ensure that DID used to sign matches `from` property in metadata
                            throw new Error('Signature verification failed: Expected DID in kid of JWS header must match metadata.from');
                        }
                        return [2 /*return*/, signer];
                }
            });
        });
    };
    /**
     * Computes a digest of the payload by:
     * * JSON serializing the payload as per [RFC-8785: JSON Canonicalization Scheme](https://www.rfc-editor.org/rfc/rfc8785)
     * * sha256 hashing the serialized payload
     *
     * @returns The SHA-256 hash of the canonicalized payload, represented as a byte array.
     */
    Resource.prototype.digest = function () {
        return Crypto.digest({ metadata: this.metadata, data: this.data });
    };
    /**
     * Valid structure of the resource including the presence of the signature
     * using the official spec JSON Schemas
     * @throws If the resource's structure does not match the JSON schemas
     */
    Resource.prototype.validate = function () {
        validate(this.toJSON(), 'resource');
        this.validateData();
    };
    /**
     * Validates `data` section of resource only using the official TBDex JSON Schemas.
     * This is useful for partially validating unsigned resources.
     * @throws If the structure of the Resource's data does not match the JSON schemas
     */
    Resource.prototype.validateData = function () {
        validate(this.data, this.kind);
    };
    /**
     * returns the resource as a json object. Automatically used by `JSON.stringify` method.
     */
    Resource.prototype.toJSON = function () {
        return {
            metadata: this.metadata,
            data: this.data,
            signature: this.signature
        };
    };
    Object.defineProperty(Resource.prototype, "signature", {
        /** the resource's cryptographic signature */
        get: function () {
            return this._signature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "id", {
        /** the resource's id */
        get: function () {
            return this.metadata.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "from", {
        /** The sender's DID */
        get: function () {
            return this.metadata.from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "createdAt", {
        /** Resource creation time. Expressed as ISO8601 */
        get: function () {
            return this.metadata.createdAt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "updatedAt", {
        /** Resource last updated time. Expressed as ISO8601 */
        get: function () {
            return this.metadata.updatedAt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "protocol", {
        /** the protocol version */
        get: function () {
            return this.metadata.protocol;
        },
        enumerable: false,
        configurable: true
    });
    /** offering type guard */
    Resource.prototype.isOffering = function () {
        return this.metadata.kind === 'offering';
    };
    /** balance type guard */
    Resource.prototype.isBalance = function () {
        return this.metadata.kind === 'balance';
    };
    return Resource;
}());
export { Resource };
