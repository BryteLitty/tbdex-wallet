var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Rfq, Quote, Order, OrderStatus, Close } from './message-kinds/index.js';
import { Balance, Offering } from './resource-kinds/index.js';
/**
 * Utility functions for parsing Messages and Resources
 * @beta
 */
var Parser = /** @class */ (function () {
    function Parser() {
    }
    /**
     * @beta
     *
     * Parses the json message into a message instance.
     * Performs format validation and an integrity check on the signature
     * @param message - the message to parse. can either be an object or a string
     * @returns {@link Message}
     */
    Parser.parseMessage = function (rawMessage) {
        return __awaiter(this, void 0, void 0, function () {
            var jsonMessage, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jsonMessage = Parser.rawToMessageModel(rawMessage);
                        switch (jsonMessage.metadata.kind) {
                            case 'rfq':
                                message = new Rfq(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature, jsonMessage.privateData);
                                break;
                            case 'quote':
                                message = new Quote(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                                break;
                            case 'order':
                                message = new Order(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                                break;
                            case 'orderstatus':
                                message = new OrderStatus(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                                break;
                            case 'close':
                                message = new Close(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                                break;
                            default:
                                throw new Error("Unrecognized message kind (".concat(jsonMessage.metadata.kind, ")"));
                        }
                        return [4 /*yield*/, message.verify()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, message];
                }
            });
        });
    };
    /**
     * @beta
     *
     * Parses a json message into an instance of message kind's class.
     * Performs format validation and an integrity check of the signature
     * @param jsonResource - the resource to parse
     * @returns {@link Resource}
     */
    Parser.parseResource = function (rawResource) {
        return __awaiter(this, void 0, void 0, function () {
            var jsonResource, resource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jsonResource = Parser.rawToResourceModel(rawResource);
                        switch (jsonResource.metadata.kind) {
                            case 'offering':
                                resource = new Offering(jsonResource.metadata, jsonResource.data, jsonResource.signature);
                                break;
                            case 'balance':
                                resource = new Balance(jsonResource.metadata, jsonResource.data, jsonResource.signature);
                                break;
                            default:
                                throw new Error("Unrecognized resource kind (".concat(jsonResource.metadata.kind, ")"));
                        }
                        return [4 /*yield*/, resource.verify()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, resource];
                }
            });
        });
    };
    /**
     * Util for JSON.parse-ing a stringified Tbdex Message
     * @param rawMessage - Either a stringified Tbdex Message or an object Tbdex Message
     * @returns A Tbdex Message as an object
     * @throws If the stringified message could not be JSON.parse'd
     */
    Parser.rawToMessageModel = function (rawMessage) {
        try {
            return typeof rawMessage === 'string' ? JSON.parse(rawMessage) : rawMessage;
        }
        catch (e) {
            var errorMessage = e instanceof Error ? e.message : e;
            throw new Error("parse: Failed to parse message. Error: ".concat(errorMessage));
        }
    };
    /**
     * Util for JSON.parse-ing a stringified Tbdex resource
     * @param rawResource - Either a stringified Tbdex resource or an object Tbdex resource
     * @returns A Tbdex message as an object
     * @throws If the stringified resource could not be JSON.parse'd
     */
    Parser.rawToResourceModel = function (rawResource) {
        try {
            return typeof rawResource === 'string' ? JSON.parse(rawResource) : rawResource;
        }
        catch (e) {
            var errorMessage = e instanceof Error ? e.message : e;
            throw new Error("parse: Failed to parse resource. Error: ".concat(errorMessage));
        }
    };
    return Parser;
}());
export { Parser };
