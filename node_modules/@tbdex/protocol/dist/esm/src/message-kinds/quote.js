import { Message } from '../message.js';
import { Parser } from '../parser.js';
/**
 * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until
 * the quote expires
 * @beta
 */
export class Quote extends Message {
    /** a set of valid Message kinds that can come after a quote */
    validNext = new Set(['order', 'close']);
    /** The message kind (quote) */
    kind = 'quote';
    /** Metadata such as sender, recipient, date created, and ID */
    metadata;
    /**
     * Quote's data containing locked-in price and payment methods that the PFI is willing to honor
     * until the quote expires
     */
    data;
    constructor(metadata, data, signature) {
        super(metadata, data, signature);
        this.metadata = metadata;
        this.data = data;
    }
    /**
     * Parses a json message into a Quote
     * @param rawMessage - the quote to parse
     * @throws if the quote could not be parsed or is not a valid Quote
     * @returns The parsed Quote
     */
    static async parse(rawMessage) {
        const jsonMessage = Parser.rawToMessageModel(rawMessage);
        const quote = new Quote(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
        await quote.verify();
        return quote;
    }
    /**
     * Creates a quote message with the given options
     * @param opts - options to create a quote
     */
    static create(opts) {
        const metadata = {
            ...opts.metadata,
            kind: 'quote',
            id: Message.generateId('quote'),
            createdAt: new Date().toISOString(),
            protocol: opts.metadata.protocol ?? '1.0'
        };
        const quote = new Quote(metadata, opts.data);
        quote.validateData();
        return quote;
    }
}
