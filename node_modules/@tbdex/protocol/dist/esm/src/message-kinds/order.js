import { Message } from '../message.js';
import { Parser } from '../parser.js';
/**
 * Message sent by Alice to the PFI to accept a Quote.
 * @beta
 */
export class Order extends Message {
    /** a set of valid Message kinds that can come after an order */
    validNext = new Set(['orderstatus']);
    /** The message kind (order) */
    kind = 'order';
    /** Metadata such as sender, recipient, date created, and ID */
    metadata;
    /** Order's data */
    data;
    constructor(metadata, data, signature) {
        super(metadata, data, signature);
        this.metadata = metadata;
        this.data = data;
    }
    /**
     * Parses a json message into an Order
     * @param rawMessage - the order to parse
     * @throws if the order could not be parsed or is not a valid Order
     * @returns The parsed Order
     */
    static async parse(rawMessage) {
        const jsonMessage = Parser.rawToMessageModel(rawMessage);
        const order = new Order(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
        await order.verify();
        return order;
    }
    /**
     * Creates an order with the given options
     * @param opts - options to create an order
     */
    static create(opts) {
        const metadata = {
            ...opts.metadata,
            kind: 'order',
            id: Message.generateId('order'),
            createdAt: new Date().toISOString(),
            protocol: opts.metadata.protocol ?? '1.0'
        };
        const order = new Order(metadata, {});
        order.validateData();
        return order;
    }
}
