import { Message } from '../message.js';
import { Parser } from '../parser.js';
/**
 * A Close can be sent by Alice or the PFI as a reply to an RFQ or a Quote
 * @beta
 */
export class Close extends Message {
    /** A set of valid Message kinds that can come after a close */
    validNext = new Set([]);
    /** The message kind (close) */
    kind = 'close';
    /** Metadata such as sender, recipient, date created, and ID */
    metadata;
    /** Close's data containing a reason why the exchange was closed */
    data;
    constructor(metadata, data, signature) {
        super(metadata, data, signature);
        this.metadata = metadata;
        this.data = data;
    }
    /**
     * Parses a json message into an Close
     * @param rawMessage - the close to parse
     * @throws if the close could not be parsed or is not a valid Close
     * @returns The parsed Close
     */
    static async parse(rawMessage) {
        const jsonMessage = Parser.rawToMessageModel(rawMessage);
        const close = new Close(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
        await close.verify();
        return close;
    }
    /**
     * Creates a close message with the given options
     * @param opts - options to create a close message
     */
    static create(opts) {
        const metadata = {
            ...opts.metadata,
            kind: 'close',
            id: Message.generateId('close'),
            createdAt: new Date().toISOString(),
            protocol: opts.metadata.protocol ?? '1.0'
        };
        const close = new Close(metadata, opts.data);
        close.validateData();
        return close;
    }
    /** an explanation of why the exchange is being closed */
    get reason() {
        return this.data.reason;
    }
}
