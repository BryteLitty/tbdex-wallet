import { Rfq, Quote, Order, OrderStatus, Close } from './message-kinds/index.js';
import { Balance, Offering } from './resource-kinds/index.js';
/**
 * Utility functions for parsing Messages and Resources
 * @beta
 */
export class Parser {
    constructor() { }
    /**
     * @beta
     *
     * Parses the json message into a message instance.
     * Performs format validation and an integrity check on the signature
     * @param message - the message to parse. can either be an object or a string
     * @returns {@link Message}
     */
    static async parseMessage(rawMessage) {
        const jsonMessage = Parser.rawToMessageModel(rawMessage);
        let message;
        switch (jsonMessage.metadata.kind) {
            case 'rfq':
                message = new Rfq(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature, jsonMessage.privateData);
                break;
            case 'quote':
                message = new Quote(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                break;
            case 'order':
                message = new Order(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                break;
            case 'orderstatus':
                message = new OrderStatus(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                break;
            case 'close':
                message = new Close(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
                break;
            default:
                throw new Error(`Unrecognized message kind (${jsonMessage.metadata.kind})`);
        }
        await message.verify();
        return message;
    }
    /**
     * @beta
     *
     * Parses a json message into an instance of message kind's class.
     * Performs format validation and an integrity check of the signature
     * @param jsonResource - the resource to parse
     * @returns {@link Resource}
     */
    static async parseResource(rawResource) {
        const jsonResource = Parser.rawToResourceModel(rawResource);
        let resource;
        switch (jsonResource.metadata.kind) {
            case 'offering':
                resource = new Offering(jsonResource.metadata, jsonResource.data, jsonResource.signature);
                break;
            case 'balance':
                resource = new Balance(jsonResource.metadata, jsonResource.data, jsonResource.signature);
                break;
            default:
                throw new Error(`Unrecognized resource kind (${jsonResource.metadata.kind})`);
        }
        await resource.verify();
        return resource;
    }
    /**
     * Util for JSON.parse-ing a stringified Tbdex Message
     * @param rawMessage - Either a stringified Tbdex Message or an object Tbdex Message
     * @returns A Tbdex Message as an object
     * @throws If the stringified message could not be JSON.parse'd
     */
    static rawToMessageModel(rawMessage) {
        try {
            return typeof rawMessage === 'string' ? JSON.parse(rawMessage) : rawMessage;
        }
        catch (e) {
            const errorMessage = e instanceof Error ? e.message : e;
            throw new Error(`parse: Failed to parse message. Error: ${errorMessage}`);
        }
    }
    /**
     * Util for JSON.parse-ing a stringified Tbdex resource
     * @param rawResource - Either a stringified Tbdex resource or an object Tbdex resource
     * @returns A Tbdex message as an object
     * @throws If the stringified resource could not be JSON.parse'd
     */
    static rawToResourceModel(rawResource) {
        try {
            return typeof rawResource === 'string' ? JSON.parse(rawResource) : rawResource;
        }
        catch (e) {
            const errorMessage = e instanceof Error ? e.message : e;
            throw new Error(`parse: Failed to parse resource. Error: ${errorMessage}`);
        }
    }
}
