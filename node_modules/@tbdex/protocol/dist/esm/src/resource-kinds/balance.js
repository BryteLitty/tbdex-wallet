import { Resource } from '../resource.js';
import { Parser } from '../parser.js';
/**
 * A Balance is a protected resource used to communicate the amounts of each
 * currency held by the PFI on behalf of its customer.
 * @beta
 */
export class Balance extends Resource {
    /** The resource kind (balance) */
    kind = 'balance';
    /** Metadata such as sender, date created, date updated, and ID */
    metadata;
    /** Balance's data such as currencies and available amounts */
    data;
    constructor(metadata, data, signature) {
        super(metadata, data, signature);
        this.metadata = metadata;
        this.data = data;
    }
    /**
     * Parses a json resource into an Balance
     * @param rawMessage - the Balance to parse
     * @throws if the balance could not be parsed or is not a valid Balance
     * @returns The parsed Balance
     */
    static async parse(rawMessage) {
        const jsonMessage = Parser.rawToResourceModel(rawMessage);
        const balance = new Balance(jsonMessage.metadata, jsonMessage.data, jsonMessage.signature);
        await balance.verify();
        return balance;
    }
    /**
     * Creates an Balance with the given options
     * @param opts - options to create an balance
     */
    static create(opts) {
        const metadata = {
            ...opts.metadata,
            kind: 'balance',
            id: Resource.generateId('balance'),
            createdAt: new Date().toISOString(),
            protocol: opts.metadata.protocol ?? '1.0'
        };
        const balance = new Balance(metadata, opts.data);
        balance.validateData();
        return balance;
    }
}
