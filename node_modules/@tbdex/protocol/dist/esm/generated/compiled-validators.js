"use strict";
export const close = validate10;
const schema11 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/close.schema.json", "type": "object", "additionalProperties": false, "properties": { "reason": { "type": "string" }, "success": { "type": "boolean" } } };
function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/close.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!((key0 === "reason") || (key0 === "success"))) {
                validate10.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.reason !== undefined) {
                const _errs2 = errors;
                if (typeof data.reason !== "string") {
                    validate10.errors = [{ instancePath: instancePath + "/reason", schemaPath: "#/properties/reason/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.success !== undefined) {
                    const _errs4 = errors;
                    if (typeof data.success !== "boolean") {
                        validate10.errors = [{ instancePath: instancePath + "/success", schemaPath: "#/properties/success/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                        return false;
                    }
                    var valid0 = _errs4 === errors;
                }
                else {
                    var valid0 = true;
                }
            }
        }
    }
    else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate10.errors = vErrors; return errors === 0; }
export const definitions = validate11;
const schema12 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/definitions.json", "type": "object", "definitions": { "did": { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, "decimalString": { "type": "string", "pattern": "^([0-9]+(?:[.][0-9]+)?)$" } } };
function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/definitions.json" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate11.errors = vErrors; return errors === 0; }
export const offering = validate12;
const schema13 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/offering.schema.json", "type": "object", "properties": { "additionalProperties": false, "description": { "type": "string", "description": "Brief description of what is being offered." }, "payin": { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "min": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount of currency that can be requested" }, "max": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount of currency that can be requested" }, "methods": { "type": "array", "items": { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc." }, "name": { "type": "string", "description": "Payment Method name. Expected to be rendered on screen." }, "description": { "type": "string", "description": "Blurb containing helpful information about the payment method. Expected to be rendered on screen. e.g. \"segwit addresses only\"" }, "group": { "type": "string", "description": "Value that can be used to group specific payment methods together (e.g. Mobile Money vs. Direct Bank Deposit)." }, "requiredPaymentDetails": { "$ref": "http://json-schema.org/draft-07/schema", "description": "A JSON Schema containing the fields that need to be collected in order to use this payment method" }, "min": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount required to use this payment method." }, "max": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount allowed when using this payment method." }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "Fee charged to use this payment method. Absence of this field implies that there is no _additional_ fee associated to the respective payment method." } }, "required": ["kind"] } } }, "required": ["currencyCode", "methods"] }, "payout": { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "min": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount of currency that can be requested" }, "max": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount of currency that can be requested" }, "methods": { "type": "array", "items": { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc." }, "name": { "type": "string", "description": "Payment Method name. Expected to be rendered on screen." }, "description": { "type": "string", "description": "Blurb containing helpful information about the payment method. Expected to be rendered on screen. e.g. \"segwit addresses only\"" }, "group": { "type": "string", "description": "Value that can be used to group specific payment methods together (e.g. Mobile Money vs. Direct Bank Deposit)." }, "requiredPaymentDetails": { "$ref": "http://json-schema.org/draft-07/schema", "description": "A JSON Schema containing the fields that need to be collected in order to use this payment method" }, "min": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount required to use this payment method." }, "max": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount allowed when using this payment method." }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "Fee charged to use this payment method. absence of this field implies that there is no _additional_ fee associated to the respective payment method" }, "estimatedSettlementTime": { "type": "number", "description": "Estimated time in seconds for the payout to be settled. e.g. 3600 for 1 hour. 0 for instant settlement.", "minimum": 0 } }, "required": ["kind", "estimatedSettlementTime"] } } }, "required": ["currencyCode", "methods"] }, "payoutUnitsPerPayinUnit": { "type": "string", "description": "Number of payout currency units for one payin currency unit (i.e 290000 USD for 1 BTC)" }, "requiredClaims": { "type": "object", "description": "PresentationDefinition that describes the credential(s) the PFI requires in order to provide a quote." } }, "required": ["description", "payin", "payout", "payoutUnitsPerPayinUnit"] };
const schema14 = { "type": "string", "pattern": "^([0-9]+(?:[.][0-9]+)?)$" };
const pattern0 = new RegExp("^([0-9]+(?:[.][0-9]+)?)$", "u");
const schema0 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "http://json-schema.org/draft-07/schema#", "title": "Core schema meta-schema", "definitions": { "schemaArray": { "type": "array", "minItems": 1, "items": { "$ref": "#" } }, "nonNegativeInteger": { "type": "integer", "minimum": 0 }, "nonNegativeIntegerDefault0": { "allOf": [{ "$ref": "#/definitions/nonNegativeInteger" }, { "default": 0 }] }, "simpleTypes": { "enum": ["array", "boolean", "integer", "null", "number", "object", "string"] }, "stringArray": { "type": "array", "items": { "type": "string" }, "uniqueItems": true, "default": [] } }, "type": ["object", "boolean"], "properties": { "$id": { "type": "string", "format": "uri-reference" }, "$schema": { "type": "string", "format": "uri" }, "$ref": { "type": "string", "format": "uri-reference" }, "$comment": { "type": "string" }, "title": { "type": "string" }, "description": { "type": "string" }, "default": true, "readOnly": { "type": "boolean", "default": false }, "examples": { "type": "array", "items": true }, "multipleOf": { "type": "number", "exclusiveMinimum": 0 }, "maximum": { "type": "number" }, "exclusiveMaximum": { "type": "number" }, "minimum": { "type": "number" }, "exclusiveMinimum": { "type": "number" }, "maxLength": { "$ref": "#/definitions/nonNegativeInteger" }, "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "pattern": { "type": "string", "format": "regex" }, "additionalItems": { "$ref": "#" }, "items": { "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }], "default": true }, "maxItems": { "$ref": "#/definitions/nonNegativeInteger" }, "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "uniqueItems": { "type": "boolean", "default": false }, "contains": { "$ref": "#" }, "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" }, "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "required": { "$ref": "#/definitions/stringArray" }, "additionalProperties": { "$ref": "#" }, "definitions": { "type": "object", "additionalProperties": { "$ref": "#" }, "default": {} }, "properties": { "type": "object", "additionalProperties": { "$ref": "#" }, "default": {} }, "patternProperties": { "type": "object", "additionalProperties": { "$ref": "#" }, "propertyNames": { "format": "regex" }, "default": {} }, "dependencies": { "type": "object", "additionalProperties": { "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }] } }, "propertyNames": { "$ref": "#" }, "const": true, "enum": { "type": "array", "items": true, "minItems": 1, "uniqueItems": true }, "type": { "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, { "type": "array", "items": { "$ref": "#/definitions/simpleTypes" }, "minItems": 1, "uniqueItems": true }] }, "format": { "type": "string" }, "contentMediaType": { "type": "string" }, "contentEncoding": { "type": "string" }, "if": { "$ref": "#" }, "then": { "$ref": "#" }, "else": { "$ref": "#" }, "allOf": { "$ref": "#/definitions/schemaArray" }, "anyOf": { "$ref": "#/definitions/schemaArray" }, "oneOf": { "$ref": "#/definitions/schemaArray" }, "not": { "$ref": "#" } }, "default": true };
const schema1 = { "type": "integer", "minimum": 0 };
const schema7 = { "type": "array", "items": { "type": "string" }, "uniqueItems": true, "default": [] };
const schema9 = { "enum": ["array", "boolean", "integer", "null", "number", "object", "string"] };
const schema2 = { "allOf": [{ "$ref": "#/definitions/nonNegativeInteger" }, { "default": 0 }] };
function validate1(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; const _errs1 = errors; if (!(((typeof data == "number") && (!(data % 1) && !isNaN(data))) && (isFinite(data)))) {
    validate1.errors = [{ instancePath, schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
    return false;
} if (errors === _errs1) {
    if ((typeof data == "number") && (isFinite(data))) {
        if (data < 0 || isNaN(data)) {
            validate1.errors = [{ instancePath, schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
            return false;
        }
    }
} validate1.errors = vErrors; return errors === 0; }
const schema4 = { "type": "array", "minItems": 1, "items": { "$ref": "#" } };
const root0 = { validate: validate0 };
function validate3(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (Array.isArray(data)) {
        if (data.length < 1) {
            validate3.errors = [{ instancePath, schemaPath: "#/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
            return false;
        }
        else {
            var valid0 = true;
            const len0 = data.length;
            for (let i0 = 0; i0 < len0; i0++) {
                const _errs1 = errors;
                if (!(root0.validate(data[i0], { instancePath: instancePath + "/" + i0, parentData: data, parentDataProperty: i0, rootData }))) {
                    vErrors = vErrors === null ? root0.validate.errors : vErrors.concat(root0.validate.errors);
                    errors = vErrors.length;
                }
                var valid0 = _errs1 === errors;
                if (!valid0) {
                    break;
                }
            }
        }
    }
    else {
        validate3.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
        return false;
    }
} validate3.errors = vErrors; return errors === 0; }
import { default as func0 } from "ajv/dist/runtime/equal.js";
function validate0(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="http://json-schema.org/draft-07/schema#" */ ; let vErrors = null; let errors = 0; if ((!(data && typeof data == "object" && !Array.isArray(data))) && (typeof data !== "boolean")) {
    validate0.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: schema0.type }, message: "must be object,boolean" }];
    return false;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.$id !== undefined) {
            const _errs1 = errors;
            if (errors === _errs1) {
                if (errors === _errs1) {
                    if (!(typeof data.$id === "string")) {
                        validate0.errors = [{ instancePath: instancePath + "/$id", schemaPath: "#/properties/%24id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
            }
            var valid0 = _errs1 === errors;
        }
        else {
            var valid0 = true;
        }
        if (valid0) {
            if (data.$schema !== undefined) {
                const _errs3 = errors;
                if (errors === _errs3) {
                    if (errors === _errs3) {
                        if (!(typeof data.$schema === "string")) {
                            validate0.errors = [{ instancePath: instancePath + "/$schema", schemaPath: "#/properties/%24schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                    }
                }
                var valid0 = _errs3 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.$ref !== undefined) {
                    const _errs5 = errors;
                    if (errors === _errs5) {
                        if (errors === _errs5) {
                            if (!(typeof data.$ref === "string")) {
                                validate0.errors = [{ instancePath: instancePath + "/$ref", schemaPath: "#/properties/%24ref/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                    }
                    var valid0 = _errs5 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.$comment !== undefined) {
                        const _errs7 = errors;
                        if (typeof data.$comment !== "string") {
                            validate0.errors = [{ instancePath: instancePath + "/$comment", schemaPath: "#/properties/%24comment/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs7 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.title !== undefined) {
                            const _errs9 = errors;
                            if (typeof data.title !== "string") {
                                validate0.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs9 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.description !== undefined) {
                                const _errs11 = errors;
                                if (typeof data.description !== "string") {
                                    validate0.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs11 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.readOnly !== undefined) {
                                    const _errs13 = errors;
                                    if (typeof data.readOnly !== "boolean") {
                                        validate0.errors = [{ instancePath: instancePath + "/readOnly", schemaPath: "#/properties/readOnly/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                        return false;
                                    }
                                    var valid0 = _errs13 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.examples !== undefined) {
                                        const _errs15 = errors;
                                        if (errors === _errs15) {
                                            if (!(Array.isArray(data.examples))) {
                                                validate0.errors = [{ instancePath: instancePath + "/examples", schemaPath: "#/properties/examples/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                return false;
                                            }
                                        }
                                        var valid0 = _errs15 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.multipleOf !== undefined) {
                                            let data8 = data.multipleOf;
                                            const _errs17 = errors;
                                            if (errors === _errs17) {
                                                if ((typeof data8 == "number") && (isFinite(data8))) {
                                                    if (data8 <= 0 || isNaN(data8)) {
                                                        validate0.errors = [{ instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/exclusiveMinimum", keyword: "exclusiveMinimum", params: { comparison: ">", limit: 0 }, message: "must be > 0" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate0.errors = [{ instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                    return false;
                                                }
                                            }
                                            var valid0 = _errs17 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.maximum !== undefined) {
                                                let data9 = data.maximum;
                                                const _errs19 = errors;
                                                if (!((typeof data9 == "number") && (isFinite(data9)))) {
                                                    validate0.errors = [{ instancePath: instancePath + "/maximum", schemaPath: "#/properties/maximum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                    return false;
                                                }
                                                var valid0 = _errs19 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                            if (valid0) {
                                                if (data.exclusiveMaximum !== undefined) {
                                                    let data10 = data.exclusiveMaximum;
                                                    const _errs21 = errors;
                                                    if (!((typeof data10 == "number") && (isFinite(data10)))) {
                                                        validate0.errors = [{ instancePath: instancePath + "/exclusiveMaximum", schemaPath: "#/properties/exclusiveMaximum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                        return false;
                                                    }
                                                    var valid0 = _errs21 === errors;
                                                }
                                                else {
                                                    var valid0 = true;
                                                }
                                                if (valid0) {
                                                    if (data.minimum !== undefined) {
                                                        let data11 = data.minimum;
                                                        const _errs23 = errors;
                                                        if (!((typeof data11 == "number") && (isFinite(data11)))) {
                                                            validate0.errors = [{ instancePath: instancePath + "/minimum", schemaPath: "#/properties/minimum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                            return false;
                                                        }
                                                        var valid0 = _errs23 === errors;
                                                    }
                                                    else {
                                                        var valid0 = true;
                                                    }
                                                    if (valid0) {
                                                        if (data.exclusiveMinimum !== undefined) {
                                                            let data12 = data.exclusiveMinimum;
                                                            const _errs25 = errors;
                                                            if (!((typeof data12 == "number") && (isFinite(data12)))) {
                                                                validate0.errors = [{ instancePath: instancePath + "/exclusiveMinimum", schemaPath: "#/properties/exclusiveMinimum/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                return false;
                                                            }
                                                            var valid0 = _errs25 === errors;
                                                        }
                                                        else {
                                                            var valid0 = true;
                                                        }
                                                        if (valid0) {
                                                            if (data.maxLength !== undefined) {
                                                                let data13 = data.maxLength;
                                                                const _errs27 = errors;
                                                                const _errs28 = errors;
                                                                if (!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))) {
                                                                    validate0.errors = [{ instancePath: instancePath + "/maxLength", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                                    return false;
                                                                }
                                                                if (errors === _errs28) {
                                                                    if ((typeof data13 == "number") && (isFinite(data13))) {
                                                                        if (data13 < 0 || isNaN(data13)) {
                                                                            validate0.errors = [{ instancePath: instancePath + "/maxLength", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                }
                                                                var valid0 = _errs27 === errors;
                                                            }
                                                            else {
                                                                var valid0 = true;
                                                            }
                                                            if (valid0) {
                                                                if (data.minLength !== undefined) {
                                                                    const _errs30 = errors;
                                                                    if (!(validate1(data.minLength, { instancePath: instancePath + "/minLength", parentData: data, parentDataProperty: "minLength", rootData }))) {
                                                                        vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);
                                                                        errors = vErrors.length;
                                                                    }
                                                                    var valid0 = _errs30 === errors;
                                                                }
                                                                else {
                                                                    var valid0 = true;
                                                                }
                                                                if (valid0) {
                                                                    if (data.pattern !== undefined) {
                                                                        const _errs31 = errors;
                                                                        if (errors === _errs31) {
                                                                            if (errors === _errs31) {
                                                                                if (!(typeof data.pattern === "string")) {
                                                                                    validate0.errors = [{ instancePath: instancePath + "/pattern", schemaPath: "#/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                        }
                                                                        var valid0 = _errs31 === errors;
                                                                    }
                                                                    else {
                                                                        var valid0 = true;
                                                                    }
                                                                    if (valid0) {
                                                                        if (data.additionalItems !== undefined) {
                                                                            const _errs33 = errors;
                                                                            if (!(validate0(data.additionalItems, { instancePath: instancePath + "/additionalItems", parentData: data, parentDataProperty: "additionalItems", rootData }))) {
                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                errors = vErrors.length;
                                                                            }
                                                                            var valid0 = _errs33 === errors;
                                                                        }
                                                                        else {
                                                                            var valid0 = true;
                                                                        }
                                                                        if (valid0) {
                                                                            if (data.items !== undefined) {
                                                                                let data17 = data.items;
                                                                                const _errs34 = errors;
                                                                                const _errs35 = errors;
                                                                                let valid2 = false;
                                                                                const _errs36 = errors;
                                                                                if (!(validate0(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData }))) {
                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                    errors = vErrors.length;
                                                                                }
                                                                                var _valid0 = _errs36 === errors;
                                                                                valid2 = valid2 || _valid0;
                                                                                if (!valid2) {
                                                                                    const _errs37 = errors;
                                                                                    if (!(validate3(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData }))) {
                                                                                        vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);
                                                                                        errors = vErrors.length;
                                                                                    }
                                                                                    var _valid0 = _errs37 === errors;
                                                                                    valid2 = valid2 || _valid0;
                                                                                }
                                                                                if (!valid2) {
                                                                                    const err0 = { instancePath: instancePath + "/items", schemaPath: "#/properties/items/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                                    if (vErrors === null) {
                                                                                        vErrors = [err0];
                                                                                    }
                                                                                    else {
                                                                                        vErrors.push(err0);
                                                                                    }
                                                                                    errors++;
                                                                                    validate0.errors = vErrors;
                                                                                    return false;
                                                                                }
                                                                                else {
                                                                                    errors = _errs35;
                                                                                    if (vErrors !== null) {
                                                                                        if (_errs35) {
                                                                                            vErrors.length = _errs35;
                                                                                        }
                                                                                        else {
                                                                                            vErrors = null;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                var valid0 = _errs34 === errors;
                                                                            }
                                                                            else {
                                                                                var valid0 = true;
                                                                            }
                                                                            if (valid0) {
                                                                                if (data.maxItems !== undefined) {
                                                                                    let data18 = data.maxItems;
                                                                                    const _errs38 = errors;
                                                                                    const _errs39 = errors;
                                                                                    if (!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))) {
                                                                                        validate0.errors = [{ instancePath: instancePath + "/maxItems", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                                                        return false;
                                                                                    }
                                                                                    if (errors === _errs39) {
                                                                                        if ((typeof data18 == "number") && (isFinite(data18))) {
                                                                                            if (data18 < 0 || isNaN(data18)) {
                                                                                                validate0.errors = [{ instancePath: instancePath + "/maxItems", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    var valid0 = _errs38 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid0 = true;
                                                                                }
                                                                                if (valid0) {
                                                                                    if (data.minItems !== undefined) {
                                                                                        const _errs41 = errors;
                                                                                        if (!(validate1(data.minItems, { instancePath: instancePath + "/minItems", parentData: data, parentDataProperty: "minItems", rootData }))) {
                                                                                            vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);
                                                                                            errors = vErrors.length;
                                                                                        }
                                                                                        var valid0 = _errs41 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid0 = true;
                                                                                    }
                                                                                    if (valid0) {
                                                                                        if (data.uniqueItems !== undefined) {
                                                                                            const _errs42 = errors;
                                                                                            if (typeof data.uniqueItems !== "boolean") {
                                                                                                validate0.errors = [{ instancePath: instancePath + "/uniqueItems", schemaPath: "#/properties/uniqueItems/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid0 = _errs42 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid0 = true;
                                                                                        }
                                                                                        if (valid0) {
                                                                                            if (data.contains !== undefined) {
                                                                                                const _errs44 = errors;
                                                                                                if (!(validate0(data.contains, { instancePath: instancePath + "/contains", parentData: data, parentDataProperty: "contains", rootData }))) {
                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                    errors = vErrors.length;
                                                                                                }
                                                                                                var valid0 = _errs44 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid0 = true;
                                                                                            }
                                                                                            if (valid0) {
                                                                                                if (data.maxProperties !== undefined) {
                                                                                                    let data22 = data.maxProperties;
                                                                                                    const _errs45 = errors;
                                                                                                    const _errs46 = errors;
                                                                                                    if (!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))) {
                                                                                                        validate0.errors = [{ instancePath: instancePath + "/maxProperties", schemaPath: "#/definitions/nonNegativeInteger/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    if (errors === _errs46) {
                                                                                                        if ((typeof data22 == "number") && (isFinite(data22))) {
                                                                                                            if (data22 < 0 || isNaN(data22)) {
                                                                                                                validate0.errors = [{ instancePath: instancePath + "/maxProperties", schemaPath: "#/definitions/nonNegativeInteger/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    var valid0 = _errs45 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid0 = true;
                                                                                                }
                                                                                                if (valid0) {
                                                                                                    if (data.minProperties !== undefined) {
                                                                                                        const _errs48 = errors;
                                                                                                        if (!(validate1(data.minProperties, { instancePath: instancePath + "/minProperties", parentData: data, parentDataProperty: "minProperties", rootData }))) {
                                                                                                            vErrors = vErrors === null ? validate1.errors : vErrors.concat(validate1.errors);
                                                                                                            errors = vErrors.length;
                                                                                                        }
                                                                                                        var valid0 = _errs48 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid0 = true;
                                                                                                    }
                                                                                                    if (valid0) {
                                                                                                        if (data.required !== undefined) {
                                                                                                            let data24 = data.required;
                                                                                                            const _errs49 = errors;
                                                                                                            const _errs50 = errors;
                                                                                                            if (errors === _errs50) {
                                                                                                                if (Array.isArray(data24)) {
                                                                                                                    var valid6 = true;
                                                                                                                    const len0 = data24.length;
                                                                                                                    for (let i0 = 0; i0 < len0; i0++) {
                                                                                                                        const _errs52 = errors;
                                                                                                                        if (typeof data24[i0] !== "string") {
                                                                                                                            validate0.errors = [{ instancePath: instancePath + "/required/" + i0, schemaPath: "#/definitions/stringArray/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid6 = _errs52 === errors;
                                                                                                                        if (!valid6) {
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (valid6) {
                                                                                                                        let i1 = data24.length;
                                                                                                                        let j0;
                                                                                                                        if (i1 > 1) {
                                                                                                                            const indices0 = {};
                                                                                                                            for (; i1--;) {
                                                                                                                                let item0 = data24[i1];
                                                                                                                                if (typeof item0 !== "string") {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if (typeof indices0[item0] == "number") {
                                                                                                                                    j0 = indices0[item0];
                                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/required", schemaPath: "#/definitions/stringArray/uniqueItems", keyword: "uniqueItems", params: { i: i1, j: j0 }, message: "must NOT have duplicate items (items ## " + j0 + " and " + i1 + " are identical)" }];
                                                                                                                                    return false;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                                indices0[item0] = i1;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/required", schemaPath: "#/definitions/stringArray/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid0 = _errs49 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid0 = true;
                                                                                                        }
                                                                                                        if (valid0) {
                                                                                                            if (data.additionalProperties !== undefined) {
                                                                                                                const _errs54 = errors;
                                                                                                                if (!(validate0(data.additionalProperties, { instancePath: instancePath + "/additionalProperties", parentData: data, parentDataProperty: "additionalProperties", rootData }))) {
                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                }
                                                                                                                var valid0 = _errs54 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid0 = true;
                                                                                                            }
                                                                                                            if (valid0) {
                                                                                                                if (data.definitions !== undefined) {
                                                                                                                    let data27 = data.definitions;
                                                                                                                    const _errs55 = errors;
                                                                                                                    if (errors === _errs55) {
                                                                                                                        if (data27 && typeof data27 == "object" && !Array.isArray(data27)) {
                                                                                                                            for (const key0 in data27) {
                                                                                                                                const _errs58 = errors;
                                                                                                                                if (!(validate0(data27[key0], { instancePath: instancePath + "/definitions/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data27, parentDataProperty: key0, rootData }))) {
                                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                }
                                                                                                                                var valid8 = _errs58 === errors;
                                                                                                                                if (!valid8) {
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate0.errors = [{ instancePath: instancePath + "/definitions", schemaPath: "#/properties/definitions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid0 = _errs55 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid0 = true;
                                                                                                                }
                                                                                                                if (valid0) {
                                                                                                                    if (data.properties !== undefined) {
                                                                                                                        let data29 = data.properties;
                                                                                                                        const _errs59 = errors;
                                                                                                                        if (errors === _errs59) {
                                                                                                                            if (data29 && typeof data29 == "object" && !Array.isArray(data29)) {
                                                                                                                                for (const key1 in data29) {
                                                                                                                                    const _errs62 = errors;
                                                                                                                                    if (!(validate0(data29[key1], { instancePath: instancePath + "/properties/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data29, parentDataProperty: key1, rootData }))) {
                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                    }
                                                                                                                                    var valid9 = _errs62 === errors;
                                                                                                                                    if (!valid9) {
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate0.errors = [{ instancePath: instancePath + "/properties", schemaPath: "#/properties/properties/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid0 = _errs59 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid0 = true;
                                                                                                                    }
                                                                                                                    if (valid0) {
                                                                                                                        if (data.patternProperties !== undefined) {
                                                                                                                            let data31 = data.patternProperties;
                                                                                                                            const _errs63 = errors;
                                                                                                                            if (errors === _errs63) {
                                                                                                                                if (data31 && typeof data31 == "object" && !Array.isArray(data31)) {
                                                                                                                                    for (const key2 in data31) {
                                                                                                                                        const _errs65 = errors;
                                                                                                                                        var valid10 = _errs65 === errors;
                                                                                                                                        if (!valid10) {
                                                                                                                                            const err1 = { instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/propertyNames", keyword: "propertyNames", params: { propertyName: key2 }, message: "property name must be valid" };
                                                                                                                                            if (vErrors === null) {
                                                                                                                                                vErrors = [err1];
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                vErrors.push(err1);
                                                                                                                                            }
                                                                                                                                            errors++;
                                                                                                                                            validate0.errors = vErrors;
                                                                                                                                            return false;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    if (valid10) {
                                                                                                                                        for (const key3 in data31) {
                                                                                                                                            const _errs67 = errors;
                                                                                                                                            if (!(validate0(data31[key3], { instancePath: instancePath + "/patternProperties/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data31, parentDataProperty: key3, rootData }))) {
                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var valid11 = _errs67 === errors;
                                                                                                                                            if (!valid11) {
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            var valid0 = _errs63 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid0 = true;
                                                                                                                        }
                                                                                                                        if (valid0) {
                                                                                                                            if (data.dependencies !== undefined) {
                                                                                                                                let data33 = data.dependencies;
                                                                                                                                const _errs68 = errors;
                                                                                                                                if (errors === _errs68) {
                                                                                                                                    if (data33 && typeof data33 == "object" && !Array.isArray(data33)) {
                                                                                                                                        for (const key4 in data33) {
                                                                                                                                            let data34 = data33[key4];
                                                                                                                                            const _errs71 = errors;
                                                                                                                                            const _errs72 = errors;
                                                                                                                                            let valid13 = false;
                                                                                                                                            const _errs73 = errors;
                                                                                                                                            if (!(validate0(data34, { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data33, parentDataProperty: key4, rootData }))) {
                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var _valid1 = _errs73 === errors;
                                                                                                                                            valid13 = valid13 || _valid1;
                                                                                                                                            if (!valid13) {
                                                                                                                                                const _errs74 = errors;
                                                                                                                                                const _errs75 = errors;
                                                                                                                                                if (errors === _errs75) {
                                                                                                                                                    if (Array.isArray(data34)) {
                                                                                                                                                        var valid15 = true;
                                                                                                                                                        const len1 = data34.length;
                                                                                                                                                        for (let i2 = 0; i2 < len1; i2++) {
                                                                                                                                                            const _errs77 = errors;
                                                                                                                                                            if (typeof data34[i2] !== "string") {
                                                                                                                                                                const err2 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/" + i2, schemaPath: "#/definitions/stringArray/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                                                                if (vErrors === null) {
                                                                                                                                                                    vErrors = [err2];
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    vErrors.push(err2);
                                                                                                                                                                }
                                                                                                                                                                errors++;
                                                                                                                                                            }
                                                                                                                                                            var valid15 = _errs77 === errors;
                                                                                                                                                            if (!valid15) {
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        if (valid15) {
                                                                                                                                                            let i3 = data34.length;
                                                                                                                                                            let j1;
                                                                                                                                                            if (i3 > 1) {
                                                                                                                                                                const indices1 = {};
                                                                                                                                                                for (; i3--;) {
                                                                                                                                                                    let item1 = data34[i3];
                                                                                                                                                                    if (typeof item1 !== "string") {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    if (typeof indices1[item1] == "number") {
                                                                                                                                                                        j1 = indices1[item1];
                                                                                                                                                                        const err3 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/definitions/stringArray/uniqueItems", keyword: "uniqueItems", params: { i: i3, j: j1 }, message: "must NOT have duplicate items (items ## " + j1 + " and " + i3 + " are identical)" };
                                                                                                                                                                        if (vErrors === null) {
                                                                                                                                                                            vErrors = [err3];
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            vErrors.push(err3);
                                                                                                                                                                        }
                                                                                                                                                                        errors++;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                    indices1[item1] = i3;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        const err4 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/definitions/stringArray/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                                                                        if (vErrors === null) {
                                                                                                                                                            vErrors = [err4];
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            vErrors.push(err4);
                                                                                                                                                        }
                                                                                                                                                        errors++;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                var _valid1 = _errs74 === errors;
                                                                                                                                                valid13 = valid13 || _valid1;
                                                                                                                                            }
                                                                                                                                            if (!valid13) {
                                                                                                                                                const err5 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/dependencies/additionalProperties/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                                                                                                if (vErrors === null) {
                                                                                                                                                    vErrors = [err5];
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    vErrors.push(err5);
                                                                                                                                                }
                                                                                                                                                errors++;
                                                                                                                                                validate0.errors = vErrors;
                                                                                                                                                return false;
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                errors = _errs72;
                                                                                                                                                if (vErrors !== null) {
                                                                                                                                                    if (_errs72) {
                                                                                                                                                        vErrors.length = _errs72;
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        vErrors = null;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            var valid12 = _errs71 === errors;
                                                                                                                                            if (!valid12) {
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        validate0.errors = [{ instancePath: instancePath + "/dependencies", schemaPath: "#/properties/dependencies/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                                                        return false;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                var valid0 = _errs68 === errors;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                var valid0 = true;
                                                                                                                            }
                                                                                                                            if (valid0) {
                                                                                                                                if (data.propertyNames !== undefined) {
                                                                                                                                    const _errs79 = errors;
                                                                                                                                    if (!(validate0(data.propertyNames, { instancePath: instancePath + "/propertyNames", parentData: data, parentDataProperty: "propertyNames", rootData }))) {
                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                    }
                                                                                                                                    var valid0 = _errs79 === errors;
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    var valid0 = true;
                                                                                                                                }
                                                                                                                                if (valid0) {
                                                                                                                                    if (data.enum !== undefined) {
                                                                                                                                        let data37 = data.enum;
                                                                                                                                        const _errs80 = errors;
                                                                                                                                        if (errors === _errs80) {
                                                                                                                                            if (Array.isArray(data37)) {
                                                                                                                                                if (data37.length < 1) {
                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                                                                                                    return false;
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    let i4 = data37.length;
                                                                                                                                                    let j2;
                                                                                                                                                    if (i4 > 1) {
                                                                                                                                                        outer0: for (; i4--;) {
                                                                                                                                                            for (j2 = i4; j2--;) {
                                                                                                                                                                if (func0(data37[i4], data37[j2])) {
                                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/uniqueItems", keyword: "uniqueItems", params: { i: i4, j: j2 }, message: "must NOT have duplicate items (items ## " + j2 + " and " + i4 + " are identical)" }];
                                                                                                                                                                    return false;
                                                                                                                                                                    break outer0;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                validate0.errors = [{ instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                                                return false;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        var valid0 = _errs80 === errors;
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        var valid0 = true;
                                                                                                                                    }
                                                                                                                                    if (valid0) {
                                                                                                                                        if (data.type !== undefined) {
                                                                                                                                            let data38 = data.type;
                                                                                                                                            const _errs82 = errors;
                                                                                                                                            const _errs83 = errors;
                                                                                                                                            let valid18 = false;
                                                                                                                                            const _errs84 = errors;
                                                                                                                                            if (!(((((((data38 === "array") || (data38 === "boolean")) || (data38 === "integer")) || (data38 === "null")) || (data38 === "number")) || (data38 === "object")) || (data38 === "string"))) {
                                                                                                                                                const err6 = { instancePath: instancePath + "/type", schemaPath: "#/definitions/simpleTypes/enum", keyword: "enum", params: { allowedValues: schema9.enum }, message: "must be equal to one of the allowed values" };
                                                                                                                                                if (vErrors === null) {
                                                                                                                                                    vErrors = [err6];
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    vErrors.push(err6);
                                                                                                                                                }
                                                                                                                                                errors++;
                                                                                                                                            }
                                                                                                                                            var _valid2 = _errs84 === errors;
                                                                                                                                            valid18 = valid18 || _valid2;
                                                                                                                                            if (!valid18) {
                                                                                                                                                const _errs86 = errors;
                                                                                                                                                if (errors === _errs86) {
                                                                                                                                                    if (Array.isArray(data38)) {
                                                                                                                                                        if (data38.length < 1) {
                                                                                                                                                            const err7 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                                                                                                            if (vErrors === null) {
                                                                                                                                                                vErrors = [err7];
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                vErrors.push(err7);
                                                                                                                                                            }
                                                                                                                                                            errors++;
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            var valid20 = true;
                                                                                                                                                            const len2 = data38.length;
                                                                                                                                                            for (let i5 = 0; i5 < len2; i5++) {
                                                                                                                                                                let data39 = data38[i5];
                                                                                                                                                                const _errs88 = errors;
                                                                                                                                                                if (!(((((((data39 === "array") || (data39 === "boolean")) || (data39 === "integer")) || (data39 === "null")) || (data39 === "number")) || (data39 === "object")) || (data39 === "string"))) {
                                                                                                                                                                    const err8 = { instancePath: instancePath + "/type/" + i5, schemaPath: "#/definitions/simpleTypes/enum", keyword: "enum", params: { allowedValues: schema9.enum }, message: "must be equal to one of the allowed values" };
                                                                                                                                                                    if (vErrors === null) {
                                                                                                                                                                        vErrors = [err8];
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        vErrors.push(err8);
                                                                                                                                                                    }
                                                                                                                                                                    errors++;
                                                                                                                                                                }
                                                                                                                                                                var valid20 = _errs88 === errors;
                                                                                                                                                                if (!valid20) {
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            if (valid20) {
                                                                                                                                                                let i6 = data38.length;
                                                                                                                                                                let j3;
                                                                                                                                                                if (i6 > 1) {
                                                                                                                                                                    outer1: for (; i6--;) {
                                                                                                                                                                        for (j3 = i6; j3--;) {
                                                                                                                                                                            if (func0(data38[i6], data38[j3])) {
                                                                                                                                                                                const err9 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/uniqueItems", keyword: "uniqueItems", params: { i: i6, j: j3 }, message: "must NOT have duplicate items (items ## " + j3 + " and " + i6 + " are identical)" };
                                                                                                                                                                                if (vErrors === null) {
                                                                                                                                                                                    vErrors = [err9];
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    vErrors.push(err9);
                                                                                                                                                                                }
                                                                                                                                                                                errors++;
                                                                                                                                                                                break outer1;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        const err10 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                                                                        if (vErrors === null) {
                                                                                                                                                            vErrors = [err10];
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            vErrors.push(err10);
                                                                                                                                                        }
                                                                                                                                                        errors++;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                var _valid2 = _errs86 === errors;
                                                                                                                                                valid18 = valid18 || _valid2;
                                                                                                                                            }
                                                                                                                                            if (!valid18) {
                                                                                                                                                const err11 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                                                                                                if (vErrors === null) {
                                                                                                                                                    vErrors = [err11];
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    vErrors.push(err11);
                                                                                                                                                }
                                                                                                                                                errors++;
                                                                                                                                                validate0.errors = vErrors;
                                                                                                                                                return false;
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                errors = _errs83;
                                                                                                                                                if (vErrors !== null) {
                                                                                                                                                    if (_errs83) {
                                                                                                                                                        vErrors.length = _errs83;
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        vErrors = null;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            var valid0 = _errs82 === errors;
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            var valid0 = true;
                                                                                                                                        }
                                                                                                                                        if (valid0) {
                                                                                                                                            if (data.format !== undefined) {
                                                                                                                                                const _errs90 = errors;
                                                                                                                                                if (typeof data.format !== "string") {
                                                                                                                                                    validate0.errors = [{ instancePath: instancePath + "/format", schemaPath: "#/properties/format/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                                    return false;
                                                                                                                                                }
                                                                                                                                                var valid0 = _errs90 === errors;
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                var valid0 = true;
                                                                                                                                            }
                                                                                                                                            if (valid0) {
                                                                                                                                                if (data.contentMediaType !== undefined) {
                                                                                                                                                    const _errs92 = errors;
                                                                                                                                                    if (typeof data.contentMediaType !== "string") {
                                                                                                                                                        validate0.errors = [{ instancePath: instancePath + "/contentMediaType", schemaPath: "#/properties/contentMediaType/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                                        return false;
                                                                                                                                                    }
                                                                                                                                                    var valid0 = _errs92 === errors;
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    var valid0 = true;
                                                                                                                                                }
                                                                                                                                                if (valid0) {
                                                                                                                                                    if (data.contentEncoding !== undefined) {
                                                                                                                                                        const _errs94 = errors;
                                                                                                                                                        if (typeof data.contentEncoding !== "string") {
                                                                                                                                                            validate0.errors = [{ instancePath: instancePath + "/contentEncoding", schemaPath: "#/properties/contentEncoding/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                                            return false;
                                                                                                                                                        }
                                                                                                                                                        var valid0 = _errs94 === errors;
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        var valid0 = true;
                                                                                                                                                    }
                                                                                                                                                    if (valid0) {
                                                                                                                                                        if (data.if !== undefined) {
                                                                                                                                                            const _errs96 = errors;
                                                                                                                                                            if (!(validate0(data.if, { instancePath: instancePath + "/if", parentData: data, parentDataProperty: "if", rootData }))) {
                                                                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                            }
                                                                                                                                                            var valid0 = _errs96 === errors;
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            var valid0 = true;
                                                                                                                                                        }
                                                                                                                                                        if (valid0) {
                                                                                                                                                            if (data.then !== undefined) {
                                                                                                                                                                const _errs97 = errors;
                                                                                                                                                                if (!(validate0(data.then, { instancePath: instancePath + "/then", parentData: data, parentDataProperty: "then", rootData }))) {
                                                                                                                                                                    vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                }
                                                                                                                                                                var valid0 = _errs97 === errors;
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                var valid0 = true;
                                                                                                                                                            }
                                                                                                                                                            if (valid0) {
                                                                                                                                                                if (data.else !== undefined) {
                                                                                                                                                                    const _errs98 = errors;
                                                                                                                                                                    if (!(validate0(data.else, { instancePath: instancePath + "/else", parentData: data, parentDataProperty: "else", rootData }))) {
                                                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                    }
                                                                                                                                                                    var valid0 = _errs98 === errors;
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    var valid0 = true;
                                                                                                                                                                }
                                                                                                                                                                if (valid0) {
                                                                                                                                                                    if (data.allOf !== undefined) {
                                                                                                                                                                        const _errs99 = errors;
                                                                                                                                                                        if (!(validate3(data.allOf, { instancePath: instancePath + "/allOf", parentData: data, parentDataProperty: "allOf", rootData }))) {
                                                                                                                                                                            vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);
                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                        }
                                                                                                                                                                        var valid0 = _errs99 === errors;
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        var valid0 = true;
                                                                                                                                                                    }
                                                                                                                                                                    if (valid0) {
                                                                                                                                                                        if (data.anyOf !== undefined) {
                                                                                                                                                                            const _errs100 = errors;
                                                                                                                                                                            if (!(validate3(data.anyOf, { instancePath: instancePath + "/anyOf", parentData: data, parentDataProperty: "anyOf", rootData }))) {
                                                                                                                                                                                vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);
                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                            }
                                                                                                                                                                            var valid0 = _errs100 === errors;
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            var valid0 = true;
                                                                                                                                                                        }
                                                                                                                                                                        if (valid0) {
                                                                                                                                                                            if (data.oneOf !== undefined) {
                                                                                                                                                                                const _errs101 = errors;
                                                                                                                                                                                if (!(validate3(data.oneOf, { instancePath: instancePath + "/oneOf", parentData: data, parentDataProperty: "oneOf", rootData }))) {
                                                                                                                                                                                    vErrors = vErrors === null ? validate3.errors : vErrors.concat(validate3.errors);
                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                }
                                                                                                                                                                                var valid0 = _errs101 === errors;
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                var valid0 = true;
                                                                                                                                                                            }
                                                                                                                                                                            if (valid0) {
                                                                                                                                                                                if (data.not !== undefined) {
                                                                                                                                                                                    const _errs102 = errors;
                                                                                                                                                                                    if (!(validate0(data.not, { instancePath: instancePath + "/not", parentData: data, parentDataProperty: "not", rootData }))) {
                                                                                                                                                                                        vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                    }
                                                                                                                                                                                    var valid0 = _errs102 === errors;
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    var valid0 = true;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} validate0.errors = vErrors; return errors === 0; }
const func2 = Object.prototype.hasOwnProperty;
function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/offering.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.description === undefined) && (missing0 = "description")) || ((data.payin === undefined) && (missing0 = "payin"))) || ((data.payout === undefined) && (missing0 = "payout"))) || ((data.payoutUnitsPerPayinUnit === undefined) && (missing0 = "payoutUnitsPerPayinUnit"))) {
            validate12.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate12.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.description !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.description !== "string") {
                        validate12.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.payin !== undefined) {
                        let data2 = data.payin;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                let missing1;
                                if (((data2.currencyCode === undefined) && (missing1 = "currencyCode")) || ((data2.methods === undefined) && (missing1 = "methods"))) {
                                    validate12.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key0 in data2) {
                                        if (!((((key0 === "currencyCode") || (key0 === "min")) || (key0 === "max")) || (key0 === "methods"))) {
                                            validate12.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data2.currencyCode !== undefined) {
                                            const _errs6 = errors;
                                            if (typeof data2.currencyCode !== "string") {
                                                validate12.errors = [{ instancePath: instancePath + "/payin/currencyCode", schemaPath: "#/properties/payin/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data2.min !== undefined) {
                                                let data4 = data2.min;
                                                const _errs8 = errors;
                                                const _errs9 = errors;
                                                if (errors === _errs9) {
                                                    if (typeof data4 === "string") {
                                                        if (!pattern0.test(data4)) {
                                                            validate12.errors = [{ instancePath: instancePath + "/payin/min", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate12.errors = [{ instancePath: instancePath + "/payin/min", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data2.max !== undefined) {
                                                    let data5 = data2.max;
                                                    const _errs11 = errors;
                                                    const _errs12 = errors;
                                                    if (errors === _errs12) {
                                                        if (typeof data5 === "string") {
                                                            if (!pattern0.test(data5)) {
                                                                validate12.errors = [{ instancePath: instancePath + "/payin/max", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate12.errors = [{ instancePath: instancePath + "/payin/max", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs11 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data2.methods !== undefined) {
                                                        let data6 = data2.methods;
                                                        const _errs14 = errors;
                                                        if (errors === _errs14) {
                                                            if (Array.isArray(data6)) {
                                                                var valid4 = true;
                                                                const len0 = data6.length;
                                                                for (let i0 = 0; i0 < len0; i0++) {
                                                                    let data7 = data6[i0];
                                                                    const _errs16 = errors;
                                                                    if (errors === _errs16) {
                                                                        if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                                                            let missing2;
                                                                            if ((data7.kind === undefined) && (missing2 = "kind")) {
                                                                                validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0, schemaPath: "#/properties/payin/properties/methods/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                                                return false;
                                                                            }
                                                                            else {
                                                                                const _errs18 = errors;
                                                                                for (const key1 in data7) {
                                                                                    if (!((((((((key1 === "kind") || (key1 === "name")) || (key1 === "description")) || (key1 === "group")) || (key1 === "requiredPaymentDetails")) || (key1 === "min")) || (key1 === "max")) || (key1 === "fee"))) {
                                                                                        validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0, schemaPath: "#/properties/payin/properties/methods/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                                                        return false;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (_errs18 === errors) {
                                                                                    if (data7.kind !== undefined) {
                                                                                        const _errs19 = errors;
                                                                                        if (typeof data7.kind !== "string") {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/kind", schemaPath: "#/properties/payin/properties/methods/items/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                            return false;
                                                                                        }
                                                                                        var valid5 = _errs19 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid5 = true;
                                                                                    }
                                                                                    if (valid5) {
                                                                                        if (data7.name !== undefined) {
                                                                                            const _errs21 = errors;
                                                                                            if (typeof data7.name !== "string") {
                                                                                                validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/name", schemaPath: "#/properties/payin/properties/methods/items/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid5 = _errs21 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid5 = true;
                                                                                        }
                                                                                        if (valid5) {
                                                                                            if (data7.description !== undefined) {
                                                                                                const _errs23 = errors;
                                                                                                if (typeof data7.description !== "string") {
                                                                                                    validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/description", schemaPath: "#/properties/payin/properties/methods/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid5 = _errs23 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid5 = true;
                                                                                            }
                                                                                            if (valid5) {
                                                                                                if (data7.group !== undefined) {
                                                                                                    const _errs25 = errors;
                                                                                                    if (typeof data7.group !== "string") {
                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/group", schemaPath: "#/properties/payin/properties/methods/items/properties/group/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid5 = _errs25 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid5 = true;
                                                                                                }
                                                                                                if (valid5) {
                                                                                                    if (data7.requiredPaymentDetails !== undefined) {
                                                                                                        const _errs27 = errors;
                                                                                                        if (!(validate0(data7.requiredPaymentDetails, { instancePath: instancePath + "/payin/methods/" + i0 + "/requiredPaymentDetails", parentData: data7, parentDataProperty: "requiredPaymentDetails", rootData }))) {
                                                                                                            vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                            errors = vErrors.length;
                                                                                                        }
                                                                                                        var valid5 = _errs27 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid5 = true;
                                                                                                    }
                                                                                                    if (valid5) {
                                                                                                        if (data7.min !== undefined) {
                                                                                                            let data13 = data7.min;
                                                                                                            const _errs28 = errors;
                                                                                                            const _errs29 = errors;
                                                                                                            if (errors === _errs29) {
                                                                                                                if (typeof data13 === "string") {
                                                                                                                    if (!pattern0.test(data13)) {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/min", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/min", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid5 = _errs28 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid5 = true;
                                                                                                        }
                                                                                                        if (valid5) {
                                                                                                            if (data7.max !== undefined) {
                                                                                                                let data14 = data7.max;
                                                                                                                const _errs31 = errors;
                                                                                                                const _errs32 = errors;
                                                                                                                if (errors === _errs32) {
                                                                                                                    if (typeof data14 === "string") {
                                                                                                                        if (!pattern0.test(data14)) {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/max", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/max", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid5 = _errs31 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid5 = true;
                                                                                                            }
                                                                                                            if (valid5) {
                                                                                                                if (data7.fee !== undefined) {
                                                                                                                    let data15 = data7.fee;
                                                                                                                    const _errs34 = errors;
                                                                                                                    const _errs35 = errors;
                                                                                                                    if (errors === _errs35) {
                                                                                                                        if (typeof data15 === "string") {
                                                                                                                            if (!pattern0.test(data15)) {
                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/fee", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0 + "/fee", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid5 = _errs34 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid5 = true;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate12.errors = [{ instancePath: instancePath + "/payin/methods/" + i0, schemaPath: "#/properties/payin/properties/methods/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid4 = _errs16 === errors;
                                                                    if (!valid4) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate12.errors = [{ instancePath: instancePath + "/payin/methods", schemaPath: "#/properties/payin/properties/methods/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs14 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate12.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payout !== undefined) {
                            let data16 = data.payout;
                            const _errs37 = errors;
                            if (errors === _errs37) {
                                if (data16 && typeof data16 == "object" && !Array.isArray(data16)) {
                                    let missing3;
                                    if (((data16.currencyCode === undefined) && (missing3 = "currencyCode")) || ((data16.methods === undefined) && (missing3 = "methods"))) {
                                        validate12.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }];
                                        return false;
                                    }
                                    else {
                                        const _errs39 = errors;
                                        for (const key2 in data16) {
                                            if (!((((key2 === "currencyCode") || (key2 === "min")) || (key2 === "max")) || (key2 === "methods"))) {
                                                validate12.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs39 === errors) {
                                            if (data16.currencyCode !== undefined) {
                                                const _errs40 = errors;
                                                if (typeof data16.currencyCode !== "string") {
                                                    validate12.errors = [{ instancePath: instancePath + "/payout/currencyCode", schemaPath: "#/properties/payout/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid9 = _errs40 === errors;
                                            }
                                            else {
                                                var valid9 = true;
                                            }
                                            if (valid9) {
                                                if (data16.min !== undefined) {
                                                    let data18 = data16.min;
                                                    const _errs42 = errors;
                                                    const _errs43 = errors;
                                                    if (errors === _errs43) {
                                                        if (typeof data18 === "string") {
                                                            if (!pattern0.test(data18)) {
                                                                validate12.errors = [{ instancePath: instancePath + "/payout/min", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate12.errors = [{ instancePath: instancePath + "/payout/min", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid9 = _errs42 === errors;
                                                }
                                                else {
                                                    var valid9 = true;
                                                }
                                                if (valid9) {
                                                    if (data16.max !== undefined) {
                                                        let data19 = data16.max;
                                                        const _errs45 = errors;
                                                        const _errs46 = errors;
                                                        if (errors === _errs46) {
                                                            if (typeof data19 === "string") {
                                                                if (!pattern0.test(data19)) {
                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/max", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                    return false;
                                                                }
                                                            }
                                                            else {
                                                                validate12.errors = [{ instancePath: instancePath + "/payout/max", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid9 = _errs45 === errors;
                                                    }
                                                    else {
                                                        var valid9 = true;
                                                    }
                                                    if (valid9) {
                                                        if (data16.methods !== undefined) {
                                                            let data20 = data16.methods;
                                                            const _errs48 = errors;
                                                            if (errors === _errs48) {
                                                                if (Array.isArray(data20)) {
                                                                    var valid12 = true;
                                                                    const len1 = data20.length;
                                                                    for (let i1 = 0; i1 < len1; i1++) {
                                                                        let data21 = data20[i1];
                                                                        const _errs50 = errors;
                                                                        if (errors === _errs50) {
                                                                            if (data21 && typeof data21 == "object" && !Array.isArray(data21)) {
                                                                                let missing4;
                                                                                if (((data21.kind === undefined) && (missing4 = "kind")) || ((data21.estimatedSettlementTime === undefined) && (missing4 = "estimatedSettlementTime"))) {
                                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1, schemaPath: "#/properties/payout/properties/methods/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
                                                                                    return false;
                                                                                }
                                                                                else {
                                                                                    const _errs52 = errors;
                                                                                    for (const key3 in data21) {
                                                                                        if (!(func2.call(schema13.properties.payout.properties.methods.items.properties, key3))) {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1, schemaPath: "#/properties/payout/properties/methods/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                                                                            return false;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    if (_errs52 === errors) {
                                                                                        if (data21.kind !== undefined) {
                                                                                            const _errs53 = errors;
                                                                                            if (typeof data21.kind !== "string") {
                                                                                                validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/kind", schemaPath: "#/properties/payout/properties/methods/items/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid13 = _errs53 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid13 = true;
                                                                                        }
                                                                                        if (valid13) {
                                                                                            if (data21.name !== undefined) {
                                                                                                const _errs55 = errors;
                                                                                                if (typeof data21.name !== "string") {
                                                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/name", schemaPath: "#/properties/payout/properties/methods/items/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid13 = _errs55 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid13 = true;
                                                                                            }
                                                                                            if (valid13) {
                                                                                                if (data21.description !== undefined) {
                                                                                                    const _errs57 = errors;
                                                                                                    if (typeof data21.description !== "string") {
                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/description", schemaPath: "#/properties/payout/properties/methods/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid13 = _errs57 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid13 = true;
                                                                                                }
                                                                                                if (valid13) {
                                                                                                    if (data21.group !== undefined) {
                                                                                                        const _errs59 = errors;
                                                                                                        if (typeof data21.group !== "string") {
                                                                                                            validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/group", schemaPath: "#/properties/payout/properties/methods/items/properties/group/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        var valid13 = _errs59 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid13 = true;
                                                                                                    }
                                                                                                    if (valid13) {
                                                                                                        if (data21.requiredPaymentDetails !== undefined) {
                                                                                                            const _errs61 = errors;
                                                                                                            if (!(validate0(data21.requiredPaymentDetails, { instancePath: instancePath + "/payout/methods/" + i1 + "/requiredPaymentDetails", parentData: data21, parentDataProperty: "requiredPaymentDetails", rootData }))) {
                                                                                                                vErrors = vErrors === null ? validate0.errors : vErrors.concat(validate0.errors);
                                                                                                                errors = vErrors.length;
                                                                                                            }
                                                                                                            var valid13 = _errs61 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid13 = true;
                                                                                                        }
                                                                                                        if (valid13) {
                                                                                                            if (data21.min !== undefined) {
                                                                                                                let data27 = data21.min;
                                                                                                                const _errs62 = errors;
                                                                                                                const _errs63 = errors;
                                                                                                                if (errors === _errs63) {
                                                                                                                    if (typeof data27 === "string") {
                                                                                                                        if (!pattern0.test(data27)) {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/min", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/min", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid13 = _errs62 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid13 = true;
                                                                                                            }
                                                                                                            if (valid13) {
                                                                                                                if (data21.max !== undefined) {
                                                                                                                    let data28 = data21.max;
                                                                                                                    const _errs65 = errors;
                                                                                                                    const _errs66 = errors;
                                                                                                                    if (errors === _errs66) {
                                                                                                                        if (typeof data28 === "string") {
                                                                                                                            if (!pattern0.test(data28)) {
                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/max", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/max", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid13 = _errs65 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid13 = true;
                                                                                                                }
                                                                                                                if (valid13) {
                                                                                                                    if (data21.fee !== undefined) {
                                                                                                                        let data29 = data21.fee;
                                                                                                                        const _errs68 = errors;
                                                                                                                        const _errs69 = errors;
                                                                                                                        if (errors === _errs69) {
                                                                                                                            if (typeof data29 === "string") {
                                                                                                                                if (!pattern0.test(data29)) {
                                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/fee", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/fee", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid13 = _errs68 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid13 = true;
                                                                                                                    }
                                                                                                                    if (valid13) {
                                                                                                                        if (data21.estimatedSettlementTime !== undefined) {
                                                                                                                            let data30 = data21.estimatedSettlementTime;
                                                                                                                            const _errs71 = errors;
                                                                                                                            if (errors === _errs71) {
                                                                                                                                if ((typeof data30 == "number") && (isFinite(data30))) {
                                                                                                                                    if (data30 < 0 || isNaN(data30)) {
                                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/estimatedSettlementTime", schemaPath: "#/properties/payout/properties/methods/items/properties/estimatedSettlementTime/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                                                                                                        return false;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1 + "/estimatedSettlementTime", schemaPath: "#/properties/payout/properties/methods/items/properties/estimatedSettlementTime/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            var valid13 = _errs71 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid13 = true;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                validate12.errors = [{ instancePath: instancePath + "/payout/methods/" + i1, schemaPath: "#/properties/payout/properties/methods/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        var valid12 = _errs50 === errors;
                                                                        if (!valid12) {
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    validate12.errors = [{ instancePath: instancePath + "/payout/methods", schemaPath: "#/properties/payout/properties/methods/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid9 = _errs48 === errors;
                                                        }
                                                        else {
                                                            var valid9 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate12.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs37 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.payoutUnitsPerPayinUnit !== undefined) {
                                const _errs73 = errors;
                                if (typeof data.payoutUnitsPerPayinUnit !== "string") {
                                    validate12.errors = [{ instancePath: instancePath + "/payoutUnitsPerPayinUnit", schemaPath: "#/properties/payoutUnitsPerPayinUnit/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs73 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.requiredClaims !== undefined) {
                                    let data32 = data.requiredClaims;
                                    const _errs75 = errors;
                                    if (!(data32 && typeof data32 == "object" && !Array.isArray(data32))) {
                                        validate12.errors = [{ instancePath: instancePath + "/requiredClaims", schemaPath: "#/properties/requiredClaims/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                    var valid0 = _errs75 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate12.errors = vErrors; return errors === 0; }
export const balance = validate15;
const schema24 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/balance.schema.json", "type": "object", "properties": { "additionalProperties": false, "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "available": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount available to be transacted with" } }, "required": ["currencyCode", "available"] };
function validate15(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/balance.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.currencyCode === undefined) && (missing0 = "currencyCode")) || ((data.available === undefined) && (missing0 = "available"))) {
            validate15.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate15.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.currencyCode !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.currencyCode !== "string") {
                        validate15.errors = [{ instancePath: instancePath + "/currencyCode", schemaPath: "#/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.available !== undefined) {
                        let data2 = data.available;
                        const _errs3 = errors;
                        const _errs4 = errors;
                        if (errors === _errs4) {
                            if (typeof data2 === "string") {
                                if (!pattern0.test(data2)) {
                                    validate15.errors = [{ instancePath: instancePath + "/available", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate15.errors = [{ instancePath: instancePath + "/available", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate15.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate15.errors = vErrors; return errors === 0; }
export const message = validate16;
const schema26 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/message.schema.json", "definitions": { "MessageMetadata": { "type": "object", "additionalProperties": false, "properties": { "from": { "$ref": "definitions.json#/definitions/did", "description": "The sender's DID" }, "to": { "$ref": "definitions.json#/definitions/did", "description": "The recipient's DID" }, "kind": { "type": "string", "enum": ["rfq", "quote", "order", "orderstatus", "close"], "description": "The message kind (e.g. rfq, quote)" }, "id": { "type": "string", "description": "The message ID" }, "exchangeId": { "type": "string", "description": "ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread" }, "externalId": { "type": "string", "description": "Arbitrary ID for the caller to associate with the message." }, "createdAt": { "type": "string", "description": "ISO8601 formatted string representing the timestamp" }, "protocol": { "type": "string", "description": "Version of the protocol in use (x.x format)" } }, "required": ["from", "to", "kind", "id", "exchangeId", "createdAt", "protocol"] } }, "type": "object", "properties": { "metadata": { "$ref": "#/definitions/MessageMetadata" }, "data": { "type": "object", "description": "The actual message content" }, "signature": { "type": "string", "description": "Signature that verifies the authenticity and integrity of a message" }, "privateData": { "type": "object", "description": "Private data which can be detached from the payload without disrupting integrity. Only used in RFQs" } }, "additionalProperties": false, "required": ["metadata", "data", "signature"] };
const schema27 = { "type": "object", "additionalProperties": false, "properties": { "from": { "$ref": "definitions.json#/definitions/did", "description": "The sender's DID" }, "to": { "$ref": "definitions.json#/definitions/did", "description": "The recipient's DID" }, "kind": { "type": "string", "enum": ["rfq", "quote", "order", "orderstatus", "close"], "description": "The message kind (e.g. rfq, quote)" }, "id": { "type": "string", "description": "The message ID" }, "exchangeId": { "type": "string", "description": "ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread" }, "externalId": { "type": "string", "description": "Arbitrary ID for the caller to associate with the message." }, "createdAt": { "type": "string", "description": "ISO8601 formatted string representing the timestamp" }, "protocol": { "type": "string", "description": "Version of the protocol in use (x.x format)" } }, "required": ["from", "to", "kind", "id", "exchangeId", "createdAt", "protocol"] };
const schema28 = { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" };
const pattern11 = new RegExp("^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$", "u");
function validate17(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((((((data.from === undefined) && (missing0 = "from")) || ((data.to === undefined) && (missing0 = "to"))) || ((data.kind === undefined) && (missing0 = "kind"))) || ((data.id === undefined) && (missing0 = "id"))) || ((data.exchangeId === undefined) && (missing0 = "exchangeId"))) || ((data.createdAt === undefined) && (missing0 = "createdAt"))) || ((data.protocol === undefined) && (missing0 = "protocol"))) {
            validate17.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((((((key0 === "from") || (key0 === "to")) || (key0 === "kind")) || (key0 === "id")) || (key0 === "exchangeId")) || (key0 === "externalId")) || (key0 === "createdAt")) || (key0 === "protocol"))) {
                    validate17.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.from !== undefined) {
                    let data0 = data.from;
                    const _errs2 = errors;
                    const _errs3 = errors;
                    if (errors === _errs3) {
                        if (typeof data0 === "string") {
                            if (!pattern11.test(data0)) {
                                validate17.errors = [{ instancePath: instancePath + "/from", schemaPath: "definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                return false;
                            }
                        }
                        else {
                            validate17.errors = [{ instancePath: instancePath + "/from", schemaPath: "definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.to !== undefined) {
                        let data1 = data.to;
                        const _errs5 = errors;
                        const _errs6 = errors;
                        if (errors === _errs6) {
                            if (typeof data1 === "string") {
                                if (!pattern11.test(data1)) {
                                    validate17.errors = [{ instancePath: instancePath + "/to", schemaPath: "definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate17.errors = [{ instancePath: instancePath + "/to", schemaPath: "definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs5 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.kind !== undefined) {
                            let data2 = data.kind;
                            const _errs8 = errors;
                            if (typeof data2 !== "string") {
                                validate17.errors = [{ instancePath: instancePath + "/kind", schemaPath: "#/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            if (!(((((data2 === "rfq") || (data2 === "quote")) || (data2 === "order")) || (data2 === "orderstatus")) || (data2 === "close"))) {
                                validate17.errors = [{ instancePath: instancePath + "/kind", schemaPath: "#/properties/kind/enum", keyword: "enum", params: { allowedValues: schema27.properties.kind.enum }, message: "must be equal to one of the allowed values" }];
                                return false;
                            }
                            var valid0 = _errs8 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.id !== undefined) {
                                const _errs10 = errors;
                                if (typeof data.id !== "string") {
                                    validate17.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.exchangeId !== undefined) {
                                    const _errs12 = errors;
                                    if (typeof data.exchangeId !== "string") {
                                        validate17.errors = [{ instancePath: instancePath + "/exchangeId", schemaPath: "#/properties/exchangeId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid0 = _errs12 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.externalId !== undefined) {
                                        const _errs14 = errors;
                                        if (typeof data.externalId !== "string") {
                                            validate17.errors = [{ instancePath: instancePath + "/externalId", schemaPath: "#/properties/externalId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid0 = _errs14 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.createdAt !== undefined) {
                                            const _errs16 = errors;
                                            if (typeof data.createdAt !== "string") {
                                                validate17.errors = [{ instancePath: instancePath + "/createdAt", schemaPath: "#/properties/createdAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid0 = _errs16 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.protocol !== undefined) {
                                                const _errs18 = errors;
                                                if (typeof data.protocol !== "string") {
                                                    validate17.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid0 = _errs18 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate17.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate17.errors = vErrors; return errors === 0; }
function validate16(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/message.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.metadata === undefined) && (missing0 = "metadata")) || ((data.data === undefined) && (missing0 = "data"))) || ((data.signature === undefined) && (missing0 = "signature"))) {
            validate16.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "metadata") || (key0 === "data")) || (key0 === "signature")) || (key0 === "privateData"))) {
                    validate16.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.metadata !== undefined) {
                    const _errs2 = errors;
                    if (!(validate17(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) {
                        vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data1 = data.data;
                        const _errs3 = errors;
                        if (!(data1 && typeof data1 == "object" && !Array.isArray(data1))) {
                            validate16.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/properties/data/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.signature !== undefined) {
                            const _errs5 = errors;
                            if (typeof data.signature !== "string") {
                                validate16.errors = [{ instancePath: instancePath + "/signature", schemaPath: "#/properties/signature/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.privateData !== undefined) {
                                let data3 = data.privateData;
                                const _errs7 = errors;
                                if (!(data3 && typeof data3 == "object" && !Array.isArray(data3))) {
                                    validate16.errors = [{ instancePath: instancePath + "/privateData", schemaPath: "#/properties/privateData/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                                var valid0 = _errs7 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate16.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate16.errors = vErrors; return errors === 0; }
export const order = validate19;
const schema30 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/order.schema.json", "type": "object", "additionalProperties": false, "properties": {} };
function validate19(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/order.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        for (const key0 in data) {
            validate19.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
            return false;
            break;
        }
    }
    else {
        validate19.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate19.errors = vErrors; return errors === 0; }
export const orderstatus = validate20;
const schema31 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/orderstatus.schema.json", "type": "object", "required": ["orderStatus"], "additionalProperties": false, "properties": { "orderStatus": { "type": "string" } } };
function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/orderstatus.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.orderStatus === undefined) && (missing0 = "orderStatus")) {
            validate20.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(key0 === "orderStatus")) {
                    validate20.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.orderStatus !== undefined) {
                    if (typeof data.orderStatus !== "string") {
                        validate20.errors = [{ instancePath: instancePath + "/orderStatus", schemaPath: "#/properties/orderStatus/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
            }
        }
    }
    else {
        validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate20.errors = vErrors; return errors === 0; }
export const quote = validate21;
const schema32 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/quote.schema.json", "definitions": { "QuoteDetails": { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "amount": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount of currency expressed in the smallest respective unit" }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount paid in fees" }, "paymentInstruction": { "$ref": "#/definitions/PaymentInstruction" } }, "required": ["currencyCode", "amount"] }, "PaymentInstruction": { "type": "object", "additionalProperties": false, "properties": { "link": { "type": "string", "description": "Link to allow Alice to pay PFI, or be paid by the PFI" }, "instruction": { "type": "string", "description": "Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI" } } } }, "type": "object", "additionalProperties": false, "properties": { "expiresAt": { "type": "string", "description": "When this quote expires. Expressed as ISO8601" }, "payin": { "$ref": "#/definitions/QuoteDetails" }, "payout": { "$ref": "#/definitions/QuoteDetails" } }, "required": ["expiresAt", "payin", "payout"] };
const schema33 = { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "amount": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount of currency expressed in the smallest respective unit" }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount paid in fees" }, "paymentInstruction": { "$ref": "#/definitions/PaymentInstruction" } }, "required": ["currencyCode", "amount"] };
const schema36 = { "type": "object", "additionalProperties": false, "properties": { "link": { "type": "string", "description": "Link to allow Alice to pay PFI, or be paid by the PFI" }, "instruction": { "type": "string", "description": "Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI" } } };
function validate22(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.currencyCode === undefined) && (missing0 = "currencyCode")) || ((data.amount === undefined) && (missing0 = "amount"))) {
            validate22.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "currencyCode") || (key0 === "amount")) || (key0 === "fee")) || (key0 === "paymentInstruction"))) {
                    validate22.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.currencyCode !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.currencyCode !== "string") {
                        validate22.errors = [{ instancePath: instancePath + "/currencyCode", schemaPath: "#/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.amount !== undefined) {
                        let data1 = data.amount;
                        const _errs4 = errors;
                        const _errs5 = errors;
                        if (errors === _errs5) {
                            if (typeof data1 === "string") {
                                if (!pattern0.test(data1)) {
                                    validate22.errors = [{ instancePath: instancePath + "/amount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate22.errors = [{ instancePath: instancePath + "/amount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.fee !== undefined) {
                            let data2 = data.fee;
                            const _errs7 = errors;
                            const _errs8 = errors;
                            if (errors === _errs8) {
                                if (typeof data2 === "string") {
                                    if (!pattern0.test(data2)) {
                                        validate22.errors = [{ instancePath: instancePath + "/fee", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate22.errors = [{ instancePath: instancePath + "/fee", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs7 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.paymentInstruction !== undefined) {
                                let data3 = data.paymentInstruction;
                                const _errs10 = errors;
                                const _errs11 = errors;
                                if (errors === _errs11) {
                                    if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                        const _errs13 = errors;
                                        for (const key1 in data3) {
                                            if (!((key1 === "link") || (key1 === "instruction"))) {
                                                validate22.errors = [{ instancePath: instancePath + "/paymentInstruction", schemaPath: "#/definitions/PaymentInstruction/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs13 === errors) {
                                            if (data3.link !== undefined) {
                                                const _errs14 = errors;
                                                if (typeof data3.link !== "string") {
                                                    validate22.errors = [{ instancePath: instancePath + "/paymentInstruction/link", schemaPath: "#/definitions/PaymentInstruction/properties/link/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid4 = _errs14 === errors;
                                            }
                                            else {
                                                var valid4 = true;
                                            }
                                            if (valid4) {
                                                if (data3.instruction !== undefined) {
                                                    const _errs16 = errors;
                                                    if (typeof data3.instruction !== "string") {
                                                        validate22.errors = [{ instancePath: instancePath + "/paymentInstruction/instruction", schemaPath: "#/definitions/PaymentInstruction/properties/instruction/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid4 = _errs16 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate22.errors = [{ instancePath: instancePath + "/paymentInstruction", schemaPath: "#/definitions/PaymentInstruction/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate22.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate22.errors = vErrors; return errors === 0; }
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/quote.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.expiresAt === undefined) && (missing0 = "expiresAt")) || ((data.payin === undefined) && (missing0 = "payin"))) || ((data.payout === undefined) && (missing0 = "payout"))) {
            validate21.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "expiresAt") || (key0 === "payin")) || (key0 === "payout"))) {
                    validate21.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.expiresAt !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.expiresAt !== "string") {
                        validate21.errors = [{ instancePath: instancePath + "/expiresAt", schemaPath: "#/properties/expiresAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.payin !== undefined) {
                        const _errs4 = errors;
                        if (!(validate22(data.payin, { instancePath: instancePath + "/payin", parentData: data, parentDataProperty: "payin", rootData }))) {
                            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
                            errors = vErrors.length;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payout !== undefined) {
                            const _errs5 = errors;
                            if (!(validate22(data.payout, { instancePath: instancePath + "/payout", parentData: data, parentDataProperty: "payout", rootData }))) {
                                vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
                                errors = vErrors.length;
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate21.errors = vErrors; return errors === 0; }
export const resource = validate25;
const schema37 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/resource.schema.json", "type": "object", "additionalProperties": false, "properties": { "metadata": { "type": "object", "properties": { "from": { "$ref": "definitions.json#/definitions/did", "description": "The PFI's DID" }, "kind": { "type": "string", "enum": ["offering", "balance"], "description": "The resource kind (e.g. Offering)" }, "id": { "type": "string", "description": "The resource id" }, "createdAt": { "type": "string", "description": "When the resource was created at. Expressed as ISO8601" }, "updatedAt": { "type": "string", "description": "When the resource was last updated. Expressed as ISO8601" }, "protocol": { "type": "string", "description": "Version of the protocol in use (x.x format)" } }, "required": ["from", "kind", "id", "createdAt", "protocol"], "description": "The metadata object contains fields about the resource and is present for every tbdex resources of all types." }, "data": { "description": "The actual resource content", "type": "object" }, "signature": { "type": "string", "description": "Signature that verifies that authenticity and integrity of a message" } }, "required": ["metadata", "data", "signature"], "description": "ResourceModel" };
function validate25(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/resource.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.metadata === undefined) && (missing0 = "metadata")) || ((data.data === undefined) && (missing0 = "data"))) || ((data.signature === undefined) && (missing0 = "signature"))) {
            validate25.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "metadata") || (key0 === "data")) || (key0 === "signature"))) {
                    validate25.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.metadata !== undefined) {
                    let data0 = data.metadata;
                    const _errs2 = errors;
                    if (errors === _errs2) {
                        if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                            let missing1;
                            if ((((((data0.from === undefined) && (missing1 = "from")) || ((data0.kind === undefined) && (missing1 = "kind"))) || ((data0.id === undefined) && (missing1 = "id"))) || ((data0.createdAt === undefined) && (missing1 = "createdAt"))) || ((data0.protocol === undefined) && (missing1 = "protocol"))) {
                                validate25.errors = [{ instancePath: instancePath + "/metadata", schemaPath: "#/properties/metadata/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                return false;
                            }
                            else {
                                if (data0.from !== undefined) {
                                    let data1 = data0.from;
                                    const _errs4 = errors;
                                    const _errs5 = errors;
                                    if (errors === _errs5) {
                                        if (typeof data1 === "string") {
                                            if (!pattern11.test(data1)) {
                                                validate25.errors = [{ instancePath: instancePath + "/metadata/from", schemaPath: "definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                return false;
                                            }
                                        }
                                        else {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/from", schemaPath: "definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                    }
                                    var valid1 = _errs4 === errors;
                                }
                                else {
                                    var valid1 = true;
                                }
                                if (valid1) {
                                    if (data0.kind !== undefined) {
                                        let data2 = data0.kind;
                                        const _errs7 = errors;
                                        if (typeof data2 !== "string") {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/kind", schemaPath: "#/properties/metadata/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        if (!((data2 === "offering") || (data2 === "balance"))) {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/kind", schemaPath: "#/properties/metadata/properties/kind/enum", keyword: "enum", params: { allowedValues: schema37.properties.metadata.properties.kind.enum }, message: "must be equal to one of the allowed values" }];
                                            return false;
                                        }
                                        var valid1 = _errs7 === errors;
                                    }
                                    else {
                                        var valid1 = true;
                                    }
                                    if (valid1) {
                                        if (data0.id !== undefined) {
                                            const _errs9 = errors;
                                            if (typeof data0.id !== "string") {
                                                validate25.errors = [{ instancePath: instancePath + "/metadata/id", schemaPath: "#/properties/metadata/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid1 = _errs9 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data0.createdAt !== undefined) {
                                                const _errs11 = errors;
                                                if (typeof data0.createdAt !== "string") {
                                                    validate25.errors = [{ instancePath: instancePath + "/metadata/createdAt", schemaPath: "#/properties/metadata/properties/createdAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid1 = _errs11 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data0.updatedAt !== undefined) {
                                                    const _errs13 = errors;
                                                    if (typeof data0.updatedAt !== "string") {
                                                        validate25.errors = [{ instancePath: instancePath + "/metadata/updatedAt", schemaPath: "#/properties/metadata/properties/updatedAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs13 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data0.protocol !== undefined) {
                                                        const _errs15 = errors;
                                                        if (typeof data0.protocol !== "string") {
                                                            validate25.errors = [{ instancePath: instancePath + "/metadata/protocol", schemaPath: "#/properties/metadata/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs15 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            validate25.errors = [{ instancePath: instancePath + "/metadata", schemaPath: "#/properties/metadata/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data7 = data.data;
                        const _errs17 = errors;
                        if (!(data7 && typeof data7 == "object" && !Array.isArray(data7))) {
                            validate25.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/properties/data/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                        var valid0 = _errs17 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.signature !== undefined) {
                            const _errs19 = errors;
                            if (typeof data.signature !== "string") {
                                validate25.errors = [{ instancePath: instancePath + "/signature", schemaPath: "#/properties/signature/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs19 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate25.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate25.errors = vErrors; return errors === 0; }
export const rfqPrivate = validate26;
const schema39 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/rfq-private.schema.json", "type": "object", "properties": { "additionalProperties": false, "salt": { "type": "string", "description": "Randomly generated cryptographic salt used to hash privateData fields" }, "claims": { "type": "array", "items": { "type": "string" }, "description": "Presentation Submission that fulfills the requirements included in the respective Offering" }, "payin": { "type": "object", "additionalProperties": false, "properties": { "paymentDetails": { "type": "object", "description": "An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } } }, "payout": { "additionalProperties": false, "type": "object", "properties": { "paymentDetails": { "type": "object", "description": "An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } } } }, "required": ["salt"] };
function validate26(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/rfq-private.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.salt === undefined) && (missing0 = "salt")) {
            validate26.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate26.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.salt !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.salt !== "string") {
                        validate26.errors = [{ instancePath: instancePath + "/salt", schemaPath: "#/properties/salt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.claims !== undefined) {
                        let data2 = data.claims;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (Array.isArray(data2)) {
                                var valid1 = true;
                                const len0 = data2.length;
                                for (let i0 = 0; i0 < len0; i0++) {
                                    const _errs5 = errors;
                                    if (typeof data2[i0] !== "string") {
                                        validate26.errors = [{ instancePath: instancePath + "/claims/" + i0, schemaPath: "#/properties/claims/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid1 = _errs5 === errors;
                                    if (!valid1) {
                                        break;
                                    }
                                }
                            }
                            else {
                                validate26.errors = [{ instancePath: instancePath + "/claims", schemaPath: "#/properties/claims/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payin !== undefined) {
                            let data4 = data.payin;
                            const _errs7 = errors;
                            if (errors === _errs7) {
                                if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                    const _errs9 = errors;
                                    for (const key0 in data4) {
                                        if (!(key0 === "paymentDetails")) {
                                            validate26.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs9 === errors) {
                                        if (data4.paymentDetails !== undefined) {
                                            let data5 = data4.paymentDetails;
                                            if (!(data5 && typeof data5 == "object" && !Array.isArray(data5))) {
                                                validate26.errors = [{ instancePath: instancePath + "/payin/paymentDetails", schemaPath: "#/properties/payin/properties/paymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                return false;
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate26.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs7 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.payout !== undefined) {
                                let data6 = data.payout;
                                const _errs12 = errors;
                                if (errors === _errs12) {
                                    if (data6 && typeof data6 == "object" && !Array.isArray(data6)) {
                                        const _errs14 = errors;
                                        for (const key1 in data6) {
                                            if (!(key1 === "paymentDetails")) {
                                                validate26.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs14 === errors) {
                                            if (data6.paymentDetails !== undefined) {
                                                let data7 = data6.paymentDetails;
                                                if (!(data7 && typeof data7 == "object" && !Array.isArray(data7))) {
                                                    validate26.errors = [{ instancePath: instancePath + "/payout/paymentDetails", schemaPath: "#/properties/payout/properties/paymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                    return false;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate26.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs12 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate26.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate26.errors = vErrors; return errors === 0; }
export const rfq = validate27;
const schema40 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/rfq.schema.json", "type": "object", "properties": { "additionalProperties": false, "offeringId": { "type": "string", "description": "Offering which Alice would like to get a quote for" }, "claimsHash": { "type": "string", "description": "Digests of Presentation Submissions that fulfills the requirements included in the respective Offering" }, "payin": { "type": "object", "properties": { "amount": { "$ref": "definitions.json#/definitions/decimalString" }, "kind": { "type": "string", "description": "Type of payment method e.g. BTC_ADDRESS, DEBIT_CARD, MOMO_MPESA" }, "paymentDetailsHash": { "type": "string", "description": "Digest of an object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } }, "required": ["amount", "kind"] }, "payout": { "type": "object", "properties": { "kind": { "type": "string", "description": "Selected payout method from the respective offering" }, "paymentDetailsHash": { "type": "string", "description": "Digest of an object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } }, "required": ["kind"] } }, "required": ["offeringId", "payin", "payout"] };
function validate27(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/rfq.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.offeringId === undefined) && (missing0 = "offeringId")) || ((data.payin === undefined) && (missing0 = "payin"))) || ((data.payout === undefined) && (missing0 = "payout"))) {
            validate27.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate27.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.offeringId !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.offeringId !== "string") {
                        validate27.errors = [{ instancePath: instancePath + "/offeringId", schemaPath: "#/properties/offeringId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.claimsHash !== undefined) {
                        const _errs3 = errors;
                        if (typeof data.claimsHash !== "string") {
                            validate27.errors = [{ instancePath: instancePath + "/claimsHash", schemaPath: "#/properties/claimsHash/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payin !== undefined) {
                            let data3 = data.payin;
                            const _errs5 = errors;
                            if (errors === _errs5) {
                                if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                    let missing1;
                                    if (((data3.amount === undefined) && (missing1 = "amount")) || ((data3.kind === undefined) && (missing1 = "kind"))) {
                                        validate27.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                        return false;
                                    }
                                    else {
                                        if (data3.amount !== undefined) {
                                            let data4 = data3.amount;
                                            const _errs7 = errors;
                                            const _errs8 = errors;
                                            if (errors === _errs8) {
                                                if (typeof data4 === "string") {
                                                    if (!pattern0.test(data4)) {
                                                        validate27.errors = [{ instancePath: instancePath + "/payin/amount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+(?:[.][0-9]+)?)$" }, message: "must match pattern \"" + "^([0-9]+(?:[.][0-9]+)?)$" + "\"" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate27.errors = [{ instancePath: instancePath + "/payin/amount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                            }
                                            var valid1 = _errs7 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data3.kind !== undefined) {
                                                const _errs10 = errors;
                                                if (typeof data3.kind !== "string") {
                                                    validate27.errors = [{ instancePath: instancePath + "/payin/kind", schemaPath: "#/properties/payin/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid1 = _errs10 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data3.paymentDetailsHash !== undefined) {
                                                    const _errs12 = errors;
                                                    if (typeof data3.paymentDetailsHash !== "string") {
                                                        validate27.errors = [{ instancePath: instancePath + "/payin/paymentDetailsHash", schemaPath: "#/properties/payin/properties/paymentDetailsHash/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs12 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate27.errors = [{ instancePath: instancePath + "/payin", schemaPath: "#/properties/payin/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.payout !== undefined) {
                                let data7 = data.payout;
                                const _errs14 = errors;
                                if (errors === _errs14) {
                                    if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                        let missing2;
                                        if ((data7.kind === undefined) && (missing2 = "kind")) {
                                            validate27.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                            return false;
                                        }
                                        else {
                                            if (data7.kind !== undefined) {
                                                const _errs16 = errors;
                                                if (typeof data7.kind !== "string") {
                                                    validate27.errors = [{ instancePath: instancePath + "/payout/kind", schemaPath: "#/properties/payout/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid3 = _errs16 === errors;
                                            }
                                            else {
                                                var valid3 = true;
                                            }
                                            if (valid3) {
                                                if (data7.paymentDetailsHash !== undefined) {
                                                    const _errs18 = errors;
                                                    if (typeof data7.paymentDetailsHash !== "string") {
                                                        validate27.errors = [{ instancePath: instancePath + "/payout/paymentDetailsHash", schemaPath: "#/properties/payout/properties/paymentDetailsHash/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid3 = _errs18 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate27.errors = [{ instancePath: instancePath + "/payout", schemaPath: "#/properties/payout/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs14 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate27.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate27.errors = vErrors; return errors === 0; }
