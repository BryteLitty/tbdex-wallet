import type { MessageModel, ResourceModel } from './types.js';
import type { Resource } from './resource.js';
import type { Message } from './message.js';
/**
 * Utility functions for parsing Messages and Resources
 * @beta
 */
export declare class Parser {
    private constructor();
    /**
     * @beta
     *
     * Parses the json message into a message instance.
     * Performs format validation and an integrity check on the signature
     * @param message - the message to parse. can either be an object or a string
     * @returns {@link Message}
     */
    static parseMessage(rawMessage: MessageModel | string): Promise<Message>;
    /**
     * @beta
     *
     * Parses a json message into an instance of message kind's class.
     * Performs format validation and an integrity check of the signature
     * @param jsonResource - the resource to parse
     * @returns {@link Resource}
     */
    static parseResource(rawResource: ResourceModel | string): Promise<Resource>;
    /**
     * Util for JSON.parse-ing a stringified Tbdex Message
     * @param rawMessage - Either a stringified Tbdex Message or an object Tbdex Message
     * @returns A Tbdex Message as an object
     * @throws If the stringified message could not be JSON.parse'd
     */
    static rawToMessageModel(rawMessage: MessageModel | string): MessageModel;
    /**
     * Util for JSON.parse-ing a stringified Tbdex resource
     * @param rawResource - Either a stringified Tbdex resource or an object Tbdex resource
     * @returns A Tbdex message as an object
     * @throws If the stringified resource could not be JSON.parse'd
     */
    static rawToResourceModel(rawResource: ResourceModel | string): ResourceModel;
}
//# sourceMappingURL=parser.d.ts.map