import type { MessageKind, MessageModel, QuoteData, QuoteMetadata } from '../types.js';
import { Message } from '../message.js';
/**
 * Options passed to {@link Quote.create}
 * @beta
 */
export type CreateQuoteOptions = {
    data: QuoteData;
    metadata: Omit<QuoteMetadata, 'id' | 'kind' | 'createdAt' | 'protocol'> & {
        protocol?: QuoteMetadata['protocol'];
    };
};
/**
 * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until
 * the quote expires
 * @beta
 */
export declare class Quote extends Message {
    /** a set of valid Message kinds that can come after a quote */
    readonly validNext: Set<MessageKind>;
    /** The message kind (quote) */
    readonly kind = "quote";
    /** Metadata such as sender, recipient, date created, and ID */
    readonly metadata: QuoteMetadata;
    /**
     * Quote's data containing locked-in price and payment methods that the PFI is willing to honor
     * until the quote expires
     */
    readonly data: QuoteData;
    constructor(metadata: QuoteMetadata, data: QuoteData, signature?: string);
    /**
     * Parses a json message into a Quote
     * @param rawMessage - the quote to parse
     * @throws if the quote could not be parsed or is not a valid Quote
     * @returns The parsed Quote
     */
    static parse(rawMessage: MessageModel | string): Promise<Quote>;
    /**
     * Creates a quote message with the given options
     * @param opts - options to create a quote
     */
    static create(opts: CreateQuoteOptions): Quote;
}
//# sourceMappingURL=quote.d.ts.map