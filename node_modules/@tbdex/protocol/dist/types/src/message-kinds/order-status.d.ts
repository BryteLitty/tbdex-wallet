import type { MessageKind, MessageModel, OrderStatusData, OrderStatusMetadata } from '../types.js';
import { Message } from '../message.js';
/**
 * Options passed to {@link OrderStatus.create}
 * @beta
 */
export type CreateOrderStatusOptions = {
    data: OrderStatusData;
    metadata: Omit<OrderStatusMetadata, 'id' | 'kind' | 'createdAt' | 'protocol'> & {
        protocol?: OrderStatusMetadata['protocol'];
    };
};
/**
 * Sent by the PFI to Alice to convey the current status of an order. There can be many OrderStatus
 * messages in a given Exchange
 * @beta
 */
export declare class OrderStatus extends Message {
    /** a set of valid Message kinds that can come after an order status */
    readonly validNext: Set<MessageKind>;
    /** The message kind (orderstatus) */
    readonly kind = "orderstatus";
    /** Metadata such as sender, recipient, date created, and ID */
    readonly metadata: OrderStatusMetadata;
    /** OrderStatus's data containing a description of the status */
    readonly data: OrderStatusData;
    constructor(metadata: OrderStatusMetadata, data: OrderStatusData, signature?: string);
    /**
     * Parses a json message into an OrderStatus
     * @param rawMessage - the orderstatus to parse
     * @throws if the orderstatus could not be parsed or is not a valid OrderStatus
     * @returns The parsed OrderStatus
     */
    static parse(rawMessage: MessageModel | string): Promise<OrderStatus>;
    /**
     * Creates an order status with the given options
     * @param opts - options to create an order status
     */
    static create(opts: CreateOrderStatusOptions): OrderStatus;
    /** Current status of Order that's being executed (e.g. PROCESSING, COMPLETED, FAILED etc.) */
    get orderStatus(): string;
}
//# sourceMappingURL=order-status.d.ts.map