import type { MessageKind, MessageModel, OrderData, OrderMetadata } from '../types.js';
import { Message } from '../message.js';
/**
 * Options passed to {@link Order.create}
 * @beta
 */
export type CreateOrderOptions = {
    metadata: Omit<OrderMetadata, 'id' | 'kind' | 'createdAt' | 'protocol'> & {
        protocol?: OrderMetadata['protocol'];
    };
};
/**
 * Message sent by Alice to the PFI to accept a Quote.
 * @beta
 */
export declare class Order extends Message {
    /** a set of valid Message kinds that can come after an order */
    readonly validNext: Set<MessageKind>;
    /** The message kind (order) */
    readonly kind = "order";
    /** Metadata such as sender, recipient, date created, and ID */
    readonly metadata: OrderMetadata;
    /** Order's data */
    readonly data: OrderData;
    constructor(metadata: OrderMetadata, data: OrderData, signature?: string);
    /**
     * Parses a json message into an Order
     * @param rawMessage - the order to parse
     * @throws if the order could not be parsed or is not a valid Order
     * @returns The parsed Order
     */
    static parse(rawMessage: MessageModel | string): Promise<Order>;
    /**
     * Creates an order with the given options
     * @param opts - options to create an order
     */
    static create(opts: CreateOrderOptions): Order;
}
//# sourceMappingURL=order.d.ts.map