import type { CloseData, CloseMetadata, MessageKind, MessageModel } from '../types.js';
import { Message } from '../message.js';
/**
 * Options passed to {@link OrderStatus.create}
 * @beta
 */
export type CreateCloseOptions = {
    data: CloseData;
    metadata: Omit<CloseMetadata, 'id' | 'kind' | 'createdAt' | 'protocol'> & {
        protocol?: CloseMetadata['protocol'];
    };
};
/**
 * A Close can be sent by Alice or the PFI as a reply to an RFQ or a Quote
 * @beta
 */
export declare class Close extends Message {
    /** A set of valid Message kinds that can come after a close */
    readonly validNext: Set<MessageKind>;
    /** The message kind (close) */
    readonly kind = "close";
    /** Metadata such as sender, recipient, date created, and ID */
    readonly metadata: CloseMetadata;
    /** Close's data containing a reason why the exchange was closed */
    readonly data: CloseData;
    constructor(metadata: CloseMetadata, data: CloseData, signature?: string);
    /**
     * Parses a json message into an Close
     * @param rawMessage - the close to parse
     * @throws if the close could not be parsed or is not a valid Close
     * @returns The parsed Close
     */
    static parse(rawMessage: MessageModel | string): Promise<Close>;
    /**
     * Creates a close message with the given options
     * @param opts - options to create a close message
     */
    static create(opts: CreateCloseOptions): Close;
    /** an explanation of why the exchange is being closed */
    get reason(): string | undefined;
}
//# sourceMappingURL=close.d.ts.map