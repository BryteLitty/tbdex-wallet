import { Close, Order, OrderStatus, Quote, Rfq } from './message-kinds/index.js';
import { Message } from './message.js';
import { MessageKind } from './types.js';
/**
 * State-machine for validating the order and metadata of Tbdex messages in an exchange.
 *
 * This state-machine does not validate the {@link Message.signature} or {@link Message.data}
 * of messages in the exchange.
 *
 * Either add messages in order one at a time using {@link Exchange.addNextMessage},
 * or add a list of unsorted messages in an exchange using {@link Exchange.addMessages}
 *
 * @beta
 */
export declare class Exchange {
    /** Message sent by Alice to PFI to request a quote */
    rfq: Rfq | undefined;
    /** Message sent by the PFI in response to an RFQ */
    quote: Quote | undefined;
    /** Message sent by Alice to the PFI to accept a quote*/
    order: Order | undefined;
    /** Message sent by the PFI to Alice to convet the current status of the order */
    orderstatus: OrderStatus[];
    /** Message sent by either the PFI or Alice to terminate an exchange */
    close: Close | undefined;
    constructor();
    /**
     * Add a list of unsorted messages to an exchange.
     * @param messages - An unsorted array of Tbdex messages in a given exchange
     */
    addMessages(messages: Message[]): void;
    /**
     * Add the next message in the exchange
     * @param message - The next allowed message in the exchange
     * @throws if message's protocol version does not match protocol version of other messages in the exchange
     * @throws if message is not a valid next message. See {@link Exchange.isValidNext}
     * @throws if message's exchangeId does not match id of the exchange
     */
    addNextMessage(message: Message): void;
    /**
     * Determines if the message kind is a valid next message in the current exchange
     * @param messageKind - the kind of TBDex message
     * @returns true if the next message in the exchange may have kind messageKind, false otherwise
     */
    isValidNext(messageKind: MessageKind): boolean;
    /**
     * Latest message in an exchange if there are any messages currently
     */
    get latestMessage(): Message | undefined;
    /**
     * The exchangeId of all messages in the Exchange
     */
    get exchangeId(): string | undefined;
    /**
     * The protocol version of all messages in the Exchange
     */
    get protocol(): string | undefined;
    /**
     * A sorted list of messages currently in the exchange.
     */
    get messages(): Message[];
}
//# sourceMappingURL=exchange.d.ts.map