import type { OfferingData, OfferingMetadata, ResourceModel } from '../types.js';
import { Resource } from '../resource.js';
/**
 * Options passed to {@link Offering.create}
 * @beta
 */
export type CreateOfferingOptions = {
    data: OfferingData;
    metadata: Omit<OfferingMetadata, 'id' | 'kind' | 'createdAt' | 'updatedAt' | 'protocol'> & {
        protocol?: OfferingMetadata['protocol'];
    };
};
/**
 * An Offering is used by the PFI to describe a currency pair they have to offer
 * including the requirements, conditions, and constraints in
 * order to fulfill that offer.
 * @beta
 */
export declare class Offering extends Resource {
    /** The resource kind (offering) */
    readonly kind = "offering";
    /** Metadata such as sender, date created, date updated, and ID */
    readonly metadata: OfferingMetadata;
    /** Offering's data such as payment methods, required claims, and currencies */
    readonly data: OfferingData;
    constructor(metadata: OfferingMetadata, data: OfferingData, signature?: string);
    /**
     * Parses a json resource into an Offering
     * @param rawMessage - the Offering to parse
     * @throws if the offering could not be parsed or is not a valid Offering
     * @returns The parsed Offering
     */
    static parse(rawMessage: ResourceModel | string): Promise<Offering>;
    /**
     * Creates an Offering with the given options
     * @param opts - options to create an offering
     */
    static create(opts: CreateOfferingOptions): Offering;
}
//# sourceMappingURL=offering.d.ts.map