import type { BearerDid } from '@web5/dids';
import { Balance, Close, Order, Rfq } from '@tbdex/protocol';
import { Offering, Message } from '@tbdex/protocol';
/**
 * Parameters for generating a request token
 * @beta
 */
export type GenerateRequestTokenParams = {
    requesterDid: BearerDid;
    pfiDid: string;
};
/**
 * Parameters for verifying a request token
 * @beta
 */
export type VerifyRequestTokenParams = {
    requestToken: string;
    pfiDid: string;
};
/**
 * Required jwt claims expected in a request token
 * @beta
 */
export declare const requestTokenRequiredClaims: string[];
/**
 * HTTP client for interacting with TBDex PFIs
 * @beta
 */
export declare class TbdexHttpClient {
    /**
     * Sends an RFQ and options to the PFI to initiate an exchange
     * @param rfq - The RFQ message that will be sent to the PFI
     * @param opts.replyTo A callback URL where the PFI will send subsequent messages
     * @throws if message verification fails
     * @throws if recipient DID resolution fails
     * @throws if recipient DID does not have a PFI service entry
     */
    static createExchange(rfq: Rfq, opts?: {
        replyTo?: string;
    }): Promise<void>;
    /**
     * Sends the Order message to the PFI
     * @param - order The Order message that will be sent to the PFI
     * @throws if message verification fails
     * @throws if recipient DID resolution fails
     * @throws if recipient DID does not have a PFI service entry
     */
    static submitOrder(order: Order): Promise<void>;
    /**
     * Sends the Close message to the PFI
     * @param - close The Close message that will be sent to the PFI
     * @throws if message verification fails
     * @throws if recipient DID resolution fails
     * @throws if recipient DID does not have a PFI service entry
     */
    static submitClose(close: Close): Promise<void>;
    private static sendMessage;
    /**
     * gets offerings from the pfi provided
     * @param opts - options
     * @beta
     */
    static getOfferings(opts: GetOfferingsOptions): Promise<Offering[]>;
    /**
     * gets balances from the pfi provided
     * @param opts - options
     * @beta
     */
    static getBalances(opts: GetBalancesOptions): Promise<Balance[]>;
    /**
     * get a specific exchange from the pfi provided
     * @param opts - options
     */
    static getExchange(opts: GetExchangeOptions): Promise<Message[]>;
    /**
     * returns all exchanges created by requester
     * @param opts - options
     */
    static getExchanges(opts: GetExchangesOptions): Promise<Message[][]>;
    /**
     * returns the PFI service entry from the DID Doc of the DID provided
     * @param did - the pfi's DID
     */
    static getPfiServiceEndpoint(did: string): Promise<import("@web5/dids").DidServiceEndpoint | import("@web5/dids").DidServiceEndpoint[]>;
    /**
    * Creates and signs a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))
    * that's included as the value of Authorization header for requests sent to a PFI API's
    * endpoints that require authentication
    *
    * JWT payload with the following claims:
    *  * `aud`
    *  * `iss`
    *  * `exp`
    *  * `iat`
    *  * `jti` The JWT is then signed and returned.
    *
    * @returns the request token (JWT)
    * @throws {@link RequestTokenSigningError} If an error occurs during the token generation.
    */
    static generateRequestToken(params: GenerateRequestTokenParams): Promise<string>;
    /**
     * Validates and verifies the integrity of a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))
     * generated by {@link TbdexHttpClient.generateRequestToken}. Specifically:
     *   * verifies integrity of the JWT
     *   * ensures all required claims are present and valid.
     *   * ensures the token has not expired
     *   * ensures token audience matches the expected PFI DID.
     *
     * @returns the requester's DID as a string if the token is valid.
     * @throws {@link RequestTokenVerificationError} If the token is invalid, expired, or has been tampered with
     * @throws {@link RequestTokenMissingClaimsError} If the token does not contain all required claims
     * @throws {@link RequestTokenAudienceMismatchError} If the token's `aud` property does not match the PFI's DID
    */
    static verifyRequestToken(params: VerifyRequestTokenParams): Promise<string>;
}
/**
 * options passed to {@link TbdexHttpClient.getOfferings} method
 * @beta
 */
export type GetOfferingsOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
};
/**
 * options passed to {@link TbdexHttpClient.getBalances} method
 * @beta
 */
export type GetBalancesOptions = {
    /** the DID of the PFI from whom you want to get balances */
    pfiDid: string;
    did: BearerDid;
};
/**
 * options passed to {@link TbdexHttpClient.getExchange} method
 * @beta
 */
export type GetExchangeOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
    /** the exchange you want to fetch */
    exchangeId: string;
    /** the message author's DID */
    did: BearerDid;
};
/**
 * options passed to {@link TbdexHttpClient.getExchanges} method
 * @beta
 */
export type GetExchangesOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
    /** the message author's DID */
    did: BearerDid;
    /** the filter to select the desired exchanges */
    filter?: {
        /** ID or IDs of exchanges to get */
        id: string | string[];
    };
};
//# sourceMappingURL=client.d.ts.map